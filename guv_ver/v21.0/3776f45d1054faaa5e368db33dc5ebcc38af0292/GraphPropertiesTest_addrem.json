{
    "addition": {
        "34": "    Graph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "40": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "41": "    directedGraph.addNode(1);\n",
        "43": "    directedGraph.addNode(2);\n",
        "49": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "50": "    directedGraph.addEdge(1, 2);\n",
        "56": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "57": "    directedGraph.addEdge(1, 1);\n",
        "63": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "64": "    directedGraph.addEdge(1, 2);\n",
        "65": "    directedGraph.addEdge(1, 3);\n",
        "71": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "72": "    directedGraph.addEdge(1, 2);\n",
        "73": "    directedGraph.addEdge(2, 1);\n",
        "79": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "80": "    directedGraph.addEdge(1, 2);\n",
        "81": "    directedGraph.addEdge(2, 3);\n",
        "82": "    directedGraph.addEdge(1, 3);\n",
        "88": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "89": "    directedGraph.addEdge(1, 2);\n",
        "90": "    directedGraph.addEdge(2, 3);\n",
        "91": "    directedGraph.addEdge(3, 1);\n",
        "97": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "98": "    directedGraph.addEdge(1, 2);\n",
        "99": "    directedGraph.addEdge(2, 1);\n",
        "100": "    directedGraph.addNode(3);\n",
        "106": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "107": "    directedGraph.addEdge(1, 2);\n",
        "108": "    directedGraph.addEdge(2, 1);\n",
        "109": "    directedGraph.addEdge(2, 3);\n",
        "110": "    directedGraph.addEdge(3, 1);\n"
    },
    "removed": {
        "31": "  private static final Integer N1 = 1;\n",
        "32": "  private static final Integer N2 = 2;\n",
        "33": "  private static final Integer N3 = 3;\n",
        "34": "  private static final String E11 = \"1-1\";\n",
        "35": "  private static final String E12 = \"1-2\";\n",
        "36": "  private static final String E12_A = \"1-2a\";\n",
        "37": "  private static final String E13 = \"1-3\";\n",
        "38": "  private static final String E21 = \"2-1\";\n",
        "39": "  private static final String E23 = \"2-3\";\n",
        "40": "  private static final String E31 = \"3-1\";\n",
        "44": "    Network<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "50": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "51": "    directedGraph.addNode(N1);\n",
        "53": "    directedGraph.addNode(N2);\n",
        "59": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "60": "    directedGraph.addEdge(E12, N1, N2);\n",
        "66": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "67": "    directedGraph.addEdge(E11, N1, N1);\n",
        "71": "  @Test\n",
        "72": "  public void isCyclic_twoParallelEdges() {\n",
        "73": "    MutableNetwork<Integer, String> directedGraph =\n",
        "74": "        NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "75": "    directedGraph.addEdge(E12, N1, N2);\n",
        "76": "    directedGraph.addEdge(E12_A, N1, N2);\n",
        "77": "    assertThat(isCyclic(directedGraph)).isFalse();\n",
        "78": "  }\n",
        "79": "\n",
        "82": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "83": "    directedGraph.addEdge(E12, N1, N2);\n",
        "84": "    directedGraph.addEdge(E13, N1, N3);\n",
        "90": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "91": "    directedGraph.addEdge(E12, N1, N2);\n",
        "92": "    directedGraph.addEdge(E21, N2, N1);\n",
        "98": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "99": "    directedGraph.addEdge(E12, N1, N2);\n",
        "100": "    directedGraph.addEdge(E23, N2, N3);\n",
        "101": "    directedGraph.addEdge(E13, N1, N3);\n",
        "107": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "108": "    directedGraph.addEdge(E12, N1, N2);\n",
        "109": "    directedGraph.addEdge(E23, N2, N3);\n",
        "110": "    directedGraph.addEdge(E31, N3, N1);\n",
        "116": "    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();\n",
        "117": "    directedGraph.addEdge(E12, N1, N2);\n",
        "118": "    directedGraph.addEdge(E21, N2, N1);\n",
        "119": "    directedGraph.addNode(N3);\n",
        "120": "    assertThat(isCyclic(directedGraph)).isTrue();\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  @Test\n",
        "124": "  public void isCyclic_cyclicMultigraph() {\n",
        "125": "    MutableNetwork<Integer, String> directedGraph =\n",
        "126": "        NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "127": "    directedGraph.addEdge(E12, N1, N2);\n",
        "128": "    directedGraph.addEdge(E12_A, N1, N2);\n",
        "129": "    directedGraph.addEdge(E23, N2, N3);\n",
        "130": "    directedGraph.addEdge(E31, N3, N1);\n",
        "136": "    MutableNetwork<Integer, String> directedGraph =\n",
        "137": "        NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "138": "    directedGraph.addEdge(E12, N1, N2);\n",
        "139": "    directedGraph.addEdge(E21, N2, N1);\n",
        "140": "    directedGraph.addEdge(E23, N2, N3);\n",
        "141": "    directedGraph.addEdge(E31, N3, N1);\n"
    }
}