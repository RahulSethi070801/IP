{
    "addition": {
        "25": " * Unlike {@link Graph}, {@link Network} represents edges as explicit first-class objects.\n",
        "26": " * Users that are not interested in edges as first-class objects should use the {@link Graph}\n",
        "27": " * interface instead.\n",
        "28": " *\n",
        "29": " * <p>For convenience, we may use the term 'graph' refer to {@link Graph}s and/or {@link Network}s.\n",
        "209": "public interface Network<N, E> {\n",
        "210": "  //\n",
        "211": "  // Network-level accessors\n",
        "212": "  //\n",
        "213": "  \n",
        "214": "  /**\n",
        "215": "   * Returns all nodes in this graph, in the order specified by {@link #nodeOrder()}.\n",
        "216": "   */\n",
        "217": "  Set<N> nodes();\n",
        "218": "\n",
        "224": "  /**\n",
        "225": "   * Returns the order of iteration for the elements of {@link #nodes()}.\n",
        "226": "   */\n",
        "227": "  ElementOrder<? super N> nodeOrder();\n",
        "228": "\n",
        "229": "  /**\n",
        "230": "   * Returns the order of iteration for the elements of {@link #edges()}.\n",
        "231": "   */\n",
        "232": "  ElementOrder<? super E> edgeOrder();\n",
        "233": "  \n",
        "234": "  /**\n",
        "235": "   * Returns a live view of this graph as a {@link Graph}. The resulting {@link Graph} will have an\n",
        "236": "   * edge connecting node A to node B iff this {@link Network} has an edge connecting A to B.\n",
        "237": "   */\n",
        "238": "  Graph<N> asGraph();\n",
        "239": "\n",
        "241": "  // Network properties\n",
        "245": "   * Returns true if the edges in this graph have a direction associated with them.\n",
        "257": "   * Returns true if this graph allows self-loops (edges that connect a node to itself).\n",
        "258": "   * Attempting to add a self-loop to a graph that does not allow them will throw an\n",
        "259": "   * {@link UnsupportedOperationException}.\n",
        "261": "  boolean allowsSelfLoops();\n",
        "264": "   * Returns true if this graph allows parallel edges. Attempting to add a parallel edge to a graph\n",
        "265": "   * that does not allow them will throw an {@link UnsupportedOperationException}.\n",
        "267": "  boolean allowsParallelEdges();\n",
        "273": "  /**\n",
        "274": "   * Returns the nodes which have an incident edge in common with {@code node} in this graph.\n",
        "275": "   *\n",
        "276": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "277": "   */\n",
        "278": "  Set<N> adjacentNodes(Object node);\n",
        "279": "\n",
        "280": "  /**\n",
        "281": "   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing\n",
        "282": "   * {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.\n",
        "283": "   *\n",
        "284": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "285": "   */\n",
        "286": "  Set<N> predecessors(Object node);\n",
        "287": "\n",
        "288": "  /**\n",
        "289": "   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing\n",
        "290": "   * {@code node}'s outgoing edges in the direction (if any) of the edge.\n",
        "291": "   *\n",
        "292": "   * <p>This is <i>not</i> the same as \"all nodes reachable from {@code node} by following outgoing\n",
        "293": "   * edges\" (also known as {@code node}'s transitive closure).\n",
        "294": "   *\n",
        "295": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "296": "   */\n",
        "297": "  Set<N> successors(Object node);\n",
        "298": "\n",
        "306": "  /**\n",
        "307": "   * Returns all edges in this graph which can be traversed in the direction (if any) of the edge\n",
        "308": "   * to end at {@code node}.\n",
        "309": "   *\n",
        "310": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "311": "   */\n",
        "312": "  Set<E> inEdges(Object node);\n",
        "313": "\n",
        "314": "  /**\n",
        "315": "   * Returns all edges in this graph which can be traversed in the direction (if any) of the edge\n",
        "316": "   * starting from {@code node}.\n",
        "317": "   *\n",
        "318": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "319": "   */\n",
        "320": "  Set<E> outEdges(Object node);\n",
        "321": "\n",
        "356": "   * Returns the number of edges incident in this graph to {@code node}.  If this node has more than\n",
        "357": "   * {@code Integer.MAX_VALUE} incident edges in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "358": "   *\n",
        "359": "   * <p>Note that self-loops only count once towards a node's degree.\n",
        "362": "   *\n",
        "363": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "368": "   * Returns the number of incoming edges in this graph of {@code node}.  If this node has more than\n",
        "369": "   * {@code Integer.MAX_VALUE} incoming edges in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "372": "   *\n",
        "373": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "378": "   * Returns the number of outgoing edges in this graph of {@code node}.  If this node has more than\n",
        "379": "   * {@code Integer.MAX_VALUE} outgoing edges in this graph, returns {@code Integer.MAX_VALUE}.\n",
        "382": "   *\n",
        "383": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n"
    },
    "removed": {
        "25": " * That is, a subtype of {@link Graph} that represents edges as explicit first-class objects.\n",
        "26": " * Users that are not interested in edges as first-class objects should use a {@link Graph}\n",
        "27": " * instead.\n",
        "207": "public interface Network<N, E> extends Graph<N> {\n",
        "214": "  // Graph properties\n",
        "218": "   * {@inheritDoc}\n",
        "227": "  @Override\n",
        "231": "   * Returns true if this graph allows parallel edges. Attempting to add a parallel edge to a graph\n",
        "232": "   * that does not allow them will throw an {@link UnsupportedOperationException}.\n",
        "234": "  boolean allowsParallelEdges();\n",
        "237": "   * Returns the order of iteration for the elements of {@link #edges()}.\n",
        "239": "  ElementOrder<? super E> edgeOrder();\n",
        "281": "  /**\n",
        "282": "   * Returns all edges in this graph which can be traversed in the direction (if any) of the edge\n",
        "283": "   * to end at {@code node}.\n",
        "284": "   *\n",
        "285": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "286": "   */\n",
        "287": "  Set<E> inEdges(Object node);\n",
        "288": "\n",
        "289": "  /**\n",
        "290": "   * Returns all edges in this graph which can be traversed in the direction (if any) of the edge\n",
        "291": "   * starting from {@code node}.\n",
        "292": "   *\n",
        "293": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "294": "   */\n",
        "295": "  Set<E> outEdges(Object node);\n",
        "296": "\n",
        "302": "   * {@inheritDoc}\n",
        "306": "  @Override\n",
        "310": "   * {@inheritDoc}\n",
        "314": "  @Override\n",
        "318": "   * {@inheritDoc}\n",
        "322": "  @Override\n"
    }
}