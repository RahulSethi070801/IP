{
    "addition": {},
    "removed": {
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "22": "import static com.google.common.graph.GraphConstants.NETWORK_WITH_PARALLEL_EDGE;\n",
        "25": "import com.google.common.base.Function;\n",
        "28": "import com.google.common.collect.Iterators;\n",
        "51": "    if (graph instanceof Network && !allowsParallelEdges(graph)) {\n",
        "52": "      // Use an optimized implementation for networks without parallel edges.\n",
        "53": "      return endpointsSimpleNetwork(castToNetwork(graph));\n",
        "54": "    }\n",
        "55": "\n",
        "93": "  private static <N> Set<Endpoints<N>> endpointsSimpleNetwork(final Network<N, ?> graph) {\n",
        "94": "    checkState(!graph.allowsParallelEdges());\n",
        "95": "    return new AbstractSet<Endpoints<N>>() {\n",
        "96": "      @Override\n",
        "97": "      public Iterator<Endpoints<N>> iterator() {\n",
        "98": "        return Iterators.transform(\n",
        "99": "            graph.edges().iterator(),\n",
        "100": "            new Function<Object, Endpoints<N>>() {\n",
        "101": "              @Override\n",
        "102": "              public Endpoints<N> apply(Object edge) {\n",
        "103": "                return graph.incidentNodes(edge);\n",
        "104": "              }\n",
        "105": "            });\n",
        "106": "      }\n",
        "107": "\n",
        "108": "      @Override\n",
        "109": "      public int size() {\n",
        "110": "        return graph.edges().size();\n",
        "111": "      }\n",
        "112": "\n",
        "113": "      @Override\n",
        "114": "      public boolean contains(Object obj) {\n",
        "115": "        if (!(obj instanceof Endpoints)) {\n",
        "116": "          return false;\n",
        "117": "        }\n",
        "118": "        return containsEndpoints(graph, (Endpoints<?>) obj);\n",
        "119": "      }\n",
        "120": "    };\n",
        "121": "  }\n",
        "122": "\n",
        "181": "    // TODO(user): Consider dropping this restriction. Would this do what users expect?\n",
        "182": "    checkArgument(!allowsParallelEdges(graph), NETWORK_WITH_PARALLEL_EDGE);\n",
        "218": "  private static boolean allowsParallelEdges(Graph<?> graph) {\n",
        "219": "    return (graph instanceof Network) && castToNetwork(graph).allowsParallelEdges();\n",
        "220": "  }\n",
        "221": "\n",
        "222": "  @SuppressWarnings(\"unchecked\")\n",
        "223": "  private static <N> Network<N, ?> castToNetwork(Graph<N> graph) {\n",
        "224": "    return (Network<N, ?>) graph;\n",
        "225": "  }\n",
        "226": "\n"
    }
}