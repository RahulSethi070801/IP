{
    "addition": {
        "53": "  MutableNetwork<Integer, String> network;\n",
        "110": "    return network.addNode(n);\n",
        "134": "    network.addNode(n1);\n",
        "135": "    network.addNode(n2);\n",
        "136": "    return network.addEdge(e, n1, n2);\n",
        "141": "    network = createGraph();\n",
        "147": "        network,\n",
        "148": "        Graphs.copyOf(network),\n",
        "149": "        ImmutableNetwork.copyOf(network)).testEquals();\n",
        "150": "\n",
        "151": "    String networkString = network.toString();\n",
        "152": "    assertThat(networkString).contains(\"isDirected: \" + network.isDirected());\n",
        "153": "    assertThat(networkString).contains(\"allowsParallelEdges: \" + network.allowsParallelEdges());\n",
        "154": "    assertThat(networkString).contains(\"allowsSelfLoops: \" + network.allowsSelfLoops());\n",
        "155": "\n",
        "156": "    int nodeStart = networkString.indexOf(\"nodes:\");\n",
        "157": "    int edgeStart = networkString.indexOf(\"edges:\");\n",
        "158": "    String nodeString = networkString.substring(nodeStart, edgeStart);\n",
        "159": "    String edgeString = networkString.substring(edgeStart);\n",
        "160": "\n",
        "161": "    Graph<Integer> asGraph = network.asGraph();\n",
        "162": "    assertThat(network.nodes()).isEqualTo(asGraph.nodes());\n",
        "163": "    assertThat(network.nodeOrder()).isEqualTo(asGraph.nodeOrder());\n",
        "164": "    assertThat(network.isDirected()).isEqualTo(asGraph.isDirected());\n",
        "165": "    assertThat(network.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());\n",
        "166": "\n",
        "167": "    for (String edge : network.edges()) {\n",
        "171": "      Iterator<Integer> endpointsIterator = network.incidentNodes(edge).iterator();\n",
        "174": "      assertThat(network.edgesConnecting(nodeA, nodeB)).contains(edge);\n",
        "175": "      assertThat(network.successors(nodeA)).contains(nodeB);\n",
        "176": "      assertThat(network.adjacentNodes(nodeA)).contains(nodeB);\n",
        "177": "      assertThat(network.outEdges(nodeA)).contains(edge);\n",
        "178": "      assertThat(network.incidentEdges(nodeA)).contains(edge);\n",
        "179": "      assertThat(network.predecessors(nodeB)).contains(nodeA);\n",
        "180": "      assertThat(network.adjacentNodes(nodeB)).contains(nodeA);\n",
        "181": "      assertThat(network.inEdges(nodeB)).contains(edge);\n",
        "182": "      assertThat(network.incidentEdges(nodeB)).contains(edge);\n",
        "183": "\n",
        "184": "      for (Integer incidentNode : network.incidentNodes(edge)) {\n",
        "185": "        assertThat(network.nodes()).contains(incidentNode);\n",
        "186": "        for (String adjacentEdge : network.incidentEdges(incidentNode)) {\n",
        "187": "          assertTrue(edge.equals(adjacentEdge)\n",
        "188": "              || network.adjacentEdges(edge).contains(adjacentEdge));\n",
        "193": "    for (Integer node : network.nodes()) {\n",
        "196": "      assertThat(network.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));\n",
        "197": "      assertThat(network.predecessors(node)).isEqualTo(asGraph.predecessors(node));\n",
        "198": "      assertThat(network.successors(node)).isEqualTo(asGraph.successors(node));\n",
        "199": "\n",
        "200": "      assertThat(network.incidentEdges(node)).hasSize(network.degree(node));\n",
        "201": "      assertThat(network.degree(node)).isAtLeast(network.adjacentNodes(node).size());\n",
        "202": "      assertThat(network.inEdges(node)).hasSize(network.inDegree(node));\n",
        "203": "      assertThat(network.inDegree(node)).isAtLeast(network.predecessors(node).size());\n",
        "204": "      assertThat(network.outEdges(node)).hasSize(network.outDegree(node));\n",
        "205": "      assertThat(network.outDegree(node)).isAtLeast(network.successors(node).size());\n",
        "207": "      for (Integer otherNode : network.nodes()) {\n",
        "208": "        Set<String> edgesConnecting = network.edgesConnecting(node, otherNode);\n",
        "210": "        if (network.isDirected() || !isSelfLoop) {\n",
        "212": "              Sets.intersection(network.outEdges(node), network.inEdges(otherNode)));\n",
        "214": "        if (!network.allowsParallelEdges()) {\n",
        "217": "        if (!network.allowsSelfLoops() && isSelfLoop) {\n",
        "221": "          assertThat(network.incidentNodes(edge)).isEqualTo(Endpoints.of(network, node, otherNode));\n",
        "225": "      for (String incidentEdge : network.incidentEdges(node)) {\n",
        "226": "        assertTrue(network.inEdges(node).contains(incidentEdge)\n",
        "227": "            || network.outEdges(node).contains(incidentEdge));\n",
        "228": "        assertThat(network.edges()).contains(incidentEdge);\n",
        "229": "        assertThat(network.incidentNodes(incidentEdge)).contains(node);\n",
        "232": "      for (String inEdge : network.inEdges(node)) {\n",
        "233": "        assertThat(network.incidentEdges(node)).contains(inEdge);\n",
        "234": "        assertThat(network.outEdges(network.incidentNodes(inEdge).adjacentNode(node)))\n",
        "235": "            .contains(inEdge);\n",
        "238": "      for (String outEdge : network.outEdges(node)) {\n",
        "239": "        assertThat(network.incidentEdges(node)).contains(outEdge);\n",
        "240": "        assertThat(network.inEdges(network.incidentNodes(outEdge).adjacentNode(node)))\n",
        "244": "      for (Integer adjacentNode : network.adjacentNodes(node)) {\n",
        "245": "        assertTrue(network.predecessors(node).contains(adjacentNode)\n",
        "246": "            || network.successors(node).contains(adjacentNode));\n",
        "247": "        assertTrue(!network.edgesConnecting(node, adjacentNode).isEmpty()\n",
        "248": "            || !network.edgesConnecting(adjacentNode, node).isEmpty());\n",
        "251": "      for (Integer predecessor : network.predecessors(node)) {\n",
        "252": "        assertThat(network.successors(predecessor)).contains(node);\n",
        "253": "        assertThat(network.edgesConnecting(predecessor, node)).isNotEmpty();\n",
        "256": "      for (Integer successor : network.successors(node)) {\n",
        "257": "        assertThat(network.predecessors(successor)).contains(node);\n",
        "258": "        assertThat(network.edgesConnecting(node, successor)).isNotEmpty();\n",
        "343": "    assertThat(network.nodes()).containsExactly(N1);\n",
        "348": "    assertThat(network.nodes()).isEmpty();\n",
        "354": "    assertThat(network.edges()).containsExactly(E12);\n",
        "359": "    assertThat(network.edges()).isEmpty();\n",
        "363": "    assertThat(network.edges()).isEmpty();\n",
        "369": "    assertThat(network.incidentEdges(N2)).containsExactly(E12);\n",
        "370": "    assertThat(network.incidentEdges(N1)).containsExactly(E12);\n",
        "376": "    assertThat(network.incidentEdges(N1)).isEmpty();\n",
        "382": "      network.incidentEdges(NODE_NOT_IN_GRAPH);\n",
        "392": "    assertThat(network.incidentNodes(E12)).containsExactly(N1, N2);\n",
        "398": "      network.incidentNodes(EDGE_NOT_IN_GRAPH);\n",
        "408": "    assertThat(network.adjacentNodes(N1)).containsExactly(N2);\n",
        "409": "    assertThat(network.adjacentNodes(N2)).containsExactly(N1);\n",
        "415": "    assertThat(network.adjacentNodes(N1)).isEmpty();\n",
        "421": "      network.adjacentNodes(NODE_NOT_IN_GRAPH);\n",
        "433": "    assertThat(network.adjacentEdges(E12)).containsExactly(E13, E23);\n",
        "439": "    assertThat(network.adjacentEdges(E12)).isEmpty();\n",
        "445": "      network.adjacentEdges(EDGE_NOT_IN_GRAPH);\n",
        "456": "    assertThat(network.edgesConnecting(N1, N2)).isEmpty();\n",
        "464": "      network.edgesConnecting(N1, NODE_NOT_IN_GRAPH);\n",
        "470": "      network.edgesConnecting(NODE_NOT_IN_GRAPH, N2);\n",
        "476": "      network.edgesConnecting(NODE_NOT_IN_GRAPH, NODE_NOT_IN_GRAPH);\n",
        "486": "    assertThat(network.inEdges(N1)).isEmpty();\n",
        "492": "      network.inEdges(NODE_NOT_IN_GRAPH);\n",
        "502": "    assertThat(network.outEdges(N1)).isEmpty();\n",
        "508": "      network.outEdges(NODE_NOT_IN_GRAPH);\n",
        "518": "    assertThat(network.predecessors(N1)).isEmpty();\n",
        "524": "      network.predecessors(NODE_NOT_IN_GRAPH);\n",
        "534": "    assertThat(network.successors(N1)).isEmpty();\n",
        "540": "      network.successors(NODE_NOT_IN_GRAPH);\n",
        "550": "    assertEquals(1, network.degree(N1));\n",
        "551": "    assertEquals(1, network.degree(N2));\n",
        "557": "    assertEquals(0, network.degree(N1));\n",
        "563": "      network.degree(NODE_NOT_IN_GRAPH);\n",
        "573": "    assertEquals(0, network.inDegree(N1));\n",
        "579": "      network.inDegree(NODE_NOT_IN_GRAPH);\n",
        "589": "    assertEquals(0, network.outDegree(N1));\n",
        "595": "      network.outDegree(NODE_NOT_IN_GRAPH);\n",
        "605": "    assertThat(network.nodes()).contains(N1);\n",
        "611": "    ImmutableSet<Integer> nodes = ImmutableSet.copyOf(network.nodes());\n",
        "613": "    assertThat(network.nodes()).containsExactlyElementsIn(nodes);\n",
        "620": "    assertTrue(network.removeNode(N1));\n",
        "621": "    assertThat(network.nodes()).containsExactly(N2, N4);\n",
        "622": "    assertThat(network.edges()).doesNotContain(E12);\n",
        "623": "    assertThat(network.edges()).doesNotContain(E41);\n",
        "629": "    ImmutableSet<Integer> nodes = ImmutableSet.copyOf(network.nodes());\n",
        "630": "    assertFalse(network.removeNode(NODE_NOT_IN_GRAPH));\n",
        "631": "    assertThat(network.nodes()).containsExactlyElementsIn(nodes);\n",
        "637": "    Set<Integer> unused = network.adjacentNodes(N1); // ensure cache (if any) is populated\n",
        "638": "    assertTrue(network.removeNode(N1));\n",
        "640": "      network.adjacentNodes(N1);\n",
        "652": "    assertThat(network.edges()).containsExactly(E12, E13, E14);\n",
        "653": "    assertTrue(network.removeEdge(E13));\n",
        "654": "    assertThat(network.edges()).containsExactly(E12, E14);\n",
        "660": "    ImmutableSet<String> edges = ImmutableSet.copyOf(network.edges());\n",
        "661": "    assertFalse(network.removeEdge(EDGE_NOT_IN_GRAPH));\n",
        "662": "    assertThat(network.edges()).containsExactlyElementsIn(edges);\n",
        "668": "    Endpoints<Integer> unused = network.incidentNodes(E12); // ensure cache (if any) is populated\n",
        "669": "    assertTrue(network.removeEdge(E12));\n",
        "671": "      network.incidentNodes(E12);\n"
    },
    "removed": {
        "53": "  MutableNetwork<Integer, String> graph;\n",
        "110": "    return graph.addNode(n);\n",
        "134": "    graph.addNode(n1);\n",
        "135": "    graph.addNode(n2);\n",
        "136": "    return graph.addEdge(e, n1, n2);\n",
        "141": "    graph = createGraph();\n",
        "147": "        graph,\n",
        "148": "        Graphs.copyOf(graph),\n",
        "149": "        ImmutableNetwork.copyOf(graph)).testEquals();\n",
        "150": "\n",
        "151": "    String graphString = graph.toString();\n",
        "152": "    assertThat(graphString).contains(\"isDirected: \" + graph.isDirected());\n",
        "153": "    assertThat(graphString).contains(\"allowsParallelEdges: \" + graph.allowsParallelEdges());\n",
        "154": "    assertThat(graphString).contains(\"allowsSelfLoops: \" + graph.allowsSelfLoops());\n",
        "155": "\n",
        "156": "    int nodeStart = graphString.indexOf(\"nodes:\");\n",
        "157": "    int edgeStart = graphString.indexOf(\"edges:\");\n",
        "158": "    String nodeString = graphString.substring(nodeStart, edgeStart);\n",
        "159": "    String edgeString = graphString.substring(edgeStart);\n",
        "160": "\n",
        "161": "    for (String edge : graph.edges()) {\n",
        "165": "      Iterator<Integer> endpointsIterator = graph.incidentNodes(edge).iterator();\n",
        "168": "      assertThat(graph.edgesConnecting(nodeA, nodeB)).contains(edge);\n",
        "169": "      assertThat(graph.successors(nodeA)).contains(nodeB);\n",
        "170": "      assertThat(graph.adjacentNodes(nodeA)).contains(nodeB);\n",
        "171": "      assertThat(graph.outEdges(nodeA)).contains(edge);\n",
        "172": "      assertThat(graph.incidentEdges(nodeA)).contains(edge);\n",
        "173": "      assertThat(graph.predecessors(nodeB)).contains(nodeA);\n",
        "174": "      assertThat(graph.adjacentNodes(nodeB)).contains(nodeA);\n",
        "175": "      assertThat(graph.inEdges(nodeB)).contains(edge);\n",
        "176": "      assertThat(graph.incidentEdges(nodeB)).contains(edge);\n",
        "177": "\n",
        "178": "      for (Integer incidentNode : graph.incidentNodes(edge)) {\n",
        "179": "        assertThat(graph.nodes()).contains(incidentNode);\n",
        "180": "        for (String adjacentEdge : graph.incidentEdges(incidentNode)) {\n",
        "181": "          assertTrue(edge.equals(adjacentEdge) || graph.adjacentEdges(edge).contains(adjacentEdge));\n",
        "186": "    for (Integer node : graph.nodes()) {\n",
        "189": "      assertThat(graph.incidentEdges(node)).hasSize(graph.degree(node));\n",
        "190": "      assertThat(graph.degree(node)).isAtLeast(graph.adjacentNodes(node).size());\n",
        "191": "      assertThat(graph.inEdges(node)).hasSize(graph.inDegree(node));\n",
        "192": "      assertThat(graph.inDegree(node)).isAtLeast(graph.predecessors(node).size());\n",
        "193": "      assertThat(graph.outEdges(node)).hasSize(graph.outDegree(node));\n",
        "194": "      assertThat(graph.outDegree(node)).isAtLeast(graph.successors(node).size());\n",
        "196": "      for (Integer otherNode : graph.nodes()) {\n",
        "197": "        Set<String> edgesConnecting = graph.edgesConnecting(node, otherNode);\n",
        "199": "        if (graph.isDirected() || !isSelfLoop) {\n",
        "201": "              Sets.intersection(graph.outEdges(node), graph.inEdges(otherNode)));\n",
        "203": "        if (!graph.allowsParallelEdges()) {\n",
        "206": "        if (!graph.allowsSelfLoops() && isSelfLoop) {\n",
        "210": "          assertThat(graph.incidentNodes(edge)).isEqualTo(Endpoints.of(graph, node, otherNode));\n",
        "214": "      for (String incidentEdge : graph.incidentEdges(node)) {\n",
        "215": "        assertTrue(graph.inEdges(node).contains(incidentEdge)\n",
        "216": "            || graph.outEdges(node).contains(incidentEdge));\n",
        "217": "        assertThat(graph.edges()).contains(incidentEdge);\n",
        "218": "        assertThat(graph.incidentNodes(incidentEdge)).contains(node);\n",
        "221": "      for (String inEdge : graph.inEdges(node)) {\n",
        "222": "        assertThat(graph.incidentEdges(node)).contains(inEdge);\n",
        "223": "        assertThat(graph.outEdges(graph.incidentNodes(inEdge).adjacentNode(node))).contains(inEdge);\n",
        "226": "      for (String outEdge : graph.outEdges(node)) {\n",
        "227": "        assertThat(graph.incidentEdges(node)).contains(outEdge);\n",
        "228": "        assertThat(graph.inEdges(graph.incidentNodes(outEdge).adjacentNode(node)))\n",
        "232": "      for (Integer adjacentNode : graph.adjacentNodes(node)) {\n",
        "233": "        assertTrue(graph.predecessors(node).contains(adjacentNode)\n",
        "234": "            || graph.successors(node).contains(adjacentNode));\n",
        "235": "        assertTrue(!graph.edgesConnecting(node, adjacentNode).isEmpty()\n",
        "236": "            || !graph.edgesConnecting(adjacentNode, node).isEmpty());\n",
        "239": "      for (Integer predecessor : graph.predecessors(node)) {\n",
        "240": "        assertThat(graph.successors(predecessor)).contains(node);\n",
        "241": "        assertThat(graph.edgesConnecting(predecessor, node)).isNotEmpty();\n",
        "244": "      for (Integer successor : graph.successors(node)) {\n",
        "245": "        assertThat(graph.predecessors(successor)).contains(node);\n",
        "246": "        assertThat(graph.edgesConnecting(node, successor)).isNotEmpty();\n",
        "331": "    assertThat(graph.nodes()).containsExactly(N1);\n",
        "336": "    assertThat(graph.nodes()).isEmpty();\n",
        "342": "    assertThat(graph.edges()).containsExactly(E12);\n",
        "347": "    assertThat(graph.edges()).isEmpty();\n",
        "351": "    assertThat(graph.edges()).isEmpty();\n",
        "357": "    assertThat(graph.incidentEdges(N2)).containsExactly(E12);\n",
        "358": "    assertThat(graph.incidentEdges(N1)).containsExactly(E12);\n",
        "364": "    assertThat(graph.incidentEdges(N1)).isEmpty();\n",
        "370": "      graph.incidentEdges(NODE_NOT_IN_GRAPH);\n",
        "380": "    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2);\n",
        "386": "      graph.incidentNodes(EDGE_NOT_IN_GRAPH);\n",
        "396": "    assertThat(graph.adjacentNodes(N1)).containsExactly(N2);\n",
        "397": "    assertThat(graph.adjacentNodes(N2)).containsExactly(N1);\n",
        "403": "    assertThat(graph.adjacentNodes(N1)).isEmpty();\n",
        "409": "      graph.adjacentNodes(NODE_NOT_IN_GRAPH);\n",
        "421": "    assertThat(graph.adjacentEdges(E12)).containsExactly(E13, E23);\n",
        "427": "    assertThat(graph.adjacentEdges(E12)).isEmpty();\n",
        "433": "      graph.adjacentEdges(EDGE_NOT_IN_GRAPH);\n",
        "444": "    assertThat(graph.edgesConnecting(N1, N2)).isEmpty();\n",
        "452": "      graph.edgesConnecting(N1, NODE_NOT_IN_GRAPH);\n",
        "458": "      graph.edgesConnecting(NODE_NOT_IN_GRAPH, N2);\n",
        "464": "      graph.edgesConnecting(NODE_NOT_IN_GRAPH, NODE_NOT_IN_GRAPH);\n",
        "474": "    assertThat(graph.inEdges(N1)).isEmpty();\n",
        "480": "      graph.inEdges(NODE_NOT_IN_GRAPH);\n",
        "490": "    assertThat(graph.outEdges(N1)).isEmpty();\n",
        "496": "      graph.outEdges(NODE_NOT_IN_GRAPH);\n",
        "506": "    assertThat(graph.predecessors(N1)).isEmpty();\n",
        "512": "      graph.predecessors(NODE_NOT_IN_GRAPH);\n",
        "522": "    assertThat(graph.successors(N1)).isEmpty();\n",
        "528": "      graph.successors(NODE_NOT_IN_GRAPH);\n",
        "538": "    assertEquals(1, graph.degree(N1));\n",
        "539": "    assertEquals(1, graph.degree(N2));\n",
        "545": "    assertEquals(0, graph.degree(N1));\n",
        "551": "      graph.degree(NODE_NOT_IN_GRAPH);\n",
        "561": "    assertEquals(0, graph.inDegree(N1));\n",
        "567": "      graph.inDegree(NODE_NOT_IN_GRAPH);\n",
        "577": "    assertEquals(0, graph.outDegree(N1));\n",
        "583": "      graph.outDegree(NODE_NOT_IN_GRAPH);\n",
        "593": "    assertThat(graph.nodes()).contains(N1);\n",
        "599": "    ImmutableSet<Integer> nodes = ImmutableSet.copyOf(graph.nodes());\n",
        "601": "    assertThat(graph.nodes()).containsExactlyElementsIn(nodes);\n",
        "608": "    assertTrue(graph.removeNode(N1));\n",
        "609": "    assertThat(graph.nodes()).containsExactly(N2, N4);\n",
        "610": "    assertThat(graph.edges()).doesNotContain(E12);\n",
        "611": "    assertThat(graph.edges()).doesNotContain(E41);\n",
        "617": "    ImmutableSet<Integer> nodes = ImmutableSet.copyOf(graph.nodes());\n",
        "618": "    assertFalse(graph.removeNode(NODE_NOT_IN_GRAPH));\n",
        "619": "    assertThat(graph.nodes()).containsExactlyElementsIn(nodes);\n",
        "625": "    Set<Integer> unused = graph.adjacentNodes(N1); // ensure cache (if any) is populated\n",
        "626": "    assertTrue(graph.removeNode(N1));\n",
        "628": "      graph.adjacentNodes(N1);\n",
        "640": "    assertThat(graph.edges()).containsExactly(E12, E13, E14);\n",
        "641": "    assertTrue(graph.removeEdge(E13));\n",
        "642": "    assertThat(graph.edges()).containsExactly(E12, E14);\n",
        "648": "    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());\n",
        "649": "    assertFalse(graph.removeEdge(EDGE_NOT_IN_GRAPH));\n",
        "650": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "656": "    Endpoints<Integer> unused = graph.incidentNodes(E12); // ensure cache (if any) is populated\n",
        "657": "    assertTrue(graph.removeEdge(E12));\n",
        "659": "      graph.incidentNodes(E12);\n"
    }
}