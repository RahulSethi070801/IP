{
    "addition": {
        "43": "    for (Integer node : network.nodes()) {\n",
        "44": "      for (String inEdge : network.inEdges(node)) {\n",
        "45": "        Endpoints<Integer> endpoints = network.incidentNodes(inEdge);\n",
        "50": "      for (String outEdge : network.outEdges(node)) {\n",
        "51": "        Endpoints<Integer> endpoints = network.incidentNodes(outEdge);\n",
        "56": "      for (Integer adjacentNode : network.adjacentNodes(node)) {\n",
        "57": "        Set<String> edges = network.edgesConnecting(node, adjacentNode);\n",
        "58": "        Set<String> antiParallelEdges = network.edgesConnecting(adjacentNode, node);\n",
        "68": "    assertThat(network.incidentNodes(E12)).containsExactly(N1, N2).inOrder();\n",
        "74": "    assertThat(network.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "77": "    assertThat(network.edgesConnecting(N2, N1)).isEmpty();\n",
        "83": "    assertThat(network.inEdges(N2)).containsExactly(E12);\n",
        "85": "    assertThat(network.inEdges(N1)).isEmpty();\n",
        "91": "    assertThat(network.outEdges(N1)).containsExactly(E12);\n",
        "93": "    assertThat(network.outEdges(N2)).isEmpty();\n",
        "99": "    assertThat(network.predecessors(N2)).containsExactly(N1);\n",
        "101": "    assertThat(network.predecessors(N1)).isEmpty();\n",
        "107": "    assertThat(network.successors(N1)).containsExactly(N2);\n",
        "109": "    assertThat(network.successors(N2)).isEmpty();\n",
        "115": "    assertEquals(1, network.inDegree(N2));\n",
        "117": "    assertEquals(0, network.inDegree(N1));\n",
        "123": "    assertEquals(1, network.outDegree(N1));\n",
        "125": "    assertEquals(0, network.outDegree(N2));\n",
        "131": "    assertEquals(N1, network.incidentNodes(E12).source());\n",
        "137": "      network.incidentNodes(EDGE_NOT_IN_GRAPH).source();\n",
        "147": "    assertEquals(N2, network.incidentNodes(E12).target());\n",
        "153": "      network.incidentNodes(EDGE_NOT_IN_GRAPH).target();\n",
        "169": "    assertThat(network.edges()).contains(E12);\n",
        "170": "    assertThat(network.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "172": "    assertThat(network.edgesConnecting(N2, N1)).isEmpty();\n",
        "178": "    ImmutableSet<String> edges = ImmutableSet.copyOf(network.edges());\n",
        "180": "    assertThat(network.edges()).containsExactlyElementsIn(edges);\n",
        "216": "    assertTrue(network.removeEdge(E12));\n",
        "217": "    assertThat(network.edges()).doesNotContain(E12);\n",
        "218": "    assertThat(network.edgesConnecting(N1, N2)).isEmpty();\n"
    },
    "removed": {
        "43": "    for (Integer node : graph.nodes()) {\n",
        "44": "      for (String inEdge : graph.inEdges(node)) {\n",
        "45": "        Endpoints<Integer> endpoints = graph.incidentNodes(inEdge);\n",
        "50": "      for (String outEdge : graph.outEdges(node)) {\n",
        "51": "        Endpoints<Integer> endpoints = graph.incidentNodes(outEdge);\n",
        "56": "      for (Integer adjacentNode : graph.adjacentNodes(node)) {\n",
        "57": "        Set<String> edges = graph.edgesConnecting(node, adjacentNode);\n",
        "58": "        Set<String> antiParallelEdges = graph.edgesConnecting(adjacentNode, node);\n",
        "68": "    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2).inOrder();\n",
        "74": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "77": "    assertThat(graph.edgesConnecting(N2, N1)).isEmpty();\n",
        "83": "    assertThat(graph.inEdges(N2)).containsExactly(E12);\n",
        "85": "    assertThat(graph.inEdges(N1)).isEmpty();\n",
        "91": "    assertThat(graph.outEdges(N1)).containsExactly(E12);\n",
        "93": "    assertThat(graph.outEdges(N2)).isEmpty();\n",
        "99": "    assertThat(graph.predecessors(N2)).containsExactly(N1);\n",
        "101": "    assertThat(graph.predecessors(N1)).isEmpty();\n",
        "107": "    assertThat(graph.successors(N1)).containsExactly(N2);\n",
        "109": "    assertThat(graph.successors(N2)).isEmpty();\n",
        "115": "    assertEquals(1, graph.inDegree(N2));\n",
        "117": "    assertEquals(0, graph.inDegree(N1));\n",
        "123": "    assertEquals(1, graph.outDegree(N1));\n",
        "125": "    assertEquals(0, graph.outDegree(N2));\n",
        "131": "    assertEquals(N1, graph.incidentNodes(E12).source());\n",
        "137": "      graph.incidentNodes(EDGE_NOT_IN_GRAPH).source();\n",
        "147": "    assertEquals(N2, graph.incidentNodes(E12).target());\n",
        "153": "      graph.incidentNodes(EDGE_NOT_IN_GRAPH).target();\n",
        "169": "    assertThat(graph.edges()).contains(E12);\n",
        "170": "    assertThat(graph.edgesConnecting(N1, N2)).containsExactly(E12);\n",
        "172": "    assertThat(graph.edgesConnecting(N2, N1)).isEmpty();\n",
        "178": "    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());\n",
        "180": "    assertThat(graph.edges()).containsExactlyElementsIn(edges);\n",
        "216": "    assertTrue(graph.removeEdge(E12));\n",
        "217": "    assertThat(graph.edges()).doesNotContain(E12);\n",
        "218": "    assertThat(graph.edgesConnecting(N1, N2)).isEmpty();\n"
    }
}