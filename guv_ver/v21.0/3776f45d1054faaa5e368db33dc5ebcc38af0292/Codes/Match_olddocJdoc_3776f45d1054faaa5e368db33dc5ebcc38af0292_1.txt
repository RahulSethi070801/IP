
   * Returns {@code true} iff {@code object} is a {@link Graph} that has the same structural
   * relationships as those in this graph.
   *
   * <p>Thus, two graphs A and B are equal if <b>all</b> of the following are true:
   * <ul>
   * <li>A and B have the same {@link #isDirected() directedness}.
   * <li>A and B have the same node set.
   * <li>A and B have the same adjacency relationships, i.e., for each node, the sets of successor
   *     and predecessor nodes are the same in both graphs.
   * </ul>
   *
   * <p>Graph properties are <b>not</b> respected by this method. For example, two graphs may
   * be considered equal even if one allows self-loops and the other doesn't. Additionally, the
   * order in which edges or nodes are added to the graph, and the order in which they are
   * iterated over, are irrelevant.
   *
   * <p>A {@link Graph} cannot be equal to an instance of a subinterface of {@link Graph} that
   * redefines the definition of equality, such as {@link Network}, even if by this definition they
   * would otherwise be equal.
   *
   * <p>A reference implementation of this is provided by {@link AbstractGraph#equals(Object)}.
   