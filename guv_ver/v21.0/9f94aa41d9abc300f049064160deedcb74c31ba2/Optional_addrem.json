{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "29": " * An immutable object that may contain a non-null reference to another object. Each instance of\n",
        "30": " * this type either contains a non-null reference, or contains nothing (in which case we say that\n",
        "31": " * the reference is \"absent\"); it is never said to \"contain {@code\n",
        "34": " * <p>A non-null {@code Optional<T>} reference can be used as a replacement for a nullable {@code T}\n",
        "35": " * reference. It allows you to represent \"a {@code T} that must be present\" and a\n",
        "36": " * \"a {@code T} that might be absent\" as two distinct types in your program, which can aid clarity.\n",
        "41": " * <li>As a method return type, as an alternative to returning {@code null} to indicate that no\n",
        "42": " *     value was available\n",
        "43": " * <li>To distinguish between \"unknown\" (for example, not present in a map) and \"known to have no\n",
        "44": " *     value\" (present in the map, with value {@code Optional.absent()})\n",
        "45": " * <li>To wrap nullable references for storage in a collection that does not support {@code null}\n",
        "46": " *     (though there are\n",
        "47": " *     <a href=\"https://github.com/google/guava/wiki/LivingWithNullHostileCollections\">several other\n",
        "48": " *     approaches to this</a> that should be considered first)\n",
        "52": " * <a href=\"http://en.wikipedia.org/wiki/Null_Object_pattern\">null object</a> for the type in\n",
        "53": " * question.\n",
        "55": " * <p>This class is not intended as a direct analogue of any existing \"option\" or \"maybe\" construct\n",
        "56": " * from other programming environments, though it may bear some similarities.\n",
        "75": " * <p>See the Guava User Guide article on\n",
        "76": " * <a href=\"https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional\">using\n",
        "77": " * {@code Optional}</a>.\n",
        "79": " * @param <T> the type of instance that can be contained. {@code Optional} is naturally covariant on\n",
        "80": " *     this type, so it is safe to cast an {@code Optional<T>} to {@code\n",
        "133": "   * Returns the contained instance, which must be present. If the instance might be absent, use\n",
        "134": "   * {@link #or(Object)} or {@link #orNull} instead.\n",
        "137": "   * throws {@link IllegalStateException}, whereas the Java 8 counterpart throws\n",
        "138": "   * {@link NoSuchElementException}.\n",
        "147": "   * Returns the contained instance if it is present; {@code defaultValue} otherwise. If no default\n",
        "148": "   * value should be required because the instance is known to be present, use {@link #get()}\n",
        "149": "   * instead. For a default value of {@code null}, use {@link #orNull}.\n",
        "176": "   * {@code Optional.orElse}, but will not accept {@code null} as a {@code defaultValue} (\n",
        "177": "   * {@link #orNull} must be used instead). As a result, the value returned by this method is\n",
        "178": "   * guaranteed non-null, which is not the case for the {@code java.util} equivalent.\n",
        "183": "   * Returns this {@code Optional} if it has a value present; {@code secondChoice} otherwise.\n",
        "206": "   * Returns the contained instance if it is present; {@code null} otherwise. If the instance is\n",
        "207": "   * known to be present, use {@link #get()} instead.\n",
        "216": "   * Returns an immutable singleton {@link Set} whose only element is the contained instance if it\n",
        "217": "   * is present; an empty immutable {@link Set} otherwise.\n",
        "248": "   * Returns {@code true} if {@code object} is an {@code Optional} instance, and either the\n",
        "249": "   * contained references are {@linkplain Object#equals equal} to each other or both are absent.\n",
        "250": "   * Note that {@code Optional} instances of differing parameterized types can be equal.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "31": " * An immutable object that may contain a non-null reference to another object. Each\n",
        "32": " * instance of this type either contains a non-null reference, or contains nothing (in\n",
        "33": " * which case we say that the reference is \"absent\"); it is never said to \"contain {@code\n",
        "36": " * <p>A non-null {@code Optional<T>} reference can be used as a replacement for a nullable\n",
        "37": " * {@code T} reference. It allows you to represent \"a {@code T} that must be present\" and\n",
        "38": " * a \"a {@code T} that might be absent\" as two distinct types in your program, which can\n",
        "39": " * aid clarity.\n",
        "44": " * <li>As a method return type, as an alternative to returning {@code null} to indicate\n",
        "45": " *     that no value was available\n",
        "46": " * <li>To distinguish between \"unknown\" (for example, not present in a map) and \"known to\n",
        "47": " *     have no value\" (present in the map, with value {@code Optional.absent()})\n",
        "48": " * <li>To wrap nullable references for storage in a collection that does not support\n",
        "49": " *     {@code null} (though there are\n",
        "50": " *     <a href=\"https://github.com/google/guava/wiki/LivingWithNullHostileCollections\">\n",
        "51": " *     several other approaches to this</a> that should be considered first)\n",
        "55": " * <a href=\"http://en.wikipedia.org/wiki/Null_Object_pattern\">null object</a> for the\n",
        "56": " * type in question.\n",
        "58": " * <p>This class is not intended as a direct analogue of any existing \"option\" or \"maybe\"\n",
        "59": " * construct from other programming environments, though it may bear some similarities.\n",
        "78": " * <p>See the Guava User Guide article on <a\n",
        "79": " * href=\"https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional\">\n",
        "80": " * using {@code Optional}</a>.\n",
        "82": " * @param <T> the type of instance that can be contained. {@code Optional} is naturally\n",
        "83": " *     covariant on this type, so it is safe to cast an {@code Optional<T>} to {@code\n",
        "136": "   * Returns the contained instance, which must be present. If the instance might be\n",
        "137": "   * absent, use {@link #or(Object)} or {@link #orNull} instead.\n",
        "140": "   * throws {@link IllegalStateException}, whereas the Java 8 counterpart throws {@link\n",
        "141": "   * NoSuchElementException}.\n",
        "150": "   * Returns the contained instance if it is present; {@code defaultValue} otherwise. If\n",
        "151": "   * no default value should be required because the instance is known to be present, use\n",
        "152": "   * {@link #get()} instead. For a default value of {@code null}, use {@link #orNull}.\n",
        "179": "   * {@code Optional.orElse}, but will not accept {@code null} as a {@code defaultValue} ({@link\n",
        "180": "   * #orNull} must be used instead). As a result, the value returned by this method is guaranteed\n",
        "181": "   * non-null, which is not the case for the {@code java.util} equivalent.\n",
        "186": "   * Returns this {@code Optional} if it has a value present; {@code secondChoice}\n",
        "187": "   * otherwise.\n",
        "210": "   * Returns the contained instance if it is present; {@code null} otherwise. If the\n",
        "211": "   * instance is known to be present, use {@link #get()} instead.\n",
        "220": "   * Returns an immutable singleton {@link Set} whose only element is the contained instance\n",
        "221": "   * if it is present; an empty immutable {@link Set} otherwise.\n",
        "252": "   * Returns {@code true} if {@code object} is an {@code Optional} instance, and either\n",
        "253": "   * the contained references are {@linkplain Object#equals equal} to each other or both\n",
        "254": "   * are absent. Note that {@code Optional} instances of differing parameterized types can\n",
        "255": "   * be equal.\n"
    }
}