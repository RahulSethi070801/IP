{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "37": " * <p>{@code CacheBuilderSpec} supports parsing configuration off of a string, which makes it\n",
        "38": " * especially useful for command-line configuration of a {@code CacheBuilder}.\n",
        "40": " * <p>The string syntax is a series of comma-separated keys or key-value pairs, each corresponding\n",
        "41": " * to a {@code CacheBuilder} method.\n",
        "56": " * <p>The set of supported keys will grow as {@code CacheBuilder} evolves, but existing keys will\n",
        "57": " * never be removed.\n",
        "59": " * <p>Durations are represented by an integer, followed by one of \"d\", \"h\", \"m\", or \"s\",\n",
        "60": " * representing days, hours, minutes, or seconds respectively. (There is currently no syntax to\n",
        "61": " * request expiration in milliseconds, microseconds, or nanoseconds.)\n",
        "63": " * <p>Whitespace before and after commas and equal signs is ignored. Keys may not be repeated; it is\n",
        "64": " * also illegal to use the following pairs of keys in a single value:\n",
        "70": " * <p>{@code CacheBuilderSpec} does not support configuring {@code CacheBuilder} methods with\n",
        "71": " * non-value parameters. These must be configured in code.\n",
        "122": "  /** Specification; used for toParseableString(). */\n",
        "140": "        checkArgument(\n",
        "141": "            keyAndValue.size() <= 2,\n",
        "142": "            \"key-value pair %s with more than one equals sign\",\n",
        "143": "            keyValuePair);\n",
        "221": "   * Returns a string that can be used to parse an equivalent {@code CacheBuilderSpec}. The order\n",
        "222": "   * and form of this representation is not guaranteed, except that reparsing its output will\n",
        "223": "   * produce a {@code CacheBuilderSpec} equal to this instance.\n",
        "230": "   * Returns a string representation for this CacheBuilderSpec instance. The form of this\n",
        "231": "   * representation is not guaranteed.\n",
        "269": "        && Objects.equal(\n",
        "270": "            durationInNanos(writeExpirationDuration, writeExpirationTimeUnit),\n",
        "272": "        && Objects.equal(\n",
        "273": "            durationInNanos(accessExpirationDuration, accessExpirationTimeUnit),\n",
        "275": "        && Objects.equal(\n",
        "276": "            durationInNanos(refreshDuration, refreshTimeUnit),\n",
        "281": "   * Converts an expiration duration/unit pair into a single Long for hashing and equality. Uses\n",
        "282": "   * nanos to match CacheBuilder implementation.\n",
        "284": "  @Nullable\n",
        "285": "  private static Long durationInNanos(long duration, @Nullable TimeUnit unit) {\n",
        "325": "      checkArgument(\n",
        "326": "          spec.initialCapacity == null,\n",
        "327": "          \"initial capacity was already set to \",\n",
        "328": "          spec.initialCapacity);\n",
        "337": "      checkArgument(spec.maximumSize == null, \"maximum size was already set to \", spec.maximumSize);\n",
        "338": "      checkArgument(\n",
        "339": "          spec.maximumWeight == null, \"maximum weight was already set to \", spec.maximumWeight);\n",
        "348": "      checkArgument(\n",
        "349": "          spec.maximumWeight == null, \"maximum weight was already set to \", spec.maximumWeight);\n",
        "350": "      checkArgument(spec.maximumSize == null, \"maximum size was already set to \", spec.maximumSize);\n",
        "359": "      checkArgument(\n",
        "360": "          spec.concurrencyLevel == null,\n",
        "361": "          \"concurrency level was already set to \",\n",
        "362": "          spec.concurrencyLevel);\n",
        "394": "      checkArgument(\n",
        "395": "          spec.valueStrength == null, \"%s was already set to %s\", key, spec.valueStrength);\n",
        "414": "    protected abstract void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit);\n",
        "437": "                format(\n",
        "438": "                    \"key %s invalid format.  was %s, must end with one of [dDhHmMsS]\", key, value));\n",
        "452": "    @Override\n",
        "453": "    protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n",
        "462": "    @Override\n",
        "463": "    protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n",
        "472": "    @Override\n",
        "473": "    protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "39": " * <p>{@code CacheBuilderSpec} supports parsing configuration off of a string, which\n",
        "40": " * makes it especially useful for command-line configuration of a {@code CacheBuilder}.\n",
        "42": " * <p>The string syntax is a series of comma-separated keys or key-value pairs,\n",
        "43": " * each corresponding to a {@code CacheBuilder} method.\n",
        "58": " * <p>The set of supported keys will grow as {@code CacheBuilder} evolves, but existing keys\n",
        "59": " * will never be removed.\n",
        "61": " * <p>Durations are represented by an integer, followed by one of \"d\", \"h\", \"m\",\n",
        "62": " * or \"s\", representing days, hours, minutes, or seconds respectively.  (There\n",
        "63": " * is currently no syntax to request expiration in milliseconds, microseconds,\n",
        "64": " * or nanoseconds.)\n",
        "66": " * <p>Whitespace before and after commas and equal signs is ignored.  Keys may\n",
        "67": " * not be repeated;  it is also illegal to use the following pairs of keys in\n",
        "68": " * a single value:\n",
        "74": " * <p>{@code CacheBuilderSpec} does not support configuring {@code CacheBuilder} methods\n",
        "75": " * with non-value parameters.  These must be configured in code.\n",
        "126": "  /** Specification;  used for toParseableString(). */\n",
        "144": "        checkArgument(keyAndValue.size() <= 2,\n",
        "145": "            \"key-value pair %s with more than one equals sign\", keyValuePair);\n",
        "223": "   * Returns a string that can be used to parse an equivalent\n",
        "224": "   * {@code CacheBuilderSpec}.  The order and form of this representation is\n",
        "225": "   * not guaranteed, except that reparsing its output will produce\n",
        "226": "   * a {@code CacheBuilderSpec} equal to this instance.\n",
        "233": "   * Returns a string representation for this CacheBuilderSpec instance.\n",
        "234": "   * The form of this representation is not guaranteed.\n",
        "272": "        && Objects.equal(durationInNanos(writeExpirationDuration, writeExpirationTimeUnit),\n",
        "274": "        && Objects.equal(durationInNanos(accessExpirationDuration, accessExpirationTimeUnit),\n",
        "276": "        && Objects.equal(durationInNanos(refreshDuration, refreshTimeUnit),\n",
        "281": "   * Converts an expiration duration/unit pair into a single Long for hashing and equality.\n",
        "282": "   * Uses nanos to match CacheBuilder implementation.\n",
        "284": "  @Nullable private static Long durationInNanos(long duration, @Nullable TimeUnit unit) {\n",
        "324": "      checkArgument(spec.initialCapacity == null,\n",
        "325": "          \"initial capacity was already set to \", spec.initialCapacity);\n",
        "334": "      checkArgument(spec.maximumSize == null,\n",
        "335": "          \"maximum size was already set to \", spec.maximumSize);\n",
        "336": "      checkArgument(spec.maximumWeight == null,\n",
        "337": "          \"maximum weight was already set to \", spec.maximumWeight);\n",
        "346": "      checkArgument(spec.maximumWeight == null,\n",
        "347": "          \"maximum weight was already set to \", spec.maximumWeight);\n",
        "348": "      checkArgument(spec.maximumSize == null,\n",
        "349": "          \"maximum size was already set to \", spec.maximumSize);\n",
        "358": "      checkArgument(spec.concurrencyLevel == null,\n",
        "359": "          \"concurrency level was already set to \", spec.concurrencyLevel);\n",
        "391": "      checkArgument(spec.valueStrength == null,\n",
        "392": "        \"%s was already set to %s\", key, spec.valueStrength);\n",
        "411": "    protected abstract void parseDuration(\n",
        "412": "        CacheBuilderSpec spec,\n",
        "413": "        long duration,\n",
        "414": "        TimeUnit unit);\n",
        "437": "                format(\"key %s invalid format.  was %s, must end with one of [dDhHmMsS]\",\n",
        "438": "                    key, value));\n",
        "452": "    @Override protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n",
        "461": "    @Override protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n",
        "470": "    @Override protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n"
    }
}