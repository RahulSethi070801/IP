{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "37": " *     incremented, and the total loading time, in nanoseconds, is added to {@code totalLoadTime}.\n",
        "39": " *     loadExceptionCount} are incremented, and the total loading time, in nanoseconds, is added to\n",
        "40": " *     {@code totalLoadTime}.\n",
        "41": " * <li>Cache lookups that encounter a missing cache entry that is still loading will wait for\n",
        "42": " *     loading to complete (whether successful or not) and then increment {@code missCount}.\n",
        "46": " * <li>No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of the\n",
        "47": " *     cache.\n",
        "72": "  public CacheStats(\n",
        "73": "      long hitCount,\n",
        "74": "      long missCount,\n",
        "75": "      long loadSuccessCount,\n",
        "76": "      long loadExceptionCount,\n",
        "77": "      long totalLoadTime,\n",
        "78": "      long evictionCount) {\n",
        "111": "   * {@code hitCount / requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that\n",
        "112": "   * {@code hitRate + missRate =~ 1.0}.\n",
        "131": "   * {@code missCount / requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that\n",
        "132": "   * {@code hitRate + missRate =~ 1.0}. Cache misses include all requests which weren't cache hits,\n",
        "133": "   * including requests which resulted in either successful or failed loading attempts, and requests\n",
        "134": "   * which waited for other threads to finish loading. It is thus the case that\n",
        "135": "   * {@code missCount &gt;= loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for\n",
        "136": "   * the same key will result in a single load operation.\n",
        "145": "   * values. This includes both successful load operations, as well as those that threw exceptions.\n",
        "146": "   * This is defined as {@code loadSuccessCount + loadExceptionCount}.\n",
        "154": "   * This is usually incremented in conjunction with {@link #missCount}, though {@code missCount} is\n",
        "155": "   * also incremented when an exception is encountered during cache loading (see\n",
        "157": "   * single load operation. This may be incremented not in conjunction with {@code missCount} if the\n",
        "158": "   * load occurs as a result of a refresh or if the cache loader returned more items than was\n",
        "159": "   * requested. {@code missCount} may also be incremented not in conjunction with this (nor\n",
        "160": "   * {@link #loadExceptionCount}) on calls to {@code getIfPresent}.\n",
        "167": "   * Returns the number of times {@link Cache} lookup methods threw an exception while loading a new\n",
        "168": "   * value. This is usually incremented in conjunction with {@code missCount}, though\n",
        "170": "   * {@link #loadSuccessCount}). Multiple concurrent misses for the same key will result in a single\n",
        "171": "   * load operation. This may be incremented not in conjunction with {@code missCount} if the load\n",
        "172": "   * occurs as a result of a refresh or if the cache loader returned more items than was requested.\n",
        "173": "   * {@code missCount} may also be incremented not in conjunction with this (nor\n",
        "174": "   * {@link #loadSuccessCount}) on calls to {@code getIfPresent}.\n",
        "182": "   * {@code loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when\n",
        "183": "   * {@code loadSuccessCount + loadExceptionCount == 0}.\n",
        "187": "    return (totalLoadCount == 0) ? 0.0 : (double) loadExceptionCount / totalLoadCount;\n",
        "192": "   * used to calculate the miss penalty. This value is increased every time {@code loadSuccessCount}\n",
        "193": "   * or {@code loadExceptionCount} is incremented.\n",
        "205": "    return (totalLoadCount == 0) ? 0.0 : (double) totalLoadTime / totalLoadCount;\n",
        "232": "   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and\n",
        "233": "   * {@code other}.\n",
        "249": "    return Objects.hashCode(\n",
        "250": "        hitCount, missCount, loadSuccessCount, loadExceptionCount, totalLoadTime, evictionCount);\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "39": " *     incremented, and the total loading time, in nanoseconds, is added to\n",
        "40": " *     {@code totalLoadTime}.\n",
        "42": " *     loadExceptionCount} are incremented, and the total loading time, in nanoseconds, is\n",
        "43": " *     added to {@code totalLoadTime}.\n",
        "44": " * <li>Cache lookups that encounter a missing cache entry that is still loading will wait\n",
        "45": " *     for loading to complete (whether successful or not) and then increment {@code missCount}.\n",
        "49": " * <li>No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of\n",
        "50": " *     the cache.\n",
        "75": "  public CacheStats(long hitCount, long missCount, long loadSuccessCount,\n",
        "76": "      long loadExceptionCount, long totalLoadTime, long evictionCount) {\n",
        "109": "   * {@code hitCount / requestCount}, or {@code 1.0} when {@code requestCount == 0}.\n",
        "110": "   * Note that {@code hitRate + missRate =~ 1.0}.\n",
        "129": "   * {@code missCount / requestCount}, or {@code 0.0} when {@code requestCount == 0}.\n",
        "130": "   * Note that {@code hitRate + missRate =~ 1.0}. Cache misses include all requests which\n",
        "131": "   * weren't cache hits, including requests which resulted in either successful or failed loading\n",
        "132": "   * attempts, and requests which waited for other threads to finish loading. It is thus the case\n",
        "133": "   * that {@code missCount &gt;= loadSuccessCount + loadExceptionCount}. Multiple\n",
        "134": "   * concurrent misses for the same key will result in a single load operation.\n",
        "143": "   * values. This includes both successful load operations, as well as those that threw\n",
        "144": "   * exceptions. This is defined as {@code loadSuccessCount + loadExceptionCount}.\n",
        "152": "   * This is usually incremented in conjunction with {@link #missCount}, though {@code missCount}\n",
        "153": "   * is also incremented when an exception is encountered during cache loading (see\n",
        "155": "   * single load operation. This may be incremented not in conjunction with {@code missCount}\n",
        "156": "   * if the load occurs as a result of a refresh or if the cache loader returned more items\n",
        "157": "   * than was requested. {@code missCount} may also be incremented not in conjunction with\n",
        "158": "   * this (nor {@link #loadExceptionCount}) on calls to {@code getIfPresent}. \n",
        "165": "   * Returns the number of times {@link Cache} lookup methods threw an exception while loading a\n",
        "166": "   * new value. This is usually incremented in conjunction with {@code missCount}, though\n",
        "168": "   * {@link #loadSuccessCount}). Multiple concurrent misses for the same key will result in a\n",
        "169": "   * single load operation. This may be incremented not in conjunction with {@code missCount}\n",
        "170": "   * if the load occurs as a result of a refresh or if the cache loader returned more items\n",
        "171": "   * than was requested. {@code missCount} may also be incremented not in conjunction with\n",
        "172": "   * this (nor {@link #loadSuccessCount}) on calls to {@code getIfPresent}. \n",
        "180": "   * {@code loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or\n",
        "181": "   * {@code 0.0} when {@code loadSuccessCount + loadExceptionCount == 0}.\n",
        "185": "    return (totalLoadCount == 0)\n",
        "186": "        ? 0.0\n",
        "187": "        : (double) loadExceptionCount / totalLoadCount;\n",
        "192": "   * used to calculate the miss penalty. This value is increased every time\n",
        "193": "   * {@code loadSuccessCount} or {@code loadExceptionCount} is incremented.\n",
        "205": "    return (totalLoadCount == 0)\n",
        "206": "        ? 0.0\n",
        "207": "        : (double) totalLoadTime / totalLoadCount;\n",
        "234": "   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats}\n",
        "235": "   * and {@code other}.\n",
        "251": "    return Objects.hashCode(hitCount, missCount, loadSuccessCount, loadExceptionCount,\n",
        "252": "        totalLoadTime, evictionCount);\n"
    }
}