{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "28": " * Static utility methods pertaining to {@code String} or {@code CharSequence} instances.\n",
        "51": "   * @return {@code string} itself if it is nonempty; {@code null} if it is empty or null\n",
        "61": "   * <p>Consider normalizing your string references with {@link #nullToEmpty}. If you do, you can\n",
        "62": "   * use {@link String#isEmpty()} instead of this method, and you won't need special null-safe forms\n",
        "63": "   * of methods like {@link String#toUpperCase} either. Or, if you'd like to normalize \"in the other\n",
        "64": "   * direction,\" converting empty strings to {@code null}, you can use {@link #emptyToNull}.\n",
        "74": "   * Returns a string, of length at least {@code minLength}, consisting of {@code string} prepended\n",
        "75": "   * with as many copies of {@code padChar} as are necessary to reach that length. For example,\n",
        "85": "   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in\n",
        "86": "   *     which case the input string is always returned.\n",
        "87": "   * @param padChar the character to insert at the beginning of the result until the minimum length\n",
        "88": "   *     is reached\n",
        "105": "   * Returns a string, of length at least {@code minLength}, consisting of {@code string} appended\n",
        "106": "   * with as many copies of {@code padChar} as are necessary to reach that length. For example,\n",
        "116": "   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in\n",
        "117": "   *     which case the input string is always returned.\n",
        "118": "   * @param padChar the character to append to the end of the result until the minimum length is\n",
        "119": "   *     reached\n",
        "136": "   * Returns a string consisting of a specific number of concatenated copies of an input string. For\n",
        "137": "   * example, {@code repeat(\"hey\", 3)} returns the string {@code \"heyheyhey\"}.\n",
        "141": "   * @return a string containing {@code string} repeated {@code count} times (the empty string if\n",
        "142": "   *     {@code count} is zero)\n",
        "173": "   * {@code a.toString().startsWith(prefix) && b.toString().startsWith(prefix)}, taking care not to\n",
        "174": "   * split surrogate pairs. If {@code a} and {@code b} have no common prefix, returns the empty\n",
        "175": "   * string.\n",
        "196": "   * {@code a.toString().endsWith(suffix) && b.toString().endsWith(suffix)}, taking care not to\n",
        "197": "   * split surrogate pairs. If {@code a} and {@code b} have no common suffix, returns the empty\n",
        "198": "   * string.\n",
        "219": "   * True when a valid surrogate pair starts at the given {@code index} in the given {@code string}.\n",
        "220": "   * Out-of-range indexes return false.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "30": " * Static utility methods pertaining to {@code String} or {@code CharSequence}\n",
        "31": " * instances.\n",
        "54": "   * @return {@code string} itself if it is nonempty; {@code null} if it is\n",
        "55": "   *     empty or null\n",
        "65": "   * <p>Consider normalizing your string references with {@link #nullToEmpty}.\n",
        "66": "   * If you do, you can use {@link String#isEmpty()} instead of this\n",
        "67": "   * method, and you won't need special null-safe forms of methods like {@link\n",
        "68": "   * String#toUpperCase} either. Or, if you'd like to normalize \"in the other\n",
        "69": "   * direction,\" converting empty strings to {@code null}, you can use {@link\n",
        "70": "   * #emptyToNull}.\n",
        "80": "   * Returns a string, of length at least {@code minLength}, consisting of\n",
        "81": "   * {@code string} prepended with as many copies of {@code padChar} as are\n",
        "82": "   * necessary to reach that length. For example,\n",
        "92": "   * @param minLength the minimum length the resulting string must have. Can be\n",
        "93": "   *     zero or negative, in which case the input string is always returned.\n",
        "94": "   * @param padChar the character to insert at the beginning of the result until\n",
        "95": "   *     the minimum length is reached\n",
        "112": "   * Returns a string, of length at least {@code minLength}, consisting of\n",
        "113": "   * {@code string} appended with as many copies of {@code padChar} as are\n",
        "114": "   * necessary to reach that length. For example,\n",
        "124": "   * @param minLength the minimum length the resulting string must have. Can be\n",
        "125": "   *     zero or negative, in which case the input string is always returned.\n",
        "126": "   * @param padChar the character to append to the end of the result until the\n",
        "127": "   *     minimum length is reached\n",
        "144": "   * Returns a string consisting of a specific number of concatenated copies of\n",
        "145": "   * an input string. For example, {@code repeat(\"hey\", 3)} returns the string\n",
        "146": "   * {@code \"heyheyhey\"}.\n",
        "150": "   * @return a string containing {@code string} repeated {@code count} times\n",
        "151": "   *     (the empty string if {@code count} is zero)\n",
        "182": "   * {@code a.toString().startsWith(prefix) && b.toString().startsWith(prefix)},\n",
        "183": "   * taking care not to split surrogate pairs. If {@code a} and {@code b} have\n",
        "184": "   * no common prefix, returns the empty string.\n",
        "205": "   * {@code a.toString().endsWith(suffix) && b.toString().endsWith(suffix)},\n",
        "206": "   * taking care not to split surrogate pairs. If {@code a} and {@code b} have\n",
        "207": "   * no common suffix, returns the empty string.\n",
        "228": "   * True when a valid surrogate pair starts at the given {@code index} in the\n",
        "229": "   * given {@code string}. Out-of-range indexes return false.\n"
    }
}