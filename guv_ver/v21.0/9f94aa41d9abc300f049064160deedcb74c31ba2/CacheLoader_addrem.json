{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "82": "   * @return the future new value associated with {@code key}; <b>must not be null, must not return\n",
        "83": "   *     null</b>\n",
        "103": "   * contains extra keys not present in {@code keys} then all returned entries will be cached, but\n",
        "104": "   * only the entries for {@code keys} will be returned from {@code getAll}.\n",
        "111": "   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not\n",
        "112": "   *     contain null values</b>\n",
        "137": "  private static final class FunctionToCacheLoader<K, V> extends CacheLoader<K, V>\n",
        "138": "      implements Serializable {\n",
        "170": "   * <p>This method is useful only when {@code loader.reload} has a synchronous implementation, such\n",
        "171": "   * as {@linkplain #reload the default implementation}.\n",
        "188": "        ListenableFutureTask<V> task =\n",
        "189": "            ListenableFutureTask.create(\n",
        "190": "                new Callable<V>() {\n",
        "191": "                  @Override\n",
        "192": "                  public V call() throws Exception {\n",
        "193": "                    return loader.reload(key, oldValue).get();\n",
        "194": "                  }\n",
        "195": "                });\n",
        "207": "  private static final class SupplierToCacheLoader<V> extends CacheLoader<Object, V>\n",
        "208": "      implements Serializable {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "84": "   * @return the future new value associated with {@code key};\n",
        "85": "   *     <b>must not be null, must not return null</b>\n",
        "105": "   * contains extra keys not present in {@code keys} then all returned entries will be cached,\n",
        "106": "   * but only the entries for {@code keys} will be returned from {@code getAll}.\n",
        "113": "   * @return a map from each key in {@code keys} to the value associated with that key;\n",
        "114": "   *     <b>may not contain null values</b>\n",
        "139": "  private static final class FunctionToCacheLoader<K, V>\n",
        "140": "      extends CacheLoader<K, V> implements Serializable {\n",
        "172": "   * <p>This method is useful only when {@code loader.reload} has a synchronous implementation,\n",
        "173": "   * such as {@linkplain #reload the default implementation}.\n",
        "190": "        ListenableFutureTask<V> task = ListenableFutureTask.create(new Callable<V>() {\n",
        "191": "          @Override\n",
        "192": "          public V call() throws Exception {\n",
        "193": "            return loader.reload(key, oldValue).get();\n",
        "194": "          }\n",
        "195": "        });\n",
        "207": "  private static final class SupplierToCacheLoader<V>\n",
        "208": "      extends CacheLoader<Object, V> implements Serializable {\n"
    }
}