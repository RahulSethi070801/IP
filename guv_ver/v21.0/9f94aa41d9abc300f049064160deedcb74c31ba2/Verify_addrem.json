{
    "addition": {
        "77": " * is supported, not the full range of {@link java.util.Formatter} specifiers. However, note that if\n",
        "78": " * the number of arguments does not match the number of occurrences of {@code \"%s\"} in the format\n",
        "79": " * string, {@code Verify} will still behave as expected, and will still include all argument values\n",
        "80": " * in the error message; the message will simply not be formatted exactly as intended.\n",
        "84": " * See <a href=\"https://github.com/google/guava/wiki/ConditionalFailuresExplained\">Conditional\n",
        "109": "   * @param errorMessageTemplate a template for the exception message should the check fail. The\n",
        "110": "   *     message is formed by replacing each {@code %s} placeholder in the template with an\n",
        "111": "   *     argument. These are matched by position - the first {@code %s} gets\n",
        "112": "   *     {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted\n",
        "113": "   *     message in square braces. Unmatched placeholders will be left as-is.\n",
        "114": "   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments\n",
        "115": "   *     are converted to strings using {@link String#valueOf(Object)}.\n",
        "143": "   * @param errorMessageTemplate a template for the exception message should the check fail. The\n",
        "144": "   *     message is formed by replacing each {@code %s} placeholder in the template with an\n",
        "145": "   *     argument. These are matched by position - the first {@code %s} gets\n",
        "146": "   *     {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted\n",
        "147": "   *     message in square braces. Unmatched placeholders will be left as-is.\n",
        "148": "   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments\n",
        "149": "   *     are converted to strings using {@link String#valueOf(Object)}.\n"
    },
    "removed": {
        "77": " * is supported, not the full range of {@link java.util.Formatter} specifiers. However, note that\n",
        "78": " * if the number of arguments does not match the number of occurrences of {@code \"%s\"} in the\n",
        "79": " * format string, {@code Verify} will still behave as expected, and will still include all argument\n",
        "80": " * values in the error message; the message will simply not be formatted exactly as intended.\n",
        "84": " * See\n",
        "85": " * <a href=\"https://github.com/google/guava/wiki/ConditionalFailuresExplained\">Conditional\n",
        "110": "   * @param errorMessageTemplate a template for the exception message should the\n",
        "111": "   *     check fail. The message is formed by replacing each {@code %s}\n",
        "112": "   *     placeholder in the template with an argument. These are matched by\n",
        "113": "   *     position - the first {@code %s} gets {@code errorMessageArgs[0]}, etc.\n",
        "114": "   *     Unmatched arguments will be appended to the formatted message in square\n",
        "115": "   *     braces. Unmatched placeholders will be left as-is.\n",
        "116": "   * @param errorMessageArgs the arguments to be substituted into the message\n",
        "117": "   *     template. Arguments are converted to strings using\n",
        "118": "   *     {@link String#valueOf(Object)}.\n",
        "146": "   * @param errorMessageTemplate a template for the exception message should the\n",
        "147": "   *     check fail. The message is formed by replacing each {@code %s}\n",
        "148": "   *     placeholder in the template with an argument. These are matched by\n",
        "149": "   *     position - the first {@code %s} gets {@code errorMessageArgs[0]}, etc.\n",
        "150": "   *     Unmatched arguments will be appended to the formatted message in square\n",
        "151": "   *     braces. Unmatched placeholders will be left as-is.\n",
        "152": "   * @param errorMessageArgs the arguments to be substituted into the message\n",
        "153": "   *     template. Arguments are converted to strings using\n",
        "154": "   *     {@link String#valueOf(Object)}.\n"
    }
}