{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "46": " * <p>See the Guava User Guide article on\n",
        "47": " * <a href=\"https://github.com/google/guava/wiki/StringsExplained#charmatcher\">{@code CharMatcher}\n",
        "48": " * </a>.\n",
        "79": "   * illustrated\n",
        "80": "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n",
        "81": "   * This is not the same definition used by other Java APIs. (See a\n",
        "82": "   * <a href=\"http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ\">comparison of several\n",
        "85": "   * <p><b>Note:</b> as the Unicode definition evolves, we will modify this matcher to keep it up to\n",
        "86": "   * date.\n",
        "116": "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D\">Unicode</a>. If\n",
        "117": "   * you only care to match ASCII digits, you can use {@code inRange('0', '9')}.\n",
        "148": "   * Determines whether a character is a letter or digit according to\n",
        "149": "   * {@linkplain Character#isLetterOrDigit(char) Java's definition}.\n",
        "158": "   * Determines whether a character is upper case according to\n",
        "159": "   * {@linkplain Character#isUpperCase(char) Java's definition}.\n",
        "168": "   * Determines whether a character is lower case according to\n",
        "169": "   * {@linkplain Character#isLowerCase(char) Java's definition}.\n",
        "178": "   * Determines whether a character is an ISO control character as specified by\n",
        "179": "   * {@link Character#isISOControl(char)}.\n",
        "217": "   * illustrated\n",
        "218": "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n",
        "219": "   * This is not the same definition used by other Java APIs. (See a\n",
        "220": "   * <a href=\"http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ\">comparison of several\n",
        "244": "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D\">Unicode</a>. If\n",
        "245": "   * you only care to match ASCII digits, you can use {@code inRange('0', '9')}.\n",
        "264": "   * Determines whether a character is a letter or digit according to\n",
        "265": "   * {@linkplain Character#isLetterOrDigit(char) Java's definition}.\n",
        "270": "   * Determines whether a character is upper case according to\n",
        "271": "   * {@linkplain Character#isUpperCase(char) Java's definition}.\n",
        "276": "   * Determines whether a character is lower case according to\n",
        "277": "   * {@linkplain Character#isLowerCase(char) Java's definition}.\n",
        "282": "   * Determines whether a character is an ISO control character as specified by\n",
        "283": "   * {@link Character#isISOControl(char)}.\n",
        "426": "   * This is the actual implementation of {@link #precomputed}, but we bounce calls through a method\n",
        "427": "   * on {@link Platform} so that we can have different behavior in GWT.\n",
        "429": "   * <p>This implementation tries to be smart in a number of ways. It recognizes cases where the\n",
        "430": "   * negation is cheaper to precompute than the matcher itself; it tries to build small hash tables\n",
        "431": "   * for matchers that only match a few characters, and so on. In the worst-case scenario, it\n",
        "432": "   * constructs an eight-kilobyte bit array and queries that. In many situations this produces a\n",
        "433": "   * matcher which is faster to query than the original.\n",
        "528": "   *     the sequence is empty\n",
        "548": "   *     the sequence is empty\n",
        "558": "   * <p>The default implementation iterates over the sequence in forward order calling\n",
        "559": "   * {@link #matches} for each character.\n",
        "579": "   *     or {@code -1} if no character matches\n",
        "598": "   * <p>The default implementation iterates over the sequence in reverse order calling\n",
        "599": "   * {@link #matches} for each character.\n",
        "689": "   *     character in {@code sequence}\n",
        "721": "   *     character in {@code sequence}\n",
        "838": "   *     matching characters in {@code sequence}\n",
        "1458": "        \"\\u0000\\u007f\\u00ad\\u0600\\u061c\\u06dd\\u070f\\u1680\\u180e\\u2000\\u2028\\u205f\\u2066\\u2067\"\n",
        "1459": "            + \"\\u2068\\u2069\\u206a\\u3000\\ud800\\ufeff\\ufff9\\ufffa\";\n",
        "1461": "        \"\\u0020\\u00a0\\u00ad\\u0604\\u061c\\u06dd\\u070f\\u1680\\u180e\\u200f\\u202f\\u2064\\u2066\\u2067\"\n",
        "1462": "            + \"\\u2068\\u2069\\u206f\\u3000\\uf8ff\\ufeff\\ufff9\\ufffb\";\n",
        "1467": "      super(\"CharMatcher.invisible()\", RANGE_STARTS.toCharArray(), RANGE_ENDS.toCharArray());\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "48": " * <p>See the Guava User Guide article on <a href=\n",
        "49": " * \"https://github.com/google/guava/wiki/StringsExplained#charmatcher\">\n",
        "50": " * {@code CharMatcher}</a>.\n",
        "81": "   * illustrated <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n",
        "82": "   * This is not the same definition used by other Java APIs. (See a <a\n",
        "83": "   * href=\"http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ\">comparison of several\n",
        "86": "   * <p><b>Note:</b> as the Unicode definition evolves, we will modify this matcher to keep it up\n",
        "87": "   * to date.\n",
        "117": "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D\">Unicode</a>.\n",
        "118": "   * If you only care to match ASCII digits, you can use {@code inRange('0', '9')}.\n",
        "149": "   * Determines whether a character is a letter or digit according to {@linkplain\n",
        "150": "   * Character#isLetterOrDigit(char) Java's definition}.\n",
        "159": "   * Determines whether a character is upper case according to {@linkplain\n",
        "160": "   * Character#isUpperCase(char) Java's definition}.\n",
        "169": "   * Determines whether a character is lower case according to {@linkplain\n",
        "170": "   * Character#isLowerCase(char) Java's definition}.\n",
        "179": "   * Determines whether a character is an ISO control character as specified by {@link\n",
        "180": "   * Character#isISOControl(char)}.\n",
        "218": "   * illustrated <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n",
        "219": "   * This is not the same definition used by other Java APIs. (See a <a\n",
        "220": "   * href=\"http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ\">comparison of several\n",
        "244": "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D\">Unicode</a>.\n",
        "245": "   * If you only care to match ASCII digits, you can use {@code inRange('0', '9')}.\n",
        "264": "   * Determines whether a character is a letter or digit according to {@linkplain\n",
        "265": "   * Character#isLetterOrDigit(char) Java's definition}.\n",
        "270": "   * Determines whether a character is upper case according to {@linkplain\n",
        "271": "   * Character#isUpperCase(char) Java's definition}.\n",
        "276": "   * Determines whether a character is lower case according to {@linkplain\n",
        "277": "   * Character#isLowerCase(char) Java's definition}.\n",
        "282": "   * Determines whether a character is an ISO control character as specified by {@link\n",
        "283": "   * Character#isISOControl(char)}.\n",
        "426": "   * This is the actual implementation of {@link #precomputed}, but we bounce calls through a\n",
        "427": "   * method on {@link Platform} so that we can have different behavior in GWT.\n",
        "429": "   * <p>This implementation tries to be smart in a number of ways.  It recognizes cases where\n",
        "430": "   * the negation is cheaper to precompute than the matcher itself; it tries to build small\n",
        "431": "   * hash tables for matchers that only match a few characters, and so on.  In the worst-case\n",
        "432": "   * scenario, it constructs an eight-kilobyte bit array and queries that.\n",
        "433": "   * In many situations this produces a matcher which is faster to query than the original.\n",
        "528": "   *         the sequence is empty\n",
        "548": "   *         the sequence is empty\n",
        "558": "   * <p>The default implementation iterates over the sequence in forward order calling {@link\n",
        "559": "   * #matches} for each character.\n",
        "579": "   *         or {@code -1} if no character matches\n",
        "598": "   * <p>The default implementation iterates over the sequence in reverse order calling {@link\n",
        "599": "   * #matches} for each character.\n",
        "689": "   *        character in {@code sequence}\n",
        "721": "   *        character in {@code sequence}\n",
        "838": "   *        matching characters in {@code sequence}\n",
        "1458": "      \"\\u0000\\u007f\\u00ad\\u0600\\u061c\\u06dd\\u070f\\u1680\\u180e\\u2000\\u2028\\u205f\\u2066\\u2067\"\n",
        "1459": "          + \"\\u2068\\u2069\\u206a\\u3000\\ud800\\ufeff\\ufff9\\ufffa\";\n",
        "1461": "      \"\\u0020\\u00a0\\u00ad\\u0604\\u061c\\u06dd\\u070f\\u1680\\u180e\\u200f\\u202f\\u2064\\u2066\\u2067\"\n",
        "1462": "          + \"\\u2068\\u2069\\u206f\\u3000\\uf8ff\\ufeff\\ufff9\\ufffb\";\n",
        "1467": "      super(\n",
        "1468": "          \"CharMatcher.invisible()\",\n",
        "1469": "          RANGE_STARTS.toCharArray(),\n",
        "1470": "          RANGE_ENDS.toCharArray());\n"
    }
}