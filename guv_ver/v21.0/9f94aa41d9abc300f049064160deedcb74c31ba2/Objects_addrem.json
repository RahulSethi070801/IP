{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "29": " * <p>See the Guava User Guide on\n",
        "30": " * <a href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing\n",
        "45": "   * <li>{@code true} if {@code a} and {@code b} are both non-null and they are equal according to\n",
        "46": "   *     {@link Object#equals(Object)}.\n",
        "50": "   * <p>This assumes that any non-null objects passed to this function conform to the\n",
        "51": "   * {@code equals()} contract.\n",
        "53": "   * <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use\n",
        "54": "   * {@link java.util.Objects#equals} instead.\n",
        "61": "   * Generates a hash code for multiple values. The hash code is generated by calling\n",
        "62": "   * {@link Arrays#hashCode(Object[])}. Note that array arguments to this method, with the exception\n",
        "63": "   * of a single Object array, do not get any special handling; their hash codes are based on\n",
        "64": "   * identity and not contents.\n",
        "65": "   *\n",
        "66": "   * <p>This is useful for implementing {@link Object#hashCode()}. For example, in an object that\n",
        "67": "   * has three properties, {@code x}, {@code y}, and {@code z}, one could write:\n",
        "74": "   * <p><b>Warning:</b> When a single object is supplied, the returned hash code does not equal the\n",
        "75": "   * hash code of that object.\n",
        "77": "   * <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use\n",
        "78": "   * {@link java.util.Objects#hash} instead.\n",
        "87": "   * <p>This is helpful for implementing {@link Object#toString()}. Specification by example:\n",
        "88": "   *\n",
        "89": "   * <pre>   {@code\n",
        "120": "   * @param self the object to generate the string for (typically {@code this}), used only for its\n",
        "121": "   *     class name\n",
        "123": "   * @deprecated Use {@link MoreObjects#toStringHelper(Object)} instead. This method is scheduled\n",
        "124": "   *     for removal in August 2016.\n",
        "133": "   * {@link Objects#toStringHelper(Object)}, but using the name of {@code clazz} instead of using an\n",
        "134": "   * instance's {@link Object#getClass()}.\n",
        "140": "   * @deprecated Use {@link MoreObjects#toStringHelper(Class)} instead. This method is scheduled for\n",
        "141": "   *     removal in August 2016.\n",
        "150": "   * {@link Objects#toStringHelper(Object)}, but using {@code className} instead of using an\n",
        "151": "   * instance's {@link Object#getClass()}.\n",
        "155": "   * @deprecated Use {@link MoreObjects#toStringHelper(String)} instead. This method is scheduled\n",
        "156": "   *     for removal in August 2016.\n",
        "164": "   * Returns the first of two given parameters that is not {@code null}, if either is, or otherwise\n",
        "165": "   * throws a {@link NullPointerException}.\n",
        "167": "   * <p><b>Note:</b> if {@code first} is represented as an {@link Optional}, this can be\n",
        "168": "   * accomplished with {@linkplain Optional#or(Object) first.or(second)}. That approach also allows\n",
        "169": "   * for lazy evaluation of the fallback instance, using {@linkplain Optional#or(Supplier)\n",
        "170": "   * first.or(Supplier)}.\n",
        "172": "   * @return {@code first} if {@code first} is not {@code null}, or {@code second} if {@code first}\n",
        "173": "   *     is {@code null} and {@code second} is not {@code null}\n",
        "174": "   * @throws NullPointerException if both {@code first} and {@code second} were {@code null}\n",
        "176": "   * @deprecated Use {@link MoreObjects#firstNonNull} instead. This method is scheduled for removal\n",
        "177": "   *     in August 2016.\n",
        "189": "   * @deprecated Use {@link MoreObjects.ToStringHelper} instead. This class is scheduled for removal\n",
        "190": "   *     in August 2016.\n",
        "207": "     * Configures the {@link ToStringHelper} so {@link #toString()} will ignore properties with null\n",
        "208": "     * value. The order of calling this method, relative to the {@code add()}/{@code addValue()}\n",
        "209": "     * methods, is not significant.\n",
        "220": "     * Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}\n",
        "221": "     * is {@code null}, the string {@code \"null\"} is used, unless {@link #omitNullValues()} is\n",
        "222": "     * called, in which case this name/value pair will not be added.\n",
        "230": "     * Adds a name/value pair to the formatted output in {@code name=value} format.\n",
        "240": "     * Adds a name/value pair to the formatted output in {@code name=value} format.\n",
        "250": "     * Adds a name/value pair to the formatted output in {@code name=value} format.\n",
        "260": "     * Adds a name/value pair to the formatted output in {@code name=value} format.\n",
        "270": "     * Adds a name/value pair to the formatted output in {@code name=value} format.\n",
        "280": "     * Adds a name/value pair to the formatted output in {@code name=value} format.\n",
        "292": "     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a\n",
        "293": "     * readable name.\n",
        "303": "     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a\n",
        "304": "     * readable name.\n",
        "316": "     * <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a\n",
        "317": "     * readable name.\n",
        "329": "     * <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a\n",
        "330": "     * readable name.\n",
        "342": "     * <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a\n",
        "343": "     * readable name.\n",
        "355": "     * <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a\n",
        "356": "     * readable name.\n",
        "368": "     * <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a\n",
        "369": "     * readable name.\n",
        "379": "     * Returns a string in the format specified by {@link Objects#toStringHelper(Object)}.\n",
        "381": "     * <p>After calling this method, you can keep adding more properties to later call toString()\n",
        "382": "     * again and get a more complete representation of the same object; but properties cannot be\n",
        "383": "     * removed, so this only allows limited reuse of the helper instance. The helper allows\n",
        "384": "     * duplication of properties (multiple name/value pairs with the same name can be added).\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "31": " * <p>See the Guava User Guide on <a\n",
        "32": " * href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing\n",
        "47": "   * <li>{@code true} if {@code a} and {@code b} are both non-null and they are\n",
        "48": "   *     equal according to {@link Object#equals(Object)}.\n",
        "52": "   * <p>This assumes that any non-null objects passed to this function conform\n",
        "53": "   * to the {@code equals()} contract.\n",
        "55": "   * <p><b>Note for Java 7 and later:</b> This method should be treated as\n",
        "56": "   * deprecated; use {@link java.util.Objects#equals} instead.\n",
        "63": "   * Generates a hash code for multiple values. The hash code is generated by\n",
        "64": "   * calling {@link Arrays#hashCode(Object[])}. Note that array arguments to\n",
        "65": "   * this method, with the exception of a single Object array, do not get any\n",
        "66": "   * special handling; their hash codes are based on identity and not contents.\n",
        "68": "   * <p>This is useful for implementing {@link Object#hashCode()}. For example,\n",
        "69": "   * in an object that has three properties, {@code x}, {@code y}, and\n",
        "70": "   * {@code z}, one could write:\n",
        "76": "   * <p><b>Warning:</b> When a single object is supplied, the returned hash code\n",
        "77": "   * does not equal the hash code of that object.\n",
        "79": "   * <p><b>Note for Java 7 and later:</b> This method should be treated as\n",
        "80": "   * deprecated; use {@link java.util.Objects#hash} instead.\n",
        "89": "   * <p>This is helpful for implementing {@link Object#toString()}.\n",
        "90": "   * Specification by example: <pre>   {@code\n",
        "121": "   * @param self the object to generate the string for (typically {@code this}),\n",
        "122": "   *        used only for its class name\n",
        "124": "   * @deprecated Use {@link MoreObjects#toStringHelper(Object)} instead. This\n",
        "125": "   *     method is scheduled for removal in August 2016.\n",
        "134": "   * {@link Objects#toStringHelper(Object)}, but using the name of {@code clazz}\n",
        "135": "   * instead of using an instance's {@link Object#getClass()}.\n",
        "141": "   * @deprecated Use {@link MoreObjects#toStringHelper(Class)} instead. This\n",
        "142": "   *     method is scheduled for removal in August 2016.\n",
        "151": "   * {@link Objects#toStringHelper(Object)}, but using {@code className} instead\n",
        "152": "   * of using an instance's {@link Object#getClass()}.\n",
        "156": "   * @deprecated Use {@link MoreObjects#toStringHelper(String)} instead. This\n",
        "157": "   *     method is scheduled for removal in August 2016.\n",
        "165": "   * Returns the first of two given parameters that is not {@code null}, if\n",
        "166": "   * either is, or otherwise throws a {@link NullPointerException}.\n",
        "168": "   * <p><b>Note:</b> if {@code first} is represented as an {@link Optional},\n",
        "169": "   * this can be accomplished with\n",
        "170": "   * {@linkplain Optional#or(Object) first.or(second)}.\n",
        "171": "   * That approach also allows for lazy evaluation of the fallback instance,\n",
        "172": "   * using {@linkplain Optional#or(Supplier) first.or(Supplier)}.\n",
        "174": "   * @return {@code first} if {@code first} is not {@code null}, or\n",
        "175": "   *     {@code second} if {@code first} is {@code null} and {@code second} is\n",
        "176": "   *     not {@code null}\n",
        "177": "   * @throws NullPointerException if both {@code first} and {@code second} were\n",
        "178": "   *     {@code null}\n",
        "180": "   * @deprecated Use {@link MoreObjects#firstNonNull} instead. This method is\n",
        "181": "   *      scheduled for removal in August 2016.\n",
        "193": "   * @deprecated Use {@link MoreObjects.ToStringHelper} instead. This class is\n",
        "194": "   *      scheduled for removal in August 2016.\n",
        "211": "     * Configures the {@link ToStringHelper} so {@link #toString()} will ignore\n",
        "212": "     * properties with null value. The order of calling this method, relative\n",
        "213": "     * to the {@code add()}/{@code addValue()} methods, is not significant.\n",
        "224": "     * Adds a name/value pair to the formatted output in {@code name=value}\n",
        "225": "     * format. If {@code value} is {@code null}, the string {@code \"null\"}\n",
        "226": "     * is used, unless {@link #omitNullValues()} is called, in which case this\n",
        "227": "     * name/value pair will not be added.\n",
        "235": "     * Adds a name/value pair to the formatted output in {@code name=value}\n",
        "236": "     * format.\n",
        "246": "     * Adds a name/value pair to the formatted output in {@code name=value}\n",
        "247": "     * format.\n",
        "257": "     * Adds a name/value pair to the formatted output in {@code name=value}\n",
        "258": "     * format.\n",
        "268": "     * Adds a name/value pair to the formatted output in {@code name=value}\n",
        "269": "     * format.\n",
        "279": "     * Adds a name/value pair to the formatted output in {@code name=value}\n",
        "280": "     * format.\n",
        "290": "     * Adds a name/value pair to the formatted output in {@code name=value}\n",
        "291": "     * format.\n",
        "303": "     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead\n",
        "304": "     * and give value a readable name.\n",
        "314": "     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead\n",
        "315": "     * and give value a readable name.\n",
        "327": "     * <p>It is strongly encouraged to use {@link #add(String, char)} instead\n",
        "328": "     * and give value a readable name.\n",
        "340": "     * <p>It is strongly encouraged to use {@link #add(String, double)} instead\n",
        "341": "     * and give value a readable name.\n",
        "353": "     * <p>It is strongly encouraged to use {@link #add(String, float)} instead\n",
        "354": "     * and give value a readable name.\n",
        "366": "     * <p>It is strongly encouraged to use {@link #add(String, int)} instead\n",
        "367": "     * and give value a readable name.\n",
        "379": "     * <p>It is strongly encouraged to use {@link #add(String, long)} instead\n",
        "380": "     * and give value a readable name.\n",
        "390": "     * Returns a string in the format specified by {@link\n",
        "391": "     * Objects#toStringHelper(Object)}.\n",
        "393": "     * <p>After calling this method, you can keep adding more properties to later\n",
        "394": "     * call toString() again and get a more complete representation of the\n",
        "395": "     * same object; but properties cannot be removed, so this only allows\n",
        "396": "     * limited reuse of the helper instance. The helper allows duplication of\n",
        "397": "     * properties (multiple name/value pairs with the same name can be added).\n"
    }
}