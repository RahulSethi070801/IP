{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "35": " * <p>All methods returns serializable predicates as long as they're given serializable parameters.\n",
        "37": " * <p>See the Guava User Guide article on\n",
        "38": " * <a href=\"https://github.com/google/guava/wiki/FunctionalExplained\">the use of\n",
        "39": " * {@code Predicate}</a>.\n",
        "68": "   * Returns a predicate that evaluates to {@code true} if the object reference being tested is\n",
        "69": "   * null.\n",
        "77": "   * Returns a predicate that evaluates to {@code true} if the object reference being tested is not\n",
        "78": "   * null.\n",
        "86": "   * Returns a predicate that evaluates to {@code true} if the given predicate evaluates to\n",
        "87": "   * {@code false}.\n",
        "94": "   * Returns a predicate that evaluates to {@code true} if each of its components evaluates to\n",
        "95": "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n",
        "96": "   * as soon as a false predicate is found. It defensively copies the iterable passed in, so future\n",
        "106": "   * Returns a predicate that evaluates to {@code true} if each of its components evaluates to\n",
        "107": "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n",
        "108": "   * as soon as a false predicate is found. It defensively copies the array passed in, so future\n",
        "118": "   * Returns a predicate that evaluates to {@code true} if both of its components evaluate to\n",
        "119": "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n",
        "120": "   * as soon as a false predicate is found.\n",
        "127": "   * Returns a predicate that evaluates to {@code true} if any one of its components evaluates to\n",
        "128": "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n",
        "129": "   * as soon as a true predicate is found. It defensively copies the iterable passed in, so future\n",
        "130": "   * changes to it won't alter the behavior of this predicate. If {@code\n",
        "139": "   * Returns a predicate that evaluates to {@code true} if any one of its components evaluates to\n",
        "140": "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n",
        "141": "   * as soon as a true predicate is found. It defensively copies the array passed in, so future\n",
        "142": "   * changes to it won't alter the behavior of this predicate. If {@code\n",
        "151": "   * Returns a predicate that evaluates to {@code true} if either of its components evaluates to\n",
        "152": "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n",
        "153": "   * as soon as a true predicate is found.\n",
        "160": "   * Returns a predicate that evaluates to {@code true} if the object being tested {@code equals()}\n",
        "161": "   * the given target or both are null.\n",
        "168": "   * Returns a predicate that evaluates to {@code true} if the object being tested is an instance of\n",
        "169": "   * the given class. If the object being tested is {@code null} this predicate evaluates to\n",
        "170": "   * {@code false}.\n",
        "172": "   * <p>If you want to filter an {@code Iterable} to narrow its type, consider using\n",
        "173": "   * {@link com.google.common.collect.Iterables#filter(Iterable, Class)} in preference.\n",
        "175": "   * <p><b>Warning:</b> contrary to the typical assumptions about predicates (as documented at\n",
        "176": "   * {@link Predicate#apply}), the returned predicate may not be <i>consistent with equals</i>. For\n",
        "177": "   * example, {@code instanceOf(ArrayList.class)} will yield different results for the two equal\n",
        "186": "   * Returns a predicate that evaluates to {@code true} if the class being tested is assignable from\n",
        "187": "   * the given class. The returned predicate does not allow null inputs.\n",
        "198": "   * Returns a predicate that evaluates to {@code true} if the object reference being tested is a\n",
        "199": "   * member of the given collection. It does not defensively copy the collection passed in, so\n",
        "200": "   * future changes to it will alter the behavior of the predicate.\n",
        "202": "   * <p>This method can technically accept any {@code Collection<?>}, but using a typed collection\n",
        "203": "   * helps prevent bugs. This approach doesn't block any potential users since it is always possible\n",
        "204": "   * to use {@code Predicates.<Object>in()}.\n",
        "213": "   * Returns the composition of a function and a predicate. For every {@code x}, the generated\n",
        "214": "   * predicate returns {@code predicate(function(x))}.\n",
        "224": "   * Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested\n",
        "225": "   * contains any match for the given regular expression pattern. The test used is equivalent to\n",
        "237": "   * Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested\n",
        "238": "   * contains any match for the given regular expression pattern. The test used is equivalent to\n",
        "651": "      String patternString =\n",
        "652": "          MoreObjects.toStringHelper(pattern)\n",
        "653": "              .add(\"pattern\", pattern.pattern())\n",
        "654": "              .add(\"pattern.flags\", pattern.flags())\n",
        "655": "              .toString();\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "37": " * <p>All methods returns serializable predicates as long as they're given\n",
        "38": " * serializable parameters.\n",
        "40": " * <p>See the Guava User Guide article on <a href=\n",
        "41": " * \"https://github.com/google/guava/wiki/FunctionalExplained\">the\n",
        "42": " * use of {@code Predicate}</a>.\n",
        "71": "   * Returns a predicate that evaluates to {@code true} if the object reference\n",
        "72": "   * being tested is null.\n",
        "80": "   * Returns a predicate that evaluates to {@code true} if the object reference\n",
        "81": "   * being tested is not null.\n",
        "89": "   * Returns a predicate that evaluates to {@code true} if the given predicate\n",
        "90": "   * evaluates to {@code false}.\n",
        "97": "   * Returns a predicate that evaluates to {@code true} if each of its\n",
        "98": "   * components evaluates to {@code true}. The components are evaluated in\n",
        "99": "   * order, and evaluation will be \"short-circuited\" as soon as a false\n",
        "100": "   * predicate is found. It defensively copies the iterable passed in, so future\n",
        "110": "   * Returns a predicate that evaluates to {@code true} if each of its\n",
        "111": "   * components evaluates to {@code true}. The components are evaluated in\n",
        "112": "   * order, and evaluation will be \"short-circuited\" as soon as a false\n",
        "113": "   * predicate is found. It defensively copies the array passed in, so future\n",
        "123": "   * Returns a predicate that evaluates to {@code true} if both of its\n",
        "124": "   * components evaluate to {@code true}. The components are evaluated in\n",
        "125": "   * order, and evaluation will be \"short-circuited\" as soon as a false\n",
        "126": "   * predicate is found.\n",
        "133": "   * Returns a predicate that evaluates to {@code true} if any one of its\n",
        "134": "   * components evaluates to {@code true}. The components are evaluated in\n",
        "135": "   * order, and evaluation will be \"short-circuited\" as soon as a\n",
        "136": "   * true predicate is found. It defensively copies the iterable passed in, so\n",
        "137": "   * future changes to it won't alter the behavior of this predicate. If {@code\n",
        "146": "   * Returns a predicate that evaluates to {@code true} if any one of its\n",
        "147": "   * components evaluates to {@code true}. The components are evaluated in\n",
        "148": "   * order, and evaluation will be \"short-circuited\" as soon as a\n",
        "149": "   * true predicate is found. It defensively copies the array passed in, so\n",
        "150": "   * future changes to it won't alter the behavior of this predicate. If {@code\n",
        "159": "   * Returns a predicate that evaluates to {@code true} if either of its\n",
        "160": "   * components evaluates to {@code true}. The components are evaluated in\n",
        "161": "   * order, and evaluation will be \"short-circuited\" as soon as a\n",
        "162": "   * true predicate is found.\n",
        "169": "   * Returns a predicate that evaluates to {@code true} if the object being\n",
        "170": "   * tested {@code equals()} the given target or both are null.\n",
        "177": "   * Returns a predicate that evaluates to {@code true} if the object being\n",
        "178": "   * tested is an instance of the given class. If the object being tested\n",
        "179": "   * is {@code null} this predicate evaluates to {@code false}.\n",
        "181": "   * <p>If you want to filter an {@code Iterable} to narrow its type, consider\n",
        "182": "   * using {@link com.google.common.collect.Iterables#filter(Iterable, Class)}\n",
        "183": "   * in preference.\n",
        "185": "   * <p><b>Warning:</b> contrary to the typical assumptions about predicates (as\n",
        "186": "   * documented at {@link Predicate#apply}), the returned predicate may not be\n",
        "187": "   * <i>consistent with equals</i>. For example, {@code\n",
        "188": "   * instanceOf(ArrayList.class)} will yield different results for the two equal\n",
        "197": "   * Returns a predicate that evaluates to {@code true} if the class being\n",
        "198": "   * tested is assignable from the given class.  The returned predicate\n",
        "199": "   * does not allow null inputs.\n",
        "210": "   * Returns a predicate that evaluates to {@code true} if the object reference\n",
        "211": "   * being tested is a member of the given collection. It does not defensively\n",
        "212": "   * copy the collection passed in, so future changes to it will alter the\n",
        "213": "   * behavior of the predicate.\n",
        "215": "   * <p>This method can technically accept any {@code Collection<?>}, but using\n",
        "216": "   * a typed collection helps prevent bugs. This approach doesn't block any\n",
        "217": "   * potential users since it is always possible to use {@code\n",
        "218": "   * Predicates.<Object>in()}.\n",
        "227": "   * Returns the composition of a function and a predicate. For every {@code x},\n",
        "228": "   * the generated predicate returns {@code predicate(function(x))}.\n",
        "238": "   * Returns a predicate that evaluates to {@code true} if the\n",
        "239": "   * {@code CharSequence} being tested contains any match for the given\n",
        "240": "   * regular expression pattern. The test used is equivalent to\n",
        "252": "   * Returns a predicate that evaluates to {@code true} if the\n",
        "253": "   * {@code CharSequence} being tested contains any match for the given\n",
        "254": "   * regular expression pattern. The test used is equivalent to\n",
        "667": "      String patternString = MoreObjects.toStringHelper(pattern)\n",
        "668": "          .add(\"pattern\", pattern.pattern())\n",
        "669": "          .add(\"pattern.flags\", pattern.flags())\n",
        "670": "          .toString();\n"
    }
}