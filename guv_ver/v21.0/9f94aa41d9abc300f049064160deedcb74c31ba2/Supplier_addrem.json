{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "21": " * A class that can supply objects of a single type. Semantically, this could be a factory,\n",
        "22": " * generator, builder, closure, or something else entirely. No guarantees are implied by this\n",
        "23": " * interface.\n",
        "31": "   * Retrieves an instance of the appropriate type. The returned object may or may not be a new\n",
        "32": "   * instance, depending on the implementation.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "23": " * A class that can supply objects of a single type.  Semantically, this could\n",
        "24": " * be a factory, generator, builder, closure, or something else entirely. No\n",
        "25": " * guarantees are implied by this interface.\n",
        "33": "   * Retrieves an instance of the appropriate type. The returned object may or\n",
        "34": "   * may not be a new instance, depending on the implementation.\n"
    }
}