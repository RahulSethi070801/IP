{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "36": " * converter.reverse().convert(converter.convert(a)).equals(a)} is always true). However, it is very\n",
        "37": " * common (perhaps <i>more</i> common) for round-trip conversion to be <i>lossy</i>. Consider an\n",
        "38": " * example round-trip using {@link com.google.common.primitives.Doubles#stringConverter}:\n",
        "43": " * <i>not</i> the same string ({@code \"1.00\"}) we started with\n",
        "58": " *\n",
        "64": " * <li>Use a provided converter implementation, such as {@link Enums#stringConverter},\n",
        "65": " *     {@link com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the\n",
        "66": " *     {@linkplain #reverse reverse} views of these.\n",
        "67": " * <li>Convert between specific preset values using\n",
        "68": " *     {@link com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to\n",
        "69": " *     create a \"fake\" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i>\n",
        "70": " *     the {@code Converter} type using a mocking framework.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "38": " * converter.reverse().convert(converter.convert(a)).equals(a)} is always true). However, it is\n",
        "39": " * very common (perhaps <i>more</i> common) for round-trip conversion to be <i>lossy</i>. Consider\n",
        "40": " * an example round-trip using {@link com.google.common.primitives.Doubles#stringConverter}:\n",
        "45": " *     <i>not</i> the same string ({@code \"1.00\"}) we started with\n",
        "60": "\n",
        "66": " * <li>Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link\n",
        "67": " *     com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain\n",
        "68": " *     #reverse reverse} views of these.\n",
        "69": " * <li>Convert between specific preset values using {@link\n",
        "70": " *     com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to create\n",
        "71": " *     a \"fake\" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i> the\n",
        "72": " *     {@code Converter} type using a mocking framework.\n"
    }
}