{"id": "9f94aa41d9abc300f049064160deedcb74c31ba2", "code": [{"0": "guava/src/com/google/common/annotations/Beta.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Signifies that a public API (public class, method or field) is subject to incompatible changes,\n", " * or even removal, in a future release. An API bearing this annotation is exempt from any\n", " * compatibility guarantees made by its containing library. Note that the presence of this\n", " * annotation implies nothing about the quality or performance of the API in question, only the fact\n", " * that it is not \"API-frozen.\"\n", " * <p>It is generally safe for <i>applications</i> to depend on beta APIs, at the cost of some extra\n", " * work during upgrades. However it is generally inadvisable for <i>libraries</i> (which get\n", " * included on users' CLASSPATHs, outside the library developers' control) to do so.\n", "  ElementType.ANNOTATION_TYPE,\n", "  ElementType.CONSTRUCTOR,\n", "  ElementType.FIELD,\n", "  ElementType.METHOD,\n", "  ElementType.TYPE\n", "})\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Signifies that a public API (public class, method or field) is subject to\n", " * incompatible changes, or even removal, in a future release. An API bearing\n", " * this annotation is exempt from any compatibility guarantees made by its\n", " * containing library. Note that the presence of this annotation implies nothing\n", " * about the quality or performance of the API in question, only the fact that\n", " * it is not \"API-frozen.\"\n", " * <p>It is generally safe for <i>applications</i> to depend on beta APIs, at\n", " * the cost of some extra work during upgrades. However it is generally\n", " * inadvisable for <i>libraries</i> (which get included on users' CLASSPATHs,\n", " * outside the library developers' control) to do so.\n", "    ElementType.ANNOTATION_TYPE,\n", "    ElementType.CONSTRUCTOR,\n", "    ElementType.FIELD,\n", "    ElementType.METHOD,\n", "    ElementType.TYPE})\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [24, 25, 26, 27, 28, 30, 31, 32, 39, 40, 41, 42, 43, 44]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 43, 44, 45, 46, 47]}}, {"1": "guava/src/com/google/common/annotations/GwtCompatible.java", "added": {"1": [" * The presence of this annotation on a type indicates that the type may be used with the\n", " * <a href=\"http://code.google.com/webtoolkit/\">Google Web Toolkit</a> (GWT). When applied to a\n", " * method, the return type of the method is GWT compatible. It's useful to indicate that an instance\n", " * created by factory methods has a GWT serializable type. In the following example,\n"], "2": ["@Target({ElementType.TYPE, ElementType.METHOD})\n"], "3": ["   * @see <a href=\n", "   *     \"http://code.google.com/webtoolkit/doc/latest/DevGuideServerCommunication.html#DevGuideSerializableTypes\">\n"], "4": ["   * @see <a href=\n", "   *     \"http://code.google.com/webtoolkit/doc/latest/DevGuideOrganizingProjects.html#DevGuideModules\">\n"]}, "removed": {"1": [" * The presence of this annotation on a type indicates that the type may be used with the <a\n", " * href=\"http://code.google.com/webtoolkit/\">Google Web Toolkit</a> (GWT). When applied to a method,\n", " * the return type of the method is GWT compatible. It's useful to indicate that an instance created\n", " * by factory methods has a GWT serializable type. In the following example,\n"], "2": ["@Target({ ElementType.TYPE, ElementType.METHOD })\n"], "3": ["   * @see <a href=\"http://code.google.com/webtoolkit/doc/latest/DevGuideServerCommunication.html#DevGuideSerializableTypes\">\n"], "4": ["   * @see <a href=\"http://code.google.com/webtoolkit/doc/latest/DevGuideOrganizingProjects.html#DevGuideModules\">\n"]}, "added_lines": {"1": [24, 25, 26, 27], "2": [62], "3": [71, 72], "4": [81, 82]}, "removed_lines": {"1": [24, 25, 26, 27], "2": [62], "3": [71], "4": [80]}}, {"2": "guava/src/com/google/common/annotations/GwtIncompatible.java", "added": {"1": [" * <p>This annotation behaves identically to <a href=\n", " * \"http://www.gwtproject.org/javadoc/latest/com/google/gwt/core/shared/GwtIncompatible.html\">the\n"], "2": ["   * <p>As of Guava 20.0, this value is optional. We encourage authors who wish to describe why an\n", "   * API is {@code @GwtIncompatible} to instead leave an implementation comment.\n"]}, "removed": {"1": [" * <p>This annotation behaves identically to <a\n", " * href=\"http://www.gwtproject.org/javadoc/latest/com/google/gwt/core/shared/GwtIncompatible.html\">the\n"], "2": ["   * <p>As of Guava 20.0, this value is optional. We encourage authors who wish to describe why\n", "   * an API is {@code @GwtIncompatible} to instead leave an implementation comment.\n"]}, "added_lines": {"1": [27, 28], "2": [43, 44]}, "removed_lines": {"1": [27, 28], "2": [43, 44]}}, {"3": "guava/src/com/google/common/annotations/VisibleForTesting.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n", " * Annotates a program element that exists, or is more widely visible than otherwise necessary, only\n", " * for use in test code.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " * Annotates a program element that exists, or is more widely visible than\n", " * otherwise necessary, only for use in test code.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12, 18, 19]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14, 20, 21]}}, {"4": "guava/src/com/google/common/annotations/package-info.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"5": "guava/src/com/google/common/base/Absent.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"6": "guava/src/com/google/common/base/AbstractIterator.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Note this class is a copy of {@link com.google.common.collect.AbstractIterator} (for dependency\n", " * reasons).\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Note this class is a copy of\n", " * {@link com.google.common.collect.AbstractIterator} (for dependency reasons).\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [26, 27]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [28, 29]}}, {"7": "guava/src/com/google/common/base/Ascii.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static methods pertaining to ASCII characters (those in the range of values {@code 0x00} through\n", " * {@code 0x7F}), and to strings containing such characters.\n", " * <li>{@link CharMatcher#ASCII} matches ASCII characters and provides text processing methods which\n", " * operate only on the ASCII characters of a string.\n"], "3": ["   * Null ('\\0'): The all-zeros character which may serve to accomplish time fill and media fill.\n", "   * Normally used as a C string terminator. <p>Although RFC 20 names this as \"Null\", note that it\n", "   * is distinct from the C/C++ \"NULL\" pointer.\n", "   * Start of Heading: A communication control character used at the beginning of a sequence of\n", "   * characters which constitute a machine-sensible address or routing information. Such a sequence\n", "   * is referred to as the \"heading.\" An STX character has the effect of terminating a heading.\n", "   * Start of Text: A communication control character which precedes a sequence of characters that\n", "   * is to be treated as an entity and entirely transmitted through to the ultimate destination.\n", "   * Such a sequence is referred to as \"text.\" STX may be used to terminate a sequence of characters\n", "   * started by SOH.\n", "   * End of Text: A communication control character used to terminate a sequence of characters\n", "   * started with STX and transmitted as an entity.\n", "   * End of Transmission: A communication control character used to indicate the conclusion of a\n", "   * transmission, which may have contained one or more texts and any associated headings.\n", "   * Enquiry: A communication control character used in data communication systems as a request for\n", "   * a response from a remote station. It may be used as a \"Who Are You\" (WRU) to obtain\n"], "4": ["   * Acknowledge: A communication control character transmitted by a receiver as an affirmative\n", "   * response to a sender.\n", "   * Bell ('\\a'): A character for use when there is a need to call for human attention. It may\n", "   * control alarm or attention devices.\n", "   * Backspace ('\\b'): A format effector which controls the movement of the printing position one\n", "   * printing space backward on the same printing line. (Applicable also to display devices.)\n", "   * Horizontal Tabulation ('\\t'): A format effector which controls the movement of the printing\n", "   * position to the next in a series of predetermined positions along the printing line.\n", "   * (Applicable also to display devices and the skip function on punched cards.)\n", "   * Line Feed ('\\n'): A format effector which controls the movement of the printing position to the\n", "   * next printing line. (Applicable also to display devices.) Where appropriate, this character may\n", "   * have the meaning \"New Line\" (NL), a format effector which controls the movement of the printing\n", "   * point to the first printing position on the next printing line. Use of this convention requires\n", "   * agreement between sender and recipient of data.\n", "   * Alternate name for {@link #LF}. ({@code LF} is preferred.)\n", "   * Vertical Tabulation ('\\v'): A format effector which controls the movement of the printing\n", "   * position to the next in a series of predetermined printing lines. (Applicable also to display\n", "   * devices.)\n", "   * Form Feed ('\\f'): A format effector which controls the movement of the printing position to the\n", "   * first pre-determined printing line on the next form or page. (Applicable also to display\n", "   * devices.)\n", "   * Carriage Return ('\\r'): A format effector which controls the movement of the printing position\n", "   * to the first printing position on the same printing line. (Applicable also to display devices.)\n", "   * Shift Out: A control character indicating that the code combinations which follow shall be\n", "   * interpreted as outside of the character set of the standard code table until a Shift In\n", "   * character is reached.\n", "   * Shift In: A control character indicating that the code combinations which follow shall be\n", "   * interpreted according to the standard code table.\n", "   * Data Link Escape: A communication control character which will change the meaning of a limited\n", "   * number of contiguously following characters. It is used exclusively to provide supplementary\n", "   * controls in data communication networks.\n", "   * Device Control 1. Characters for the control of ancillary devices associated with data\n", "   * processing or telecommunication systems, more especially switching devices \"on\" or \"off.\" (If a\n", "   * single \"stop\" control is required to interrupt or turn off ancillary devices, DC4 is the\n", "   * preferred assignment.)\n", "   * Transmission On: Although originally defined as DC1, this ASCII control character is now better\n", "   * known as the XON code used for software flow control in serial communications. The main use is\n", "   * restarting the transmission after the communication has been stopped by the XOFF control code.\n", "   * Device Control 2. Characters for the control of ancillary devices associated with data\n", "   * processing or telecommunication systems, more especially switching devices \"on\" or \"off.\" (If a\n", "   * single \"stop\" control is required to interrupt or turn off ancillary devices, DC4 is the\n", "   * preferred assignment.)\n", "   * Device Control 3. Characters for the control of ancillary devices associated with data\n", "   * processing or telecommunication systems, more especially switching devices \"on\" or \"off.\" (If a\n", "   * single \"stop\" control is required to interrupt or turn off ancillary devices, DC4 is the\n", "   * preferred assignment.)\n"], "5": ["   * Device Control 4. Characters for the control of ancillary devices associated with data\n", "   * processing or telecommunication systems, more especially switching devices \"on\" or \"off.\" (If a\n", "   * single \"stop\" control is required to interrupt or turn off ancillary devices, DC4 is the\n", "   * preferred assignment.)\n", "   * Negative Acknowledge: A communication control character transmitted by a receiver as a negative\n", "   * response to the sender.\n", "   * Synchronous Idle: A communication control character used by a synchronous transmission system\n", "   * in the absence of any other character to provide a signal from which synchronism may be\n", "   * achieved or retained.\n", "   * End of Transmission Block: A communication control character used to indicate the end of a\n", "   * block of data for communication purposes. ETB is used for blocking data where the block\n", "   * structure is not necessarily related to the processing format.\n", "   * Cancel: A control character used to indicate that the data with which it is sent is in error or\n", "   * is to be disregarded.\n", "   * End of Medium: A control character associated with the sent data which may be used to identify\n", "   * the physical end of the medium, or the end of the used, or wanted, portion of information\n", "   * recorded on a medium. (The position of this character does not necessarily correspond to the\n", "   * physical end of the medium.)\n", "   * Substitute: A character that may be substituted for a character which is determined to be\n", "   * invalid or in error.\n", "   * Escape: A control character intended to provide code extension (supplementary characters) in\n", "   * general information interchange. The Escape character itself is a prefix affecting the\n", "   * interpretation of a limited number of contiguously following characters.\n", "   * File Separator: These four information separators may be used within data in optional fashion,\n", "   * except that their hierarchical relationship shall be: FS is the most inclusive, then GS, then\n", "   * RS, and US is least inclusive. (The content and length of a File, Group, Record, or Unit are\n", "   * not specified.)\n", "   * Group Separator: These four information separators may be used within data in optional fashion,\n", "   * except that their hierarchical relationship shall be: FS is the most inclusive, then GS, then\n", "   * RS, and US is least inclusive. (The content and length of a File, Group, Record, or Unit are\n", "   * not specified.)\n", "   * Record Separator: These four information separators may be used within data in optional\n", "   * fashion, except that their hierarchical relationship shall be: FS is the most inclusive, then\n", "   * GS, then RS, and US is least inclusive. (The content and length of a File, Group, Record, or\n", "   * Unit are not specified.)\n", "   * Unit Separator: These four information separators may be used within data in optional fashion,\n", "   * except that their hierarchical relationship shall be: FS is the most inclusive, then GS, then\n", "   * RS, and US is least inclusive. (The content and length of a File, Group, Record, or Unit are\n", "   * not specified.)\n", "   * Space: A normally non-printing graphic character used to separate words. It is also a format\n", "   * effector which controls the movement of the printing position, one printing position forward.\n"], "6": ["   * Delete: This character is used primarily to \"erase\" or \"obliterate\" erroneous or unwanted\n", "   * characters in perforated tape.\n"], "7": ["   * <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use\n", "   * with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe\n", "   * for use with it (such as all-ASCII text) and for simple debugging text. When using this method,\n", "   * consider the following:\n", "   * <li>it may split surrogate pairs</li>\n", "   * <li>it may split characters and combining characters</li>\n", "   * <li>it does not consider word boundaries</li>\n", "   * <li>if truncating for display to users, there are other considerations that must be taken into\n", "   * account</li>\n", "   * <li>the appropriate truncation indicator may be locale-dependent</li>\n", "   * <li>it is safe to use non-ASCII characters in the truncation indicator</li>\n"], "8": ["   * {@link String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used, the\n", "   * author probably wanted the behavior provided by this method rather than the subtle and\n"], "9": ["   * Returns the non-negative index value of the alpha character {@code c}, regardless of case. Ie,\n", "   * 'a'/'A' returns 0 and 'z'/'Z' returns 25. Non-alpha characters return a value of 26 or greater.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static methods pertaining to ASCII characters (those in the range of values\n", " * {@code 0x00} through {@code 0x7F}), and to strings containing such\n", " * characters.\n", " * <li>{@link CharMatcher#ASCII} matches ASCII characters and provides text processing methods\n", " *     which operate only on the ASCII characters of a string.\n"], "3": ["   * Null ('\\0'): The all-zeros character which may serve to accomplish\n", "   * time fill and media fill.  Normally used as a C string terminator.\n", "   * <p>Although RFC 20 names this as \"Null\", note that it is distinct\n", "   * from the C/C++ \"NULL\" pointer.\n", "   * Start of Heading: A communication control character used at\n", "   * the beginning of a sequence of characters which constitute a\n", "   * machine-sensible address or routing information.  Such a sequence is\n", "   * referred to as the \"heading.\"  An STX character has the effect of\n", "   * terminating a heading.\n", "   * Start of Text: A communication control character which\n", "   * precedes a sequence of characters that is to be treated as an entity\n", "   * and entirely transmitted through to the ultimate destination.  Such a\n", "   * sequence is referred to as \"text.\"  STX may be used to terminate a\n", "   * sequence of characters started by SOH.\n", "   * End of Text: A communication control character used to\n", "   * terminate a sequence of characters started with STX and transmitted\n", "   * as an entity.\n", "   * End of Transmission: A communication control character used\n", "   * to indicate the conclusion of a transmission, which may have\n", "   * contained one or more texts and any associated headings.\n", "   * Enquiry: A communication control character used in data\n", "   * communication systems as a request for a response from a remote\n", "   * station.  It may be used as a \"Who Are You\" (WRU) to obtain\n"], "4": ["   * Acknowledge: A communication control character transmitted\n", "   * by a receiver as an affirmative response to a sender.\n", "   * Bell ('\\a'): A character for use when there is a need to call for\n", "   * human attention.  It may control alarm or attention devices.\n", "   * Backspace ('\\b'): A format effector which controls the movement of\n", "   * the printing position one printing space backward on the same\n", "   * printing line.  (Applicable also to display devices.)\n", "   * Horizontal Tabulation ('\\t'): A format effector which controls the\n", "   * movement of the printing position to the next in a series of\n", "   * predetermined positions along the printing line.  (Applicable also to\n", "   * display devices and the skip function on punched cards.)\n", "   * Line Feed ('\\n'): A format effector which controls the movement of\n", "   * the printing position to the next printing line.  (Applicable also to\n", "   * display devices.) Where appropriate, this character may have the\n", "   * meaning \"New Line\" (NL), a format effector which controls the\n", "   * movement of the printing point to the first printing position on the\n", "   * next printing line.  Use of this convention requires agreement\n", "   * between sender and recipient of data.\n", "   * Alternate name for {@link #LF}.  ({@code LF} is preferred.)\n", "   * Vertical Tabulation ('\\v'): A format effector which controls the\n", "   * movement of the printing position to the next in a series of\n", "   * predetermined printing lines.  (Applicable also to display devices.)\n", "   * Form Feed ('\\f'): A format effector which controls the movement of\n", "   * the printing position to the first pre-determined printing line on\n", "   * the next form or page.  (Applicable also to display devices.)\n", "   * Carriage Return ('\\r'): A format effector which controls the\n", "   * movement of the printing position to the first printing position on\n", "   * the same printing line.  (Applicable also to display devices.)\n", "   * Shift Out: A control character indicating that the code\n", "   * combinations which follow shall be interpreted as outside of the\n", "   * character set of the standard code table until a Shift In character\n", "   * is reached.\n", "   * Shift In: A control character indicating that the code\n", "   * combinations which follow shall be interpreted according to the\n", "   * standard code table.\n", "   * Data Link Escape: A communication control character which\n", "   * will change the meaning of a limited number of contiguously following\n", "   * characters.  It is used exclusively to provide supplementary controls\n", "   * in data communication networks.\n", "   * Device Control 1. Characters for the control\n", "   * of ancillary devices associated with data processing or\n", "   * telecommunication systems, more especially switching devices \"on\" or\n", "   * \"off.\"  (If a single \"stop\" control is required to interrupt or turn\n", "   * off ancillary devices, DC4 is the preferred assignment.)\n", "   * Transmission On: Although originally defined as DC1, this ASCII\n", "   * control character is now better known as the XON code used for software\n", "   * flow control in serial communications.  The main use is restarting\n", "   * the transmission after the communication has been stopped by the XOFF\n", "   * control code.\n", "   * Device Control 2. Characters for the control\n", "   * of ancillary devices associated with data processing or\n", "   * telecommunication systems, more especially switching devices \"on\" or\n", "   * \"off.\"  (If a single \"stop\" control is required to interrupt or turn\n", "   * off ancillary devices, DC4 is the preferred assignment.)\n", "   * Device Control 3. Characters for the control\n", "   * of ancillary devices associated with data processing or\n", "   * telecommunication systems, more especially switching devices \"on\" or\n", "   * \"off.\"  (If a single \"stop\" control is required to interrupt or turn\n", "   * off ancillary devices, DC4 is the preferred assignment.)\n"], "5": ["   * Device Control 4. Characters for the control\n", "   * of ancillary devices associated with data processing or\n", "   * telecommunication systems, more especially switching devices \"on\" or\n", "   * \"off.\"  (If a single \"stop\" control is required to interrupt or turn\n", "   * off ancillary devices, DC4 is the preferred assignment.)\n", "   * Negative Acknowledge: A communication control character\n", "   * transmitted by a receiver as a negative response to the sender.\n", "   * Synchronous Idle: A communication control character used by\n", "   * a synchronous transmission system in the absence of any other\n", "   * character to provide a signal from which synchronism may be achieved\n", "   * or retained.\n", "   * End of Transmission Block: A communication control character\n", "   * used to indicate the end of a block of data for communication\n", "   * purposes.  ETB is used for blocking data where the block structure is\n", "   * not necessarily related to the processing format.\n", "   * Cancel: A control character used to indicate that the data\n", "   * with which it is sent is in error or is to be disregarded.\n", "   * End of Medium: A control character associated with the sent\n", "   * data which may be used to identify the physical end of the medium, or\n", "   * the end of the used, or wanted, portion of information recorded on a\n", "   * medium.  (The position of this character does not necessarily\n", "   * correspond to the physical end of the medium.)\n", "   * Substitute: A character that may be substituted for a\n", "   * character which is determined to be invalid or in error.\n", "   * Escape: A control character intended to provide code\n", "   * extension (supplementary characters) in general information\n", "   * interchange.  The Escape character itself is a prefix affecting the\n", "   * interpretation of a limited number of contiguously following\n", "   * characters.\n", "   * File Separator: These four information separators may be\n", "   * used within data in optional fashion, except that their hierarchical\n", "   * relationship shall be: FS is the most inclusive, then GS, then RS,\n", "   * and US is least inclusive.  (The content and length of a File, Group,\n", "   * Record, or Unit are not specified.)\n", "   * Group Separator: These four information separators may be\n", "   * used within data in optional fashion, except that their hierarchical\n", "   * relationship shall be: FS is the most inclusive, then GS, then RS,\n", "   * and US is least inclusive.  (The content and length of a File, Group,\n", "   * Record, or Unit are not specified.)\n", "   * Record Separator: These four information separators may be\n", "   * used within data in optional fashion, except that their hierarchical\n", "   * relationship shall be: FS is the most inclusive, then GS, then RS,\n", "   * and US is least inclusive.  (The content and length of a File, Group,\n", "   * Record, or Unit are not specified.)\n", "   * Unit Separator: These four information separators may be\n", "   * used within data in optional fashion, except that their hierarchical\n", "   * relationship shall be: FS is the most inclusive, then GS, then RS,\n", "   * and US is least inclusive.  (The content and length of a File, Group,\n", "   * Record, or Unit are not specified.)\n", "   * Space: A normally non-printing graphic character used to\n", "   * separate words.  It is also a format effector which controls the\n", "   * movement of the printing position, one printing position forward.\n"], "6": ["   * Delete: This character is used primarily to \"erase\" or\n", "   * \"obliterate\" erroneous or unwanted characters in perforated tape.\n"], "7": ["   * <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for\n", "   * use with arbitrary Unicode text. It is mostly intended for use with text that is known to be\n", "   * safe for use with it (such as all-ASCII text) and for simple debugging text. When using this\n", "   * method, consider the following:\n", "   *   <li>it may split surrogate pairs</li>\n", "   *   <li>it may split characters and combining characters</li>\n", "   *   <li>it does not consider word boundaries</li>\n", "   *   <li>if truncating for display to users, there are other considerations that must be taken\n", "   *   into account</li>\n", "   *   <li>the appropriate truncation indicator may be locale-dependent</li>\n", "   *   <li>it is safe to use non-ASCII characters in the truncation indicator</li>\n"], "8": ["   * {@link String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used,\n", "   * the author probably wanted the behavior provided by this method rather than the subtle and\n"], "9": ["   * Returns the non-negative index value of the alpha character {@code c}, regardless of case.\n", "   * Ie, 'a'/'A' returns 0 and 'z'/'Z' returns 25. Non-alpha characters return a value of 26 or\n", "   * greater.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [24, 25, 31, 32], "3": [46, 47, 48, 55, 56, 57, 64, 65, 66, 67, 74, 75, 82, 83, 90, 91], "4": [99, 100, 107, 108, 115, 116, 123, 124, 125, 132, 133, 134, 135, 136, 143, 150, 151, 152, 159, 160, 161, 168, 169, 176, 177, 178, 185, 186, 193, 194, 195, 202, 203, 204, 205, 212, 213, 214, 221, 222, 223, 224, 231, 232, 233, 234], "5": [248, 249, 250, 251, 258, 259, 266, 267, 268, 275, 276, 277, 284, 285, 292, 293, 294, 295, 302, 303, 310, 311, 312, 319, 320, 321, 322, 329, 330, 331, 332, 339, 340, 341, 342, 349, 350, 351, 352, 359, 360], "6": [375, 376], "7": [526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538], "8": [590, 591], "9": [624, 625]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [26, 27, 28, 34, 35], "3": [49, 50, 51, 52, 59, 60, 61, 62, 63, 70, 71, 72, 73, 74, 81, 82, 83, 90, 91, 92, 99, 100, 101], "4": [109, 110, 117, 118, 125, 126, 127, 134, 135, 136, 137, 144, 145, 146, 147, 148, 149, 150, 157, 164, 165, 166, 173, 174, 175, 182, 183, 184, 191, 192, 193, 194, 201, 202, 203, 210, 211, 212, 213, 220, 221, 222, 223, 224, 231, 232, 233, 234, 235, 242, 243, 244, 245, 246, 253, 254, 255, 256, 257], "5": [271, 272, 273, 274, 275, 282, 283, 290, 291, 292, 293, 300, 301, 302, 303, 310, 311, 318, 319, 320, 321, 322, 329, 330, 337, 338, 339, 340, 341, 348, 349, 350, 351, 352, 359, 360, 361, 362, 363, 370, 371, 372, 373, 374, 381, 382, 383, 384, 385, 392, 393, 394], "6": [409, 410], "7": [560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572], "8": [624, 625], "9": [658, 659, 660]}}, {"8": "guava/src/com/google/common/base/CaseFormat.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"9": "guava/src/com/google/common/base/CharMatcher.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/StringsExplained#charmatcher\">{@code CharMatcher}\n", " * </a>.\n"], "3": ["   * illustrated\n", "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n", "   * This is not the same definition used by other Java APIs. (See a\n", "   * <a href=\"http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ\">comparison of several\n", "   * <p><b>Note:</b> as the Unicode definition evolves, we will modify this matcher to keep it up to\n", "   * date.\n"], "4": ["   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D\">Unicode</a>. If\n", "   * you only care to match ASCII digits, you can use {@code inRange('0', '9')}.\n"], "5": ["   * Determines whether a character is a letter or digit according to\n", "   * {@linkplain Character#isLetterOrDigit(char) Java's definition}.\n"], "6": ["   * Determines whether a character is upper case according to\n", "   * {@linkplain Character#isUpperCase(char) Java's definition}.\n"], "7": ["   * Determines whether a character is lower case according to\n", "   * {@linkplain Character#isLowerCase(char) Java's definition}.\n"], "8": ["   * Determines whether a character is an ISO control character as specified by\n", "   * {@link Character#isISOControl(char)}.\n"], "9": ["   * illustrated\n", "   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n", "   * This is not the same definition used by other Java APIs. (See a\n", "   * <a href=\"http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ\">comparison of several\n"], "10": ["   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D\">Unicode</a>. If\n", "   * you only care to match ASCII digits, you can use {@code inRange('0', '9')}.\n"], "11": ["   * Determines whether a character is a letter or digit according to\n", "   * {@linkplain Character#isLetterOrDigit(char) Java's definition}.\n", "   * Determines whether a character is upper case according to\n", "   * {@linkplain Character#isUpperCase(char) Java's definition}.\n", "   * Determines whether a character is lower case according to\n", "   * {@linkplain Character#isLowerCase(char) Java's definition}.\n", "   * Determines whether a character is an ISO control character as specified by\n", "   * {@link Character#isISOControl(char)}.\n"], "12": ["   * This is the actual implementation of {@link #precomputed}, but we bounce calls through a method\n", "   * on {@link Platform} so that we can have different behavior in GWT.\n", "   * <p>This implementation tries to be smart in a number of ways. It recognizes cases where the\n", "   * negation is cheaper to precompute than the matcher itself; it tries to build small hash tables\n", "   * for matchers that only match a few characters, and so on. In the worst-case scenario, it\n", "   * constructs an eight-kilobyte bit array and queries that. In many situations this produces a\n", "   * matcher which is faster to query than the original.\n"], "13": ["   *     the sequence is empty\n"], "14": ["   *     the sequence is empty\n"], "15": ["   * <p>The default implementation iterates over the sequence in forward order calling\n", "   * {@link #matches} for each character.\n"], "16": ["   *     or {@code -1} if no character matches\n"], "17": ["   * <p>The default implementation iterates over the sequence in reverse order calling\n", "   * {@link #matches} for each character.\n"], "18": ["   *     character in {@code sequence}\n"], "19": ["   *     character in {@code sequence}\n"], "20": ["   *     matching characters in {@code sequence}\n"], "21": ["        \"\\u0000\\u007f\\u00ad\\u0600\\u061c\\u06dd\\u070f\\u1680\\u180e\\u2000\\u2028\\u205f\\u2066\\u2067\"\n", "            + \"\\u2068\\u2069\\u206a\\u3000\\ud800\\ufeff\\ufff9\\ufffa\";\n", "        \"\\u0020\\u00a0\\u00ad\\u0604\\u061c\\u06dd\\u070f\\u1680\\u180e\\u200f\\u202f\\u2064\\u2066\\u2067\"\n", "            + \"\\u2068\\u2069\\u206f\\u3000\\uf8ff\\ufeff\\ufff9\\ufffb\";\n", "      super(\"CharMatcher.invisible()\", RANGE_STARTS.toCharArray(), RANGE_ENDS.toCharArray());\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/StringsExplained#charmatcher\">\n", " * {@code CharMatcher}</a>.\n"], "3": ["   * illustrated <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n", "   * This is not the same definition used by other Java APIs. (See a <a\n", "   * href=\"http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ\">comparison of several\n", "   * <p><b>Note:</b> as the Unicode definition evolves, we will modify this matcher to keep it up\n", "   * to date.\n"], "4": ["   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D\">Unicode</a>.\n", "   * If you only care to match ASCII digits, you can use {@code inRange('0', '9')}.\n"], "5": ["   * Determines whether a character is a letter or digit according to {@linkplain\n", "   * Character#isLetterOrDigit(char) Java's definition}.\n"], "6": ["   * Determines whether a character is upper case according to {@linkplain\n", "   * Character#isUpperCase(char) Java's definition}.\n"], "7": ["   * Determines whether a character is lower case according to {@linkplain\n", "   * Character#isLowerCase(char) Java's definition}.\n"], "8": ["   * Determines whether a character is an ISO control character as specified by {@link\n", "   * Character#isISOControl(char)}.\n"], "9": ["   * illustrated <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D\">here</a>.\n", "   * This is not the same definition used by other Java APIs. (See a <a\n", "   * href=\"http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ\">comparison of several\n"], "10": ["   * <a href=\"http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D\">Unicode</a>.\n", "   * If you only care to match ASCII digits, you can use {@code inRange('0', '9')}.\n"], "11": ["   * Determines whether a character is a letter or digit according to {@linkplain\n", "   * Character#isLetterOrDigit(char) Java's definition}.\n", "   * Determines whether a character is upper case according to {@linkplain\n", "   * Character#isUpperCase(char) Java's definition}.\n", "   * Determines whether a character is lower case according to {@linkplain\n", "   * Character#isLowerCase(char) Java's definition}.\n", "   * Determines whether a character is an ISO control character as specified by {@link\n", "   * Character#isISOControl(char)}.\n"], "12": ["   * This is the actual implementation of {@link #precomputed}, but we bounce calls through a\n", "   * method on {@link Platform} so that we can have different behavior in GWT.\n", "   * <p>This implementation tries to be smart in a number of ways.  It recognizes cases where\n", "   * the negation is cheaper to precompute than the matcher itself; it tries to build small\n", "   * hash tables for matchers that only match a few characters, and so on.  In the worst-case\n", "   * scenario, it constructs an eight-kilobyte bit array and queries that.\n", "   * In many situations this produces a matcher which is faster to query than the original.\n"], "13": ["   *         the sequence is empty\n"], "14": ["   *         the sequence is empty\n"], "15": ["   * <p>The default implementation iterates over the sequence in forward order calling {@link\n", "   * #matches} for each character.\n"], "16": ["   *         or {@code -1} if no character matches\n"], "17": ["   * <p>The default implementation iterates over the sequence in reverse order calling {@link\n", "   * #matches} for each character.\n"], "18": ["   *        character in {@code sequence}\n"], "19": ["   *        character in {@code sequence}\n"], "20": ["   *        matching characters in {@code sequence}\n"], "21": ["      \"\\u0000\\u007f\\u00ad\\u0600\\u061c\\u06dd\\u070f\\u1680\\u180e\\u2000\\u2028\\u205f\\u2066\\u2067\"\n", "          + \"\\u2068\\u2069\\u206a\\u3000\\ud800\\ufeff\\ufff9\\ufffa\";\n", "      \"\\u0020\\u00a0\\u00ad\\u0604\\u061c\\u06dd\\u070f\\u1680\\u180e\\u200f\\u202f\\u2064\\u2066\\u2067\"\n", "          + \"\\u2068\\u2069\\u206f\\u3000\\uf8ff\\ufeff\\ufff9\\ufffb\";\n", "      super(\n", "          \"CharMatcher.invisible()\",\n", "          RANGE_STARTS.toCharArray(),\n", "          RANGE_ENDS.toCharArray());\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [46, 47, 48], "3": [79, 80, 81, 82, 85, 86], "4": [116, 117], "5": [148, 149], "6": [158, 159], "7": [168, 169], "8": [178, 179], "9": [217, 218, 219, 220], "10": [244, 245], "11": [264, 265, 270, 271, 276, 277, 282, 283], "12": [426, 427, 429, 430, 431, 432, 433], "13": [528], "14": [548], "15": [558, 559], "16": [579], "17": [598, 599], "18": [689], "19": [721], "20": [838], "21": [1458, 1459, 1461, 1462, 1467]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [48, 49, 50], "3": [81, 82, 83, 86, 87], "4": [117, 118], "5": [149, 150], "6": [159, 160], "7": [169, 170], "8": [179, 180], "9": [218, 219, 220], "10": [244, 245], "11": [264, 265, 270, 271, 276, 277, 282, 283], "12": [426, 427, 429, 430, 431, 432, 433], "13": [528], "14": [548], "15": [558, 559], "16": [579], "17": [598, 599], "18": [689], "19": [721], "20": [838], "21": [1458, 1459, 1461, 1462, 1467, 1468, 1469, 1470]}}, {"10": "guava/src/com/google/common/base/Charsets.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/StringsExplained#charsets\">{@code Charsets}</a>.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide article on <a\n", " * href=\"https://github.com/google/guava/wiki/StringsExplained#charsets\">\n", " * {@code Charsets}</a>.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [28, 29]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [30, 31, 32]}}, {"11": "guava/src/com/google/common/base/Converter.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * converter.reverse().convert(converter.convert(a)).equals(a)} is always true). However, it is very\n", " * common (perhaps <i>more</i> common) for round-trip conversion to be <i>lossy</i>. Consider an\n", " * example round-trip using {@link com.google.common.primitives.Doubles#stringConverter}:\n", " * <i>not</i> the same string ({@code \"1.00\"}) we started with\n"], "3": [" *\n", " * <li>Use a provided converter implementation, such as {@link Enums#stringConverter},\n", " *     {@link com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the\n", " *     {@linkplain #reverse reverse} views of these.\n", " * <li>Convert between specific preset values using\n", " *     {@link com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to\n", " *     create a \"fake\" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i>\n", " *     the {@code Converter} type using a mocking framework.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * converter.reverse().convert(converter.convert(a)).equals(a)} is always true). However, it is\n", " * very common (perhaps <i>more</i> common) for round-trip conversion to be <i>lossy</i>. Consider\n", " * an example round-trip using {@link com.google.common.primitives.Doubles#stringConverter}:\n", " *     <i>not</i> the same string ({@code \"1.00\"}) we started with\n"], "3": ["\n", " * <li>Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link\n", " *     com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain\n", " *     #reverse reverse} views of these.\n", " * <li>Convert between specific preset values using {@link\n", " *     com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to create\n", " *     a \"fake\" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i> the\n", " *     {@code Converter} type using a mocking framework.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [36, 37, 38, 43], "3": [58, 64, 65, 66, 67, 68, 69, 70]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [38, 39, 40, 45], "3": [60, 66, 67, 68, 69, 70, 71, 72]}}, {"12": "guava/src/com/google/common/base/Defaults.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"13": "guava/src/com/google/common/base/Enums.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": ["   * converter will throw an {@code IllegalArgumentException} if the argument is not the name of any\n", "   * enum constant in the specified enum.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": ["   * converter will throw an {@code IllegalArgumentException} if the argument is not the name of\n", "   * any enum constant in the specified enum.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [110, 111]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [112, 113]}}, {"14": "guava/src/com/google/common/base/Equivalence.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * @since 10.0 (<a href=\"https://github.com/google/guava/wiki/Compatibility\">mostly\n", " *     source-compatible</a> since 4.0)\n"], "3": ["   * <p>Called by {@link #equivalent}. {@code a} and {@code b} are not the same object and are not\n", "   * nulls.\n"], "4": ["   *     that the hash be distributable across <i>inequivalence</i>. If {@code equivalence(x, y)} is\n", "   *     false, {@code hash(x) == hash(y)} may still be true.\n"], "5": ["   * equivalent results. For example,\n", "   * {@code Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken because it's\n", "   * not guaranteed that {@link Object#toString}) always returns the same string instance.\n"], "6": ["   * Returns a wrapper of {@code reference} that implements {@link Wrapper#equals(Object)\n", "   * Object.equals()} such that {@code wrap(a).equals(wrap(b))} if and only if\n", "   * {@code equivalent(a, b)}.\n"], "7": ["   * Returns an equivalence over iterables based on the equivalence of their elements. More\n", "   * elements, and each pair of corresponding elements is equivalent according to {@code this}. Null\n", "   * iterables are equivalent to one another.\n", "   * <p>Note that this method performs a similar function for equivalences as\n", "   * {@link com.google.common.collect.Ordering#lexicographical} does for orderings.\n"], "8": ["   * Returns a predicate that evaluates to true if and only if the input is equivalent to\n", "   * {@code target} according to this equivalence relation.\n"], "9": ["   * Returns an equivalence that uses {@code ==} to compare values and\n", "   * {@link System#identityHashCode(Object)} to compute the hash code.\n", "   * {@link Equivalence#equivalent} returns {@code true} if {@code a == b}, including in the case\n", "   * that a and b are both null.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * @since 10.0 (<a href=\"https://github.com/google/guava/wiki/Compatibility\"\n", " *        >mostly source-compatible</a> since 4.0)\n"], "3": ["   * <p>Called by {@link #equivalent}. {@code a} and {@code b} are not the same\n", "   * object and are not nulls.\n"], "4": ["   *     that the hash be distributable across <i>inequivalence</i>. If {@code equivalence(x, y)}\n", "   *     is false, {@code hash(x) == hash(y)} may still be true.\n"], "5": ["   * equivalent results.\n", "   * For example, {@code Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken\n", "   * because it's not guaranteed that {@link Object#toString}) always returns the same string\n", "   * instance.\n"], "6": ["   * Returns a wrapper of {@code reference} that implements\n", "   * {@link Wrapper#equals(Object) Object.equals()} such that\n", "   * {@code wrap(a).equals(wrap(b))} if and only if {@code equivalent(a, b)}.\n"], "7": ["   * Returns an equivalence over iterables based on the equivalence of their elements.  More\n", "   * elements, and each pair of corresponding elements is equivalent according to\n", "   * {@code this}.  Null iterables are equivalent to one another.\n", "   * <p>Note that this method performs a similar function for equivalences as {@link\n", "   * com.google.common.collect.Ordering#lexicographical} does for orderings.\n"], "8": ["   * Returns a predicate that evaluates to true if and only if the input is\n", "   * equivalent to {@code target} according to this equivalence relation.\n"], "9": ["   * Returns an equivalence that uses {@code ==} to compare values and {@link\n", "   * System#identityHashCode(Object)} to compute the hash code.  {@link Equivalence#equivalent}\n", "   * returns {@code true} if {@code a == b}, including in the case that a and b are both null.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [34, 35], "3": [75, 76], "4": [93, 94], "5": [130, 131, 132], "6": [141, 142, 143], "7": [231, 233, 234, 236, 237], "8": [249, 250], "9": [314, 315, 316, 317]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [36, 37], "3": [77, 78], "4": [95, 96], "5": [132, 133, 134, 135], "6": [144, 145, 146], "7": [234, 236, 237, 239, 240], "8": [252, 253], "9": [317, 318, 319]}}, {"15": "guava/src/com/google/common/base/FinalizablePhantomReference.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"16": "guava/src/com/google/common/base/FinalizableReference.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"17": "guava/src/com/google/common/base/FinalizableReferenceQueue.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>As an example of how this is used, imagine you have a class {@code MyServer} that creates a a\n", " * {@link java.net.ServerSocket ServerSocket}, and you would like to ensure that the\n", " * calling its {@code close} method. You <em>could</em> use a finalizer to accomplish this, but that\n", " * has a number of well-known problems. Here is how you might use this class instead:\n"], "3": ["   * System class loader -> Application class loader -> ReferenceMap -> FinalizableReferenceQueue ->\n", "   * etc. -> Decoupled class loader -> Finalizer\n"], "4": ["   * Repeatedly dequeues references from the queue and invokes\n", "   * {@link FinalizableReference#finalizeReferent()} on them until the queue is empty. This method\n", "   * is a no-op if the background thread was created successfully.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>As an example of how this is used, imagine you have a class {@code MyServer} that creates a\n", " * a {@link java.net.ServerSocket ServerSocket}, and you would like to ensure that the\n", " * calling its {@code close} method. You <em>could</em> use a finalizer to accomplish this, but\n", " * that has a number of well-known problems. Here is how you might use this class instead:\n"], "3": ["   * System class loader -> Application class loader -> ReferenceMap -> FinalizableReferenceQueue\n", "   * -> etc. -> Decoupled class loader -> Finalizer\n"], "4": ["   * Repeatedly dequeues references from the queue and invokes {@link\n", "   * FinalizableReference#finalizeReferent()} on them until the queue is empty. This method is a\n", "   * no-op if the background thread was created successfully.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [42, 43, 45, 46], "3": [119, 120], "4": [187, 188, 189]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [44, 45, 47, 48], "3": [121, 122], "4": [189, 190, 191]}}, {"18": "guava/src/com/google/common/base/FinalizableSoftReference.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * the garbage collector reclaims the referent. This is a simpler alternative to using a\n", " * {@link ReferenceQueue}.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * the garbage collector reclaims the referent. This is a simpler alternative to using a {@link\n", " * ReferenceQueue}.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [24, 25]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [26, 27]}}, {"19": "guava/src/com/google/common/base/FinalizableWeakReference.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * the garbage collector reclaims the referent. This is a simpler alternative to using a\n", " * {@link ReferenceQueue}.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * the garbage collector reclaims the referent. This is a simpler alternative to using a {@link\n", " * ReferenceQueue}.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [24, 25]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [26, 27]}}, {"20": "guava/src/com/google/common/base/Function.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/FunctionalExplained\">the use of {@code\n"], "3": [" * {@code java.util.function.Function}, making conversion code necessary only in one direction. At\n", " * that time, we plan to also deprecate this interface.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/FunctionalExplained\">the use of {@code\n"], "3": [" * {@code java.util.function.Function}, making conversion code necessary only in one direction.\n", " * At that time, we plan to also deprecate this interface.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [28, 29], "3": [42, 43]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [30, 31], "3": [44, 45]}}, {"21": "guava/src/com/google/common/base/FunctionalEquivalence.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n", " * use this file except in compliance with the License.  You may obtain a copy\n", " * of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n", " * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n", " * License for the specific language governing permissions and limitations under\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13]}}, {"22": "guava/src/com/google/common/base/Functions.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/FunctionalExplained\">the use of {@code\n"], "3": ["   * Returns a function which performs a map lookup. The returned function throws an\n", "   * {@link IllegalArgumentException} if given a key that does not exist in the map. See also\n", "   * {@link #forMap(Map, Object)}, which returns a default value in this case.\n"], "4": ["   * <p>The returned function is <i>consistent with equals</i> (as documented at\n", "   * {@link Function#apply}) if and only if {@code predicate} is itself consistent with equals.\n"], "5": ["  /** @see Functions#forSupplier */\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/FunctionalExplained\">the use of {@code\n"], "3": ["   * Returns a function which performs a map lookup. The returned function throws an {@link\n", "   * IllegalArgumentException} if given a key that does not exist in the map. See also {@link\n", "   * #forMap(Map, Object)}, which returns a default value in this case.\n"], "4": ["   * <p>The returned function is <i>consistent with equals</i> (as documented at {@link\n", "   * Function#apply}) if and only if {@code predicate} is itself consistent with equals.\n"], "5": ["  /** @see Functions#forSupplier*/\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [33, 34], "3": [107, 108, 109], "4": [260, 261], "5": [357]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [35, 36], "3": [109, 110, 111], "4": [262, 263], "5": [359]}}, {"23": "guava/src/com/google/common/base/Joiner.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/StringsExplained#joiner\">{@code Joiner}</a>.\n"], "3": ["   * separator between each, to {@code builder}. Identical to\n", "   * {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n"], "4": ["   * separator between each, to {@code builder}. Identical to\n", "   * {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n"], "5": ["   * separator between each, to {@code builder}. Identical to\n", "   * {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n"], "6": ["   * {@code MapJoiner} method that accepts entries as input, and receive output of the form\n", "   * {@code key1=A&key1=B&key2=C}.\n", "   * method that accepts a map as input, and receive output of the form {@code\n"], "7": ["     * configured separator and key-value separator, to {@code builder}. Identical to\n", "     * {@link #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.\n"], "8": ["     * configured separator and key-value separator, to {@code builder}. Identical to\n", "     * {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n"], "9": ["     * configured separator and key-value separator, to {@code builder}. Identical to\n", "     * {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/StringsExplained#joiner\">{@code Joiner}</a>.\n"], "3": ["   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\n", "   * Iterable)}, except that it does not throw {@link IOException}.\n"], "4": ["   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\n", "   * Iterable)}, except that it does not throw {@link IOException}.\n"], "5": ["   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\n", "   * Iterable)}, except that it does not throw {@link IOException}.\n"], "6": ["   *     {@code MapJoiner} method that accepts entries as input, and receive output of the form\n", "   *     {@code key1=A&key1=B&key2=C}.\n", "   *     method that accepts a map as input, and receive output of the form {@code\n"], "7": ["     * configured separator and key-value separator, to {@code builder}. Identical to {@link\n", "     * #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.\n"], "8": ["     * configured separator and key-value separator, to {@code builder}. Identical to {@link\n", "     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n"], "9": ["     * configured separator and key-value separator, to {@code builder}. Identical to {@link\n", "     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [57, 58], "3": [138, 139], "4": [148, 149], "5": [165, 166], "6": [298, 299, 301], "7": [327, 328], "8": [385, 386], "9": [398, 399]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [59, 60], "3": [140, 141], "4": [150, 151], "5": [167, 168], "6": [300, 301, 303], "7": [329, 330], "8": [387, 388], "9": [400, 401]}}, {"24": "guava/src/com/google/common/base/MoreObjects.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide on\n", " * <a href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing\n"], "3": ["   * <p>This is helpful for implementing {@link Object#toString()}. Specification by example:\n", "   *\n", "   * <pre>   {@code\n"], "4": ["   * Creates an instance of {@link ToStringHelper} in the same manner as\n", "   * {@link #toStringHelper(Object)}, but using the simple name of {@code clazz} instead of using an\n"], "5": ["   * Creates an instance of {@link ToStringHelper} in the same manner as\n", "   * {@link #toStringHelper(Object)}, but using {@code className} instead of using an instance's\n", "   * {@link Object#getClass()}.\n"], "6": ["     * Configures the {@link ToStringHelper} so {@link #toString()} will ignore properties with null\n", "     * value. The order of calling this method, relative to the {@code add()}/{@code addValue()}\n", "     * methods, is not significant.\n"], "7": ["     * Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}\n", "     * is {@code null}, the string {@code \"null\"} is used, unless {@link #omitNullValues()} is\n", "     * called, in which case this name/value pair will not be added.\n"], "8": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "9": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "10": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "11": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "12": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "13": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "14": ["     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a\n", "     * readable name.\n"], "15": ["     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a\n", "     * readable name.\n"], "16": ["     * <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a\n", "     * readable name.\n"], "17": ["     * <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a\n", "     * readable name.\n"], "18": ["     * <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a\n", "     * readable name.\n"], "19": ["     * <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a\n", "     * readable name.\n"], "20": ["     * <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a\n", "     * readable name.\n"], "21": ["     * Returns a string in the format specified by {@link MoreObjects#toStringHelper(Object)}.\n", "     * <p>After calling this method, you can keep adding more properties to later call toString()\n", "     * again and get a more complete representation of the same object; but properties cannot be\n", "     * removed, so this only allows limited reuse of the helper instance. The helper allows\n", "     * duplication of properties (multiple name/value pairs with the same name can be added).\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide on <a\n", " * href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing\n"], "3": ["   * <p>This is helpful for implementing {@link Object#toString()}.\n", "   * Specification by example: <pre>   {@code\n"], "4": ["   * Creates an instance of {@link ToStringHelper} in the same manner as {@link\n", "   * #toStringHelper(Object)}, but using the simple name of {@code clazz} instead of using an\n"], "5": ["   * Creates an instance of {@link ToStringHelper} in the same manner as {@link\n", "   * #toStringHelper(Object)}, but using {@code className} instead of using an instance's {@link\n", "   * Object#getClass()}.\n"], "6": ["     * Configures the {@link ToStringHelper} so {@link #toString()} will ignore\n", "     * properties with null value. The order of calling this method, relative\n", "     * to the {@code add()}/{@code addValue()} methods, is not significant.\n"], "7": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format. If {@code value} is {@code null}, the string {@code \"null\"}\n", "     * is used, unless {@link #omitNullValues()} is called, in which case this\n", "     * name/value pair will not be added.\n"], "8": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "9": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "10": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "11": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "12": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "13": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "14": ["     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead\n", "     * and give value a readable name.\n"], "15": ["     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead\n", "     * and give value a readable name.\n"], "16": ["     * <p>It is strongly encouraged to use {@link #add(String, char)} instead\n", "     * and give value a readable name.\n"], "17": ["     * <p>It is strongly encouraged to use {@link #add(String, double)} instead\n", "     * and give value a readable name.\n"], "18": ["     * <p>It is strongly encouraged to use {@link #add(String, float)} instead\n", "     * and give value a readable name.\n"], "19": ["     * <p>It is strongly encouraged to use {@link #add(String, int)} instead\n", "     * and give value a readable name.\n"], "20": ["     * <p>It is strongly encouraged to use {@link #add(String, long)} instead\n", "     * and give value a readable name.\n"], "21": ["     * Returns a string in the format specified by\n", "     * {@link MoreObjects#toStringHelper(Object)}.\n", "     * <p>After calling this method, you can keep adding more properties to later\n", "     * call toString() again and get a more complete representation of the\n", "     * same object; but properties cannot be removed, so this only allows\n", "     * limited reuse of the helper instance. The helper allows duplication of\n", "     * properties (multiple name/value pairs with the same name can be added).\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [30, 31], "3": [64, 65, 66], "4": [106, 107], "5": [120, 121, 122], "6": [151, 152, 153], "7": [164, 165, 166], "8": [174], "9": [184], "10": [194], "11": [204], "12": [214], "13": [224], "14": [236, 237], "15": [247, 248], "16": [260, 261], "17": [273, 274], "18": [286, 287], "19": [299, 300], "20": [312, 313], "21": [323, 325, 326, 327, 328]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [32, 33], "3": [66, 67], "4": [107, 108], "5": [121, 122, 123], "6": [152, 153, 154], "7": [165, 166, 167, 168], "8": [176, 177], "9": [187, 188], "10": [198, 199], "11": [209, 210], "12": [220, 221], "13": [231, 232], "14": [244, 245], "15": [255, 256], "16": [268, 269], "17": [281, 282], "18": [294, 295], "19": [307, 308], "20": [320, 321], "21": [331, 332, 334, 335, 336, 337, 338]}}, {"25": "guava/src/com/google/common/base/Objects.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide on\n", " * <a href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing\n"], "3": ["   * <li>{@code true} if {@code a} and {@code b} are both non-null and they are equal according to\n", "   *     {@link Object#equals(Object)}.\n", "   * <p>This assumes that any non-null objects passed to this function conform to the\n", "   * {@code equals()} contract.\n", "   * <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use\n", "   * {@link java.util.Objects#equals} instead.\n", "   * Generates a hash code for multiple values. The hash code is generated by calling\n", "   * {@link Arrays#hashCode(Object[])}. Note that array arguments to this method, with the exception\n", "   * of a single Object array, do not get any special handling; their hash codes are based on\n", "   * identity and not contents.\n", "   *\n", "   * <p>This is useful for implementing {@link Object#hashCode()}. For example, in an object that\n", "   * has three properties, {@code x}, {@code y}, and {@code z}, one could write:\n", "   * <p><b>Warning:</b> When a single object is supplied, the returned hash code does not equal the\n", "   * hash code of that object.\n", "   * <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use\n", "   * {@link java.util.Objects#hash} instead.\n"], "4": ["   * <p>This is helpful for implementing {@link Object#toString()}. Specification by example:\n", "   *\n", "   * <pre>   {@code\n"], "5": ["   * @param self the object to generate the string for (typically {@code this}), used only for its\n", "   *     class name\n", "   * @deprecated Use {@link MoreObjects#toStringHelper(Object)} instead. This method is scheduled\n", "   *     for removal in August 2016.\n"], "6": ["   * {@link Objects#toStringHelper(Object)}, but using the name of {@code clazz} instead of using an\n", "   * instance's {@link Object#getClass()}.\n", "   * @deprecated Use {@link MoreObjects#toStringHelper(Class)} instead. This method is scheduled for\n", "   *     removal in August 2016.\n"], "7": ["   * {@link Objects#toStringHelper(Object)}, but using {@code className} instead of using an\n", "   * instance's {@link Object#getClass()}.\n", "   * @deprecated Use {@link MoreObjects#toStringHelper(String)} instead. This method is scheduled\n", "   *     for removal in August 2016.\n"], "8": ["   * Returns the first of two given parameters that is not {@code null}, if either is, or otherwise\n", "   * throws a {@link NullPointerException}.\n", "   * <p><b>Note:</b> if {@code first} is represented as an {@link Optional}, this can be\n", "   * accomplished with {@linkplain Optional#or(Object) first.or(second)}. That approach also allows\n", "   * for lazy evaluation of the fallback instance, using {@linkplain Optional#or(Supplier)\n", "   * first.or(Supplier)}.\n", "   * @return {@code first} if {@code first} is not {@code null}, or {@code second} if {@code first}\n", "   *     is {@code null} and {@code second} is not {@code null}\n", "   * @throws NullPointerException if both {@code first} and {@code second} were {@code null}\n", "   * @deprecated Use {@link MoreObjects#firstNonNull} instead. This method is scheduled for removal\n", "   *     in August 2016.\n"], "9": ["   * @deprecated Use {@link MoreObjects.ToStringHelper} instead. This class is scheduled for removal\n", "   *     in August 2016.\n"], "10": ["     * Configures the {@link ToStringHelper} so {@link #toString()} will ignore properties with null\n", "     * value. The order of calling this method, relative to the {@code add()}/{@code addValue()}\n", "     * methods, is not significant.\n"], "11": ["     * Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}\n", "     * is {@code null}, the string {@code \"null\"} is used, unless {@link #omitNullValues()} is\n", "     * called, in which case this name/value pair will not be added.\n"], "12": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "13": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "14": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "15": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "16": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "17": ["     * Adds a name/value pair to the formatted output in {@code name=value} format.\n"], "18": ["     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a\n", "     * readable name.\n"], "19": ["     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a\n", "     * readable name.\n"], "20": ["     * <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a\n", "     * readable name.\n"], "21": ["     * <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a\n", "     * readable name.\n"], "22": ["     * <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a\n", "     * readable name.\n"], "23": ["     * <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a\n", "     * readable name.\n"], "24": ["     * <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a\n", "     * readable name.\n"], "25": ["     * Returns a string in the format specified by {@link Objects#toStringHelper(Object)}.\n", "     * <p>After calling this method, you can keep adding more properties to later call toString()\n", "     * again and get a more complete representation of the same object; but properties cannot be\n", "     * removed, so this only allows limited reuse of the helper instance. The helper allows\n", "     * duplication of properties (multiple name/value pairs with the same name can be added).\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide on <a\n", " * href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing\n"], "3": ["   * <li>{@code true} if {@code a} and {@code b} are both non-null and they are\n", "   *     equal according to {@link Object#equals(Object)}.\n", "   * <p>This assumes that any non-null objects passed to this function conform\n", "   * to the {@code equals()} contract.\n", "   * <p><b>Note for Java 7 and later:</b> This method should be treated as\n", "   * deprecated; use {@link java.util.Objects#equals} instead.\n", "   * Generates a hash code for multiple values. The hash code is generated by\n", "   * calling {@link Arrays#hashCode(Object[])}. Note that array arguments to\n", "   * this method, with the exception of a single Object array, do not get any\n", "   * special handling; their hash codes are based on identity and not contents.\n", "   * <p>This is useful for implementing {@link Object#hashCode()}. For example,\n", "   * in an object that has three properties, {@code x}, {@code y}, and\n", "   * {@code z}, one could write:\n", "   * <p><b>Warning:</b> When a single object is supplied, the returned hash code\n", "   * does not equal the hash code of that object.\n", "   * <p><b>Note for Java 7 and later:</b> This method should be treated as\n", "   * deprecated; use {@link java.util.Objects#hash} instead.\n"], "4": ["   * <p>This is helpful for implementing {@link Object#toString()}.\n", "   * Specification by example: <pre>   {@code\n"], "5": ["   * @param self the object to generate the string for (typically {@code this}),\n", "   *        used only for its class name\n", "   * @deprecated Use {@link MoreObjects#toStringHelper(Object)} instead. This\n", "   *     method is scheduled for removal in August 2016.\n"], "6": ["   * {@link Objects#toStringHelper(Object)}, but using the name of {@code clazz}\n", "   * instead of using an instance's {@link Object#getClass()}.\n", "   * @deprecated Use {@link MoreObjects#toStringHelper(Class)} instead. This\n", "   *     method is scheduled for removal in August 2016.\n"], "7": ["   * {@link Objects#toStringHelper(Object)}, but using {@code className} instead\n", "   * of using an instance's {@link Object#getClass()}.\n", "   * @deprecated Use {@link MoreObjects#toStringHelper(String)} instead. This\n", "   *     method is scheduled for removal in August 2016.\n"], "8": ["   * Returns the first of two given parameters that is not {@code null}, if\n", "   * either is, or otherwise throws a {@link NullPointerException}.\n", "   * <p><b>Note:</b> if {@code first} is represented as an {@link Optional},\n", "   * this can be accomplished with\n", "   * {@linkplain Optional#or(Object) first.or(second)}.\n", "   * That approach also allows for lazy evaluation of the fallback instance,\n", "   * using {@linkplain Optional#or(Supplier) first.or(Supplier)}.\n", "   * @return {@code first} if {@code first} is not {@code null}, or\n", "   *     {@code second} if {@code first} is {@code null} and {@code second} is\n", "   *     not {@code null}\n", "   * @throws NullPointerException if both {@code first} and {@code second} were\n", "   *     {@code null}\n", "   * @deprecated Use {@link MoreObjects#firstNonNull} instead. This method is\n", "   *      scheduled for removal in August 2016.\n"], "9": ["   * @deprecated Use {@link MoreObjects.ToStringHelper} instead. This class is\n", "   *      scheduled for removal in August 2016.\n"], "10": ["     * Configures the {@link ToStringHelper} so {@link #toString()} will ignore\n", "     * properties with null value. The order of calling this method, relative\n", "     * to the {@code add()}/{@code addValue()} methods, is not significant.\n"], "11": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format. If {@code value} is {@code null}, the string {@code \"null\"}\n", "     * is used, unless {@link #omitNullValues()} is called, in which case this\n", "     * name/value pair will not be added.\n"], "12": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "13": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "14": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "15": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "16": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "17": ["     * Adds a name/value pair to the formatted output in {@code name=value}\n", "     * format.\n"], "18": ["     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead\n", "     * and give value a readable name.\n"], "19": ["     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead\n", "     * and give value a readable name.\n"], "20": ["     * <p>It is strongly encouraged to use {@link #add(String, char)} instead\n", "     * and give value a readable name.\n"], "21": ["     * <p>It is strongly encouraged to use {@link #add(String, double)} instead\n", "     * and give value a readable name.\n"], "22": ["     * <p>It is strongly encouraged to use {@link #add(String, float)} instead\n", "     * and give value a readable name.\n"], "23": ["     * <p>It is strongly encouraged to use {@link #add(String, int)} instead\n", "     * and give value a readable name.\n"], "24": ["     * <p>It is strongly encouraged to use {@link #add(String, long)} instead\n", "     * and give value a readable name.\n"], "25": ["     * Returns a string in the format specified by {@link\n", "     * Objects#toStringHelper(Object)}.\n", "     * <p>After calling this method, you can keep adding more properties to later\n", "     * call toString() again and get a more complete representation of the\n", "     * same object; but properties cannot be removed, so this only allows\n", "     * limited reuse of the helper instance. The helper allows duplication of\n", "     * properties (multiple name/value pairs with the same name can be added).\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [29, 30], "3": [45, 46, 50, 51, 53, 54, 61, 62, 63, 64, 65, 66, 67, 74, 75, 77, 78], "4": [87, 88, 89], "5": [120, 121, 123, 124], "6": [133, 134, 140, 141], "7": [150, 151, 155, 156], "8": [164, 165, 167, 168, 169, 170, 172, 173, 174, 176, 177], "9": [189, 190], "10": [207, 208, 209], "11": [220, 221, 222], "12": [230], "13": [240], "14": [250], "15": [260], "16": [270], "17": [280], "18": [292, 293], "19": [303, 304], "20": [316, 317], "21": [329, 330], "22": [342, 343], "23": [355, 356], "24": [368, 369], "25": [379, 381, 382, 383, 384]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [31, 32], "3": [47, 48, 52, 53, 55, 56, 63, 64, 65, 66, 68, 69, 70, 76, 77, 79, 80], "4": [89, 90], "5": [121, 122, 124, 125], "6": [134, 135, 141, 142], "7": [151, 152, 156, 157], "8": [165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181], "9": [193, 194], "10": [211, 212, 213], "11": [224, 225, 226, 227], "12": [235, 236], "13": [246, 247], "14": [257, 258], "15": [268, 269], "16": [279, 280], "17": [290, 291], "18": [303, 304], "19": [314, 315], "20": [327, 328], "21": [340, 341], "22": [353, 354], "23": [366, 367], "24": [379, 380], "25": [390, 391, 393, 394, 395, 396, 397]}}, {"26": "guava/src/com/google/common/base/Optional.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * An immutable object that may contain a non-null reference to another object. Each instance of\n", " * this type either contains a non-null reference, or contains nothing (in which case we say that\n", " * the reference is \"absent\"); it is never said to \"contain {@code\n", " * <p>A non-null {@code Optional<T>} reference can be used as a replacement for a nullable {@code T}\n", " * reference. It allows you to represent \"a {@code T} that must be present\" and a\n", " * \"a {@code T} that might be absent\" as two distinct types in your program, which can aid clarity.\n", " * <li>As a method return type, as an alternative to returning {@code null} to indicate that no\n", " *     value was available\n", " * <li>To distinguish between \"unknown\" (for example, not present in a map) and \"known to have no\n", " *     value\" (present in the map, with value {@code Optional.absent()})\n", " * <li>To wrap nullable references for storage in a collection that does not support {@code null}\n", " *     (though there are\n", " *     <a href=\"https://github.com/google/guava/wiki/LivingWithNullHostileCollections\">several other\n", " *     approaches to this</a> that should be considered first)\n", " * <a href=\"http://en.wikipedia.org/wiki/Null_Object_pattern\">null object</a> for the type in\n", " * question.\n", " * <p>This class is not intended as a direct analogue of any existing \"option\" or \"maybe\" construct\n", " * from other programming environments, though it may bear some similarities.\n"], "3": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional\">using\n", " * {@code Optional}</a>.\n", " * @param <T> the type of instance that can be contained. {@code Optional} is naturally covariant on\n", " *     this type, so it is safe to cast an {@code Optional<T>} to {@code\n"], "4": ["   * Returns the contained instance, which must be present. If the instance might be absent, use\n", "   * {@link #or(Object)} or {@link #orNull} instead.\n", "   * throws {@link IllegalStateException}, whereas the Java 8 counterpart throws\n", "   * {@link NoSuchElementException}.\n"], "5": ["   * Returns the contained instance if it is present; {@code defaultValue} otherwise. If no default\n", "   * value should be required because the instance is known to be present, use {@link #get()}\n", "   * instead. For a default value of {@code null}, use {@link #orNull}.\n"], "6": ["   * {@code Optional.orElse}, but will not accept {@code null} as a {@code defaultValue} (\n", "   * {@link #orNull} must be used instead). As a result, the value returned by this method is\n", "   * guaranteed non-null, which is not the case for the {@code java.util} equivalent.\n", "   * Returns this {@code Optional} if it has a value present; {@code secondChoice} otherwise.\n"], "7": ["   * Returns the contained instance if it is present; {@code null} otherwise. If the instance is\n", "   * known to be present, use {@link #get()} instead.\n"], "8": ["   * Returns an immutable singleton {@link Set} whose only element is the contained instance if it\n", "   * is present; an empty immutable {@link Set} otherwise.\n"], "9": ["   * Returns {@code true} if {@code object} is an {@code Optional} instance, and either the\n", "   * contained references are {@linkplain Object#equals equal} to each other or both are absent.\n", "   * Note that {@code Optional} instances of differing parameterized types can be equal.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * An immutable object that may contain a non-null reference to another object. Each\n", " * instance of this type either contains a non-null reference, or contains nothing (in\n", " * which case we say that the reference is \"absent\"); it is never said to \"contain {@code\n", " * <p>A non-null {@code Optional<T>} reference can be used as a replacement for a nullable\n", " * {@code T} reference. It allows you to represent \"a {@code T} that must be present\" and\n", " * a \"a {@code T} that might be absent\" as two distinct types in your program, which can\n", " * aid clarity.\n", " * <li>As a method return type, as an alternative to returning {@code null} to indicate\n", " *     that no value was available\n", " * <li>To distinguish between \"unknown\" (for example, not present in a map) and \"known to\n", " *     have no value\" (present in the map, with value {@code Optional.absent()})\n", " * <li>To wrap nullable references for storage in a collection that does not support\n", " *     {@code null} (though there are\n", " *     <a href=\"https://github.com/google/guava/wiki/LivingWithNullHostileCollections\">\n", " *     several other approaches to this</a> that should be considered first)\n", " * <a href=\"http://en.wikipedia.org/wiki/Null_Object_pattern\">null object</a> for the\n", " * type in question.\n", " * <p>This class is not intended as a direct analogue of any existing \"option\" or \"maybe\"\n", " * construct from other programming environments, though it may bear some similarities.\n"], "3": [" * <p>See the Guava User Guide article on <a\n", " * href=\"https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional\">\n", " * using {@code Optional}</a>.\n", " * @param <T> the type of instance that can be contained. {@code Optional} is naturally\n", " *     covariant on this type, so it is safe to cast an {@code Optional<T>} to {@code\n"], "4": ["   * Returns the contained instance, which must be present. If the instance might be\n", "   * absent, use {@link #or(Object)} or {@link #orNull} instead.\n", "   * throws {@link IllegalStateException}, whereas the Java 8 counterpart throws {@link\n", "   * NoSuchElementException}.\n"], "5": ["   * Returns the contained instance if it is present; {@code defaultValue} otherwise. If\n", "   * no default value should be required because the instance is known to be present, use\n", "   * {@link #get()} instead. For a default value of {@code null}, use {@link #orNull}.\n"], "6": ["   * {@code Optional.orElse}, but will not accept {@code null} as a {@code defaultValue} ({@link\n", "   * #orNull} must be used instead). As a result, the value returned by this method is guaranteed\n", "   * non-null, which is not the case for the {@code java.util} equivalent.\n", "   * Returns this {@code Optional} if it has a value present; {@code secondChoice}\n", "   * otherwise.\n"], "7": ["   * Returns the contained instance if it is present; {@code null} otherwise. If the\n", "   * instance is known to be present, use {@link #get()} instead.\n"], "8": ["   * Returns an immutable singleton {@link Set} whose only element is the contained instance\n", "   * if it is present; an empty immutable {@link Set} otherwise.\n"], "9": ["   * Returns {@code true} if {@code object} is an {@code Optional} instance, and either\n", "   * the contained references are {@linkplain Object#equals equal} to each other or both\n", "   * are absent. Note that {@code Optional} instances of differing parameterized types can\n", "   * be equal.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [29, 30, 31, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 55, 56], "3": [75, 76, 77, 79, 80], "4": [133, 134, 137, 138], "5": [147, 148, 149], "6": [176, 177, 178, 183], "7": [206, 207], "8": [216, 217], "9": [248, 249, 250]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [31, 32, 33, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 58, 59], "3": [78, 79, 80, 82, 83], "4": [136, 137, 140, 141], "5": [150, 151, 152], "6": [179, 180, 181, 186, 187], "7": [210, 211], "8": [220, 221], "9": [252, 253, 254, 255]}}, {"27": "guava/src/com/google/common/base/PairwiseEquivalence.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"28": "guava/src/com/google/common/base/Platform.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"29": "guava/src/com/google/common/base/Preconditions.java", "added": {"1": [" * standard JDK exceptions such as {@link java.util.NoSuchElementException} or\n", " * {@link UnsupportedOperationException} in the situations they are intended for.\n", " * <a href=\"https://github.com/google/guava/wiki/ConditionalFailuresExplained\">Conditional failures\n", " * explained</a> in the Guava User Guide for more advice.\n", " * <p>Projects which use {@code com.google.common} should generally avoid the use of\n", " * {@link java.util.Objects#requireNonNull(Object)}. Instead, use whichever of\n", " * {@link #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the\n", " * situation. (The same goes for the message-accepting overloads.)\n"], "2": ["   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n", "   *     square braces. Unmatched placeholders will be left as-is.\n"], "3": ["   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n", "   *     square braces. Unmatched placeholders will be left as-is.\n"], "4": ["   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n", "   *     square braces. Unmatched placeholders will be left as-is.\n"], "5": ["   * This is a big deal - we're talking factors of 2-8 in microbenchmarks, not just 10-20%. (This is\n", "   * a hotspot optimizer bug, which should be fixed, but that's a separate, big project).\n", "   * The coding pattern above is heavily used in java.util, e.g. in ArrayList. There is a\n", "   * appears that this pattern is not directly applicable. But we can use the ridiculous, devious\n", "   * trick of throwing an exception in the middle of the construction of another exception. Hotspot\n"], "6": ["   * position: the first {@code %s} gets {@code args[0]}, etc. If there are more arguments than\n"]}, "removed": {"1": [" * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link\n", " * UnsupportedOperationException} in the situations they are intended for.\n", " * <a href=\"https://github.com/google/guava/wiki/ConditionalFailuresExplained\">Conditional\n", " * failures explained</a> in the Guava User Guide for more advice.\n", " * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link\n", " * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link\n", " * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.\n", " * (The same goes for the message-accepting overloads.)\n"], "2": ["   *     errorMessageArgs[0]}, etc.  Unmatched arguments will be appended to the formatted message\n", "   *     in square braces. Unmatched placeholders will be left as-is.\n"], "3": ["   *     errorMessageArgs[0]}, etc.  Unmatched arguments will be appended to the formatted message\n", "   *     in square braces. Unmatched placeholders will be left as-is.\n"], "4": ["   *     errorMessageArgs[0]}, etc.  Unmatched arguments will be appended to the formatted message\n", "   *     in square braces. Unmatched placeholders will be left as-is.\n"], "5": ["   * This is a big deal - we're talking factors of 2-8 in microbenchmarks, not just 10-20%.  (This\n", "   * is a hotspot optimizer bug, which should be fixed, but that's a separate, big project).\n", "   * The coding pattern above is heavily used in java.util, e.g. in ArrayList.  There is a\n", "   * appears that this pattern is not directly applicable.  But we can use the ridiculous, devious\n", "   * trick of throwing an exception in the middle of the construction of another exception.  Hotspot\n"], "6": ["   * position: the first {@code %s} gets {@code args[0]}, etc.  If there are more arguments than\n"]}, "added_lines": {"1": [65, 66, 73, 74, 78, 79, 80, 81], "2": [134, 135], "3": [187, 188], "4": [243, 244], "5": [274, 275, 277, 281, 282], "6": [408]}, "removed_lines": {"1": [65, 66, 73, 74, 78, 79, 80, 81], "2": [134, 135], "3": [187, 188], "4": [243, 244], "5": [274, 275, 277, 281, 282], "6": [408]}}, {"30": "guava/src/com/google/common/base/Predicate.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/FunctionalExplained\">the use of {@code\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/FunctionalExplained\">the use of {@code\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [28, 29]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [30, 31]}}, {"31": "guava/src/com/google/common/base/Predicates.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>All methods returns serializable predicates as long as they're given serializable parameters.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/FunctionalExplained\">the use of\n", " * {@code Predicate}</a>.\n"], "3": ["   * Returns a predicate that evaluates to {@code true} if the object reference being tested is\n", "   * null.\n"], "4": ["   * Returns a predicate that evaluates to {@code true} if the object reference being tested is not\n", "   * null.\n"], "5": ["   * Returns a predicate that evaluates to {@code true} if the given predicate evaluates to\n", "   * {@code false}.\n", "   * Returns a predicate that evaluates to {@code true} if each of its components evaluates to\n", "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n", "   * as soon as a false predicate is found. It defensively copies the iterable passed in, so future\n"], "6": ["   * Returns a predicate that evaluates to {@code true} if each of its components evaluates to\n", "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n", "   * as soon as a false predicate is found. It defensively copies the array passed in, so future\n"], "7": ["   * Returns a predicate that evaluates to {@code true} if both of its components evaluate to\n", "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n", "   * as soon as a false predicate is found.\n", "   * Returns a predicate that evaluates to {@code true} if any one of its components evaluates to\n", "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n", "   * as soon as a true predicate is found. It defensively copies the iterable passed in, so future\n", "   * changes to it won't alter the behavior of this predicate. If {@code\n"], "8": ["   * Returns a predicate that evaluates to {@code true} if any one of its components evaluates to\n", "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n", "   * as soon as a true predicate is found. It defensively copies the array passed in, so future\n", "   * changes to it won't alter the behavior of this predicate. If {@code\n"], "9": ["   * Returns a predicate that evaluates to {@code true} if either of its components evaluates to\n", "   * {@code true}. The components are evaluated in order, and evaluation will be \"short-circuited\"\n", "   * as soon as a true predicate is found.\n", "   * Returns a predicate that evaluates to {@code true} if the object being tested {@code equals()}\n", "   * the given target or both are null.\n", "   * Returns a predicate that evaluates to {@code true} if the object being tested is an instance of\n", "   * the given class. If the object being tested is {@code null} this predicate evaluates to\n", "   * {@code false}.\n", "   * <p>If you want to filter an {@code Iterable} to narrow its type, consider using\n", "   * {@link com.google.common.collect.Iterables#filter(Iterable, Class)} in preference.\n", "   * <p><b>Warning:</b> contrary to the typical assumptions about predicates (as documented at\n", "   * {@link Predicate#apply}), the returned predicate may not be <i>consistent with equals</i>. For\n", "   * example, {@code instanceOf(ArrayList.class)} will yield different results for the two equal\n"], "10": ["   * Returns a predicate that evaluates to {@code true} if the class being tested is assignable from\n", "   * the given class. The returned predicate does not allow null inputs.\n"], "11": ["   * Returns a predicate that evaluates to {@code true} if the object reference being tested is a\n", "   * member of the given collection. It does not defensively copy the collection passed in, so\n", "   * future changes to it will alter the behavior of the predicate.\n", "   * <p>This method can technically accept any {@code Collection<?>}, but using a typed collection\n", "   * helps prevent bugs. This approach doesn't block any potential users since it is always possible\n", "   * to use {@code Predicates.<Object>in()}.\n"], "12": ["   * Returns the composition of a function and a predicate. For every {@code x}, the generated\n", "   * predicate returns {@code predicate(function(x))}.\n"], "13": ["   * Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested\n", "   * contains any match for the given regular expression pattern. The test used is equivalent to\n"], "14": ["   * Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested\n", "   * contains any match for the given regular expression pattern. The test used is equivalent to\n"], "15": ["      String patternString =\n", "          MoreObjects.toStringHelper(pattern)\n", "              .add(\"pattern\", pattern.pattern())\n", "              .add(\"pattern.flags\", pattern.flags())\n", "              .toString();\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>All methods returns serializable predicates as long as they're given\n", " * serializable parameters.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/FunctionalExplained\">the\n", " * use of {@code Predicate}</a>.\n"], "3": ["   * Returns a predicate that evaluates to {@code true} if the object reference\n", "   * being tested is null.\n"], "4": ["   * Returns a predicate that evaluates to {@code true} if the object reference\n", "   * being tested is not null.\n"], "5": ["   * Returns a predicate that evaluates to {@code true} if the given predicate\n", "   * evaluates to {@code false}.\n", "   * Returns a predicate that evaluates to {@code true} if each of its\n", "   * components evaluates to {@code true}. The components are evaluated in\n", "   * order, and evaluation will be \"short-circuited\" as soon as a false\n", "   * predicate is found. It defensively copies the iterable passed in, so future\n"], "6": ["   * Returns a predicate that evaluates to {@code true} if each of its\n", "   * components evaluates to {@code true}. The components are evaluated in\n", "   * order, and evaluation will be \"short-circuited\" as soon as a false\n", "   * predicate is found. It defensively copies the array passed in, so future\n"], "7": ["   * Returns a predicate that evaluates to {@code true} if both of its\n", "   * components evaluate to {@code true}. The components are evaluated in\n", "   * order, and evaluation will be \"short-circuited\" as soon as a false\n", "   * predicate is found.\n", "   * Returns a predicate that evaluates to {@code true} if any one of its\n", "   * components evaluates to {@code true}. The components are evaluated in\n", "   * order, and evaluation will be \"short-circuited\" as soon as a\n", "   * true predicate is found. It defensively copies the iterable passed in, so\n", "   * future changes to it won't alter the behavior of this predicate. If {@code\n"], "8": ["   * Returns a predicate that evaluates to {@code true} if any one of its\n", "   * components evaluates to {@code true}. The components are evaluated in\n", "   * order, and evaluation will be \"short-circuited\" as soon as a\n", "   * true predicate is found. It defensively copies the array passed in, so\n", "   * future changes to it won't alter the behavior of this predicate. If {@code\n"], "9": ["   * Returns a predicate that evaluates to {@code true} if either of its\n", "   * components evaluates to {@code true}. The components are evaluated in\n", "   * order, and evaluation will be \"short-circuited\" as soon as a\n", "   * true predicate is found.\n", "   * Returns a predicate that evaluates to {@code true} if the object being\n", "   * tested {@code equals()} the given target or both are null.\n", "   * Returns a predicate that evaluates to {@code true} if the object being\n", "   * tested is an instance of the given class. If the object being tested\n", "   * is {@code null} this predicate evaluates to {@code false}.\n", "   * <p>If you want to filter an {@code Iterable} to narrow its type, consider\n", "   * using {@link com.google.common.collect.Iterables#filter(Iterable, Class)}\n", "   * in preference.\n", "   * <p><b>Warning:</b> contrary to the typical assumptions about predicates (as\n", "   * documented at {@link Predicate#apply}), the returned predicate may not be\n", "   * <i>consistent with equals</i>. For example, {@code\n", "   * instanceOf(ArrayList.class)} will yield different results for the two equal\n"], "10": ["   * Returns a predicate that evaluates to {@code true} if the class being\n", "   * tested is assignable from the given class.  The returned predicate\n", "   * does not allow null inputs.\n"], "11": ["   * Returns a predicate that evaluates to {@code true} if the object reference\n", "   * being tested is a member of the given collection. It does not defensively\n", "   * copy the collection passed in, so future changes to it will alter the\n", "   * behavior of the predicate.\n", "   * <p>This method can technically accept any {@code Collection<?>}, but using\n", "   * a typed collection helps prevent bugs. This approach doesn't block any\n", "   * potential users since it is always possible to use {@code\n", "   * Predicates.<Object>in()}.\n"], "12": ["   * Returns the composition of a function and a predicate. For every {@code x},\n", "   * the generated predicate returns {@code predicate(function(x))}.\n"], "13": ["   * Returns a predicate that evaluates to {@code true} if the\n", "   * {@code CharSequence} being tested contains any match for the given\n", "   * regular expression pattern. The test used is equivalent to\n"], "14": ["   * Returns a predicate that evaluates to {@code true} if the\n", "   * {@code CharSequence} being tested contains any match for the given\n", "   * regular expression pattern. The test used is equivalent to\n"], "15": ["      String patternString = MoreObjects.toStringHelper(pattern)\n", "          .add(\"pattern\", pattern.pattern())\n", "          .add(\"pattern.flags\", pattern.flags())\n", "          .toString();\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [35, 37, 38, 39], "3": [68, 69], "4": [77, 78], "5": [86, 87, 94, 95, 96], "6": [106, 107, 108], "7": [118, 119, 120, 127, 128, 129, 130], "8": [139, 140, 141, 142], "9": [151, 152, 153, 160, 161, 168, 169, 170, 172, 173, 175, 176, 177], "10": [186, 187], "11": [198, 199, 200, 202, 203, 204], "12": [213, 214], "13": [224, 225], "14": [237, 238], "15": [651, 652, 653, 654, 655]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [37, 38, 40, 41, 42], "3": [71, 72], "4": [80, 81], "5": [89, 90, 97, 98, 99, 100], "6": [110, 111, 112, 113], "7": [123, 124, 125, 126, 133, 134, 135, 136, 137], "8": [146, 147, 148, 149, 150], "9": [159, 160, 161, 162, 169, 170, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188], "10": [197, 198, 199], "11": [210, 211, 212, 213, 215, 216, 217, 218], "12": [227, 228], "13": [238, 239, 240], "14": [252, 253, 254], "15": [667, 668, 669, 670]}}, {"32": "guava/src/com/google/common/base/Present.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"33": "guava/src/com/google/common/base/SmallCharMatcher.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * An immutable version of CharMatcher for smallish sets of characters that uses a hash table with\n", " * linear probing to check for matches.\n"], "3": ["   * Returns an array size suitable for the backing array of a hash table that uses open addressing\n", "   * with linear probing in its implementation. The returned size is the smallest power of two that\n", "   * can hold setSize elements with the desired load factor.\n"], "4": ["      if (table[index] == 0) { // Check for empty.\n", "      } else if (table[index] == c) { // Check for match.\n", "      } else { // Linear probing.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * An immutable version of CharMatcher for smallish sets of characters that uses a hash table\n", " * with linear probing to check for matches.\n"], "3": ["   * Returns an array size suitable for the backing array of a hash table that\n", "   * uses open addressing with linear probing in its implementation.  The\n", "   * returned size is the smallest power of two that can hold setSize elements\n", "   * with the desired load factor.\n"], "4": ["      // Check for empty.\n", "      if (table[index] == 0) {\n", "      // Check for match.\n", "      } else if (table[index] == c) {\n", "      } else {\n", "        // Linear probing.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [24, 25], "3": [69, 70, 71], "4": [124, 126, 128]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [26, 27], "3": [71, 72, 73, 74], "4": [127, 128, 130, 131, 133, 134]}}, {"34": "guava/src/com/google/common/base/Splitter.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Extracts non-overlapping substrings from an input string, typically by recognizing appearances of\n", " * a <i>separator</i> sequence. This separator can be specified as a single {@linkplain #on(char)\n", " * character}, fixed {@linkplain #on(String) string}, {@linkplain #onPattern regular expression} or\n", " * {@link #on(CharMatcher) CharMatcher} instance. Or, instead of using a separator at all, a\n", " * splitter can extract adjacent substrings of a given {@linkplain #fixedLength fixed length}.\n", " * ... produces an {@code Iterable} containing {@code \"foo\"}, {@code \"bar\"} and {@code \"qux\"}, in\n", " * that order.\n", " * <p>By default, {@code Splitter}'s behavior is simplistic and unassuming. The following\n", " * expression: <pre>   {@code\n", " * ... yields the substrings {@code [\" foo\", \"\", \"\", \"  bar \", \"\"]}. If this is not the desired\n", " * behavior, use configuration methods to obtain a <i>new</i> splitter instance with modified\n", " * behavior: <pre>   {@code\n", " * \"bar\"]}. Note that the order in which these configuration methods are called is never\n", " * significant.\n", " * <p><b>Warning:</b> Splitter instances are immutable. Invoking a configuration method has no\n", " * effect on the receiving instance; you must store and use the new splitter instance it returns\n", " * instead. <pre>   {@code\n", " * <p>For separator-based splitters that do not use {@code omitEmptyStrings}, an input string\n", " * containing {@code n} occurrences of the separator naturally yields an iterable of size\n", " * {@code n + 1}. So if the separator does not occur anywhere in the input, a single substring is\n", " * returned containing the entire input. Consequently, all splitters split the empty string to\n", " * {@code [\"\"]} (note: even fixed-length splitters).\n", " * <p>Splitter instances are thread-safe immutable, and are therefore safe to store as\n", " * {@code static final} constants.\n", " * <p>The {@link Joiner} class provides the inverse operation to splitting, but note that a\n", " * round-trip between the two should be assumed to be lossy.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/StringsExplained#splitter\">{@code Splitter}</a>.\n"], "3": ["   * Returns a splitter that uses the given single-character separator. For example,\n", "   * {@code Splitter.on(',').split(\"foo,,bar\")} returns an iterable containing\n", "   * {@code [\"foo\", \"\", \"bar\"]}.\n"], "4": ["   * Returns a splitter that considers any single character matched by the given {@code CharMatcher}\n", "   * to be a separator. For example, {@code\n", "   * Splitter.on(CharMatcher.anyOf(\";,\")).split(\"foo,;bar,quux\")} returns an iterable containing\n", "   * {@code [\"foo\", \"\", \"bar\", \"quux\"]}.\n", "   * @param separatorMatcher a {@link CharMatcher} that determines whether a character is a\n", "   *     separator\n"], "5": ["   * Returns a splitter that uses the given fixed string as a separator. For example,\n", "   * {@code Splitter.on(\", \").split(\"foo, bar,baz\")} returns an iterable containing\n", "   * {@code [\"foo\", \"bar,baz\"]}.\n"], "6": ["   * Splitter.on(Pattern.compile(\"\\r?\\n\")).split(entireFile)} splits a string into lines whether it\n", "   * uses DOS-style or UNIX-style line terminators.\n", "   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This\n", "   *     pattern may not match the empty string.\n", "   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string\n"], "7": ["   * Returns a splitter that considers any subsequence matching a given pattern (regular expression)\n", "   * to be a separator. For example, {@code\n", "   * Splitter.onPattern(\"\\r?\\n\").split(entireFile)} splits a string into lines whether it uses\n", "   * DOS-style or UNIX-style line terminators. This is equivalent to\n", "   * {@code Splitter.on(Pattern.compile(pattern))}.\n", "   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This\n", "   *     pattern may not match the empty string.\n", "   * @throws java.util.regex.PatternSyntaxException if {@code separatorPattern} is a malformed\n", "   *     expression\n", "   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string\n"], "8": ["   * Returns a splitter that divides strings into pieces of the given length. For example,\n", "   * {@code Splitter.fixedLength(2).split(\"abcde\")} returns an iterable containing\n", "   * {@code [\"ab\", \"cd\", \"e\"]}. The last piece can be smaller than {@code length} but will never be\n", "   * empty.\n", "   * split(\"\")} does not yield an empty iterable, but an iterable containing {@code \"\"}. This is the\n", "   * only case in which {@code\n", "   * IntMath.divide(input.length(), length, CEILING)}. To avoid this behavior, use\n", "   * {@code omitEmptyStrings}.\n", "   * @param length the desired length of pieces after splitting, a positive integer\n", "   * @return a splitter, with default settings, that can split into fixed sized pieces\n"], "9": ["   * Returns a splitter that behaves equivalently to {@code this} splitter, but automatically omits\n", "   * empty strings from the results. For example, {@code\n", "   * Splitter.on(',').omitEmptyStrings().split(\",a,,,b,c,,\")} returns an iterable containing only\n", "   * {@code [\"a\", \"b\", \"c\"]}.\n", "   * <p>If either {@code trimResults} option is also specified when creating a splitter, that\n", "   * splitter always trims results first before checking for emptiness. So, for example, {@code\n", "   * Splitter.on(':').omitEmptyStrings().trimResults().split(\": : : \")} returns an empty iterable.\n", "   * <p>Note that it is ordinarily not possible for {@link #split(CharSequence)} to return an empty\n", "   * iterable, but when using this option, it can (if the input sequence consists of nothing but\n", "   * separators).\n"], "10": ["   * Returns a splitter that behaves equivalently to {@code this} splitter but stops splitting after\n", "   * it reaches the limit. The limit defines the maximum number of items returned by the iterator,\n", "   * or the maximum size of the list returned by {@link #splitToList}.\n", "   * <p>For example, {@code Splitter.on(',').limit(3).split(\"a,b,c,d\")} returns an iterable\n", "   * containing {@code [\"a\", \"b\", \"c,d\"]}. When omitting empty strings, the omitted strings do no\n", "   * count. Hence, {@code Splitter.on(',').limit(3).omitEmptyStrings().split(\"a,,,b,,,c,d\")} returns\n", "   * an iterable containing {@code [\"a\", \"b\", \"c,d\"}. When trim is requested, all entries, including\n", "   * the last are trimmed. Hence\n", "   * {@code Splitter.on(',').limit(3).trimResults().split(\" a , b , c , d \")} results in\n", "   * {@code [\"a\", \"b\", \"c , d\"]}.\n"], "11": ["   * Returns a splitter that behaves equivalently to {@code this} splitter, but automatically\n", "   * removes leading and trailing {@linkplain CharMatcher#WHITESPACE whitespace} from each returned\n", "   * substring; equivalent to {@code trimResults(CharMatcher.whitespace())}. For example, {@code\n", "   * Splitter.on(',').trimResults().split(\" a, b ,c \")} returns an iterable containing\n", "   * {@code [\"a\", \"b\", \"c\"]}.\n"], "12": ["   * Returns a splitter that behaves equivalently to {@code this} splitter, but removes all leading\n", "   * or trailing characters matching the given {@code\n", "   * Splitter.on(',').trimResults(CharMatcher.is('_')).split(\"_a ,_b_ ,c__\")} returns an iterable\n", "   * containing {@code [\"a \", \"b_ \", \"c\"]}.\n", "   * @param trimmer a {@link CharMatcher} that determines whether a character should be removed from\n", "   *     the beginning/end of a subsequence\n"], "13": ["   * Splits {@code sequence} into string components and makes them available through an\n", "   * {@link Iterator}, which may be lazily evaluated. If you want an eagerly computed {@link List},\n", "   * use {@link #splitToList(CharSequence)}.\n"], "14": ["   * Splits {@code sequence} into string components and returns them as an immutable list. If you\n", "   * want an {@link Iterable} which may be lazily evaluated, use {@link #split(CharSequence)}.\n"], "15": ["   * Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries\n", "   * into keys and values using the specified separator.\n"], "16": ["   * Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries\n", "   * into keys and values using the specified separator.\n"], "17": ["   * Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries\n", "   * into keys and values using the specified key-value splitter.\n"], "18": ["   * An object that splits strings into maps as {@code Splitter} splits iterables and lists. Like\n", "   * {@code Splitter}, it is thread-safe and immutable.\n"], "19": ["     * Splits {@code sequence} into substrings, splits each substring into an entry, and returns an\n", "     * unmodifiable map with each of the entries. For example, <code>\n", "     * </code> will return a mapping from {@code \"a\"} to {@code \"b\"} and {@code \"c\"} to {@code b}.\n", "     * <p>The returned map preserves the order of the entries from {@code sequence}.\n", "     * @throws IllegalArgumentException if the specified sequence does not split into valid map\n", "     *     entries, or if there are duplicate keys\n"], "20": ["     * Returns the first index in {@code toSplit} at or after {@code start} that contains the\n", "     * separator.\n", "     * separatorPosition} that does not contain a separator. This method is only invoked after a\n", "     * call to {@code separatorStart}.\n"], "21": ["       * The returned string will be from the end of the last match to the beginning of the next\n", "       * one. nextStart is the start position of the returned substring, while offset is the place\n", "       * to start looking for a separator.\n"], "22": ["           * This occurs when some pattern has an empty match, even if it doesn't match the empty\n", "           * string -- for example, if it requires lookahead or the like. The offset must be\n", "           * increased to look for separators beyond this point, without changing the start position\n"], "23": ["          // final item. This is tested after empty string removal so that\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Extracts non-overlapping substrings from an input string, typically by\n", " * recognizing appearances of a <i>separator</i> sequence. This separator can be\n", " * specified as a single {@linkplain #on(char) character}, fixed {@linkplain\n", " * #on(String) string}, {@linkplain #onPattern regular expression} or {@link\n", " * #on(CharMatcher) CharMatcher} instance. Or, instead of using a separator at\n", " * all, a splitter can extract adjacent substrings of a given {@linkplain\n", " * #fixedLength fixed length}.\n", " * ... produces an {@code Iterable} containing {@code \"foo\"}, {@code \"bar\"} and\n", " * {@code \"qux\"}, in that order.\n", " * <p>By default, {@code Splitter}'s behavior is simplistic and unassuming. The\n", " * following expression: <pre>   {@code\n", " * ... yields the substrings {@code [\" foo\", \"\", \"\", \"  bar \", \"\"]}. If this\n", " * is not the desired behavior, use configuration methods to obtain a <i>new</i>\n", " * splitter instance with modified behavior: <pre>   {@code\n", " * \"bar\"]}. Note that the order in which these configuration methods are called\n", " * is never significant.\n", " * <p><b>Warning:</b> Splitter instances are immutable. Invoking a configuration\n", " * method has no effect on the receiving instance; you must store and use the\n", " * new splitter instance it returns instead. <pre>   {@code\n", " * <p>For separator-based splitters that do not use {@code omitEmptyStrings}, an\n", " * input string containing {@code n} occurrences of the separator naturally\n", " * yields an iterable of size {@code n + 1}. So if the separator does not occur\n", " * anywhere in the input, a single substring is returned containing the entire\n", " * input. Consequently, all splitters split the empty string to {@code [\"\"]}\n", " * (note: even fixed-length splitters).\n", " * <p>Splitter instances are thread-safe immutable, and are therefore safe to\n", " * store as {@code static final} constants.\n", " * <p>The {@link Joiner} class provides the inverse operation to splitting, but\n", " * note that a round-trip between the two should be assumed to be lossy.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/StringsExplained#splitter\">\n", " * {@code Splitter}</a>.\n"], "3": ["   * Returns a splitter that uses the given single-character separator. For\n", "   * example, {@code Splitter.on(',').split(\"foo,,bar\")} returns an iterable\n", "   * containing {@code [\"foo\", \"\", \"bar\"]}.\n"], "4": ["   * Returns a splitter that considers any single character matched by the\n", "   * given {@code CharMatcher} to be a separator. For example, {@code\n", "   * Splitter.on(CharMatcher.anyOf(\";,\")).split(\"foo,;bar,quux\")} returns an\n", "   * iterable containing {@code [\"foo\", \"\", \"bar\", \"quux\"]}.\n", "   * @param separatorMatcher a {@link CharMatcher} that determines whether a\n", "   *     character is a separator\n"], "5": ["   * Returns a splitter that uses the given fixed string as a separator. For\n", "   * example, {@code Splitter.on(\", \").split(\"foo, bar,baz\")} returns an\n", "   * iterable containing {@code [\"foo\", \"bar,baz\"]}.\n"], "6": ["   * Splitter.on(Pattern.compile(\"\\r?\\n\")).split(entireFile)} splits a string\n", "   * into lines whether it uses DOS-style or UNIX-style line terminators.\n", "   * @param separatorPattern the pattern that determines whether a subsequence\n", "   *     is a separator. This pattern may not match the empty string.\n", "   * @throws IllegalArgumentException if {@code separatorPattern} matches the\n", "   *     empty string\n"], "7": ["   * Returns a splitter that considers any subsequence matching a given\n", "   * pattern (regular expression) to be a separator. For example, {@code\n", "   * Splitter.onPattern(\"\\r?\\n\").split(entireFile)} splits a string into lines\n", "   * whether it uses DOS-style or UNIX-style line terminators. This is\n", "   * equivalent to {@code Splitter.on(Pattern.compile(pattern))}.\n", "   * @param separatorPattern the pattern that determines whether a subsequence\n", "   *     is a separator. This pattern may not match the empty string.\n", "   * @throws java.util.regex.PatternSyntaxException if {@code separatorPattern}\n", "   *     is a malformed expression\n", "   * @throws IllegalArgumentException if {@code separatorPattern} matches the\n", "   *     empty string\n"], "8": ["   * Returns a splitter that divides strings into pieces of the given length.\n", "   * For example, {@code Splitter.fixedLength(2).split(\"abcde\")} returns an\n", "   * iterable containing {@code [\"ab\", \"cd\", \"e\"]}. The last piece can be\n", "   * smaller than {@code length} but will never be empty.\n", "   * split(\"\")} does not yield an empty iterable, but an iterable containing\n", "   * {@code \"\"}. This is the only case in which {@code\n", "   * IntMath.divide(input.length(), length, CEILING)}. To avoid this behavior,\n", "   * use {@code omitEmptyStrings}.\n", "   * @param length the desired length of pieces after splitting, a positive\n", "   *     integer\n", "   * @return a splitter, with default settings, that can split into fixed sized\n", "   *     pieces\n"], "9": ["   * Returns a splitter that behaves equivalently to {@code this} splitter, but\n", "   * automatically omits empty strings from the results. For example, {@code\n", "   * Splitter.on(',').omitEmptyStrings().split(\",a,,,b,c,,\")} returns an\n", "   * iterable containing only {@code [\"a\", \"b\", \"c\"]}.\n", "   * <p>If either {@code trimResults} option is also specified when creating a\n", "   * splitter, that splitter always trims results first before checking for\n", "   * emptiness. So, for example, {@code\n", "   * Splitter.on(':').omitEmptyStrings().trimResults().split(\": : : \")} returns\n", "   * an empty iterable.\n", "   * <p>Note that it is ordinarily not possible for {@link #split(CharSequence)}\n", "   * to return an empty iterable, but when using this option, it can (if the\n", "   * input sequence consists of nothing but separators).\n"], "10": ["   * Returns a splitter that behaves equivalently to {@code this} splitter but\n", "   * stops splitting after it reaches the limit.\n", "   * The limit defines the maximum number of items returned by the iterator, or\n", "   * the maximum size of the list returned by {@link #splitToList}.\n", "   * <p>For example,\n", "   * {@code Splitter.on(',').limit(3).split(\"a,b,c,d\")} returns an iterable\n", "   * containing {@code [\"a\", \"b\", \"c,d\"]}.  When omitting empty strings, the\n", "   * omitted strings do no count.  Hence,\n", "   * {@code Splitter.on(',').limit(3).omitEmptyStrings().split(\"a,,,b,,,c,d\")}\n", "   * returns an iterable containing {@code [\"a\", \"b\", \"c,d\"}.\n", "   * When trim is requested, all entries, including the last are trimmed.  Hence\n", "   * {@code Splitter.on(',').limit(3).trimResults().split(\" a , b , c , d \")}\n", "   * results in {@code [\"a\", \"b\", \"c , d\"]}.\n"], "11": ["   * Returns a splitter that behaves equivalently to {@code this} splitter, but\n", "   * automatically removes leading and trailing {@linkplain\n", "   * CharMatcher#WHITESPACE whitespace} from each returned substring; equivalent\n", "   * to {@code trimResults(CharMatcher.whitespace())}. For example, {@code\n", "   * Splitter.on(',').trimResults().split(\" a, b ,c \")} returns an iterable\n", "   * containing {@code [\"a\", \"b\", \"c\"]}.\n"], "12": ["   * Returns a splitter that behaves equivalently to {@code this} splitter, but\n", "   * removes all leading or trailing characters matching the given {@code\n", "   * Splitter.on(',').trimResults(CharMatcher.is('_')).split(\"_a ,_b_ ,c__\")}\n", "   * returns an iterable containing {@code [\"a \", \"b_ \", \"c\"]}.\n", "   * @param trimmer a {@link CharMatcher} that determines whether a character\n", "   *     should be removed from the beginning/end of a subsequence\n"], "13": ["   * Splits {@code sequence} into string components and makes them available\n", "   * through an {@link Iterator}, which may be lazily evaluated. If you want\n", "   * an eagerly computed {@link List}, use {@link #splitToList(CharSequence)}.\n"], "14": ["   * Splits {@code sequence} into string components and returns them as\n", "   * an immutable list. If you want an {@link Iterable} which may be lazily\n", "   * evaluated, use {@link #split(CharSequence)}.\n"], "15": ["   * Returns a {@code MapSplitter} which splits entries based on this splitter,\n", "   * and splits entries into keys and values using the specified separator.\n"], "16": ["   * Returns a {@code MapSplitter} which splits entries based on this splitter,\n", "   * and splits entries into keys and values using the specified separator.\n"], "17": ["   * Returns a {@code MapSplitter} which splits entries based on this splitter,\n", "   * and splits entries into keys and values using the specified key-value\n", "   * splitter.\n"], "18": ["   * An object that splits strings into maps as {@code Splitter} splits\n", "   * iterables and lists. Like {@code Splitter}, it is thread-safe and\n", "   * immutable.\n"], "19": ["     * Splits {@code sequence} into substrings, splits each substring into\n", "     * an entry, and returns an unmodifiable map with each of the entries. For\n", "     * example, <code>\n", "     * </code> will return a mapping from {@code \"a\"} to {@code \"b\"} and\n", "     * {@code \"c\"} to {@code b}.\n", "     * <p>The returned map preserves the order of the entries from\n", "     * {@code sequence}.\n", "     * @throws IllegalArgumentException if the specified sequence does not split\n", "     *         into valid map entries, or if there are duplicate keys\n"], "20": ["     * Returns the first index in {@code toSplit} at or after {@code start}\n", "     * that contains the separator.\n", "     * separatorPosition} that does not contain a separator. This method is only\n", "     * invoked after a call to {@code separatorStart}.\n"], "21": ["       * The returned string will be from the end of the last match to the\n", "       * beginning of the next one. nextStart is the start position of the\n", "       * returned substring, while offset is the place to start looking for a\n", "       * separator.\n"], "22": ["           * This occurs when some pattern has an empty match, even if it\n", "           * doesn't match the empty string -- for example, if it requires\n", "           * lookahead or the like. The offset must be increased to look for\n", "           * separators beyond this point, without changing the start position\n"], "23": ["          // final item.  This is tested after empty string removal so that\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [34, 35, 36, 37, 38, 44, 45, 47, 48, 52, 53, 54, 61, 62, 64, 65, 66, 73, 74, 75, 76, 77, 79, 80, 82, 83, 85, 86], "3": [113, 114, 115], "4": [125, 126, 127, 128, 130, 131], "5": [157, 158, 159], "6": [202, 203, 205, 206, 208], "7": [239, 240, 241, 242, 243, 245, 246, 248, 249, 250], "8": [258, 259, 260, 261, 264, 265, 267, 268, 270, 271], "9": [298, 299, 300, 301, 303, 304, 305, 307, 308, 309], "10": [318, 319, 320, 322, 323, 324, 325, 326, 327, 328], "11": [340, 341, 342, 343, 344], "12": [353, 354, 356, 357, 359, 360], "13": [370, 371, 372], "14": [401, 402], "15": [423, 424], "16": [434, 435], "17": [445, 446], "18": [456, 457], "19": [473, 474, 477, 479, 481, 482], "20": [513, 514, 520, 521], "21": [538, 539, 540], "22": [557, 558, 559], "23": [584]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [36, 37, 38, 39, 40, 41, 42, 48, 49, 51, 52, 56, 57, 58, 65, 66, 68, 69, 70, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 90, 91, 92], "3": [119, 120, 121], "4": [131, 132, 133, 134, 136, 137], "5": [163, 164, 165], "6": [208, 209, 211, 212, 214, 215], "7": [246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258], "8": [266, 267, 268, 269, 272, 273, 275, 276, 278, 279, 280, 281], "9": [308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 320, 321], "10": [330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343], "11": [355, 356, 357, 358, 359, 360], "12": [369, 370, 372, 373, 375, 376], "13": [386, 387, 388], "14": [417, 418, 419], "15": [440, 441], "16": [451, 452], "17": [462, 463, 464], "18": [474, 475, 476], "19": [492, 493, 494, 497, 498, 500, 501, 503, 504], "20": [535, 536, 542, 543], "21": [560, 561, 562, 563], "22": [580, 581, 582, 583], "23": [608]}}, {"35": "guava/src/com/google/common/base/StandardSystemProperty.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"36": "guava/src/com/google/common/base/Stopwatch.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * An object that measures elapsed time in nanoseconds. It is useful to measure elapsed time using\n", " * this class instead of direct calls to {@link System#nanoTime} for a few reasons:\n", " * <li>An alternate time source can be substituted, for testing or performance reasons.\n", " * <li>As documented by {@code nanoTime}, the value returned has no absolute meaning, and can only\n", " * be interpreted as relative to another timestamp returned by {@code nanoTime} at a different time.\n", " * {@code Stopwatch} is a more effective abstraction because it exposes only these relative values,\n", " * not the absolute ones.\n", " *\n"], "3": [" *   log.info(\"time: \" + stopwatch); // formatted string like \"12.3 ms\"\n", " * </pre>\n", " * <p>Stopwatch methods are not idempotent; it is an error to start or stop a stopwatch that is\n", " * already in the desired state.\n", " * <p>When testing code that uses this class, use {@link #createUnstarted(Ticker)} or\n", " * {@link #createStarted(Ticker)} to supply a fake or mock ticker. <!-- TODO(kevinb): restore the\n", " * \"such as\" --> This allows you to simulate any valid behavior of the stopwatch.\n"], "4": ["   * Creates (but does not start) a new stopwatch using {@link System#nanoTime} as its time source.\n"], "5": ["   * Creates (but does not start) a new stopwatch, using the specified time source.\n"], "6": ["   * Creates (and starts) a new stopwatch using {@link System#nanoTime} as its time source.\n"], "7": ["   * Creates (and starts) a new stopwatch, using the specified time source.\n"], "8": ["   * Returns {@code true} if {@link #start()} has been called on this stopwatch, and {@link #stop()}\n", "   * has not been called since the last call to {@code\n"], "9": ["   * Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this\n", "   * point.\n"], "10": ["   * Sets the elapsed time for this stopwatch to zero, and places it in a stopped state.\n"], "11": ["   * Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit,\n", "   * with any fraction rounded down.\n", "   * <p>Note that the overhead of measurement can be more than a microsecond, so it is generally not\n", "   * useful to specify {@link TimeUnit#NANOSECONDS} precision here.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * An object that measures elapsed time in nanoseconds. It is useful to measure\n", " * elapsed time using this class instead of direct calls to {@link\n", " * System#nanoTime} for a few reasons:\n", " * <li>An alternate time source can be substituted, for testing or performance\n", " *     reasons.\n", " * <li>As documented by {@code nanoTime}, the value returned has no absolute\n", " *     meaning, and can only be interpreted as relative to another timestamp\n", " *     returned by {@code nanoTime} at a different time. {@code Stopwatch} is a\n", " *     more effective abstraction because it exposes only these relative values,\n", " *     not the absolute ones.\n"], "3": [" *   log.info(\"time: \" + stopwatch); // formatted string like \"12.3 ms\"</pre>\n", " * <p>Stopwatch methods are not idempotent; it is an error to start or stop a\n", " * stopwatch that is already in the desired state.\n", " * <p>When testing code that uses this class, use\n", " * {@link #createUnstarted(Ticker)} or {@link #createStarted(Ticker)} to\n", " * supply a fake or mock ticker.\n", " * <!-- TODO(kevinb): restore the \"such as\" --> This allows you to\n", " * simulate any valid behavior of the stopwatch.\n"], "4": ["   * Creates (but does not start) a new stopwatch using {@link System#nanoTime}\n", "   * as its time source.\n"], "5": ["   * Creates (but does not start) a new stopwatch, using the specified time\n", "   * source.\n"], "6": ["   * Creates (and starts) a new stopwatch using {@link System#nanoTime}\n", "   * as its time source.\n"], "7": ["   * Creates (and starts) a new stopwatch, using the specified time\n", "   * source.\n"], "8": ["   * Returns {@code true} if {@link #start()} has been called on this stopwatch,\n", "   * and {@link #stop()} has not been called since the last call to {@code\n"], "9": ["   * Stops the stopwatch. Future reads will return the fixed duration that had\n", "   * elapsed up to this point.\n"], "10": ["   * Sets the elapsed time for this stopwatch to zero,\n", "   * and places it in a stopped state.\n"], "11": ["   * Returns the current elapsed time shown on this stopwatch, expressed\n", "   * in the desired time unit, with any fraction rounded down.\n", "   * <p>Note that the overhead of measurement can be more than a microsecond, so\n", "   * it is generally not useful to specify {@link TimeUnit#NANOSECONDS}\n", "   * precision here.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [35, 36, 39, 40, 41, 42, 43, 47], "3": [55, 56, 58, 59, 61, 62, 63], "4": [78], "5": [87], "6": [96], "7": [105], "8": [122, 123], "9": [145, 146], "10": [161], "11": [177, 178, 180, 181]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [37, 38, 39, 42, 43, 44, 45, 46, 47, 48], "3": [59, 61, 62, 64, 65, 66, 67, 68], "4": [83, 84], "5": [93, 94], "6": [103, 104], "7": [113, 114], "8": [131, 132], "9": [154, 155], "10": [170, 171], "11": [187, 188, 190, 191, 192]}}, {"37": "guava/src/com/google/common/base/Strings.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code String} or {@code CharSequence} instances.\n"], "3": ["   * @return {@code string} itself if it is nonempty; {@code null} if it is empty or null\n"], "4": ["   * <p>Consider normalizing your string references with {@link #nullToEmpty}. If you do, you can\n", "   * use {@link String#isEmpty()} instead of this method, and you won't need special null-safe forms\n", "   * of methods like {@link String#toUpperCase} either. Or, if you'd like to normalize \"in the other\n", "   * direction,\" converting empty strings to {@code null}, you can use {@link #emptyToNull}.\n"], "5": ["   * Returns a string, of length at least {@code minLength}, consisting of {@code string} prepended\n", "   * with as many copies of {@code padChar} as are necessary to reach that length. For example,\n"], "6": ["   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in\n", "   *     which case the input string is always returned.\n", "   * @param padChar the character to insert at the beginning of the result until the minimum length\n", "   *     is reached\n"], "7": ["   * Returns a string, of length at least {@code minLength}, consisting of {@code string} appended\n", "   * with as many copies of {@code padChar} as are necessary to reach that length. For example,\n"], "8": ["   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in\n", "   *     which case the input string is always returned.\n", "   * @param padChar the character to append to the end of the result until the minimum length is\n", "   *     reached\n"], "9": ["   * Returns a string consisting of a specific number of concatenated copies of an input string. For\n", "   * example, {@code repeat(\"hey\", 3)} returns the string {@code \"heyheyhey\"}.\n", "   * @return a string containing {@code string} repeated {@code count} times (the empty string if\n", "   *     {@code count} is zero)\n"], "10": ["   * {@code a.toString().startsWith(prefix) && b.toString().startsWith(prefix)}, taking care not to\n", "   * split surrogate pairs. If {@code a} and {@code b} have no common prefix, returns the empty\n", "   * string.\n"], "11": ["   * {@code a.toString().endsWith(suffix) && b.toString().endsWith(suffix)}, taking care not to\n", "   * split surrogate pairs. If {@code a} and {@code b} have no common suffix, returns the empty\n", "   * string.\n"], "12": ["   * True when a valid surrogate pair starts at the given {@code index} in the given {@code string}.\n", "   * Out-of-range indexes return false.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code String} or {@code CharSequence}\n", " * instances.\n"], "3": ["   * @return {@code string} itself if it is nonempty; {@code null} if it is\n", "   *     empty or null\n"], "4": ["   * <p>Consider normalizing your string references with {@link #nullToEmpty}.\n", "   * If you do, you can use {@link String#isEmpty()} instead of this\n", "   * method, and you won't need special null-safe forms of methods like {@link\n", "   * String#toUpperCase} either. Or, if you'd like to normalize \"in the other\n", "   * direction,\" converting empty strings to {@code null}, you can use {@link\n", "   * #emptyToNull}.\n"], "5": ["   * Returns a string, of length at least {@code minLength}, consisting of\n", "   * {@code string} prepended with as many copies of {@code padChar} as are\n", "   * necessary to reach that length. For example,\n"], "6": ["   * @param minLength the minimum length the resulting string must have. Can be\n", "   *     zero or negative, in which case the input string is always returned.\n", "   * @param padChar the character to insert at the beginning of the result until\n", "   *     the minimum length is reached\n"], "7": ["   * Returns a string, of length at least {@code minLength}, consisting of\n", "   * {@code string} appended with as many copies of {@code padChar} as are\n", "   * necessary to reach that length. For example,\n"], "8": ["   * @param minLength the minimum length the resulting string must have. Can be\n", "   *     zero or negative, in which case the input string is always returned.\n", "   * @param padChar the character to append to the end of the result until the\n", "   *     minimum length is reached\n"], "9": ["   * Returns a string consisting of a specific number of concatenated copies of\n", "   * an input string. For example, {@code repeat(\"hey\", 3)} returns the string\n", "   * {@code \"heyheyhey\"}.\n", "   * @return a string containing {@code string} repeated {@code count} times\n", "   *     (the empty string if {@code count} is zero)\n"], "10": ["   * {@code a.toString().startsWith(prefix) && b.toString().startsWith(prefix)},\n", "   * taking care not to split surrogate pairs. If {@code a} and {@code b} have\n", "   * no common prefix, returns the empty string.\n"], "11": ["   * {@code a.toString().endsWith(suffix) && b.toString().endsWith(suffix)},\n", "   * taking care not to split surrogate pairs. If {@code a} and {@code b} have\n", "   * no common suffix, returns the empty string.\n"], "12": ["   * True when a valid surrogate pair starts at the given {@code index} in the\n", "   * given {@code string}. Out-of-range indexes return false.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [28], "3": [51], "4": [61, 62, 63, 64], "5": [74, 75], "6": [85, 86, 87, 88], "7": [105, 106], "8": [116, 117, 118, 119], "9": [136, 137, 141, 142], "10": [173, 174, 175], "11": [196, 197, 198], "12": [219, 220]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [30, 31], "3": [54, 55], "4": [65, 66, 67, 68, 69, 70], "5": [80, 81, 82], "6": [92, 93, 94, 95], "7": [112, 113, 114], "8": [124, 125, 126, 127], "9": [144, 145, 146, 150, 151], "10": [182, 183, 184], "11": [205, 206, 207], "12": [228, 229]}}, {"38": "guava/src/com/google/common/base/Supplier.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * A class that can supply objects of a single type. Semantically, this could be a factory,\n", " * generator, builder, closure, or something else entirely. No guarantees are implied by this\n", " * interface.\n"], "3": ["   * Retrieves an instance of the appropriate type. The returned object may or may not be a new\n", "   * instance, depending on the implementation.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * A class that can supply objects of a single type.  Semantically, this could\n", " * be a factory, generator, builder, closure, or something else entirely. No\n", " * guarantees are implied by this interface.\n"], "3": ["   * Retrieves an instance of the appropriate type. The returned object may or\n", "   * may not be a new instance, depending on the implementation.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [21, 22, 23], "3": [31, 32]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [23, 24, 25], "3": [33, 34]}}, {"39": "guava/src/com/google/common/base/Suppliers.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>All methods return serializable suppliers as long as they're given serializable parameters.\n"], "3": ["   * Returns a new supplier which is the composition of the provided function and supplier. In other\n", "   * words, the new supplier's value will be computed by retrieving the value from {@code supplier},\n", "   * and then applying {@code function} to that value. Note that the resulting supplier will not\n"], "4": ["   * Returns a supplier which caches the instance retrieved during the first call to {@code get()}\n", "   * and returns that value on subsequent calls to {@code get()}. See:\n", "   * <p>The returned supplier is thread-safe. The delegate's {@code get()} method will be invoked at\n", "   * most once. The supplier's serialized form does not contain the cached value, which will be\n", "   * recalculated when {@code get()} is called on the reserialized instance.\n"], "5": ["   * Returns a supplier that caches the instance supplied by the delegate and removes the cached\n", "   * value after the specified time has passed. Subsequent calls to {@code get()} return the cached\n", "   * value if the expiration time has not passed. After the expiration time, a new value is\n", "   * retrieved, cached, and returned. See:\n", "   * <p>The returned supplier is thread-safe. The supplier's serialized form does not contain the\n", "   * cached value, which will be recalculated when {@code\n", "   * @param duration the length of time after a value is created that it should stop being returned\n", "   *     by subsequent {@code get()} calls\n"], "6": ["      // We use two volatile reads. We could reduce this to one by\n"], "7": ["   * Returns a supplier whose {@code get()} method synchronizes on {@code delegate} before calling\n", "   * it, making it thread-safe.\n"], "8": ["   * Returns a function that accepts a supplier and returns the result of invoking\n", "   * {@link Supplier#get} on that supplier.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>All methods return serializable suppliers as long as they're given\n", " * serializable parameters.\n"], "3": ["   * Returns a new supplier which is the composition of the provided function\n", "   * and supplier. In other words, the new supplier's value will be computed by\n", "   * retrieving the value from {@code supplier}, and then applying\n", "   * {@code function} to that value. Note that the resulting supplier will not\n"], "4": ["   * Returns a supplier which caches the instance retrieved during the first\n", "   * call to {@code get()} and returns that value on subsequent calls to\n", "   * {@code get()}. See:\n", "   * <p>The returned supplier is thread-safe. The delegate's {@code get()}\n", "   * method will be invoked at most once. The supplier's serialized form does\n", "   * not contain the cached value, which will be recalculated when {@code get()}\n", "   * is called on the reserialized instance.\n"], "5": ["   * Returns a supplier that caches the instance supplied by the delegate and\n", "   * removes the cached value after the specified time has passed. Subsequent\n", "   * calls to {@code get()} return the cached value if the expiration time has\n", "   * not passed. After the expiration time, a new value is retrieved, cached,\n", "   * and returned. See:\n", "   * <p>The returned supplier is thread-safe. The supplier's serialized form\n", "   * does not contain the cached value, which will be recalculated when {@code\n", "   * @param duration the length of time after a value is created that it\n", "   *     should stop being returned by subsequent {@code get()} calls\n"], "6": ["      // We use two volatile reads.  We could reduce this to one by\n"], "7": ["   * Returns a supplier whose {@code get()} method synchronizes on\n", "   * {@code delegate} before calling it, making it thread-safe.\n"], "8": ["   * Returns a function that accepts a supplier and returns the result of\n", "   * invoking {@link Supplier#get} on that supplier.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [29], "3": [40, 41, 42], "4": [88, 89, 92, 93, 94], "5": [142, 143, 144, 145, 148, 149, 152, 153], "6": [181], "7": [255, 256], "8": [285, 286]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [31, 32], "3": [43, 44, 45, 46], "4": [92, 93, 94, 97, 98, 99, 100], "5": [148, 149, 150, 151, 152, 155, 156, 159, 160], "6": [188], "7": [262, 263], "8": [292, 293]}}, {"40": "guava/src/com/google/common/base/Throwables.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide entry on\n", " * <a href=\"https://github.com/google/guava/wiki/ThrowablesExplained\">Throwables</a>.\n"], "3": ["   * declaredType}. Example usage:\n", "   *\n", "   * try {\n", "   *   someMethodThatCouldThrowAnything();\n", "   * } catch (IKnowWhatToDoWithThisException e) {\n", "   *   handle(e);\n", "   * } catch (Throwable t) {\n", "   *   Throwables.propagateIfInstanceOf(t, IOException.class);\n", "   *   Throwables.propagateIfInstanceOf(t, SQLException.class);\n", "   *   throw Throwables.propagate(t);\n", "   * }\n"], "4": ["   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of\n", "   * {@link RuntimeException} or {@link Error}. Example usage:\n", "   *\n", "   * try {\n", "   *   someMethodThatCouldThrowAnything();\n", "   * } catch (IKnowWhatToDoWithThisException e) {\n", "   *   handle(e);\n", "   * } catch (Throwable t) {\n", "   *   Throwables.propagateIfPossible(t);\n", "   *   throw new RuntimeException(\"unexpected\", t);\n", "   * }\n"], "5": ["   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of\n", "   * {@link RuntimeException}, {@link Error}, or {@code declaredType}. Example usage:\n", "   *\n", "   * try {\n", "   *   someMethodThatCouldThrowAnything();\n", "   * } catch (IKnowWhatToDoWithThisException e) {\n", "   *   handle(e);\n", "   * } catch (Throwable t) {\n", "   *   Throwables.propagateIfPossible(t, OtherException.class);\n", "   *   throw new RuntimeException(\"unexpected\", t);\n", "   * }\n"], "6": ["   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of\n", "   * {@link RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}. In\n", "   * the unlikely case that you have three or more declared checked exception types, you can handle\n", "   * them all by invoking these methods repeatedly. See usage example in\n", "   * {@link #propagateIfPossible(Throwable, Class)}.\n"], "7": ["   * Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or\n", "   * {@link Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then\n", "   * propagates.\n", "   *\n", "   * <p>This method always throws an exception. The {@code RuntimeException} return type allows\n", "   * client code to signal to the compiler that statements after the call are unreachable. Example\n", "   * usage:\n", "   *\n", "   * T doSomething() {\n", "   *   try {\n", "   *     return someMethodThatCouldThrowAnything();\n", "   *   } catch (IKnowWhatToDoWithThisException e) {\n", "   *     return handle(e);\n", "   *   } catch (Throwable t) {\n", "   *     throw Throwables.propagate(t);\n", "   * }\n"], "8": ["   * Returns the innermost cause of {@code throwable}. The first throwable in a chain provides\n", "   * context from when the error or exception was initially detected. Example usage:\n", "   *\n", "   * assertEquals(\"Unable to assign a customer id\", Throwables.getRootCause(e).getMessage());\n"], "9": ["   * Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code\n", "   * throwable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain and\n", "   * will not reflect any subsequent changes to the cause chain.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide entry on <a href=\n", " * \"https://github.com/google/guava/wiki/ThrowablesExplained\">Throwables</a>.\n"], "3": ["   * declaredType}.  Example usage:\n", "   *   try {\n", "   *     someMethodThatCouldThrowAnything();\n", "   *   } catch (IKnowWhatToDoWithThisException e) {\n", "   *     handle(e);\n", "   *   } catch (Throwable t) {\n", "   *     Throwables.propagateIfInstanceOf(t, IOException.class);\n", "   *     Throwables.propagateIfInstanceOf(t, SQLException.class);\n", "   *     throw Throwables.propagate(t);\n", "   *   }\n"], "4": ["   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\n", "   * RuntimeException} or {@link Error}.  Example usage:\n", "   *   try {\n", "   *     someMethodThatCouldThrowAnything();\n", "   *   } catch (IKnowWhatToDoWithThisException e) {\n", "   *     handle(e);\n", "   *   } catch (Throwable t) {\n", "   *     Throwables.propagateIfPossible(t);\n", "   *     throw new RuntimeException(\"unexpected\", t);\n", "   *   }\n"], "5": ["   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\n", "   * RuntimeException}, {@link Error}, or {@code declaredType}. Example usage:\n", "   *   try {\n", "   *     someMethodThatCouldThrowAnything();\n", "   *   } catch (IKnowWhatToDoWithThisException e) {\n", "   *     handle(e);\n", "   *   } catch (Throwable t) {\n", "   *     Throwables.propagateIfPossible(t, OtherException.class);\n", "   *     throw new RuntimeException(\"unexpected\", t);\n", "   *   }\n"], "6": ["   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\n", "   * RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}. In the\n", "   * unlikely case that you have three or more declared checked exception types, you can handle them\n", "   * all by invoking these methods repeatedly. See usage example in {@link\n", "   * #propagateIfPossible(Throwable, Class)}.\n"], "7": ["   * Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link\n", "   * Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates.\n", "   * <p>\n", "   * This method always throws an exception. The {@code RuntimeException} return type\n", "   * allows client code to signal to the compiler that statements after the call are\n", "   * unreachable. Example usage:\n", "   *   T doSomething() {\n", "   *     try {\n", "   *       return someMethodThatCouldThrowAnything();\n", "   *     } catch (IKnowWhatToDoWithThisException e) {\n", "   *       return handle(e);\n", "   *     } catch (Throwable t) {\n", "   *       throw Throwables.propagate(t);\n", "   *     }\n"], "8": ["   * Returns the innermost cause of {@code throwable}. The first throwable in a\n", "   * chain provides context from when the error or exception was initially\n", "   * detected. Example usage:\n", "   *   assertEquals(\"Unable to assign a customer id\", Throwables.getRootCause(e).getMessage());\n"], "9": ["   * Gets a {@code Throwable} cause chain as a list.  The first entry in the list will be {@code\n", "   * throwable} followed by its cause hierarchy.  Note that this is a snapshot of the cause chain\n", "   * and will not reflect any subsequent changes to the cause chain.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [40, 41], "3": [53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64], "4": [76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87], "5": [96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107], "6": [120, 121, 122, 123, 124], "7": [139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156], "8": [170, 171, 172, 174], "9": [186, 187, 188]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [42, 43], "3": [55, 57, 58, 59, 60, 61, 62, 63, 64, 65], "4": [77, 78, 80, 81, 82, 83, 84, 85, 86, 87], "5": [96, 97, 99, 100, 101, 102, 103, 104, 105, 106], "6": [119, 120, 121, 122, 123], "7": [138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152], "8": [167, 168, 169, 171], "9": [183, 184, 185]}}, {"41": "guava/src/com/google/common/base/Ticker.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * @since 10.0 (<a href=\"https://github.com/google/guava/wiki/Compatibility\">mostly\n", " *     source-compatible</a> since 9.0)\n"], "3": ["   * Returns the number of nanoseconds elapsed since this ticker's fixed point of reference.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * @since 10.0\n", " *     (<a href=\"https://github.com/google/guava/wiki/Compatibility\"\n", " *     >mostly source-compatible</a> since 9.0)\n"], "3": ["   * Returns the number of nanoseconds elapsed since this ticker's fixed\n", "   * point of reference.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [29, 30], "3": [41]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [31, 32, 33], "3": [44, 45]}}, {"42": "guava/src/com/google/common/base/Utf8.java", "added": {"1": ["   * Returns the number of bytes in the UTF-8-encoded form of {@code sequence}. For a string, this\n", "   * method is equivalent to {@code string.getBytes(UTF_8).length}, but is more efficient in both\n", "   * time and space.\n"]}, "removed": {"1": ["   * Returns the number of bytes in the UTF-8-encoded form of {@code sequence}. For a string,\n", "   * this method is equivalent to {@code string.getBytes(UTF_8).length}, but is more efficient in\n", "   * both time and space.\n"]}, "added_lines": {"1": [43, 44, 45]}, "removed_lines": {"1": [43, 44, 45]}}, {"43": "guava/src/com/google/common/base/Verify.java", "added": {"1": [" * is supported, not the full range of {@link java.util.Formatter} specifiers. However, note that if\n", " * the number of arguments does not match the number of occurrences of {@code \"%s\"} in the format\n", " * string, {@code Verify} will still behave as expected, and will still include all argument values\n", " * in the error message; the message will simply not be formatted exactly as intended.\n", " * See <a href=\"https://github.com/google/guava/wiki/ConditionalFailuresExplained\">Conditional\n"], "2": ["   * @param errorMessageTemplate a template for the exception message should the check fail. The\n", "   *     message is formed by replacing each {@code %s} placeholder in the template with an\n", "   *     argument. These are matched by position - the first {@code %s} gets\n", "   *     {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted\n", "   *     message in square braces. Unmatched placeholders will be left as-is.\n", "   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments\n", "   *     are converted to strings using {@link String#valueOf(Object)}.\n"], "3": ["   * @param errorMessageTemplate a template for the exception message should the check fail. The\n", "   *     message is formed by replacing each {@code %s} placeholder in the template with an\n", "   *     argument. These are matched by position - the first {@code %s} gets\n", "   *     {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted\n", "   *     message in square braces. Unmatched placeholders will be left as-is.\n", "   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments\n", "   *     are converted to strings using {@link String#valueOf(Object)}.\n"]}, "removed": {"1": [" * is supported, not the full range of {@link java.util.Formatter} specifiers. However, note that\n", " * if the number of arguments does not match the number of occurrences of {@code \"%s\"} in the\n", " * format string, {@code Verify} will still behave as expected, and will still include all argument\n", " * values in the error message; the message will simply not be formatted exactly as intended.\n", " * See\n", " * <a href=\"https://github.com/google/guava/wiki/ConditionalFailuresExplained\">Conditional\n"], "2": ["   * @param errorMessageTemplate a template for the exception message should the\n", "   *     check fail. The message is formed by replacing each {@code %s}\n", "   *     placeholder in the template with an argument. These are matched by\n", "   *     position - the first {@code %s} gets {@code errorMessageArgs[0]}, etc.\n", "   *     Unmatched arguments will be appended to the formatted message in square\n", "   *     braces. Unmatched placeholders will be left as-is.\n", "   * @param errorMessageArgs the arguments to be substituted into the message\n", "   *     template. Arguments are converted to strings using\n", "   *     {@link String#valueOf(Object)}.\n"], "3": ["   * @param errorMessageTemplate a template for the exception message should the\n", "   *     check fail. The message is formed by replacing each {@code %s}\n", "   *     placeholder in the template with an argument. These are matched by\n", "   *     position - the first {@code %s} gets {@code errorMessageArgs[0]}, etc.\n", "   *     Unmatched arguments will be appended to the formatted message in square\n", "   *     braces. Unmatched placeholders will be left as-is.\n", "   * @param errorMessageArgs the arguments to be substituted into the message\n", "   *     template. Arguments are converted to strings using\n", "   *     {@link String#valueOf(Object)}.\n"]}, "added_lines": {"1": [77, 78, 79, 80, 84], "2": [109, 110, 111, 112, 113, 114, 115], "3": [143, 144, 145, 146, 147, 148, 149]}, "removed_lines": {"1": [77, 78, 79, 80, 84, 85], "2": [110, 111, 112, 113, 114, 115, 116, 117, 118], "3": [146, 147, 148, 149, 150, 151, 152, 153, 154]}}, {"44": "guava/src/com/google/common/base/internal/Finalizer.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>While this class is public, we consider it to be *internal* and not part of our published API.\n", " * It is public so we can access it reflectively across class loaders in secure environments.\n", " * <p>This class can't depend on other Guava code. If we were to load this class in the same class\n", " * loader as the rest of Guava, this thread would keep an indirect strong reference to the class\n", " * loader and prevent it from being garbage collected. This poses a problem for environments where\n", " * you want to throw away the class loader. For example, dynamically reloading a web application or\n", " * unloading an OSGi bundle.\n", " * <p>{@code com.google.common.base.FinalizableReferenceQueue} loads this class in its own class\n", " * loader. That way, this class doesn't prevent the main class loader from getting garbage\n", " * collected, and this class can detect when the main class loader has been garbage collected and\n", " * stop itself.\n"], "3": ["   * Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively.\n", "   * @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be queued\n", "   *     either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its\n", "   *     close() method is called.\n"], "4": ["     * 2) To detect when FinalizableReference's class loader has to be garbage collected, at which\n", "     * point, Finalizer can stop running\n"], "5": ["   *\n", "   *     is no longer referenced.\n"], "6": ["       * This is for the benefit of phantom references. Weak and soft references will have already\n", "       * been cleared by this point.\n", "         * The client no longer has a reference to the FinalizableReferenceQueue. We can stop.\n"], "7": ["       * Loop as long as we have references available so as not to waste CPU looking up the Method\n", "       * over and over again.\n"], "8": ["       * FinalizableReference's class loader was reclaimed. While there's a chance that other\n", "       * finalizable references could be enqueued subsequently (at which point the class loader\n", "       * would be resurrected by virtue of us having a strong reference to it), we should pretty\n", "       * much just shut down and make sure we don't keep it alive any longer than necessary.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " *      http://www.apache.org/licenses/LICENSE-2.0\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>While this class is public, we consider it to be *internal* and not part\n", " * of our published API. It is public so we can access it reflectively across\n", " * class loaders in secure environments.\n", " * <p>This class can't depend on other Guava code. If we were\n", " * to load this class in the same class loader as the rest of\n", " * Guava, this thread would keep an indirect strong reference\n", " * to the class loader and prevent it from being garbage collected. This\n", " * poses a problem for environments where you want to throw away the class\n", " * loader. For example, dynamically reloading a web application or unloading\n", " * an OSGi bundle.\n", " * <p>{@code com.google.common.base.FinalizableReferenceQueue} loads this class\n", " * in its own class loader. That way, this class doesn't prevent the main\n", " * class loader from getting garbage collected, and this class can detect when\n", " * the main class loader has been garbage collected and stop itself.\n"], "3": ["   * Starts the Finalizer thread. FinalizableReferenceQueue calls this method\n", "   * reflectively.\n", "   * @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be\n", "   * queued either when the FinalizableReferenceQueue is no longer referenced anywhere, or when\n", "   * its close() method is called.\n"], "4": ["     * 2) To detect when FinalizableReference's class loader has to be garbage\n", "     * collected, at which point, Finalizer can stop running\n"], "5": ["   * is no longer referenced.\n"], "6": ["       * This is for the benefit of phantom references. Weak and soft\n", "       * references will have already been cleared by this point.\n", "         * The client no longer has a reference to the\n", "         * FinalizableReferenceQueue. We can stop.\n"], "7": ["       * Loop as long as we have references available so as not to waste\n", "       * CPU looking up the Method over and over again.\n"], "8": ["       * FinalizableReference's class loader was reclaimed. While there's a\n", "       * chance that other finalizable references could be enqueued\n", "       * subsequently (at which point the class loader would be resurrected\n", "       * by virtue of us having a strong reference to it), we should pretty\n", "       * much just shut down and make sure we don't keep it alive any longer\n", "       * than necessary.\n"]}, "added_lines": {"1": [4, 5, 7, 9, 10, 11, 12], "2": [30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42], "3": [52, 56, 57, 58], "4": [69, 70], "5": [134, 136], "6": [145, 146, 152], "7": [164, 165], "8": [178, 179, 180, 181]}, "removed_lines": {"1": [4, 5, 6, 8, 10, 11, 12, 13, 14], "2": [32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47], "3": [57, 58, 62, 63, 64], "4": [75, 76], "5": [141], "6": [150, 151, 157, 158], "7": [170, 171], "8": [184, 185, 186, 187, 188, 189]}}, {"45": "guava/src/com/google/common/base/package-info.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n", " * <p>This package is a part of the open-source <a href=\"http://github.com/google/guava\">Guava</a>\n", " * library.\n"], "2": [" * <li>{@link com.google.common.base.Function}, {@link com.google.common.base.Functions}\n", " * <li>{@link com.google.common.base.Predicate}, {@link com.google.common.base.Predicates}\n", " * <li>{@link com.google.common.base.Supplier}, {@link com.google.common.base.Suppliers}\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " * <p>This package is a part of the open-source\n", " * <a href=\"http://github.com/google/guava\">Guava</a> library.\n"], "2": [" * <li>{@link com.google.common.base.Function},\n", " *     {@link com.google.common.base.Functions}\n", " * <li>{@link com.google.common.base.Predicate},\n", " *     {@link com.google.common.base.Predicates}\n", " * <li>{@link com.google.common.base.Supplier},\n", " *     {@link com.google.common.base.Suppliers}\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12, 18, 19], "2": [38, 39, 42]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14, 20, 21], "2": [40, 41, 42, 43, 46, 47]}}, {"46": "guava/src/com/google/common/cache/AbstractCache.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": ["   * Accumulates statistics during the operation of a {@link Cache} for presentation by\n", "   * {@link Cache#stats}. This is solely intended for consumption by {@code Cache} implementors.\n"], "3": ["     * Records cache misses. This should be called when a cache request returns a value that was not\n", "     * found in the cache. This method should be called by the loading thread, as well as by threads\n", "     * blocking on the load. Multiple concurrent calls to {@link Cache} lookup methods with the same\n", "     * key on an absent value should result in a single call to either {@code recordLoadSuccess} or\n", "     * {@code recordLoadException} and multiple calls to this method, despite all being served by\n", "     * the results of a single load operation.\n"], "4": ["     * Records the successful load of a new entry. This should be called when a cache request causes\n", "     * an entry to be loaded, and the loading completes successfully. In contrast to\n"], "5": ["     * Records the failed load of a new entry. This should be called when a cache request causes an\n", "     * entry to be loaded, but an exception is thrown while loading the entry. In contrast to\n"], "6": ["     * is evicted due to the cache's eviction strategy, and not as a result of manual\n", "     * {@linkplain Cache#invalidate invalidations}.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": ["   * Accumulates statistics during the operation of a {@link Cache} for presentation by {@link\n", "   * Cache#stats}. This is solely intended for consumption by {@code Cache} implementors.\n"], "3": ["     * Records cache misses. This should be called when a cache request returns a value that was\n", "     * not found in the cache. This method should be called by the loading thread, as well as by\n", "     * threads blocking on the load. Multiple concurrent calls to {@link Cache} lookup methods with\n", "     * the same key on an absent value should result in a single call to either\n", "     * {@code recordLoadSuccess} or {@code recordLoadException} and multiple calls to this method,\n", "     * despite all being served by the results of a single load operation.\n"], "4": ["     * Records the successful load of a new entry. This should be called when a cache request\n", "     * causes an entry to be loaded, and the loading completes successfully. In contrast to\n"], "5": ["     * Records the failed load of a new entry. This should be called when a cache request causes\n", "     * an entry to be loaded, but an exception is thrown while loading the entry. In contrast to\n"], "6": ["     * is evicted due to the cache's eviction strategy, and not as a result of manual {@linkplain\n", "     * Cache#invalidate invalidations}.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [136, 137], "3": [151, 152, 153, 154, 155, 156], "4": [164, 165], "5": [174, 175], "6": [185, 186]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [138, 139], "3": [153, 154, 155, 156, 157, 158], "4": [166, 167], "5": [176, 177], "6": [187, 188]}}, {"47": "guava/src/com/google/common/cache/AbstractLoadingCache.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"48": "guava/src/com/google/common/cache/CacheBuilder.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <li>values automatically wrapped in {@linkplain WeakReference weak} or {@linkplain SoftReference\n", " *     soft} references\n"], "3": [" * are reflected in that iterator. These iterators never throw\n", " * {@link ConcurrentModificationException}.\n", " * {@link #weakKeys} was specified, the cache uses identity ({@code ==}) comparisons instead for\n", " * keys. Likewise, if {@link #weakValues} or {@link #softValues} was specified, the cache uses\n", " * identity comparisons for values.\n", " * <p>Entries are automatically evicted from the cache when any of {@linkplain #maximumSize(long)\n", " * maximumSize}, {@linkplain #maximumWeight(long) maximumWeight}, {@linkplain #expireAfterWrite\n", " * expireAfterWrite}, {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys\n", " * weakKeys}, {@linkplain #weakValues weakValues}, or {@linkplain #softValues softValues} are\n", " * requested.\n", " * <p>If {@linkplain #maximumSize(long) maximumSize} or {@linkplain #maximumWeight(long)\n", " * maximumWeight} is requested entries may be evicted on each cache modification.\n", " * <p>If {@linkplain #expireAfterWrite expireAfterWrite} or {@linkplain #expireAfterAccess\n", " * expireAfterAccess} is requested entries may be evicted on each cache modification, on occasional\n", " * cache accesses, or on calls to {@link Cache#cleanUp}. Expired entries may be counted by\n", " * {@link Cache#size}, but will never be visible to read or write operations.\n"], "4": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/CachesExplained\">caching</a> for a higher-level\n"], "5": ["  static final Supplier<? extends StatsCounter> NULL_STATS_COUNTER =\n", "      Suppliers.ofInstance(\n", "          new StatsCounter() {\n", "            @Override\n", "            public void recordHits(int count) {}\n", "            @Override\n", "            public void recordMisses(int count) {}\n", "            @Override\n", "            public void recordLoadSuccess(long loadTime) {}\n", "            @Override\n", "            public void recordLoadException(long loadTime) {}\n", "            @Override\n", "            public void recordEviction() {}\n", "            @Override\n", "            public CacheStats snapshot() {\n", "              return EMPTY_STATS;\n", "            }\n", "          });\n", "        @Override\n", "        public StatsCounter get() {\n", "          return new SimpleStatsCounter();\n", "        }\n", "      };\n"], "6": ["  static final Ticker NULL_TICKER =\n", "      new Ticker() {\n", "        @Override\n", "        public long read() {\n", "          return 0;\n", "        }\n", "      };\n"], "7": ["    return spec.toCacheBuilder().lenientParsing();\n"], "8": ["    checkState(\n", "        valueEquivalence == null, \"value equivalence was already set to %s\", valueEquivalence);\n"], "9": ["    checkState(\n", "        this.initialCapacity == UNSET_INT,\n", "        \"initial capacity was already set to %s\",\n"], "10": ["   * <p>Defaults to 4. <b>Note:</b>The default may change in the future. If you care about this\n", "   * write, and twice for each cache loading computation (once prior to loading the new value, and\n", "   * once after loading completes). Much internal cache management is performed at the segment\n"], "11": ["    checkState(\n", "        this.concurrencyLevel == UNSET_INT,\n", "        \"concurrency level was already set to %s\",\n"], "12": ["    checkState(\n", "        this.maximumSize == UNSET_INT, \"maximum size was already set to %s\", this.maximumSize);\n", "    checkState(\n", "        this.maximumWeight == UNSET_INT,\n", "        \"maximum weight was already set to %s\",\n"], "13": ["   * cache. This can be useful in testing, or to disable caching temporarily without a code change.\n"], "14": ["    checkState(\n", "        this.maximumWeight == UNSET_INT,\n", "        \"maximum weight was already set to %s\",\n", "    checkState(\n", "        this.maximumSize == UNSET_INT, \"maximum size was already set to %s\", this.maximumSize);\n", "   * Specifies the weigher to use in determining the weight of entries. Entry weight is taken into\n", "   * consideration by {@link #maximumWeight(long)} when determining which entries to evict, and use\n", "   * of this method requires a corresponding call to {@link #maximumWeight(long)} prior to calling\n", "   * {@link #build}. Weights are measured and recorded when entries are inserted into the cache, and\n", "   * are thus effectively static during the lifetime of a cache entry.\n"], "15": ["   * <p><b>Warning:</b> if you ignore the above advice, and use this {@code CacheBuilder} to build a\n", "   * cache whose key or value type is incompatible with the weigher, you will likely experience a\n", "   * {@link ClassCastException} at some <i>undefined</i> point in the future.\n"], "16": ["      checkState(\n", "          this.maximumSize == UNSET_INT,\n", "          \"weigher can not be combined with maximum size\",\n"], "17": ["   * Specifies that each key (not value) stored in the cache should be wrapped in a\n", "   * {@link WeakReference} (by default, strong references are used).\n", "   * <p>Entries with keys that have been garbage collected may be counted in {@link Cache#size}, but\n", "   * will never be visible to read or write operations; such entries are cleaned up as part of the\n", "   * routine maintenance described in the class javadoc.\n"], "18": ["   * <p><b>Warning:</b> in most circumstances it is better to set a per-cache\n", "   * {@linkplain #maximumSize(long) maximum size} instead of using soft references. You should only\n", "   * use this method if you are well familiar with the practical consequences of soft references.\n"], "19": ["   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)\n", "   * maximumSize}{@code (0)}, ignoring any otherwise-specificed maximum size or weight. This can be\n", "   * useful in testing, or to disable caching temporarily without a code change.\n"], "20": ["    checkState(\n", "        expireAfterWriteNanos == UNSET_INT,\n", "        \"expireAfterWrite was already set to %s ns\",\n"], "21": ["   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)\n", "   * maximumSize}{@code (0)}, ignoring any otherwise-specificed maximum size or weight. This can be\n", "   * useful in testing, or to disable caching temporarily without a code change.\n"], "22": ["    checkState(\n", "        expireAfterAccessNanos == UNSET_INT,\n", "        \"expireAfterAccess was already set to %s ns\",\n"], "23": ["        ? DEFAULT_EXPIRATION_NANOS\n", "        : expireAfterAccessNanos;\n"], "24": ["   * <p><b>Warning:</b> after invoking this method, do not continue to use <i>this</i> cache builder\n", "   * reference; instead use the reference this method <i>returns</i>. At runtime, these point to the\n", "   * same instance, but only the returned reference has the correct generic type information so as\n", "   * to ensure type safety. For best results, use the standard method-chaining idiom illustrated in\n", "   * the class documentation above, configuring a builder and building your cache in a single\n", "   * statement. Failure to heed this advice can result in a {@link ClassCastException} being thrown\n", "   * by a cache operation at some <i>undefined</i> point in the future.\n"], "25": ["   * loading the value for this key, simply waits for that thread to finish and returns its loaded\n", "   * value. Note that multiple threads can concurrently load values for distinct keys.\n"], "26": ["      CacheLoader<? super K1, V1> loader) {\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <li>values automatically wrapped in {@linkplain WeakReference weak} or\n", " *     {@linkplain SoftReference soft} references\n"], "3": [" * are reflected in that iterator. These iterators never throw {@link\n", " * ConcurrentModificationException}.\n", " * {@link #weakKeys} was specified, the cache uses identity ({@code ==})\n", " * comparisons instead for keys. Likewise, if {@link #weakValues} or {@link #softValues} was\n", " * specified, the cache uses identity comparisons for values.\n", " * <p>Entries are automatically evicted from the cache when any of\n", " * {@linkplain #maximumSize(long) maximumSize}, {@linkplain #maximumWeight(long) maximumWeight},\n", " * {@linkplain #expireAfterWrite expireAfterWrite},\n", " * {@linkplain #expireAfterAccess expireAfterAccess}, {@linkplain #weakKeys weakKeys},\n", " * {@linkplain #weakValues weakValues}, or {@linkplain #softValues softValues} are requested.\n", " * <p>If {@linkplain #maximumSize(long) maximumSize} or\n", " * {@linkplain #maximumWeight(long) maximumWeight} is requested entries may be evicted on each cache\n", " * modification.\n", " * <p>If {@linkplain #expireAfterWrite expireAfterWrite} or\n", " * {@linkplain #expireAfterAccess expireAfterAccess} is requested entries may be evicted on each\n", " * cache modification, on occasional cache accesses, or on calls to {@link Cache#cleanUp}. Expired\n", " * entries may be counted by {@link Cache#size}, but will never be visible to read or write\n", " * operations.\n"], "4": [" * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/CachesExplained\">caching</a> for a higher-level\n"], "5": ["  static final Supplier<? extends StatsCounter> NULL_STATS_COUNTER = Suppliers.ofInstance(\n", "      new StatsCounter() {\n", "        @Override\n", "        public void recordHits(int count) {}\n", "        @Override\n", "        public void recordMisses(int count) {}\n", "        @Override\n", "        public void recordLoadSuccess(long loadTime) {}\n", "        @Override\n", "        public void recordLoadException(long loadTime) {}\n", "        @Override\n", "        public void recordEviction() {}\n", "        @Override\n", "        public CacheStats snapshot() {\n", "          return EMPTY_STATS;\n", "        }\n", "      });\n", "    @Override\n", "    public StatsCounter get() {\n", "      return new SimpleStatsCounter();\n", "    }\n", "  };\n"], "6": ["  static final Ticker NULL_TICKER = new Ticker() {\n", "    @Override\n", "    public long read() {\n", "      return 0;\n", "    }\n", "  };\n"], "7": ["    return spec.toCacheBuilder()\n", "        .lenientParsing();\n"], "8": ["    checkState(valueEquivalence == null,\n", "        \"value equivalence was already set to %s\", valueEquivalence);\n"], "9": ["    checkState(this.initialCapacity == UNSET_INT, \"initial capacity was already set to %s\",\n"], "10": ["   * <p> Defaults to 4. <b>Note:</b>The default may change in the future. If you care about this\n", "   * write, and twice for each cache loading computation (once prior to loading the new value,\n", "   * and once after loading completes). Much internal cache management is performed at the segment\n"], "11": ["    checkState(this.concurrencyLevel == UNSET_INT, \"concurrency level was already set to %s\",\n"], "12": ["    checkState(this.maximumSize == UNSET_INT, \"maximum size was already set to %s\",\n", "        this.maximumSize);\n", "    checkState(this.maximumWeight == UNSET_INT, \"maximum weight was already set to %s\",\n"], "13": ["   * cache. This can be useful in testing, or to disable caching temporarily without a code\n", "   * change.\n"], "14": ["    checkState(this.maximumWeight == UNSET_INT, \"maximum weight was already set to %s\",\n", "    checkState(this.maximumSize == UNSET_INT, \"maximum size was already set to %s\",\n", "        this.maximumSize);\n", "   * Specifies the weigher to use in determining the weight of entries. Entry weight is taken\n", "   * into consideration by {@link #maximumWeight(long)} when determining which entries to evict, and\n", "   * use of this method requires a corresponding call to {@link #maximumWeight(long)} prior to\n", "   * calling {@link #build}. Weights are measured and recorded when entries are inserted into the\n", "   * cache, and are thus effectively static during the lifetime of a cache entry.\n"], "15": ["   * <p><b>Warning:</b> if you ignore the above advice, and use this {@code CacheBuilder} to build\n", "   * a cache whose key or value type is incompatible with the weigher, you will likely experience\n", "   * a {@link ClassCastException} at some <i>undefined</i> point in the future.\n"], "16": ["      checkState(this.maximumSize == UNSET_INT, \"weigher can not be combined with maximum size\",\n"], "17": ["   * Specifies that each key (not value) stored in the cache should be wrapped in a {@link\n", "   * WeakReference} (by default, strong references are used).\n", "   * <p>Entries with keys that have been garbage collected may be counted in {@link Cache#size},\n", "   * but will never be visible to read or write operations; such entries are cleaned up as part of\n", "   * the routine maintenance described in the class javadoc.\n"], "18": ["   * <p><b>Warning:</b> in most circumstances it is better to set a per-cache {@linkplain\n", "   * #maximumSize(long) maximum size} instead of using soft references. You should only use this\n", "   * method if you are well familiar with the practical consequences of soft references.\n"], "19": ["   * <p>When {@code duration} is zero, this method hands off to\n", "   * {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specificed maximum\n", "   * size or weight. This can be useful in testing, or to disable caching temporarily without a code\n", "   * change.\n"], "20": ["    checkState(expireAfterWriteNanos == UNSET_INT, \"expireAfterWrite was already set to %s ns\",\n"], "21": ["   * <p>When {@code duration} is zero, this method hands off to\n", "   * {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specificed maximum\n", "   * size or weight. This can be useful in testing, or to disable caching temporarily without a code\n", "   * change.\n"], "22": ["    checkState(expireAfterAccessNanos == UNSET_INT, \"expireAfterAccess was already set to %s ns\",\n"], "23": ["        ? DEFAULT_EXPIRATION_NANOS : expireAfterAccessNanos;\n"], "24": ["   * <p><b>Warning:</b> after invoking this method, do not continue to use <i>this</i> cache\n", "   * builder reference; instead use the reference this method <i>returns</i>. At runtime, these\n", "   * point to the same instance, but only the returned reference has the correct generic type\n", "   * information so as to ensure type safety. For best results, use the standard method-chaining\n", "   * idiom illustrated in the class documentation above, configuring a builder and building your\n", "   * cache in a single statement. Failure to heed this advice can result in a {@link\n", "   * ClassCastException} being thrown by a cache operation at some <i>undefined</i> point in the\n", "   * future.\n"], "25": ["   * loading the value for this key, simply waits for that thread to finish and returns its\n", "   * loaded value. Note that multiple threads can concurrently load values for distinct keys.\n"], "26": ["          CacheLoader<? super K1, V1> loader) {\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [52, 53], "3": [94, 95, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115], "4": [137, 138], "5": [154, 155, 156, 157, 158, 160, 161, 163, 164, 166, 167, 169, 170, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185], "6": [203, 204, 205, 206, 207, 208, 209], "7": [256], "8": [312, 313], "9": [334, 335, 336], "10": [359, 364, 365], "11": [379, 380, 381], "12": [409, 410, 411, 412, 413], "13": [432], "14": [447, 448, 449, 451, 452, 459, 460, 461, 462, 463], "15": [477, 478, 479], "16": [492, 493, 494], "17": [519, 520, 525, 526, 527], "18": [575, 576, 577], "19": [608, 609, 610], "20": [624, 625, 626], "21": [644, 645, 646], "22": [660, 661, 662], "23": [671, 672], "24": [742, 743, 744, 745, 746, 747, 748], "25": [802, 803], "26": [812]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [54, 55], "3": [96, 97, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119], "4": [141, 142], "5": [158, 159, 160, 161, 163, 164, 166, 167, 169, 170, 172, 173, 175, 176, 177, 178, 179, 184, 185, 186, 187, 188], "6": [206, 207, 208, 209, 210, 211], "7": [258, 259], "8": [315, 316], "9": [337], "10": [360, 365, 366], "11": [380], "12": [408, 409, 410], "13": [429, 430], "14": [445, 447, 448, 455, 456, 457, 458, 459], "15": [473, 474, 475], "16": [488], "17": [513, 514, 519, 520, 521], "18": [569, 570, 571], "19": [602, 603, 604, 605], "20": [619], "21": [637, 638, 639, 640], "22": [654], "23": [663], "24": [733, 734, 735, 736, 737, 738, 739, 740], "25": [794, 795], "26": [804]}}, {"49": "guava/src/com/google/common/cache/CacheBuilderSpec.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>{@code CacheBuilderSpec} supports parsing configuration off of a string, which makes it\n", " * especially useful for command-line configuration of a {@code CacheBuilder}.\n", " * <p>The string syntax is a series of comma-separated keys or key-value pairs, each corresponding\n", " * to a {@code CacheBuilder} method.\n"], "3": [" * <p>The set of supported keys will grow as {@code CacheBuilder} evolves, but existing keys will\n", " * never be removed.\n", " * <p>Durations are represented by an integer, followed by one of \"d\", \"h\", \"m\", or \"s\",\n", " * representing days, hours, minutes, or seconds respectively. (There is currently no syntax to\n", " * request expiration in milliseconds, microseconds, or nanoseconds.)\n", " * <p>Whitespace before and after commas and equal signs is ignored. Keys may not be repeated; it is\n", " * also illegal to use the following pairs of keys in a single value:\n", " * <p>{@code CacheBuilderSpec} does not support configuring {@code CacheBuilder} methods with\n", " * non-value parameters. These must be configured in code.\n"], "4": ["  /** Specification; used for toParseableString(). */\n"], "5": ["        checkArgument(\n", "            keyAndValue.size() <= 2,\n", "            \"key-value pair %s with more than one equals sign\",\n", "            keyValuePair);\n"], "6": ["   * Returns a string that can be used to parse an equivalent {@code CacheBuilderSpec}. The order\n", "   * and form of this representation is not guaranteed, except that reparsing its output will\n", "   * produce a {@code CacheBuilderSpec} equal to this instance.\n", "   * Returns a string representation for this CacheBuilderSpec instance. The form of this\n", "   * representation is not guaranteed.\n"], "7": ["        && Objects.equal(\n", "            durationInNanos(writeExpirationDuration, writeExpirationTimeUnit),\n", "        && Objects.equal(\n", "            durationInNanos(accessExpirationDuration, accessExpirationTimeUnit),\n", "        && Objects.equal(\n", "            durationInNanos(refreshDuration, refreshTimeUnit),\n", "   * Converts an expiration duration/unit pair into a single Long for hashing and equality. Uses\n", "   * nanos to match CacheBuilder implementation.\n", "  @Nullable\n", "  private static Long durationInNanos(long duration, @Nullable TimeUnit unit) {\n"], "8": ["      checkArgument(\n", "          spec.initialCapacity == null,\n", "          \"initial capacity was already set to \",\n", "          spec.initialCapacity);\n"], "9": ["      checkArgument(spec.maximumSize == null, \"maximum size was already set to \", spec.maximumSize);\n", "      checkArgument(\n", "          spec.maximumWeight == null, \"maximum weight was already set to \", spec.maximumWeight);\n"], "10": ["      checkArgument(\n", "          spec.maximumWeight == null, \"maximum weight was already set to \", spec.maximumWeight);\n", "      checkArgument(spec.maximumSize == null, \"maximum size was already set to \", spec.maximumSize);\n"], "11": ["      checkArgument(\n", "          spec.concurrencyLevel == null,\n", "          \"concurrency level was already set to \",\n", "          spec.concurrencyLevel);\n"], "12": ["      checkArgument(\n", "          spec.valueStrength == null, \"%s was already set to %s\", key, spec.valueStrength);\n"], "13": ["    protected abstract void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit);\n"], "14": ["                format(\n", "                    \"key %s invalid format.  was %s, must end with one of [dDhHmMsS]\", key, value));\n"], "15": ["    @Override\n", "    protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n"], "16": ["    @Override\n", "    protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n"], "17": ["    @Override\n", "    protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>{@code CacheBuilderSpec} supports parsing configuration off of a string, which\n", " * makes it especially useful for command-line configuration of a {@code CacheBuilder}.\n", " * <p>The string syntax is a series of comma-separated keys or key-value pairs,\n", " * each corresponding to a {@code CacheBuilder} method.\n"], "3": [" * <p>The set of supported keys will grow as {@code CacheBuilder} evolves, but existing keys\n", " * will never be removed.\n", " * <p>Durations are represented by an integer, followed by one of \"d\", \"h\", \"m\",\n", " * or \"s\", representing days, hours, minutes, or seconds respectively.  (There\n", " * is currently no syntax to request expiration in milliseconds, microseconds,\n", " * or nanoseconds.)\n", " * <p>Whitespace before and after commas and equal signs is ignored.  Keys may\n", " * not be repeated;  it is also illegal to use the following pairs of keys in\n", " * a single value:\n", " * <p>{@code CacheBuilderSpec} does not support configuring {@code CacheBuilder} methods\n", " * with non-value parameters.  These must be configured in code.\n"], "4": ["  /** Specification;  used for toParseableString(). */\n"], "5": ["        checkArgument(keyAndValue.size() <= 2,\n", "            \"key-value pair %s with more than one equals sign\", keyValuePair);\n"], "6": ["   * Returns a string that can be used to parse an equivalent\n", "   * {@code CacheBuilderSpec}.  The order and form of this representation is\n", "   * not guaranteed, except that reparsing its output will produce\n", "   * a {@code CacheBuilderSpec} equal to this instance.\n", "   * Returns a string representation for this CacheBuilderSpec instance.\n", "   * The form of this representation is not guaranteed.\n"], "7": ["        && Objects.equal(durationInNanos(writeExpirationDuration, writeExpirationTimeUnit),\n", "        && Objects.equal(durationInNanos(accessExpirationDuration, accessExpirationTimeUnit),\n", "        && Objects.equal(durationInNanos(refreshDuration, refreshTimeUnit),\n", "   * Converts an expiration duration/unit pair into a single Long for hashing and equality.\n", "   * Uses nanos to match CacheBuilder implementation.\n", "  @Nullable private static Long durationInNanos(long duration, @Nullable TimeUnit unit) {\n"], "8": ["      checkArgument(spec.initialCapacity == null,\n", "          \"initial capacity was already set to \", spec.initialCapacity);\n"], "9": ["      checkArgument(spec.maximumSize == null,\n", "          \"maximum size was already set to \", spec.maximumSize);\n", "      checkArgument(spec.maximumWeight == null,\n", "          \"maximum weight was already set to \", spec.maximumWeight);\n"], "10": ["      checkArgument(spec.maximumWeight == null,\n", "          \"maximum weight was already set to \", spec.maximumWeight);\n", "      checkArgument(spec.maximumSize == null,\n", "          \"maximum size was already set to \", spec.maximumSize);\n"], "11": ["      checkArgument(spec.concurrencyLevel == null,\n", "          \"concurrency level was already set to \", spec.concurrencyLevel);\n"], "12": ["      checkArgument(spec.valueStrength == null,\n", "        \"%s was already set to %s\", key, spec.valueStrength);\n"], "13": ["    protected abstract void parseDuration(\n", "        CacheBuilderSpec spec,\n", "        long duration,\n", "        TimeUnit unit);\n"], "14": ["                format(\"key %s invalid format.  was %s, must end with one of [dDhHmMsS]\",\n", "                    key, value));\n"], "15": ["    @Override protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n"], "16": ["    @Override protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n"], "17": ["    @Override protected void parseDuration(CacheBuilderSpec spec, long duration, TimeUnit unit) {\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [37, 38, 40, 41], "3": [56, 57, 59, 60, 61, 63, 64, 70, 71], "4": [122], "5": [140, 141, 142, 143], "6": [221, 222, 223, 230, 231], "7": [269, 270, 272, 273, 275, 276, 281, 282, 284, 285], "8": [325, 326, 327, 328], "9": [337, 338, 339], "10": [348, 349, 350], "11": [359, 360, 361, 362], "12": [394, 395], "13": [414], "14": [437, 438], "15": [452, 453], "16": [462, 463], "17": [472, 473]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [39, 40, 42, 43], "3": [58, 59, 61, 62, 63, 64, 66, 67, 68, 74, 75], "4": [126], "5": [144, 145], "6": [223, 224, 225, 226, 233, 234], "7": [272, 274, 276, 281, 282, 284], "8": [324, 325], "9": [334, 335, 336, 337], "10": [346, 347, 348, 349], "11": [358, 359], "12": [391, 392], "13": [411, 412, 413, 414], "14": [437, 438], "15": [452], "16": [461], "17": [470]}}, {"50": "guava/src/com/google/common/cache/CacheLoader.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": ["   * @return the future new value associated with {@code key}; <b>must not be null, must not return\n", "   *     null</b>\n"], "3": ["   * contains extra keys not present in {@code keys} then all returned entries will be cached, but\n", "   * only the entries for {@code keys} will be returned from {@code getAll}.\n", "   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not\n", "   *     contain null values</b>\n"], "4": ["  private static final class FunctionToCacheLoader<K, V> extends CacheLoader<K, V>\n", "      implements Serializable {\n"], "5": ["   * <p>This method is useful only when {@code loader.reload} has a synchronous implementation, such\n", "   * as {@linkplain #reload the default implementation}.\n"], "6": ["        ListenableFutureTask<V> task =\n", "            ListenableFutureTask.create(\n", "                new Callable<V>() {\n", "                  @Override\n", "                  public V call() throws Exception {\n", "                    return loader.reload(key, oldValue).get();\n", "                  }\n", "                });\n"], "7": ["  private static final class SupplierToCacheLoader<V> extends CacheLoader<Object, V>\n", "      implements Serializable {\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": ["   * @return the future new value associated with {@code key};\n", "   *     <b>must not be null, must not return null</b>\n"], "3": ["   * contains extra keys not present in {@code keys} then all returned entries will be cached,\n", "   * but only the entries for {@code keys} will be returned from {@code getAll}.\n", "   * @return a map from each key in {@code keys} to the value associated with that key;\n", "   *     <b>may not contain null values</b>\n"], "4": ["  private static final class FunctionToCacheLoader<K, V>\n", "      extends CacheLoader<K, V> implements Serializable {\n"], "5": ["   * <p>This method is useful only when {@code loader.reload} has a synchronous implementation,\n", "   * such as {@linkplain #reload the default implementation}.\n"], "6": ["        ListenableFutureTask<V> task = ListenableFutureTask.create(new Callable<V>() {\n", "          @Override\n", "          public V call() throws Exception {\n", "            return loader.reload(key, oldValue).get();\n", "          }\n", "        });\n"], "7": ["  private static final class SupplierToCacheLoader<V>\n", "      extends CacheLoader<Object, V> implements Serializable {\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [82, 83], "3": [103, 104, 111, 112], "4": [137, 138], "5": [170, 171], "6": [188, 189, 190, 191, 192, 193, 194, 195], "7": [207, 208]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [84, 85], "3": [105, 106, 113, 114], "4": [139, 140], "5": [172, 173], "6": [190, 191, 192, 193, 194, 195], "7": [207, 208]}}, {"51": "guava/src/com/google/common/cache/CacheStats.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" *     incremented, and the total loading time, in nanoseconds, is added to {@code totalLoadTime}.\n", " *     loadExceptionCount} are incremented, and the total loading time, in nanoseconds, is added to\n", " *     {@code totalLoadTime}.\n", " * <li>Cache lookups that encounter a missing cache entry that is still loading will wait for\n", " *     loading to complete (whether successful or not) and then increment {@code missCount}.\n", " * <li>No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of the\n", " *     cache.\n"], "3": ["  public CacheStats(\n", "      long hitCount,\n", "      long missCount,\n", "      long loadSuccessCount,\n", "      long loadExceptionCount,\n", "      long totalLoadTime,\n", "      long evictionCount) {\n"], "4": ["   * {@code hitCount / requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that\n", "   * {@code hitRate + missRate =~ 1.0}.\n"], "5": ["   * {@code missCount / requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that\n", "   * {@code hitRate + missRate =~ 1.0}. Cache misses include all requests which weren't cache hits,\n", "   * including requests which resulted in either successful or failed loading attempts, and requests\n", "   * which waited for other threads to finish loading. It is thus the case that\n", "   * {@code missCount &gt;= loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for\n", "   * the same key will result in a single load operation.\n"], "6": ["   * values. This includes both successful load operations, as well as those that threw exceptions.\n", "   * This is defined as {@code loadSuccessCount + loadExceptionCount}.\n"], "7": ["   * This is usually incremented in conjunction with {@link #missCount}, though {@code missCount} is\n", "   * also incremented when an exception is encountered during cache loading (see\n", "   * single load operation. This may be incremented not in conjunction with {@code missCount} if the\n", "   * load occurs as a result of a refresh or if the cache loader returned more items than was\n", "   * requested. {@code missCount} may also be incremented not in conjunction with this (nor\n", "   * {@link #loadExceptionCount}) on calls to {@code getIfPresent}.\n", "   * Returns the number of times {@link Cache} lookup methods threw an exception while loading a new\n", "   * value. This is usually incremented in conjunction with {@code missCount}, though\n", "   * {@link #loadSuccessCount}). Multiple concurrent misses for the same key will result in a single\n", "   * load operation. This may be incremented not in conjunction with {@code missCount} if the load\n", "   * occurs as a result of a refresh or if the cache loader returned more items than was requested.\n", "   * {@code missCount} may also be incremented not in conjunction with this (nor\n", "   * {@link #loadSuccessCount}) on calls to {@code getIfPresent}.\n"], "8": ["   * {@code loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when\n", "   * {@code loadSuccessCount + loadExceptionCount == 0}.\n", "    return (totalLoadCount == 0) ? 0.0 : (double) loadExceptionCount / totalLoadCount;\n", "   * used to calculate the miss penalty. This value is increased every time {@code loadSuccessCount}\n", "   * or {@code loadExceptionCount} is incremented.\n"], "9": ["    return (totalLoadCount == 0) ? 0.0 : (double) totalLoadTime / totalLoadCount;\n"], "10": ["   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and\n", "   * {@code other}.\n"], "11": ["    return Objects.hashCode(\n", "        hitCount, missCount, loadSuccessCount, loadExceptionCount, totalLoadTime, evictionCount);\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" *     incremented, and the total loading time, in nanoseconds, is added to\n", " *     {@code totalLoadTime}.\n", " *     loadExceptionCount} are incremented, and the total loading time, in nanoseconds, is\n", " *     added to {@code totalLoadTime}.\n", " * <li>Cache lookups that encounter a missing cache entry that is still loading will wait\n", " *     for loading to complete (whether successful or not) and then increment {@code missCount}.\n", " * <li>No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of\n", " *     the cache.\n"], "3": ["  public CacheStats(long hitCount, long missCount, long loadSuccessCount,\n", "      long loadExceptionCount, long totalLoadTime, long evictionCount) {\n"], "4": ["   * {@code hitCount / requestCount}, or {@code 1.0} when {@code requestCount == 0}.\n", "   * Note that {@code hitRate + missRate =~ 1.0}.\n"], "5": ["   * {@code missCount / requestCount}, or {@code 0.0} when {@code requestCount == 0}.\n", "   * Note that {@code hitRate + missRate =~ 1.0}. Cache misses include all requests which\n", "   * weren't cache hits, including requests which resulted in either successful or failed loading\n", "   * attempts, and requests which waited for other threads to finish loading. It is thus the case\n", "   * that {@code missCount &gt;= loadSuccessCount + loadExceptionCount}. Multiple\n", "   * concurrent misses for the same key will result in a single load operation.\n"], "6": ["   * values. This includes both successful load operations, as well as those that threw\n", "   * exceptions. This is defined as {@code loadSuccessCount + loadExceptionCount}.\n"], "7": ["   * This is usually incremented in conjunction with {@link #missCount}, though {@code missCount}\n", "   * is also incremented when an exception is encountered during cache loading (see\n", "   * single load operation. This may be incremented not in conjunction with {@code missCount}\n", "   * if the load occurs as a result of a refresh or if the cache loader returned more items\n", "   * than was requested. {@code missCount} may also be incremented not in conjunction with\n", "   * this (nor {@link #loadExceptionCount}) on calls to {@code getIfPresent}. \n", "   * Returns the number of times {@link Cache} lookup methods threw an exception while loading a\n", "   * new value. This is usually incremented in conjunction with {@code missCount}, though\n", "   * {@link #loadSuccessCount}). Multiple concurrent misses for the same key will result in a\n", "   * single load operation. This may be incremented not in conjunction with {@code missCount}\n", "   * if the load occurs as a result of a refresh or if the cache loader returned more items\n", "   * than was requested. {@code missCount} may also be incremented not in conjunction with\n", "   * this (nor {@link #loadSuccessCount}) on calls to {@code getIfPresent}. \n"], "8": ["   * {@code loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or\n", "   * {@code 0.0} when {@code loadSuccessCount + loadExceptionCount == 0}.\n", "    return (totalLoadCount == 0)\n", "        ? 0.0\n", "        : (double) loadExceptionCount / totalLoadCount;\n", "   * used to calculate the miss penalty. This value is increased every time\n", "   * {@code loadSuccessCount} or {@code loadExceptionCount} is incremented.\n"], "9": ["    return (totalLoadCount == 0)\n", "        ? 0.0\n", "        : (double) totalLoadTime / totalLoadCount;\n"], "10": ["   * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats}\n", "   * and {@code other}.\n"], "11": ["    return Objects.hashCode(hitCount, missCount, loadSuccessCount, loadExceptionCount,\n", "        totalLoadTime, evictionCount);\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [37, 39, 40, 41, 42, 46, 47], "3": [72, 73, 74, 75, 76, 77, 78], "4": [111, 112], "5": [131, 132, 133, 134, 135, 136], "6": [145, 146], "7": [154, 155, 157, 158, 159, 160, 167, 168, 170, 171, 172, 173, 174], "8": [182, 183, 187, 192, 193], "9": [205], "10": [232, 233], "11": [249, 250]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [39, 40, 42, 43, 44, 45, 49, 50], "3": [75, 76], "4": [109, 110], "5": [129, 130, 131, 132, 133, 134], "6": [143, 144], "7": [152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172], "8": [180, 181, 185, 186, 187, 192, 193], "9": [205, 206, 207], "10": [234, 235], "11": [251, 252]}}, {"52": "guava/src/com/google/common/cache/ForwardingCache.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": ["  public void putAll(Map<? extends K, ? extends V> m) {\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": ["  public void putAll(Map<? extends K,? extends V> m) {\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [83]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [85]}}, {"53": "guava/src/com/google/common/cache/ForwardingLoadingCache.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"54": "guava/src/com/google/common/cache/LoadingCache.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * A semi-persistent mapping from keys to values. Values are automatically loaded by the cache, and\n", " * are stored in the cache until either evicted or manually invalidated.\n"], "3": ["   * <p>If the cache loader associated with this cache is known not to throw checked exceptions,\n", "   * then prefer {@link #getUnchecked} over this method.\n", "   *     ExecutionException} is thrown\n", "   *     <a href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\n"], "4": ["   * necessary. No observable state associated with this cache is modified until loading completes.\n", "   * Unlike {@link #get}, this method does not throw a checked exception, and thus should only be\n", "   * used in situations where checked exceptions are not thrown by the cache loader.\n"], "5": ["   * entries returned by {@link CacheLoader#loadAll} will be stored in the cache, over-writing any\n", "   * previously cached values. This method will throw an exception if {@link CacheLoader#loadAll}\n", "   * returns {@code null}, returns a map containing null keys or values, or fails to return an entry\n", "   * for each requested key.\n", "   *     ExecutionException} is thrown\n", "   *     <a href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\n"], "6": ["   * <p>Caches loaded by a {@link CacheLoader} will call {@link CacheLoader#reload} if the cache\n", "   * currently contains a value for {@code key}, and {@link CacheLoader#load} otherwise. Loading is\n", "   * asynchronous only if {@link CacheLoader#reload} was overridden with an asynchronous\n", "   * implementation.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * A semi-persistent mapping from keys to values. Values are automatically loaded by the cache,\n", " * and are stored in the cache until either evicted or manually invalidated.\n"], "3": ["   * <p>If the cache loader associated with this cache is known not to throw checked\n", "   * exceptions, then prefer {@link #getUnchecked} over this method.\n", "   *     ExecutionException} is thrown <a\n", "   *     href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\n"], "4": ["   * necessary. No observable state associated with this cache is modified until loading\n", "   * completes. Unlike {@link #get}, this method does not throw a checked exception, and thus should\n", "   * only be used in situations where checked exceptions are not thrown by the cache loader.\n"], "5": ["   * entries returned by {@link CacheLoader#loadAll} will be stored in the cache, over-writing\n", "   * any previously cached values. This method will throw an exception if\n", "   * {@link CacheLoader#loadAll} returns {@code null}, returns a map containing null keys or values,\n", "   * or fails to return an entry for each requested key.\n", "   *     ExecutionException} is thrown <a\n", "   *     href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\n"], "6": ["   * <p>Caches loaded by a {@link CacheLoader} will call {@link CacheLoader#reload} if the\n", "   * cache currently contains a value for {@code key}, and {@link CacheLoader#load} otherwise.\n", "   * Loading is asynchronous only if {@link CacheLoader#reload} was overridden with an\n", "   * asynchronous implementation.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [27, 28], "3": [56, 57, 60, 61], "4": [71, 72, 73], "5": [102, 103, 104, 105, 111, 112], "6": [139, 140, 141, 142]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [29, 30], "3": [58, 59, 62, 63], "4": [73, 74, 75], "5": [104, 105, 106, 107, 113, 114], "6": [141, 142, 143, 144]}}, {"55": "guava/src/com/google/common/cache/LocalCache.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>This implementation is heavily derived from revision 1.96 of\n", " * <a href=\"http://tinyurl.com/ConcurrentHashMap\">ConcurrentHashMap.java</a>.\n"], "3": ["   * Accumulates global cache statistics. Note that there are also per-segments stats counters which\n", "   * must be aggregated to obtain a global stats view.\n", "  @Nullable final CacheLoader<? super K, V> defaultLoader;\n"], "4": ["    removalNotificationQueue =\n", "        (removalListener == NullListener.INSTANCE)\n", "            ? LocalCache.<RemovalNotification<K, V>>discardingQueue()\n", "            : new ConcurrentLinkedQueue<RemovalNotification<K, V>>();\n"], "5": ["    while (segmentCount < concurrencyLevel && (!evictsBySize() || segmentCount * 20 <= maxWeight)) {\n"], "6": ["      STRONG,\n", "      STRONG_ACCESS,\n", "      STRONG_WRITE,\n", "      STRONG_ACCESS_WRITE,\n", "      WEAK,\n", "      WEAK_ACCESS,\n", "      WEAK_WRITE,\n", "      WEAK_ACCESS_WRITE,\n", "    static EntryFactory getFactory(\n", "        Strength keyStrength, boolean usesAccessQueue, boolean usesWriteQueue) {\n", "      int flags =\n", "          ((keyStrength == Strength.WEAK) ? WEAK_MASK : 0)\n", "              | (usesAccessQueue ? ACCESS_MASK : 0)\n", "              | (usesWriteQueue ? WRITE_MASK : 0);\n"], "7": ["     * Waits for a value that may still be loading. Unlike get(), this method can block (in the case\n", "     * of FutureValueReference).\n"], "8": ["     * Notifify pending loads that a new value was set. This is only relevant to loading value\n", "     * references.\n"], "9": ["  static final ValueReference<Object, Object> UNSET =\n", "      new ValueReference<Object, Object>() {\n", "        @Override\n", "        public Object get() {\n", "          return null;\n", "        }\n", "        @Override\n", "        public int getWeight() {\n", "          return 0;\n", "        }\n", "        @Override\n", "        public ReferenceEntry<Object, Object> getEntry() {\n", "          return null;\n", "        }\n", "        @Override\n", "        public ValueReference<Object, Object> copyFor(\n", "            ReferenceQueue<Object> queue,\n", "            @Nullable Object value,\n", "            ReferenceEntry<Object, Object> entry) {\n", "          return this;\n", "        }\n", "        @Override\n", "        public boolean isLoading() {\n", "          return false;\n", "        }\n", "        @Override\n", "        public boolean isActive() {\n", "          return false;\n", "        }\n", "        @Override\n", "        public Object waitForValue() {\n", "          return null;\n", "        }\n", "        @Override\n", "        public void notifyNewValue(Object newValue) {}\n", "      };\n"], "10": ["   *\n", "   *\n", "   *\n", "   *\n", "   *\n"], "11": ["     * Implemented by entries that use write order. Write entries are maintained in a doubly-linked\n", "     * list. New entries are added at the tail of the list at write time and stale entries are\n", "     * expired from the head of the list.\n"], "12": ["  static final Queue<? extends Object> DISCARDING_QUEUE =\n", "      new AbstractQueue<Object>() {\n", "        @Override\n", "        public boolean offer(Object o) {\n", "          return true;\n", "        }\n", "        @Override\n", "        public Object peek() {\n", "          return null;\n", "        }\n", "        @Override\n", "        public Object poll() {\n", "          return null;\n", "        }\n", "        @Override\n", "        public int size() {\n", "          return 0;\n", "        }\n", "        @Override\n", "        public Iterator<Object> iterator() {\n", "          return ImmutableSet.of().iterator();\n", "        }\n", "      };\n"], "13": ["    WeakAccessEntry(ReferenceQueue<K> queue, K key, int hash, @Nullable ReferenceEntry<K, V> next) {\n"], "14": ["    WeakWriteEntry(ReferenceQueue<K> queue, K key, int hash, @Nullable ReferenceEntry<K, V> next) {\n"], "15": ["  static class WeakValueReference<K, V> extends WeakReference<V> implements ValueReference<K, V> {\n"], "16": ["  static class SoftValueReference<K, V> extends SoftReference<V> implements ValueReference<K, V> {\n"], "17": ["    WeightedWeakValueReference(\n", "        ReferenceQueue<V> queue, V referent, ReferenceEntry<K, V> entry, int weight) {\n"], "18": ["    WeightedSoftValueReference(\n", "        ReferenceQueue<V> queue, V referent, ReferenceEntry<K, V> entry, int weight) {\n"], "19": ["   * tables, that otherwise encounter collisions for hash codes that do not differ in lower or upper\n", "   * bits.\n"], "20": ["    if (expiresAfterAccess() && (now - entry.getAccessTime() >= expireAfterAccessNanos)) {\n", "    if (expiresAfterWrite() && (now - entry.getWriteTime() >= expireAfterWriteNanos)) {\n"], "21": ["   * Notifies listeners that an entry has been automatically removed due to expiration, eviction, or\n", "   * eligibility for garbage collection. This should be called every time expireEntries or\n"], "22": ["     * - All (unsynchronized) read operations must first read the \"count\" field, and should not look\n", "     * at table entries if it is 0.\n", "     * changing any bin. The operations must not take any action that could even momentarily cause a\n", "     * concurrent read operation to see inconsistent data. This is made easier by the nature of the\n", "     * read operations in Map. For example, no operation can reveal that the table has grown but the\n", "     * threshold has not yet been updated, so there are no atomicity requirements for this with\n", "     * respect to reads.\n"], "23": ["     * loading size or checking containsValue, then we might have an inconsistent view of state so\n", "     * (usually) must retry.\n"], "24": ["    Segment(\n", "        LocalCache<K, V> map,\n", "        int initialCapacity,\n", "        long maxSegmentWeight,\n", "      keyReferenceQueue = map.usesKeyReferences() ? new ReferenceQueue<K>() : null;\n", "      valueReferenceQueue = map.usesValueReferences() ? new ReferenceQueue<V>() : null;\n", "      recencyQueue =\n", "          map.usesAccessQueue()\n", "              ? new ConcurrentLinkedQueue<ReferenceEntry<K, V>>()\n", "              : LocalCache.<ReferenceEntry<K, V>>discardingQueue();\n", "      writeQueue =\n", "          map.usesWriteQueue()\n", "              ? new WriteQueue<K, V>()\n", "              : LocalCache.<ReferenceEntry<K, V>>discardingQueue();\n", "      accessQueue =\n", "          map.usesAccessQueue()\n", "              ? new AccessQueue<K, V>()\n", "              : LocalCache.<ReferenceEntry<K, V>>discardingQueue();\n"], "25": ["    V lockedGetOrLoad(K key, int hash, CacheLoader<? super K, V> loader) throws ExecutionException {\n"], "26": ["          if (e.getHash() == hash\n", "              && entryKey != null\n"], "27": ["                enqueueNotification(\n", "                    entryKey, hash, value, valueReference.getWeight(), RemovalCause.COLLECTED);\n", "                enqueueNotification(\n", "                    entryKey, hash, value, valueReference.getWeight(), RemovalCause.EXPIRED);\n"], "28": ["    V loadSync(\n", "        K key,\n", "        int hash,\n", "        LoadingValueReference<K, V> loadingValueReference,\n", "        CacheLoader<? super K, V> loader)\n", "        throws ExecutionException {\n", "    ListenableFuture<V> loadAsync(\n", "        final K key,\n", "        final int hash,\n", "        final LoadingValueReference<K, V> loadingValueReference,\n", "        CacheLoader<? super K, V> loader) {\n"], "29": ["          },\n", "          directExecutor());\n", "    V getAndRecordStats(\n", "        K key,\n", "        int hash,\n", "        LoadingValueReference<K, V> loadingValueReference,\n", "        ListenableFuture<V> newValue)\n", "        throws ExecutionException {\n"], "30": ["    V scheduleRefresh(\n", "        ReferenceEntry<K, V> entry,\n", "        K key,\n", "        int hash,\n", "        V oldValue,\n", "        long now,\n", "      if (map.refreshes()\n", "          && (now - entry.getWriteTime() > map.refreshNanos)\n"], "31": ["    LoadingValueReference<K, V> insertLoadingValueReference(\n", "        final K key, final int hash, boolean checkTime) {\n"], "32": ["          if (e.getHash() == hash\n", "              && entryKey != null\n"], "33": ["     * recency queue. At write-time, or when the queue is full past the threshold, the queue will be\n", "     * drained and the entries therein processed.\n"], "34": ["    void enqueueNotification(\n", "        @Nullable K key, int hash, @Nullable V value, int weight, RemovalCause cause) {\n"], "35": ["     * This method is a convenience for testing. Code should call {@link LocalCache#containsValue}\n", "     * directly.\n"], "36": ["          if (e.getHash() == hash\n", "              && entryKey != null\n"], "37": ["                enqueueNotification(\n", "                    key, hash, entryValue, valueReference.getWeight(), RemovalCause.COLLECTED);\n"], "38": ["              enqueueNotification(\n", "                  key, hash, entryValue, valueReference.getWeight(), RemovalCause.REPLACED);\n"], "39": ["       * because their next fields won't change. Statistically, at the default threshold, only about\n", "       * one-sixth of them need cloning when a table doubles. The nodes they replace will be garbage\n", "       * collectable as soon as they are no longer referenced by any reader thread that may be in\n", "       * the midst of traversing table right now.\n"], "40": ["          if (e.getHash() == hash\n", "              && entryKey != null\n"], "41": ["                ReferenceEntry<K, V> newFirst =\n", "                    removeValueFromChain(\n", "                        first,\n", "                        e,\n", "                        entryKey,\n", "                        hash,\n", "                        entryValue,\n", "                        valueReference,\n", "                        RemovalCause.COLLECTED);\n"], "42": ["              enqueueNotification(\n", "                  key, hash, entryValue, valueReference.getWeight(), RemovalCause.REPLACED);\n"], "43": ["          if (e.getHash() == hash\n", "              && entryKey != null\n"], "44": ["                ReferenceEntry<K, V> newFirst =\n", "                    removeValueFromChain(\n", "                        first,\n", "                        e,\n", "                        entryKey,\n", "                        hash,\n", "                        entryValue,\n", "                        valueReference,\n", "                        RemovalCause.COLLECTED);\n"], "45": ["            enqueueNotification(\n", "                key, hash, entryValue, valueReference.getWeight(), RemovalCause.REPLACED);\n"], "46": ["          if (e.getHash() == hash\n", "              && entryKey != null\n"], "47": ["            ReferenceEntry<K, V> newFirst =\n", "                removeValueFromChain(first, e, entryKey, hash, entryValue, valueReference, cause);\n"], "48": ["    boolean storeLoadedValue(\n", "        K key, int hash, LoadingValueReference<K, V> oldValueReference, V newValue) {\n"], "49": ["          if (e.getHash() == hash\n", "              && entryKey != null\n"], "50": ["          if (e.getHash() == hash\n", "              && entryKey != null\n"], "51": ["            ReferenceEntry<K, V> newFirst =\n", "                removeValueFromChain(first, e, entryKey, hash, entryValue, valueReference, cause);\n"], "52": ["                enqueueNotification(\n", "                    key, e.getHash(), value, e.getValueReference().getWeight(), cause);\n"], "53": ["    ReferenceEntry<K, V> removeValueFromChain(\n", "        ReferenceEntry<K, V> first,\n", "        ReferenceEntry<K, V> entry,\n", "        @Nullable K key,\n", "        int hash,\n", "        V value,\n", "        ValueReference<K, V> valueReference,\n", "        RemovalCause cause) {\n"], "54": ["    ReferenceEntry<K, V> removeEntryFromChain(\n", "        ReferenceEntry<K, V> first, ReferenceEntry<K, V> entry) {\n"], "55": ["      enqueueNotification(\n", "          entry.getKey(),\n", "          entry.getHash(),\n", "          entry.getValueReference().get(),\n", "          entry.getValueReference().getWeight(),\n", "          RemovalCause.COLLECTED);\n"], "56": ["            ReferenceEntry<K, V> newFirst =\n", "                removeValueFromChain(\n", "                    first,\n", "                    e,\n", "                    e.getKey(),\n", "                    hash,\n", "                    e.getValueReference().get(),\n", "                    e.getValueReference(),\n", "                    RemovalCause.COLLECTED);\n"], "57": ["          if (e.getHash() == hash\n", "              && entryKey != null\n", "              ReferenceEntry<K, V> newFirst =\n", "                  removeValueFromChain(\n", "                      first,\n", "                      e,\n", "                      entryKey,\n", "                      hash,\n", "                      valueReference.get(),\n", "                      valueReference,\n", "                      RemovalCause.COLLECTED);\n"], "58": ["          if (e.getHash() == hash\n", "              && entryKey != null\n"], "59": ["          ReferenceEntry<K, V> newFirst =\n", "              removeValueFromChain(\n", "                  first,\n", "                  e,\n", "                  e.getKey(),\n", "                  hash,\n", "                  e.getValueReference().get(),\n", "                  e.getValueReference(),\n", "                  cause);\n"], "60": ["     * Performs routine cleanup prior to executing a write. This should be called every time a write\n", "     * thread acquires the segment lock, immediately after acquiring the lock.\n"], "61": ["        return Futures.transform(\n", "            newValue,\n", "            new Function<V, V>() {\n", "              @Override\n", "              public V apply(V newValue) {\n", "                LoadingValueReference.this.set(newValue);\n", "                return newValue;\n", "              }\n", "            });\n"], "62": ["   * <p>Note that this entire implementation makes the assumption that all elements which are in the\n", "   * map are also in this queue, and that all elements not in the queue are not in the map.\n", "   * <p>The benefits of creating our own queue are that (1) we can replace elements in the middle of\n", "   * the queue as part of copyWriteEntry, and (2) the contains method is highly optimized for the\n", "   * current model.\n", "    final ReferenceEntry<K, V> head =\n", "        new AbstractReferenceEntry<K, V>() {\n", "          @Override\n", "          public long getWriteTime() {\n", "            return Long.MAX_VALUE;\n", "          }\n", "          @Override\n", "          public void setWriteTime(long time) {}\n", "          ReferenceEntry<K, V> nextWrite = this;\n", "          @Override\n", "          public ReferenceEntry<K, V> getNextInWriteQueue() {\n", "            return nextWrite;\n", "          }\n", "          @Override\n", "          public void setNextInWriteQueue(ReferenceEntry<K, V> next) {\n", "            this.nextWrite = next;\n", "          }\n", "          ReferenceEntry<K, V> previousWrite = this;\n", "          @Override\n", "          public ReferenceEntry<K, V> getPreviousInWriteQueue() {\n", "            return previousWrite;\n", "          }\n", "          @Override\n", "          public void setPreviousInWriteQueue(ReferenceEntry<K, V> previous) {\n", "            this.previousWrite = previous;\n", "          }\n", "        };\n"], "63": ["      for (ReferenceEntry<K, V> e = head.getNextInWriteQueue();\n", "          e != head;\n"], "64": ["   * <p>Note that this entire implementation makes the assumption that all elements which are in the\n", "   * map are also in this queue, and that all elements not in the queue are not in the map.\n", "   * <p>The benefits of creating our own queue are that (1) we can replace elements in the middle of\n", "   * the queue as part of copyWriteEntry, and (2) the contains method is highly optimized for the\n", "   * current model.\n", "    final ReferenceEntry<K, V> head =\n", "        new AbstractReferenceEntry<K, V>() {\n", "          @Override\n", "          public long getAccessTime() {\n", "            return Long.MAX_VALUE;\n", "          }\n", "          @Override\n", "          public void setAccessTime(long time) {}\n", "          ReferenceEntry<K, V> nextAccess = this;\n", "          @Override\n", "          public ReferenceEntry<K, V> getNextInAccessQueue() {\n", "            return nextAccess;\n", "          }\n", "          @Override\n", "          public void setNextInAccessQueue(ReferenceEntry<K, V> next) {\n", "            this.nextAccess = next;\n", "          }\n", "          ReferenceEntry<K, V> previousAccess = this;\n", "          @Override\n", "          public ReferenceEntry<K, V> getPreviousInAccessQueue() {\n", "            return previousAccess;\n", "          }\n", "          @Override\n", "          public void setPreviousInAccessQueue(ReferenceEntry<K, V> previous) {\n", "            this.previousAccess = previous;\n", "          }\n", "        };\n"], "65": ["      for (ReferenceEntry<K, V> e = head.getNextInAccessQueue();\n", "          e != head;\n"], "66": ["     * modifications before recheck.) Method containsValue() uses similar constructions for\n"], "67": ["   * Custom Entry class used by EntryIterator.next(), that relays setValue changes to the underlying\n", "   * map.\n"], "68": ["    @Override\n", "    public String toString() {\n"], "69": ["    @Override\n", "    public int size() {\n", "    @Override\n", "    public boolean isEmpty() {\n", "    @Override\n", "    public void clear() {\n"], "70": ["   * Serializes the configuration of a LocalCache, reconsitituting it as a Cache using CacheBuilder\n", "   * upon deserialization. An instance of this class is fit for use by the writeReplace of\n", "   * LocalManualCache.\n", "  static class ManualSerializationProxy<K, V> extends ForwardingCache<K, V>\n", "      implements Serializable {\n"], "71": ["        Strength keyStrength,\n", "        Strength valueStrength,\n", "        Equivalence<Object> keyEquivalence,\n", "        Equivalence<Object> valueEquivalence,\n", "        long expireAfterWriteNanos,\n", "        long expireAfterAccessNanos,\n", "        long maxWeight,\n", "        Weigher<K, V> weigher,\n", "        int concurrencyLevel,\n", "        Ticker ticker,\n", "        CacheLoader<? super K, V> loader) {\n"], "72": ["      this.ticker = (ticker == Ticker.systemTicker() || ticker == NULL_TICKER) ? null : ticker;\n", "    CacheBuilder<K, V> recreateCacheBuilder() {\n", "      CacheBuilder<K, V> builder =\n", "          CacheBuilder.newBuilder()\n", "              .setKeyStrength(keyStrength)\n", "              .setValueStrength(valueStrength)\n", "              .keyEquivalence(keyEquivalence)\n", "              .valueEquivalence(valueEquivalence)\n", "              .concurrencyLevel(concurrencyLevel)\n", "              .removalListener(removalListener);\n"], "73": ["  static final class LoadingSerializationProxy<K, V> extends ManualSerializationProxy<K, V>\n", "      implements LoadingCache<K, V>, Serializable {\n"], "74": ["      return localCache.get(\n", "          key,\n", "          new CacheLoader<Object, V>() {\n", "            @Override\n", "            public V load(Object key) throws Exception {\n", "              return valueLoader.call();\n", "            }\n", "          });\n"], "75": ["  static class LocalLoadingCache<K, V> extends LocalManualCache<K, V>\n", "      implements LoadingCache<K, V> {\n", "    LocalLoadingCache(\n", "        CacheBuilder<? super K, ? super V> builder, CacheLoader<? super K, V> loader) {\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>This implementation is heavily derived from revision 1.96 of <a\n", " * href=\"http://tinyurl.com/ConcurrentHashMap\">ConcurrentHashMap.java</a>.\n"], "3": ["   * Accumulates global cache statistics. Note that there are also per-segments stats counters\n", "   * which must be aggregated to obtain a global stats view.\n", "  @Nullable\n", "  final CacheLoader<? super K, V> defaultLoader;\n"], "4": ["    removalNotificationQueue = (removalListener == NullListener.INSTANCE)\n", "        ? LocalCache.<RemovalNotification<K, V>>discardingQueue()\n", "        : new ConcurrentLinkedQueue<RemovalNotification<K, V>>();\n"], "5": ["    while (segmentCount < concurrencyLevel\n", "           && (!evictsBySize() || segmentCount * 20 <= maxWeight)) {\n"], "6": ["      STRONG, STRONG_ACCESS, STRONG_WRITE, STRONG_ACCESS_WRITE,\n", "      WEAK, WEAK_ACCESS, WEAK_WRITE, WEAK_ACCESS_WRITE,\n", "    static EntryFactory getFactory(Strength keyStrength, boolean usesAccessQueue,\n", "        boolean usesWriteQueue) {\n", "      int flags = ((keyStrength == Strength.WEAK) ? WEAK_MASK : 0)\n", "          | (usesAccessQueue ? ACCESS_MASK : 0)\n", "          | (usesWriteQueue ? WRITE_MASK : 0);\n"], "7": ["     * Waits for a value that may still be loading. Unlike get(), this method can block (in the\n", "     * case of FutureValueReference).\n"], "8": ["     * Notifify pending loads that a new value was set. This is only relevant to loading\n", "     * value references.\n"], "9": ["  static final ValueReference<Object, Object> UNSET = new ValueReference<Object, Object>() {\n", "    @Override\n", "    public Object get() {\n", "      return null;\n", "    }\n", "    @Override\n", "    public int getWeight() {\n", "      return 0;\n", "    }\n", "    @Override\n", "    public ReferenceEntry<Object, Object> getEntry() {\n", "      return null;\n", "    }\n", "    @Override\n", "    public ValueReference<Object, Object> copyFor(ReferenceQueue<Object> queue,\n", "        @Nullable Object value, ReferenceEntry<Object, Object> entry) {\n", "      return this;\n", "    }\n", "    @Override\n", "    public boolean isLoading() {\n", "      return false;\n", "    }\n", "    @Override\n", "    public boolean isActive() {\n", "      return false;\n", "    }\n", "    @Override\n", "    public Object waitForValue() {\n", "      return null;\n", "    }\n", "    @Override\n", "    public void notifyNewValue(Object newValue) {}\n", "  };\n"], "11": ["     * Implemented by entries that use write order. Write entries are maintained in a\n", "     * doubly-linked list. New entries are added at the tail of the list at write time and stale\n", "     * entries are expired from the head of the list.\n"], "12": ["  static final Queue<? extends Object> DISCARDING_QUEUE = new AbstractQueue<Object>() {\n", "    @Override\n", "    public boolean offer(Object o) {\n", "      return true;\n", "    }\n", "    @Override\n", "    public Object peek() {\n", "      return null;\n", "    }\n", "    @Override\n", "    public Object poll() {\n", "      return null;\n", "    }\n", "    @Override\n", "    public int size() {\n", "      return 0;\n", "    }\n", "    @Override\n", "    public Iterator<Object> iterator() {\n", "      return ImmutableSet.of().iterator();\n", "    }\n", "  };\n"], "13": ["    WeakAccessEntry(\n", "        ReferenceQueue<K> queue, K key, int hash, @Nullable ReferenceEntry<K, V> next) {\n"], "14": ["    WeakWriteEntry(\n", "        ReferenceQueue<K> queue, K key, int hash, @Nullable ReferenceEntry<K, V> next) {\n"], "15": ["  static class WeakValueReference<K, V>\n", "      extends WeakReference<V> implements ValueReference<K, V> {\n"], "16": ["  static class SoftValueReference<K, V>\n", "      extends SoftReference<V> implements ValueReference<K, V> {\n"], "17": ["    WeightedWeakValueReference(ReferenceQueue<V> queue, V referent, ReferenceEntry<K, V> entry,\n", "        int weight) {\n"], "18": ["    WeightedSoftValueReference(ReferenceQueue<V> queue, V referent, ReferenceEntry<K, V> entry,\n", "        int weight) {\n"], "19": ["   * tables, that otherwise encounter collisions for hash codes that do not differ in lower or\n", "   * upper bits.\n"], "20": ["    if (expiresAfterAccess()\n", "        && (now - entry.getAccessTime() >= expireAfterAccessNanos)) {\n", "    if (expiresAfterWrite()\n", "        && (now - entry.getWriteTime() >= expireAfterWriteNanos)) {\n"], "21": ["   * Notifies listeners that an entry has been automatically removed due to expiration, eviction,\n", "   * or eligibility for garbage collection. This should be called every time expireEntries or\n"], "22": ["     * - All (unsynchronized) read operations must first read the \"count\" field, and should not\n", "     * look at table entries if it is 0.\n", "     * changing any bin. The operations must not take any action that could even momentarily\n", "     * cause a concurrent read operation to see inconsistent data. This is made easier by the\n", "     * nature of the read operations in Map. For example, no operation can reveal that the table\n", "     * has grown but the threshold has not yet been updated, so there are no atomicity requirements\n", "     * for this with respect to reads.\n"], "23": ["     * loading size or checking containsValue, then we might have an inconsistent view of state\n", "     * so (usually) must retry.\n"], "24": ["    Segment(LocalCache<K, V> map, int initialCapacity, long maxSegmentWeight,\n", "      keyReferenceQueue = map.usesKeyReferences()\n", "           ? new ReferenceQueue<K>() : null;\n", "      valueReferenceQueue = map.usesValueReferences()\n", "           ? new ReferenceQueue<V>() : null;\n", "      recencyQueue = map.usesAccessQueue()\n", "          ? new ConcurrentLinkedQueue<ReferenceEntry<K, V>>()\n", "          : LocalCache.<ReferenceEntry<K, V>>discardingQueue();\n", "      writeQueue = map.usesWriteQueue()\n", "          ? new WriteQueue<K, V>()\n", "          : LocalCache.<ReferenceEntry<K, V>>discardingQueue();\n", "      accessQueue = map.usesAccessQueue()\n", "          ? new AccessQueue<K, V>()\n", "          : LocalCache.<ReferenceEntry<K, V>>discardingQueue();\n"], "25": ["    V lockedGetOrLoad(K key, int hash, CacheLoader<? super K, V> loader)\n", "        throws ExecutionException {\n"], "26": ["          if (e.getHash() == hash && entryKey != null\n"], "27": ["                enqueueNotification(entryKey, hash, value,\n", "                    valueReference.getWeight(), RemovalCause.COLLECTED);\n", "                enqueueNotification(entryKey, hash, value,\n", "                    valueReference.getWeight(), RemovalCause.EXPIRED);\n"], "28": ["    V loadSync(K key, int hash, LoadingValueReference<K, V> loadingValueReference,\n", "        CacheLoader<? super K, V> loader) throws ExecutionException {\n", "    ListenableFuture<V> loadAsync(final K key, final int hash,\n", "        final LoadingValueReference<K, V> loadingValueReference, CacheLoader<? super K, V> loader) {\n"], "29": ["          }, directExecutor());\n", "    V getAndRecordStats(K key, int hash, LoadingValueReference<K, V> loadingValueReference,\n", "        ListenableFuture<V> newValue) throws ExecutionException {\n"], "30": ["    V scheduleRefresh(ReferenceEntry<K, V> entry, K key, int hash, V oldValue, long now,\n", "      if (map.refreshes() && (now - entry.getWriteTime() > map.refreshNanos)\n"], "31": ["    LoadingValueReference<K, V> insertLoadingValueReference(final K key, final int hash,\n", "        boolean checkTime) {\n"], "32": ["          if (e.getHash() == hash && entryKey != null\n"], "33": ["     * recency queue. At write-time, or when the queue is full past the threshold, the queue will\n", "     * be drained and the entries therein processed.\n"], "34": ["    void enqueueNotification(@Nullable K key, int hash, @Nullable V value, int weight,\n", "        RemovalCause cause) {\n"], "35": ["     * This method is a convenience for testing. Code should call {@link\n", "     * LocalCache#containsValue} directly.\n"], "36": ["          if (e.getHash() == hash && entryKey != null\n"], "37": ["                enqueueNotification(key, hash, entryValue,\n", "                    valueReference.getWeight(), RemovalCause.COLLECTED);\n"], "38": ["              enqueueNotification(key, hash, entryValue,\n", "                  valueReference.getWeight(), RemovalCause.REPLACED);\n"], "39": ["       * because their next fields won't change. Statistically, at the default threshold, only\n", "       * about one-sixth of them need cloning when a table doubles. The nodes they replace will be\n", "       * garbage collectable as soon as they are no longer referenced by any reader thread that may\n", "       * be in the midst of traversing table right now.\n"], "40": ["          if (e.getHash() == hash && entryKey != null\n"], "41": ["                ReferenceEntry<K, V> newFirst = removeValueFromChain(\n", "                    first, e, entryKey, hash, entryValue, valueReference, RemovalCause.COLLECTED);\n"], "42": ["              enqueueNotification(key, hash, entryValue,\n", "                  valueReference.getWeight(), RemovalCause.REPLACED);\n"], "43": ["          if (e.getHash() == hash && entryKey != null\n"], "44": ["                ReferenceEntry<K, V> newFirst = removeValueFromChain(\n", "                    first, e, entryKey, hash, entryValue, valueReference, RemovalCause.COLLECTED);\n"], "45": ["            enqueueNotification(key, hash, entryValue,\n", "                valueReference.getWeight(), RemovalCause.REPLACED);\n"], "46": ["          if (e.getHash() == hash && entryKey != null\n"], "47": ["            ReferenceEntry<K, V> newFirst = removeValueFromChain(\n", "                first, e, entryKey, hash, entryValue, valueReference, cause);\n"], "48": ["    boolean storeLoadedValue(K key, int hash, LoadingValueReference<K, V> oldValueReference,\n", "        V newValue) {\n"], "49": ["          if (e.getHash() == hash && entryKey != null\n"], "50": ["          if (e.getHash() == hash && entryKey != null\n"], "51": ["            ReferenceEntry<K, V> newFirst = removeValueFromChain(\n", "                first, e, entryKey, hash, entryValue, valueReference, cause);\n"], "52": ["                enqueueNotification(key, e.getHash(), value,\n", "                    e.getValueReference().getWeight(), cause);\n"], "53": ["    ReferenceEntry<K, V> removeValueFromChain(ReferenceEntry<K, V> first,\n", "        ReferenceEntry<K, V> entry, @Nullable K key, int hash, V value,\n", "        ValueReference<K, V> valueReference, RemovalCause cause) {\n"], "54": ["    ReferenceEntry<K, V> removeEntryFromChain(ReferenceEntry<K, V> first,\n", "        ReferenceEntry<K, V> entry) {\n"], "55": ["      enqueueNotification(entry.getKey(), entry.getHash(), entry.getValueReference().get(),\n", "          entry.getValueReference().getWeight(), RemovalCause.COLLECTED);\n"], "56": ["            ReferenceEntry<K, V> newFirst = removeValueFromChain(first, e, e.getKey(), hash,\n", "                e.getValueReference().get(), e.getValueReference(), RemovalCause.COLLECTED);\n"], "57": ["          if (e.getHash() == hash && entryKey != null\n", "              ReferenceEntry<K, V> newFirst = removeValueFromChain(first, e, entryKey, hash,\n", "                  valueReference.get(), valueReference, RemovalCause.COLLECTED);\n"], "58": ["          if (e.getHash() == hash && entryKey != null\n"], "59": ["          ReferenceEntry<K, V> newFirst = removeValueFromChain(first, e, e.getKey(), hash,\n", "              e.getValueReference().get(), e.getValueReference(), cause);\n"], "60": ["     * Performs routine cleanup prior to executing a write. This should be called every time a\n", "     * write thread acquires the segment lock, immediately after acquiring the lock.\n"], "61": ["        return Futures.transform(newValue, new Function<V, V>() {\n", "          @Override\n", "          public V apply(V newValue) {\n", "            LoadingValueReference.this.set(newValue);\n", "            return newValue;\n", "          }\n", "        });\n"], "62": ["   * <p>Note that this entire implementation makes the assumption that all elements which are in\n", "   * the map are also in this queue, and that all elements not in the queue are not in the map.\n", "   * <p>The benefits of creating our own queue are that (1) we can replace elements in the middle\n", "   * of the queue as part of copyWriteEntry, and (2) the contains method is highly optimized\n", "   * for the current model.\n", "    final ReferenceEntry<K, V> head = new AbstractReferenceEntry<K, V>() {\n", "      @Override\n", "      public long getWriteTime() {\n", "        return Long.MAX_VALUE;\n", "      }\n", "      @Override\n", "      public void setWriteTime(long time) {}\n", "      ReferenceEntry<K, V> nextWrite = this;\n", "      @Override\n", "      public ReferenceEntry<K, V> getNextInWriteQueue() {\n", "        return nextWrite;\n", "      }\n", "      @Override\n", "      public void setNextInWriteQueue(ReferenceEntry<K, V> next) {\n", "        this.nextWrite = next;\n", "      }\n", "      ReferenceEntry<K, V> previousWrite = this;\n", "      @Override\n", "      public ReferenceEntry<K, V> getPreviousInWriteQueue() {\n", "        return previousWrite;\n", "      }\n", "      @Override\n", "      public void setPreviousInWriteQueue(ReferenceEntry<K, V> previous) {\n", "        this.previousWrite = previous;\n", "      }\n", "    };\n"], "63": ["      for (ReferenceEntry<K, V> e = head.getNextInWriteQueue(); e != head;\n"], "64": ["   * <p>Note that this entire implementation makes the assumption that all elements which are in\n", "   * the map are also in this queue, and that all elements not in the queue are not in the map.\n", "   * <p>The benefits of creating our own queue are that (1) we can replace elements in the middle\n", "   * of the queue as part of copyWriteEntry, and (2) the contains method is highly optimized\n", "   * for the current model.\n", "    final ReferenceEntry<K, V> head = new AbstractReferenceEntry<K, V>() {\n", "      @Override\n", "      public long getAccessTime() {\n", "        return Long.MAX_VALUE;\n", "      }\n", "      @Override\n", "      public void setAccessTime(long time) {}\n", "      ReferenceEntry<K, V> nextAccess = this;\n", "      @Override\n", "      public ReferenceEntry<K, V> getNextInAccessQueue() {\n", "        return nextAccess;\n", "      }\n", "      @Override\n", "      public void setNextInAccessQueue(ReferenceEntry<K, V> next) {\n", "        this.nextAccess = next;\n", "      }\n", "      ReferenceEntry<K, V> previousAccess = this;\n", "      @Override\n", "      public ReferenceEntry<K, V> getPreviousInAccessQueue() {\n", "        return previousAccess;\n", "      }\n", "      @Override\n", "      public void setPreviousInAccessQueue(ReferenceEntry<K, V> previous) {\n", "        this.previousAccess = previous;\n", "      }\n", "    };\n"], "65": ["      for (ReferenceEntry<K, V> e = head.getNextInAccessQueue(); e != head;\n"], "66": ["     * modifications before recheck.)  Method containsValue() uses similar constructions for\n"], "67": ["   * Custom Entry class used by EntryIterator.next(), that relays setValue changes to the\n", "   * underlying map.\n"], "68": ["    @Override public String toString() {\n"], "69": ["    @Override public int size() {\n", "    @Override public boolean isEmpty() {\n", "    @Override public void clear() {\n"], "70": ["   * Serializes the configuration of a LocalCache, reconsitituting it as a Cache using\n", "   * CacheBuilder upon deserialization. An instance of this class is fit for use by the writeReplace\n", "   * of LocalManualCache.\n", "  static class ManualSerializationProxy<K, V>\n", "      extends ForwardingCache<K, V> implements Serializable {\n"], "71": ["        Strength keyStrength, Strength valueStrength,\n", "        Equivalence<Object> keyEquivalence, Equivalence<Object> valueEquivalence,\n", "        long expireAfterWriteNanos, long expireAfterAccessNanos, long maxWeight,\n", "        Weigher<K, V> weigher, int concurrencyLevel,\n", "        Ticker ticker, CacheLoader<? super K, V> loader) {\n"], "72": ["      this.ticker = (ticker == Ticker.systemTicker() || ticker == NULL_TICKER)\n", "          ? null : ticker;\n", "   CacheBuilder<K, V> recreateCacheBuilder() {\n", "      CacheBuilder<K, V> builder = CacheBuilder.newBuilder()\n", "          .setKeyStrength(keyStrength)\n", "          .setValueStrength(valueStrength)\n", "          .keyEquivalence(keyEquivalence)\n", "          .valueEquivalence(valueEquivalence)\n", "          .concurrencyLevel(concurrencyLevel)\n", "          .removalListener(removalListener);\n"], "73": ["  static final class LoadingSerializationProxy<K, V>\n", "      extends ManualSerializationProxy<K, V> implements LoadingCache<K, V>, Serializable {\n"], "74": ["      return localCache.get(key, new CacheLoader<Object, V>() {\n", "        @Override\n", "        public V load(Object key) throws Exception {\n", "          return valueLoader.call();\n", "        }\n", "      });\n"], "75": ["  static class LocalLoadingCache<K, V>\n", "      extends LocalManualCache<K, V> implements LoadingCache<K, V> {\n", "    LocalLoadingCache(CacheBuilder<? super K, ? super V> builder,\n", "        CacheLoader<? super K, V> loader) {\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [89, 90], "3": [222, 223, 230], "4": [252, 253, 254, 255], "5": [274], "6": [559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574], "7": [637, 638], "8": [666, 667], "9": [691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733], "10": [749, 751, 755, 757, 759], "11": [827, 828, 829], "12": [1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "13": [1408], "14": [1454], "15": [1589], "16": [1635], "17": [1734, 1735], "18": [1758, 1759], "19": [1796, 1797], "20": [1917, 1920], "21": [1955, 1956], "22": [2003, 2004, 2007, 2008, 2009, 2010, 2011], "23": [2033, 2034], "24": [2096, 2097, 2098, 2099, 2106, 2108, 2110, 2111, 2112, 2113, 2115, 2116, 2117, 2118, 2120, 2121, 2122, 2123], "25": [2222], "26": [2241, 2242], "27": [2250, 2251, 2255, 2256], "28": [2330, 2331, 2332, 2333, 2334, 2335, 2340, 2341, 2342, 2343, 2344], "29": [2357, 2358, 2365, 2366, 2367, 2368, 2369, 2370], "30": [2388, 2389, 2390, 2391, 2392, 2393, 2395, 2396], "31": [2436, 2437], "32": [2451, 2452], "33": [2567, 2568], "34": [2670, 2671], "35": [2831, 2832], "36": [2880, 2881], "37": [2891, 2892], "38": [2911, 2912], "39": [2950, 2951, 2952, 2953], "40": [3019, 3020], "41": [3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037], "42": [3047, 3048], "43": [3081, 3082], "44": [3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099], "45": [3108, 3109], "46": [3137, 3138], "47": [3154, 3155], "48": [3170, 3171], "49": [3189, 3190], "50": [3243, 3244], "51": [3260, 3261], "52": [3293, 3294], "53": [3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324], "54": [3339, 3340], "55": [3358, 3359, 3360, 3361, 3362, 3363], "56": [3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390], "57": [3418, 3419, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432], "58": [3460, 3461], "59": [3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503], "60": [3525, 3526], "61": [3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646], "62": [3692, 3693, 3695, 3696, 3697, 3700, 3701, 3703, 3704, 3705, 3706, 3708, 3709, 3711, 3713, 3714, 3715, 3716, 3718, 3719, 3720, 3721, 3723, 3725, 3726, 3727, 3728, 3730, 3731, 3732, 3733, 3734], "63": [3794, 3795], "64": [3831, 3832, 3834, 3835, 3836, 3839, 3840, 3842, 3843, 3844, 3845, 3847, 3848, 3850, 3852, 3853, 3854, 3855, 3857, 3858, 3859, 3860, 3862, 3864, 3865, 3866, 3867, 3869, 3870, 3871, 3872, 3873], "65": [3933, 3934], "66": [3982], "67": [4494, 4495], "68": [4540, 4541], "69": [4628, 4629, 4633, 4634, 4638, 4639], "70": [4708, 4709, 4710, 4715, 4716], "71": [4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4761, 4762], "72": [4773, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785], "73": [4833, 4834], "74": [4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908], "75": [4976, 4977, 4979, 4980]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [91, 92], "3": [224, 225, 232, 233], "4": [255, 256, 257], "5": [276, 277], "6": [565, 566, 569, 570, 571, 572, 573], "7": [636, 637], "8": [665, 666], "9": [690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 719, 720, 722, 723, 724, 725, 727, 728, 729], "11": [818, 819, 820], "12": [1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "13": [1398, 1399], "14": [1445, 1446], "15": [1581, 1582], "16": [1628, 1629], "17": [1728, 1729], "18": [1752, 1753], "19": [1790, 1791], "20": [1911, 1912, 1915, 1916], "21": [1951, 1952], "22": [1999, 2000, 2003, 2004, 2005, 2006, 2007], "23": [2029, 2030], "24": [2092, 2099, 2100, 2102, 2103, 2105, 2106, 2107, 2109, 2110, 2111, 2113, 2114, 2115], "25": [2214, 2215], "26": [2234], "27": [2242, 2243, 2247, 2248], "28": [2322, 2323, 2328, 2329], "29": [2342, 2349, 2350], "30": [2368, 2370], "31": [2410, 2411], "32": [2425], "33": [2540, 2541], "34": [2643, 2644], "35": [2804, 2805], "36": [2853], "37": [2863, 2864], "38": [2883, 2884], "39": [2922, 2923, 2924, 2925], "40": [2991], "41": [3000, 3001], "42": [3011, 3012], "43": [3045], "44": [3054, 3055], "45": [3064, 3065], "46": [3093], "47": [3109, 3110], "48": [3125, 3126], "49": [3144], "50": [3197], "51": [3213, 3214], "52": [3246, 3247], "53": [3270, 3271, 3272], "54": [3287, 3288], "55": [3306, 3307], "56": [3326, 3327], "57": [3355, 3360, 3361], "58": [3389], "59": [3423, 3424], "60": [3446, 3447], "61": [3560, 3561, 3562, 3563, 3564, 3565, 3566], "62": [3612, 3613, 3615, 3616, 3617, 3620, 3622, 3623, 3624, 3625, 3627, 3628, 3630, 3632, 3633, 3634, 3635, 3637, 3638, 3639, 3640, 3642, 3644, 3645, 3646, 3647, 3649, 3650, 3651, 3652, 3653], "63": [3713], "64": [3749, 3750, 3752, 3753, 3754, 3757, 3759, 3760, 3761, 3762, 3764, 3765, 3767, 3769, 3770, 3771, 3772, 3774, 3775, 3776, 3777, 3779, 3781, 3782, 3783, 3784, 3786, 3787, 3788, 3789, 3790], "65": [3850], "66": [3898], "67": [4410, 4411], "68": [4456], "69": [4543, 4547, 4551], "70": [4620, 4621, 4622, 4627, 4628], "71": [4663, 4664, 4665, 4666, 4668], "72": [4679, 4680, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691], "73": [4739, 4740], "74": [4807, 4808, 4809, 4810, 4811, 4812], "75": [4880, 4881, 4883, 4884]}}, {"56": "guava/src/com/google/common/cache/LongAddable.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"57": "guava/src/com/google/common/cache/LongAddables.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Source of {@link LongAddable} objects that deals with GWT, Unsafe, and all that.\n"], "3": ["      supplier =\n", "          new Supplier<LongAddable>() {\n", "            @Override\n", "            public LongAddable get() {\n", "              return new LongAdder();\n", "            }\n", "          };\n", "      supplier =\n", "          new Supplier<LongAddable>() {\n", "            @Override\n", "            public LongAddable get() {\n", "              return new PureJavaLongAddable();\n", "            }\n", "          };\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Source of {@link LongAddable} objects that deals with GWT, Unsafe, and all\n", " * that.\n"], "3": ["      supplier = new Supplier<LongAddable>() {\n", "        @Override\n", "        public LongAddable get() {\n", "          return new LongAdder();\n", "        }\n", "      };\n", "      supplier = new Supplier<LongAddable>() {\n", "        @Override\n", "        public LongAddable get() {\n", "          return new PureJavaLongAddable();\n", "        }\n", "      };\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [23], "3": [35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [25, 26], "3": [38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50]}}, {"58": "guava/src/com/google/common/cache/RemovalCause.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": ["   * The entry was removed automatically because its key or value was garbage-collected. This can\n", "   * occur when using {@link CacheBuilder#weakKeys}, {@link CacheBuilder#weakValues}, or\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": ["   * The entry was removed automatically because its key or value was garbage-collected. This\n", "   * can occur when using {@link CacheBuilder#weakKeys}, {@link CacheBuilder#weakValues}, or\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [57, 58]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [59, 60]}}, {"59": "guava/src/com/google/common/cache/RemovalListener.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * due to eviction resulting from timed expiration, exceeding a maximum size, or garbage collection.\n", " * @param <K> the most general type of keys this listener can listen for; for example {@code Object}\n", " *     if any key is acceptable\n", " * @param <V> the most general type of values this listener can listen for; for example\n", " *     {@code Object} if any key is acceptable\n"], "3": ["   * <p>This does not always signify that the key is now absent from the cache, as it may have\n", "   * already been re-added.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * due to eviction resulting from timed expiration, exceeding a maximum size, or garbage\n", " * collection.\n", " * @param <K> the most general type of keys this listener can listen for; for\n", " *     example {@code Object} if any key is acceptable\n", " * @param <V> the most general type of values this listener can listen for; for\n", " *     example {@code Object} if any key is acceptable\n"], "3": ["   * <p>This does not always signify that the key is now absent from the cache,\n", "   * as it may have already been re-added.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [22, 28, 29, 30, 31], "3": [40, 41]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [24, 25, 31, 32, 33, 34], "3": [43, 44]}}, {"60": "guava/src/com/google/common/cache/RemovalListeners.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": ["   * Returns a {@code RemovalListener} which processes all eviction notifications using\n", "   * {@code executor}.\n", "   * @param executor the executor with which removal notifications are asynchronously executed\n"], "3": ["        executor.execute(\n", "            new Runnable() {\n", "              @Override\n", "              public void run() {\n", "                listener.onRemoval(notification);\n", "              }\n", "            });\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": ["   * Returns a {@code RemovalListener} which processes all eviction\n", "   * notifications using {@code executor}.\n", "   * @param executor the executor with which removal notifications are\n", "   *     asynchronously executed\n"], "3": ["        executor.execute(new Runnable() {\n", "          @Override\n", "          public void run() {\n", "            listener.onRemoval(notification);\n", "          }\n", "        });\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [35, 36, 39], "3": [48, 49, 50, 51, 52, 53, 54]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [37, 38, 41, 42], "3": [51, 52, 53, 54, 55, 56]}}, {"61": "guava/src/com/google/common/cache/RemovalNotification.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14]}}, {"62": "guava/src/com/google/common/cache/Weigher.java", "added": {"1": [" * in compliance with the License. You may obtain a copy of the License at\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * in compliance with the License.  You may obtain a copy of the License at\n", " * or implied.  See the License for the specific language governing permissions and limitations\n", " * under the License.\n"]}, "added_lines": {"1": [5, 11, 12]}, "removed_lines": {"1": [5, 11, 12]}}, {"63": "guava/src/com/google/common/cache/package-info.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n", " * In-memory caches can be configured and created using {@link\n", " * com.google.common.cache.CacheBuilder}, with cache entries being loaded by {@link\n", " * com.google.common.cache.CacheLoader}. Statistics about cache performance are exposed using {@link\n", " * com.google.common.cache.CacheStats}.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/CachesExplained\">caches</a>.\n", " * <p>This package is a part of the open-source <a href=\"http://github.com/google/guava\">Guava</a>\n", " * library.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " * In-memory caches can be configured and created using\n", " * {@link com.google.common.cache.CacheBuilder}, with cache entries being loaded by\n", " * {@link com.google.common.cache.CacheLoader}. Statistics about cache performance are exposed using\n", " * {@link com.google.common.cache.CacheStats}.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/CachesExplained\">caches</a>.\n", " * <p>This package is a part of the open-source\n", " * <a href=\"http://github.com/google/guava\">Guava</a> library.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12, 19, 20, 21, 22, 24, 25, 27, 28]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14, 21, 22, 23, 24, 26, 27, 29, 30]}}]}
