{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "40": " * <p>See the Guava User Guide entry on\n",
        "41": " * <a href=\"https://github.com/google/guava/wiki/ThrowablesExplained\">Throwables</a>.\n",
        "53": "   * declaredType}. Example usage:\n",
        "54": "   *\n",
        "56": "   * try {\n",
        "57": "   *   someMethodThatCouldThrowAnything();\n",
        "58": "   * } catch (IKnowWhatToDoWithThisException e) {\n",
        "59": "   *   handle(e);\n",
        "60": "   * } catch (Throwable t) {\n",
        "61": "   *   Throwables.propagateIfInstanceOf(t, IOException.class);\n",
        "62": "   *   Throwables.propagateIfInstanceOf(t, SQLException.class);\n",
        "63": "   *   throw Throwables.propagate(t);\n",
        "64": "   * }\n",
        "76": "   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of\n",
        "77": "   * {@link RuntimeException} or {@link Error}. Example usage:\n",
        "78": "   *\n",
        "80": "   * try {\n",
        "81": "   *   someMethodThatCouldThrowAnything();\n",
        "82": "   * } catch (IKnowWhatToDoWithThisException e) {\n",
        "83": "   *   handle(e);\n",
        "84": "   * } catch (Throwable t) {\n",
        "85": "   *   Throwables.propagateIfPossible(t);\n",
        "86": "   *   throw new RuntimeException(\"unexpected\", t);\n",
        "87": "   * }\n",
        "96": "   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of\n",
        "97": "   * {@link RuntimeException}, {@link Error}, or {@code declaredType}. Example usage:\n",
        "98": "   *\n",
        "100": "   * try {\n",
        "101": "   *   someMethodThatCouldThrowAnything();\n",
        "102": "   * } catch (IKnowWhatToDoWithThisException e) {\n",
        "103": "   *   handle(e);\n",
        "104": "   * } catch (Throwable t) {\n",
        "105": "   *   Throwables.propagateIfPossible(t, OtherException.class);\n",
        "106": "   *   throw new RuntimeException(\"unexpected\", t);\n",
        "107": "   * }\n",
        "120": "   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of\n",
        "121": "   * {@link RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}. In\n",
        "122": "   * the unlikely case that you have three or more declared checked exception types, you can handle\n",
        "123": "   * them all by invoking these methods repeatedly. See usage example in\n",
        "124": "   * {@link #propagateIfPossible(Throwable, Class)}.\n",
        "139": "   * Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or\n",
        "140": "   * {@link Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then\n",
        "141": "   * propagates.\n",
        "142": "   *\n",
        "143": "   * <p>This method always throws an exception. The {@code RuntimeException} return type allows\n",
        "144": "   * client code to signal to the compiler that statements after the call are unreachable. Example\n",
        "145": "   * usage:\n",
        "146": "   *\n",
        "148": "   * T doSomething() {\n",
        "149": "   *   try {\n",
        "150": "   *     return someMethodThatCouldThrowAnything();\n",
        "151": "   *   } catch (IKnowWhatToDoWithThisException e) {\n",
        "152": "   *     return handle(e);\n",
        "153": "   *   } catch (Throwable t) {\n",
        "154": "   *     throw Throwables.propagate(t);\n",
        "156": "   * }\n",
        "170": "   * Returns the innermost cause of {@code throwable}. The first throwable in a chain provides\n",
        "171": "   * context from when the error or exception was initially detected. Example usage:\n",
        "172": "   *\n",
        "174": "   * assertEquals(\"Unable to assign a customer id\", Throwables.getRootCause(e).getMessage());\n",
        "186": "   * Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code\n",
        "187": "   * throwable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain and\n",
        "188": "   * will not reflect any subsequent changes to the cause chain.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "42": " * <p>See the Guava User Guide entry on <a href=\n",
        "43": " * \"https://github.com/google/guava/wiki/ThrowablesExplained\">Throwables</a>.\n",
        "55": "   * declaredType}.  Example usage:\n",
        "57": "   *   try {\n",
        "58": "   *     someMethodThatCouldThrowAnything();\n",
        "59": "   *   } catch (IKnowWhatToDoWithThisException e) {\n",
        "60": "   *     handle(e);\n",
        "61": "   *   } catch (Throwable t) {\n",
        "62": "   *     Throwables.propagateIfInstanceOf(t, IOException.class);\n",
        "63": "   *     Throwables.propagateIfInstanceOf(t, SQLException.class);\n",
        "64": "   *     throw Throwables.propagate(t);\n",
        "65": "   *   }\n",
        "77": "   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\n",
        "78": "   * RuntimeException} or {@link Error}.  Example usage:\n",
        "80": "   *   try {\n",
        "81": "   *     someMethodThatCouldThrowAnything();\n",
        "82": "   *   } catch (IKnowWhatToDoWithThisException e) {\n",
        "83": "   *     handle(e);\n",
        "84": "   *   } catch (Throwable t) {\n",
        "85": "   *     Throwables.propagateIfPossible(t);\n",
        "86": "   *     throw new RuntimeException(\"unexpected\", t);\n",
        "87": "   *   }\n",
        "96": "   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\n",
        "97": "   * RuntimeException}, {@link Error}, or {@code declaredType}. Example usage:\n",
        "99": "   *   try {\n",
        "100": "   *     someMethodThatCouldThrowAnything();\n",
        "101": "   *   } catch (IKnowWhatToDoWithThisException e) {\n",
        "102": "   *     handle(e);\n",
        "103": "   *   } catch (Throwable t) {\n",
        "104": "   *     Throwables.propagateIfPossible(t, OtherException.class);\n",
        "105": "   *     throw new RuntimeException(\"unexpected\", t);\n",
        "106": "   *   }\n",
        "119": "   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\n",
        "120": "   * RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}. In the\n",
        "121": "   * unlikely case that you have three or more declared checked exception types, you can handle them\n",
        "122": "   * all by invoking these methods repeatedly. See usage example in {@link\n",
        "123": "   * #propagateIfPossible(Throwable, Class)}.\n",
        "138": "   * Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link\n",
        "139": "   * Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates.\n",
        "140": "   * <p>\n",
        "141": "   * This method always throws an exception. The {@code RuntimeException} return type\n",
        "142": "   * allows client code to signal to the compiler that statements after the call are\n",
        "143": "   * unreachable. Example usage:\n",
        "145": "   *   T doSomething() {\n",
        "146": "   *     try {\n",
        "147": "   *       return someMethodThatCouldThrowAnything();\n",
        "148": "   *     } catch (IKnowWhatToDoWithThisException e) {\n",
        "149": "   *       return handle(e);\n",
        "150": "   *     } catch (Throwable t) {\n",
        "151": "   *       throw Throwables.propagate(t);\n",
        "152": "   *     }\n",
        "167": "   * Returns the innermost cause of {@code throwable}. The first throwable in a\n",
        "168": "   * chain provides context from when the error or exception was initially\n",
        "169": "   * detected. Example usage:\n",
        "171": "   *   assertEquals(\"Unable to assign a customer id\", Throwables.getRootCause(e).getMessage());\n",
        "183": "   * Gets a {@code Throwable} cause chain as a list.  The first entry in the list will be {@code\n",
        "184": "   * throwable} followed by its cause hierarchy.  Note that this is a snapshot of the cause chain\n",
        "185": "   * and will not reflect any subsequent changes to the cause chain.\n"
    }
}