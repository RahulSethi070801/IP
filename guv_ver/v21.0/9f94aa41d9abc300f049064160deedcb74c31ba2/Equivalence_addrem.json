{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "34": " * @since 10.0 (<a href=\"https://github.com/google/guava/wiki/Compatibility\">mostly\n",
        "35": " *     source-compatible</a> since 4.0)\n",
        "75": "   * <p>Called by {@link #equivalent}. {@code a} and {@code b} are not the same object and are not\n",
        "76": "   * nulls.\n",
        "93": "   *     that the hash be distributable across <i>inequivalence</i>. If {@code equivalence(x, y)} is\n",
        "94": "   *     false, {@code hash(x) == hash(y)} may still be true.\n",
        "130": "   * equivalent results. For example,\n",
        "131": "   * {@code Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken because it's\n",
        "132": "   * not guaranteed that {@link Object#toString}) always returns the same string instance.\n",
        "141": "   * Returns a wrapper of {@code reference} that implements {@link Wrapper#equals(Object)\n",
        "142": "   * Object.equals()} such that {@code wrap(a).equals(wrap(b))} if and only if\n",
        "143": "   * {@code equivalent(a, b)}.\n",
        "231": "   * Returns an equivalence over iterables based on the equivalence of their elements. More\n",
        "233": "   * elements, and each pair of corresponding elements is equivalent according to {@code this}. Null\n",
        "234": "   * iterables are equivalent to one another.\n",
        "236": "   * <p>Note that this method performs a similar function for equivalences as\n",
        "237": "   * {@link com.google.common.collect.Ordering#lexicographical} does for orderings.\n",
        "249": "   * Returns a predicate that evaluates to true if and only if the input is equivalent to\n",
        "250": "   * {@code target} according to this equivalence relation.\n",
        "314": "   * Returns an equivalence that uses {@code ==} to compare values and\n",
        "315": "   * {@link System#identityHashCode(Object)} to compute the hash code.\n",
        "316": "   * {@link Equivalence#equivalent} returns {@code true} if {@code a == b}, including in the case\n",
        "317": "   * that a and b are both null.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "36": " * @since 10.0 (<a href=\"https://github.com/google/guava/wiki/Compatibility\"\n",
        "37": " *        >mostly source-compatible</a> since 4.0)\n",
        "77": "   * <p>Called by {@link #equivalent}. {@code a} and {@code b} are not the same\n",
        "78": "   * object and are not nulls.\n",
        "95": "   *     that the hash be distributable across <i>inequivalence</i>. If {@code equivalence(x, y)}\n",
        "96": "   *     is false, {@code hash(x) == hash(y)} may still be true.\n",
        "132": "   * equivalent results.\n",
        "133": "   * For example, {@code Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken\n",
        "134": "   * because it's not guaranteed that {@link Object#toString}) always returns the same string\n",
        "135": "   * instance.\n",
        "144": "   * Returns a wrapper of {@code reference} that implements\n",
        "145": "   * {@link Wrapper#equals(Object) Object.equals()} such that\n",
        "146": "   * {@code wrap(a).equals(wrap(b))} if and only if {@code equivalent(a, b)}.\n",
        "234": "   * Returns an equivalence over iterables based on the equivalence of their elements.  More\n",
        "236": "   * elements, and each pair of corresponding elements is equivalent according to\n",
        "237": "   * {@code this}.  Null iterables are equivalent to one another.\n",
        "239": "   * <p>Note that this method performs a similar function for equivalences as {@link\n",
        "240": "   * com.google.common.collect.Ordering#lexicographical} does for orderings.\n",
        "252": "   * Returns a predicate that evaluates to true if and only if the input is\n",
        "253": "   * equivalent to {@code target} according to this equivalence relation.\n",
        "317": "   * Returns an equivalence that uses {@code ==} to compare values and {@link\n",
        "318": "   * System#identityHashCode(Object)} to compute the hash code.  {@link Equivalence#equivalent}\n",
        "319": "   * returns {@code true} if {@code a == b}, including in the case that a and b are both null.\n"
    }
}