{
    "addition": {
        "65": " * standard JDK exceptions such as {@link java.util.NoSuchElementException} or\n",
        "66": " * {@link UnsupportedOperationException} in the situations they are intended for.\n",
        "73": " * <a href=\"https://github.com/google/guava/wiki/ConditionalFailuresExplained\">Conditional failures\n",
        "74": " * explained</a> in the Guava User Guide for more advice.\n",
        "78": " * <p>Projects which use {@code com.google.common} should generally avoid the use of\n",
        "79": " * {@link java.util.Objects#requireNonNull(Object)}. Instead, use whichever of\n",
        "80": " * {@link #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the\n",
        "81": " * situation. (The same goes for the message-accepting overloads.)\n",
        "134": "   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n",
        "135": "   *     square braces. Unmatched placeholders will be left as-is.\n",
        "187": "   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n",
        "188": "   *     square braces. Unmatched placeholders will be left as-is.\n",
        "243": "   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\n",
        "244": "   *     square braces. Unmatched placeholders will be left as-is.\n",
        "274": "   * This is a big deal - we're talking factors of 2-8 in microbenchmarks, not just 10-20%. (This is\n",
        "275": "   * a hotspot optimizer bug, which should be fixed, but that's a separate, big project).\n",
        "277": "   * The coding pattern above is heavily used in java.util, e.g. in ArrayList. There is a\n",
        "281": "   * appears that this pattern is not directly applicable. But we can use the ridiculous, devious\n",
        "282": "   * trick of throwing an exception in the middle of the construction of another exception. Hotspot\n",
        "408": "   * position: the first {@code %s} gets {@code args[0]}, etc. If there are more arguments than\n"
    },
    "removed": {
        "65": " * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link\n",
        "66": " * UnsupportedOperationException} in the situations they are intended for.\n",
        "73": " * <a href=\"https://github.com/google/guava/wiki/ConditionalFailuresExplained\">Conditional\n",
        "74": " * failures explained</a> in the Guava User Guide for more advice.\n",
        "78": " * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link\n",
        "79": " * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link\n",
        "80": " * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.\n",
        "81": " * (The same goes for the message-accepting overloads.)\n",
        "134": "   *     errorMessageArgs[0]}, etc.  Unmatched arguments will be appended to the formatted message\n",
        "135": "   *     in square braces. Unmatched placeholders will be left as-is.\n",
        "187": "   *     errorMessageArgs[0]}, etc.  Unmatched arguments will be appended to the formatted message\n",
        "188": "   *     in square braces. Unmatched placeholders will be left as-is.\n",
        "243": "   *     errorMessageArgs[0]}, etc.  Unmatched arguments will be appended to the formatted message\n",
        "244": "   *     in square braces. Unmatched placeholders will be left as-is.\n",
        "274": "   * This is a big deal - we're talking factors of 2-8 in microbenchmarks, not just 10-20%.  (This\n",
        "275": "   * is a hotspot optimizer bug, which should be fixed, but that's a separate, big project).\n",
        "277": "   * The coding pattern above is heavily used in java.util, e.g. in ArrayList.  There is a\n",
        "281": "   * appears that this pattern is not directly applicable.  But we can use the ridiculous, devious\n",
        "282": "   * trick of throwing an exception in the middle of the construction of another exception.  Hotspot\n",
        "408": "   * position: the first {@code %s} gets {@code args[0]}, etc.  If there are more arguments than\n"
    }
}