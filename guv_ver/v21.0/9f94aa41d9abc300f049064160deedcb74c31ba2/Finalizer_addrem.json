{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "30": " * <p>While this class is public, we consider it to be *internal* and not part of our published API.\n",
        "31": " * It is public so we can access it reflectively across class loaders in secure environments.\n",
        "33": " * <p>This class can't depend on other Guava code. If we were to load this class in the same class\n",
        "34": " * loader as the rest of Guava, this thread would keep an indirect strong reference to the class\n",
        "35": " * loader and prevent it from being garbage collected. This poses a problem for environments where\n",
        "36": " * you want to throw away the class loader. For example, dynamically reloading a web application or\n",
        "37": " * unloading an OSGi bundle.\n",
        "39": " * <p>{@code com.google.common.base.FinalizableReferenceQueue} loads this class in its own class\n",
        "40": " * loader. That way, this class doesn't prevent the main class loader from getting garbage\n",
        "41": " * collected, and this class can detect when the main class loader has been garbage collected and\n",
        "42": " * stop itself.\n",
        "52": "   * Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively.\n",
        "56": "   * @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be queued\n",
        "57": "   *     either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its\n",
        "58": "   *     close() method is called.\n",
        "69": "     * 2) To detect when FinalizableReference's class loader has to be garbage collected, at which\n",
        "70": "     * point, Finalizer can stop running\n",
        "134": "   *\n",
        "136": "   *     is no longer referenced.\n",
        "145": "       * This is for the benefit of phantom references. Weak and soft references will have already\n",
        "146": "       * been cleared by this point.\n",
        "152": "         * The client no longer has a reference to the FinalizableReferenceQueue. We can stop.\n",
        "164": "       * Loop as long as we have references available so as not to waste CPU looking up the Method\n",
        "165": "       * over and over again.\n",
        "178": "       * FinalizableReference's class loader was reclaimed. While there's a chance that other\n",
        "179": "       * finalizable references could be enqueued subsequently (at which point the class loader\n",
        "180": "       * would be resurrected by virtue of us having a strong reference to it), we should pretty\n",
        "181": "       * much just shut down and make sure we don't keep it alive any longer than necessary.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "8": " *      http://www.apache.org/licenses/LICENSE-2.0\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "32": " * <p>While this class is public, we consider it to be *internal* and not part\n",
        "33": " * of our published API. It is public so we can access it reflectively across\n",
        "34": " * class loaders in secure environments.\n",
        "36": " * <p>This class can't depend on other Guava code. If we were\n",
        "37": " * to load this class in the same class loader as the rest of\n",
        "38": " * Guava, this thread would keep an indirect strong reference\n",
        "39": " * to the class loader and prevent it from being garbage collected. This\n",
        "40": " * poses a problem for environments where you want to throw away the class\n",
        "41": " * loader. For example, dynamically reloading a web application or unloading\n",
        "42": " * an OSGi bundle.\n",
        "44": " * <p>{@code com.google.common.base.FinalizableReferenceQueue} loads this class\n",
        "45": " * in its own class loader. That way, this class doesn't prevent the main\n",
        "46": " * class loader from getting garbage collected, and this class can detect when\n",
        "47": " * the main class loader has been garbage collected and stop itself.\n",
        "57": "   * Starts the Finalizer thread. FinalizableReferenceQueue calls this method\n",
        "58": "   * reflectively.\n",
        "62": "   * @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be\n",
        "63": "   * queued either when the FinalizableReferenceQueue is no longer referenced anywhere, or when\n",
        "64": "   * its close() method is called.\n",
        "75": "     * 2) To detect when FinalizableReference's class loader has to be garbage\n",
        "76": "     * collected, at which point, Finalizer can stop running\n",
        "141": "   * is no longer referenced.\n",
        "150": "       * This is for the benefit of phantom references. Weak and soft\n",
        "151": "       * references will have already been cleared by this point.\n",
        "157": "         * The client no longer has a reference to the\n",
        "158": "         * FinalizableReferenceQueue. We can stop.\n",
        "170": "       * Loop as long as we have references available so as not to waste\n",
        "171": "       * CPU looking up the Method over and over again.\n",
        "184": "       * FinalizableReference's class loader was reclaimed. While there's a\n",
        "185": "       * chance that other finalizable references could be enqueued\n",
        "186": "       * subsequently (at which point the class loader would be resurrected\n",
        "187": "       * by virtue of us having a strong reference to it), we should pretty\n",
        "188": "       * much just shut down and make sure we don't keep it alive any longer\n",
        "189": "       * than necessary.\n"
    }
}