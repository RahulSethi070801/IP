{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "29": " * <p>All methods return serializable suppliers as long as they're given serializable parameters.\n",
        "40": "   * Returns a new supplier which is the composition of the provided function and supplier. In other\n",
        "41": "   * words, the new supplier's value will be computed by retrieving the value from {@code supplier},\n",
        "42": "   * and then applying {@code function} to that value. Note that the resulting supplier will not\n",
        "88": "   * Returns a supplier which caches the instance retrieved during the first call to {@code get()}\n",
        "89": "   * and returns that value on subsequent calls to {@code get()}. See:\n",
        "92": "   * <p>The returned supplier is thread-safe. The delegate's {@code get()} method will be invoked at\n",
        "93": "   * most once. The supplier's serialized form does not contain the cached value, which will be\n",
        "94": "   * recalculated when {@code get()} is called on the reserialized instance.\n",
        "142": "   * Returns a supplier that caches the instance supplied by the delegate and removes the cached\n",
        "143": "   * value after the specified time has passed. Subsequent calls to {@code get()} return the cached\n",
        "144": "   * value if the expiration time has not passed. After the expiration time, a new value is\n",
        "145": "   * retrieved, cached, and returned. See:\n",
        "148": "   * <p>The returned supplier is thread-safe. The supplier's serialized form does not contain the\n",
        "149": "   * cached value, which will be recalculated when {@code\n",
        "152": "   * @param duration the length of time after a value is created that it should stop being returned\n",
        "153": "   *     by subsequent {@code get()} calls\n",
        "181": "      // We use two volatile reads. We could reduce this to one by\n",
        "255": "   * Returns a supplier whose {@code get()} method synchronizes on {@code delegate} before calling\n",
        "256": "   * it, making it thread-safe.\n",
        "285": "   * Returns a function that accepts a supplier and returns the result of invoking\n",
        "286": "   * {@link Supplier#get} on that supplier.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "31": " * <p>All methods return serializable suppliers as long as they're given\n",
        "32": " * serializable parameters.\n",
        "43": "   * Returns a new supplier which is the composition of the provided function\n",
        "44": "   * and supplier. In other words, the new supplier's value will be computed by\n",
        "45": "   * retrieving the value from {@code supplier}, and then applying\n",
        "46": "   * {@code function} to that value. Note that the resulting supplier will not\n",
        "92": "   * Returns a supplier which caches the instance retrieved during the first\n",
        "93": "   * call to {@code get()} and returns that value on subsequent calls to\n",
        "94": "   * {@code get()}. See:\n",
        "97": "   * <p>The returned supplier is thread-safe. The delegate's {@code get()}\n",
        "98": "   * method will be invoked at most once. The supplier's serialized form does\n",
        "99": "   * not contain the cached value, which will be recalculated when {@code get()}\n",
        "100": "   * is called on the reserialized instance.\n",
        "148": "   * Returns a supplier that caches the instance supplied by the delegate and\n",
        "149": "   * removes the cached value after the specified time has passed. Subsequent\n",
        "150": "   * calls to {@code get()} return the cached value if the expiration time has\n",
        "151": "   * not passed. After the expiration time, a new value is retrieved, cached,\n",
        "152": "   * and returned. See:\n",
        "155": "   * <p>The returned supplier is thread-safe. The supplier's serialized form\n",
        "156": "   * does not contain the cached value, which will be recalculated when {@code\n",
        "159": "   * @param duration the length of time after a value is created that it\n",
        "160": "   *     should stop being returned by subsequent {@code get()} calls\n",
        "188": "      // We use two volatile reads.  We could reduce this to one by\n",
        "262": "   * Returns a supplier whose {@code get()} method synchronizes on\n",
        "263": "   * {@code delegate} before calling it, making it thread-safe.\n",
        "292": "   * Returns a function that accepts a supplier and returns the result of\n",
        "293": "   * invoking {@link Supplier#get} on that supplier.\n"
    }
}