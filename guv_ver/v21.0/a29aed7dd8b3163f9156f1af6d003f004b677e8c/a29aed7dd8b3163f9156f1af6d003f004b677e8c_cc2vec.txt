{"id": "a29aed7dd8b3163f9156f1af6d003f004b677e8c", "code": [{"0": "guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java", "added": {"2": ["  @Test\n", "  public void inDegree_oneEdge() {\n", "    addEdge(N1, N2);\n", "    assertThat(graph.inDegree(N2)).isEqualTo(1);\n", "    // Edge direction handled correctly\n", "    assertThat(graph.inDegree(N1)).isEqualTo(0);\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_oneEdge() {\n", "    addEdge(N1, N2);\n", "    assertThat(graph.outDegree(N1)).isEqualTo(1);\n", "    // Edge direction handled correctly\n", "    assertThat(graph.outDegree(N2)).isEqualTo(0);\n", "  }\n", "\n"], "3": ["    assertThat(addEdge(N1, N2)).isTrue();\n", "    assertThat(addEdge(N1, N2)).isFalse();\n", "    assertThat(graph.removeEdge(N1, N2)).isTrue();\n", "    assertThat(graph.removeEdge(N2, N1)).isTrue();\n"]}, "removed": {"1": ["import static org.junit.Assert.assertFalse;\n", "import static org.junit.Assert.assertTrue;\n"], "3": ["    assertTrue(addEdge(N1, N2));\n", "    assertFalse(addEdge(N1, N2));\n", "  @Test\n", "    assertTrue(graph.removeEdge(N1, N2));\n", "    assertTrue(graph.removeEdge(N2, N1));\n"]}, "added_lines": {"2": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "3": [72, 78, 85, 90]}, "removed_lines": {"1": [20, 21], "3": [58, 64, 67, 72, 77]}}, {"1": "guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java", "added": {"2": ["        assertThat(\n", "            node.equals(adjacentNode) || Collections.disjoint(edges, antiParallelEdges)).isTrue();\n"], "3": ["    assertThat(network.incidentNodes(E12).source()).isEqualTo(N1);\n"], "4": ["    assertThat(network.incidentNodes(E12).target()).isEqualTo(N2);\n"], "5": ["  @Test\n", "  public void inDegree_oneEdge() {\n", "    addEdge(E12, N1, N2);\n", "    assertThat(network.inDegree(N2)).isEqualTo(1);\n", "    // Edge direction handled correctly\n", "    assertThat(network.inDegree(N1)).isEqualTo(0);\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_oneEdge() {\n", "    addEdge(E12, N1, N2);\n", "    assertThat(network.outDegree(N1)).isEqualTo(1);\n", "    // Edge direction handled correctly\n", "    assertThat(network.outDegree(N2)).isEqualTo(0);\n", "  }\n", "\n"], "6": ["    assertThat(addEdge(E12, N1, N2)).isTrue();\n"], "7": ["    assertThat(addEdge(E12, N1, N2)).isFalse();\n"]}, "removed": {"1": ["import static org.junit.Assert.assertEquals;\n", "import static org.junit.Assert.assertFalse;\n", "import static org.junit.Assert.assertTrue;\n"], "2": ["        assertTrue(node.equals(adjacentNode) || Collections.disjoint(edges, antiParallelEdges));\n"], "3": ["    assertEquals(N1, network.incidentNodes(E12).source());\n"], "4": ["    assertEquals(N2, network.incidentNodes(E12).target());\n"], "6": ["    assertTrue(addEdge(E12, N1, N2));\n"], "7": ["    assertFalse(addEdge(E12, N1, N2));\n"]}, "added_lines": {"2": [56, 57], "3": [114], "4": [130], "5": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], "6": [167], "7": [178]}, "removed_lines": {"1": [20, 21, 22], "2": [59], "3": [116], "4": [132], "6": [153], "7": [164]}}, {"2": "guava-tests/test/com/google/common/graph/AbstractGraphTest.java", "added": {"1": ["      if (graph.isDirected()) {\n", "        assertThat(graph.degree(node)).isEqualTo(\n", "            graph.predecessors(node).size() + graph.successors(node).size());\n", "        assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node));\n", "        assertThat(graph.successors(node)).hasSize(graph.outDegree(node));\n", "      } else {\n", "        Set<N> neighbors = graph.adjacentNodes(node);\n", "        assertThat(graph.degree(node)).isEqualTo(\n", "            neighbors.size() + (neighbors.contains(node) ? 1 : 0));\n", "        assertThat(graph.inDegree(node)).isEqualTo(graph.degree(node));\n", "        assertThat(graph.outDegree(node)).isEqualTo(graph.degree(node));\n", "      }\n", "\n", "        if (!graph.allowsSelfLoops()) {\n", "          assertThat(node).isNotEqualTo(adjacentNode);\n", "        }\n"], "2": ["  @Test\n", "  public void degree_oneEdge() {\n", "    addEdge(N1, N2);\n", "    assertThat(graph.degree(N1)).isEqualTo(1);\n", "    assertThat(graph.degree(N2)).isEqualTo(1);\n", "  }\n", "\n", "  @Test\n", "  public void degree_isolatedNode() {\n", "    addNode(N1);\n", "    assertThat(graph.degree(N1)).isEqualTo(0);\n", "  }\n", "\n", "  @Test\n", "  public void degree_nodeNotInGraph() {\n", "    try {\n", "      graph.degree(NODE_NOT_IN_GRAPH);\n", "      fail(ERROR_NODE_NOT_IN_GRAPH);\n", "    } catch (IllegalArgumentException e) {\n", "      assertNodeNotInGraphErrorMessage(e);\n", "    }\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_isolatedNode() {\n", "    addNode(N1);\n", "    assertThat(graph.inDegree(N1)).isEqualTo(0);\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_nodeNotInGraph() {\n", "    try {\n", "      graph.inDegree(NODE_NOT_IN_GRAPH);\n", "      fail(ERROR_NODE_NOT_IN_GRAPH);\n", "    } catch (IllegalArgumentException e) {\n", "      assertNodeNotInGraphErrorMessage(e);\n", "    }\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_isolatedNode() {\n", "    addNode(N1);\n", "    assertThat(graph.outDegree(N1)).isEqualTo(0);\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_nodeNotInGraph() {\n", "    try {\n", "      graph.outDegree(NODE_NOT_IN_GRAPH);\n", "      fail(ERROR_NODE_NOT_IN_GRAPH);\n", "    } catch (IllegalArgumentException e) {\n", "      assertNodeNotInGraphErrorMessage(e);\n", "    }\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171], "2": [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337]}, "removed_lines": {}}, {"3": "guava-tests/test/com/google/common/graph/AbstractNetworkTest.java", "added": {"1": ["      if (network.isDirected()) {\n", "        assertThat(network.degree(node)).isEqualTo(\n", "            network.inEdges(node).size() + network.outEdges(node).size());\n", "        assertThat(network.inDegree(node)).isEqualTo(network.inEdges(node).size());\n", "        assertThat(network.outDegree(node)).isEqualTo(network.outEdges(node).size());\n", "      } else {\n", "        assertThat(network.degree(node)).isEqualTo(\n", "            network.incidentEdges(node).size() + network.edgesConnecting(node, node).size());\n", "        assertThat(network.inDegree(node)).isEqualTo(network.degree(node));\n", "        assertThat(network.outDegree(node)).isEqualTo(network.degree(node));\n", "      }\n", "\n"]}, "removed": {}, "added_lines": {"1": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229]}, "removed_lines": {}}, {"4": "guava-tests/test/com/google/common/graph/AbstractUndirectedGraphTest.java", "added": {"2": ["  @Test\n", "  public void inDegree_oneEdge() {\n", "    addEdge(N1, N2);\n", "    assertThat(graph.inDegree(N2)).isEqualTo(1);\n", "    assertThat(graph.inDegree(N1)).isEqualTo(1);\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_oneEdge() {\n", "    addEdge(N1, N2);\n", "    assertThat(graph.outDegree(N1)).isEqualTo(1);\n", "    assertThat(graph.outDegree(N2)).isEqualTo(1);\n", "  }\n", "\n"], "3": ["    assertThat(addEdge(N1, N2)).isTrue();\n", "    assertThat(addEdge(N2, N1)).isFalse();\n"], "4": ["    assertThat(graph.removeEdge(N1, N2)).isTrue();\n", "    assertThat(graph.removeEdge(N2, N1)).isFalse();\n"]}, "removed": {"1": ["import static org.junit.Assert.assertFalse;\n", "import static org.junit.Assert.assertTrue;\n"], "3": ["    assertTrue(addEdge(N1, N2));\n", "    assertFalse(addEdge(N2, N1));\n"], "4": ["    assertTrue(graph.removeEdge(N1, N2));\n", "    assertFalse(graph.removeEdge(N2, N1));\n"]}, "added_lines": {"2": [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "3": [80, 86], "4": [94, 97]}, "removed_lines": {"1": [20, 21], "3": [68, 74], "4": [82, 85]}}, {"5": "guava-tests/test/com/google/common/graph/AbstractUndirectedNetworkTest.java", "added": {"2": ["  @Test\n", "  public void inDegree_oneEdge() {\n", "    addEdge(E12, N1, N2);\n", "    assertThat(network.inDegree(N2)).isEqualTo(1);\n", "    assertThat(network.inDegree(N1)).isEqualTo(1);\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_oneEdge() {\n", "    addEdge(E12, N1, N2);\n", "    assertThat(network.outDegree(N1)).isEqualTo(1);\n", "    assertThat(network.outDegree(N2)).isEqualTo(1);\n", "  }\n", "\n"], "3": ["    assertThat(addEdge(E12, N1, N2)).isTrue();\n"], "4": ["    assertThat(addEdge(E12, N1, N2)).isFalse();\n", "    assertThat(addEdge(E12, N2, N1)).isFalse();\n"]}, "removed": {"1": ["import static org.junit.Assert.assertFalse;\n", "import static org.junit.Assert.assertTrue;\n"], "3": ["    assertTrue(addEdge(E12, N1, N2));\n"], "4": ["    assertFalse(addEdge(E12, N1, N2));\n", "    assertFalse(addEdge(E12, N2, N1));\n"]}, "added_lines": {"2": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "3": [116], "4": [126, 128]}, "removed_lines": {"1": [20, 21], "3": [104], "4": [114, 116]}}, {"6": "guava-tests/test/com/google/common/graph/ConfigurableDirectedGraphTest.java", "added": {"2": ["  @Test\n", "  public void degree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertThat(graph.degree(N1)).isEqualTo(2);\n", "    addEdge(N1, N2);\n", "    assertThat(graph.degree(N1)).isEqualTo(3);\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertThat(graph.inDegree(N1)).isEqualTo(1);\n", "    addEdge(N4, N1);\n", "    assertThat(graph.inDegree(N1)).isEqualTo(2);\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertThat(graph.outDegree(N1)).isEqualTo(1);\n", "    addEdge(N1, N2);\n", "    assertThat(graph.outDegree(N1)).isEqualTo(2);\n", "  }\n", "\n", "    assertThat(addEdge(N1, N1)).isTrue();\n"], "3": ["    assertThat(addEdge(N1, N1)).isFalse();\n", "    assertThat(graph.removeNode(N1)).isTrue();\n", "    assertThat(graph.removeEdge(N1, N1)).isTrue();\n"]}, "removed": {"1": ["import static org.junit.Assert.assertFalse;\n", "import static org.junit.Assert.assertTrue;\n"], "2": ["    assertTrue(addEdge(N1, N1));\n"], "3": ["    assertFalse(addEdge(N1, N1));\n", "    assertTrue(graph.removeNode(N1));\n", "    assertTrue(graph.removeEdge(N1, N1));\n"]}, "added_lines": {"2": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86], "3": [94, 101, 108]}, "removed_lines": {"1": [20, 21], "2": [64], "3": [72, 79, 86]}}, {"7": "guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java", "added": {"2": ["    assertThat(network.incidentNodes(E11).source()).isEqualTo(N1);\n", "    assertThat(network.incidentNodes(E11).target()).isEqualTo(N1);\n", "  }\n", "\n", "  @Test\n", "  public void degree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertThat(network.degree(N1)).isEqualTo(2);\n", "    addEdge(E12, N1, N2);\n", "    assertThat(network.degree(N1)).isEqualTo(3);\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertThat(network.inDegree(N1)).isEqualTo(1);\n", "    addEdge(E41, N4, N1);\n", "    assertThat(network.inDegree(N1)).isEqualTo(2);\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertThat(network.outDegree(N1)).isEqualTo(1);\n", "    addEdge(E12, N1, N2);\n", "    assertThat(network.outDegree(N1)).isEqualTo(2);\n", "    assertThat(addEdge(E11, N1, N1)).isTrue();\n"], "3": ["    assertThat(addEdge(E11, N1, N1)).isFalse();\n"], "4": ["    assertThat(network.removeNode(N1)).isTrue();\n"], "5": ["    assertThat(network.removeEdge(E11)).isTrue();\n"]}, "removed": {"1": ["import static org.junit.Assert.assertEquals;\n", "import static org.junit.Assert.assertFalse;\n", "import static org.junit.Assert.assertTrue;\n"], "2": ["    assertEquals(N1, network.incidentNodes(E11).source());\n", "    assertEquals(N1, network.incidentNodes(E11).target());\n", "    assertTrue(addEdge(E11, N1, N1));\n"], "3": ["    assertFalse(addEdge(E11, N1, N1));\n"], "4": ["    assertTrue(network.removeNode(N1));\n"], "5": ["    assertTrue(network.removeEdge(E11));\n"]}, "added_lines": {"2": [108, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 144], "3": [153], "4": [196], "5": [204]}, "removed_lines": {"1": [20, 21, 22], "2": [111, 117, 123], "3": [132], "4": [175], "5": [183]}}, {"8": "guava-tests/test/com/google/common/graph/ConfigurableUndirectedGraphTest.java", "added": {"2": ["  @Test\n", "  public void degree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertThat(graph.degree(N1)).isEqualTo(2);\n", "    addEdge(N1, N2);\n", "    assertThat(graph.degree(N1)).isEqualTo(3);\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertThat(graph.inDegree(N1)).isEqualTo(2);\n", "    addEdge(N1, N2);\n", "    assertThat(graph.inDegree(N1)).isEqualTo(3);\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertThat(graph.outDegree(N1)).isEqualTo(2);\n", "    addEdge(N2, N1);\n", "    assertThat(graph.outDegree(N1)).isEqualTo(3);\n", "  }\n", "\n", "    assertThat(addEdge(N1, N1)).isTrue();\n", "    assertThat(addEdge(N1, N1)).isFalse();\n", "    assertThat(graph.removeNode(N1)).isTrue();\n", "    assertThat(graph.removeEdge(N1, N1)).isTrue();\n"]}, "removed": {"1": ["import static org.junit.Assert.assertFalse;\n", "import static org.junit.Assert.assertTrue;\n"], "2": ["    assertTrue(addEdge(N1, N1));\n", "    assertFalse(addEdge(N1, N1));\n", "    assertTrue(graph.removeNode(N1));\n", "    assertTrue(graph.removeEdge(N1, N1));\n"]}, "added_lines": {"2": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 93, 100, 107]}, "removed_lines": {"1": [20, 21], "2": [64, 71, 78, 85]}}, {"9": "guava-tests/test/com/google/common/graph/ConfigurableUndirectedNetworkTest.java", "added": {"2": ["  @Test\n", "  public void degree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertThat(network.degree(N1)).isEqualTo(2);\n", "    addEdge(E12, N1, N2);\n", "    assertThat(network.degree(N1)).isEqualTo(3);\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertThat(network.inDegree(N1)).isEqualTo(2);\n", "    addEdge(E12, N1, N2);\n", "    assertThat(network.inDegree(N1)).isEqualTo(3);\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertThat(network.outDegree(N1)).isEqualTo(2);\n", "    addEdge(E12, N2, N1);\n", "    assertThat(network.outDegree(N1)).isEqualTo(3);\n", "  }\n", "\n", "    assertThat(addEdge(E11, N1, N1)).isTrue();\n"], "3": ["    assertThat(addEdge(E11, N1, N1)).isFalse();\n"], "4": ["    assertThat(network.removeNode(N1)).isTrue();\n"], "5": ["    assertThat(network.removeEdge(E11)).isTrue();\n"]}, "removed": {"1": ["import static org.junit.Assert.assertFalse;\n", "import static org.junit.Assert.assertTrue;\n"], "2": ["    assertTrue(addEdge(E11, N1, N1));\n"], "3": ["    assertFalse(addEdge(E11, N1, N1));\n"], "4": ["    assertTrue(network.removeNode(N1));\n"], "5": ["    assertTrue(network.removeEdge(E11));\n"]}, "added_lines": {"2": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133], "3": [142], "4": [185], "5": [193]}, "removed_lines": {"1": [20, 21], "2": [111], "3": [120], "4": [163], "5": [171]}}, {"10": "guava/src/com/google/common/graph/AbstractGraph.java", "added": {"1": ["      degreeSum += degree(node);\n"], "2": ["  @Override\n", "  public int degree(Object node) {\n", "    if (isDirected()) {\n", "      return IntMath.saturatedAdd(predecessors(node).size(), successors(node).size());\n", "    } else {\n", "      Set<N> neighbors = adjacentNodes(node);\n", "      int selfLoop = (allowsSelfLoops() && neighbors.contains(node)) ? 1 : 0;\n", "      return IntMath.saturatedAdd(neighbors.size(), selfLoop);\n", "    }\n", "  }\n", "\n", "  @Override\n", "  public int inDegree(Object node) {\n", "    return isDirected() ? predecessors(node).size() : degree(node);\n", "  }\n", "\n", "  @Override\n", "  public int outDegree(Object node) {\n", "    return isDirected() ? successors(node).size() : degree(node);\n", "  }\n", "\n"]}, "removed": {"1": ["      degreeSum += degree(this, node);\n"], "2": ["  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n"], "3": ["\n", "  /**\n", "   * Returns the number of times an edge touches {@code node} in {@code graph}. This is equivalent\n", "   * to the number of edges incident to {@code node} in the graph, with self-loops counting twice.\n", "   *\n", "   * <p>If this number is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  // TODO(b/30649235): What to do with this? Move to Graphs or interfaces? Provide in/outDegree?\n", "  private static int degree(Graph<?, ?> graph, Object node) {\n", "    if (graph.isDirected()) {\n", "      return IntMath.saturatedAdd(graph.predecessors(node).size(), graph.successors(node).size());\n", "    } else {\n", "      int selfLoops = (graph.allowsSelfLoops() && graph.adjacentNodes(node).contains(node)) ? 1 : 0;\n", "      return IntMath.saturatedAdd(graph.adjacentNodes(node).size(), selfLoops);\n", "    }\n", "  }\n"]}, "added_lines": {"1": [54], "2": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111]}, "removed_lines": {"1": [54], "2": [91], "3": [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162]}}, {"11": "guava/src/com/google/common/graph/AbstractNetwork.java", "added": {"1": ["import com.google.common.math.IntMath;\n"], "2": ["  @Override\n", "  public int degree(Object node) {\n", "    if (isDirected()) {\n", "      return IntMath.saturatedAdd(inEdges(node).size(), outEdges(node).size());\n", "    } else {\n", "      return IntMath.saturatedAdd(incidentEdges(node).size(), edgesConnecting(node, node).size());\n", "    }\n", "  }\n", "\n", "  @Override\n", "  public int inDegree(Object node) {\n", "    return isDirected() ? inEdges(node).size() : degree(node);\n", "  }\n", "\n", "  @Override\n", "  public int outDegree(Object node) {\n", "    return isDirected() ? outEdges(node).size() : degree(node);\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [26], "2": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151]}, "removed_lines": {}}, {"12": "guava/src/com/google/common/graph/Graph.java", "added": {"1": ["  /**\n", "   * Returns the count of {@code node}'s incident edges, counting self-loops twice (equivalently,\n", "   * the number of times an edge touches {@code node}).\n", "   *\n", "   * <p>For directed graphs, this is equivalent to {@code inDegree(node) + outDegree(node)}.\n", "   *\n", "   * <p>For undirected graphs, this is equivalent to {@code adjacentNodes(node).size()} + (1 if\n", "   * {@code node} has an incident self-loop, 0 otherwise).\n", "   *\n", "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int degree(Object node);\n", "\n", "  /**\n", "   * Returns the count of {@code node}'s incoming edges (equal to {@code predecessors(node).size()})\n", "   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.\n", "   *\n", "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int inDegree(Object node);\n", "\n", "  /**\n", "   * Returns the count of {@code node}'s outgoing edges (equal to {@code successors(node).size()})\n", "   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.\n", "   *\n", "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int outDegree(Object node);\n", "\n"]}, "removed": {}, "added_lines": {"1": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144]}, "removed_lines": {}}, {"13": "guava/src/com/google/common/graph/Network.java", "added": {"1": ["   *\n", "   * <p>If this network {@link #allowsParallelEdges()}, parallel edges will treated as if collapsed\n", "   * into a single edge. For example, the {@link #degree(Object)} of a node in the {@link Graph}\n", "   * view may be less than the degree of the same node in this {@link Network}.\n"], "2": ["  /**\n", "   * Returns the count of {@code node}'s {@link #incidentEdges(Object) incident edges}, counting\n", "   * self-loops twice (equivalently, the number of times an edge touches {@code node}).\n", "   *\n", "   * <p>For directed graphs, this is equivalent to {@code inDegree(node) + outDegree(node)}.\n", "   *\n", "   * <p>For undirected graphs, this is equivalent to {@code incidentEdges(node).size()} + (number\n", "   * of self-loops incident to {@code node}).\n", "   *\n", "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int degree(Object node);\n", "\n", "  /**\n", "   * Returns the count of {@code node}'s {@link #inEdges(Object) incoming edges} in a directed\n", "   * graph. In an undirected graph, returns the {@link #degree(Object)}.\n", "   *\n", "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int inDegree(Object node);\n", "\n", "  /**\n", "   * Returns the count of {@code node}'s {@link #outEdges(Object) outgoing edges} in a directed\n", "   * graph. In an undirected graph, returns the {@link #degree(Object)}.\n", "   *\n", "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int outDegree(Object node);\n", "\n"]}, "removed": {}, "added_lines": {"1": [232, 233, 234, 235], "2": [331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365]}, "removed_lines": {}}]}
