{
    "addition": {
        "232": "   *\n",
        "233": "   * <p>If this network {@link #allowsParallelEdges()}, parallel edges will treated as if collapsed\n",
        "234": "   * into a single edge. For example, the {@link #degree(Object)} of a node in the {@link Graph}\n",
        "235": "   * view may be less than the degree of the same node in this {@link Network}.\n",
        "331": "  /**\n",
        "332": "   * Returns the count of {@code node}'s {@link #incidentEdges(Object) incident edges}, counting\n",
        "333": "   * self-loops twice (equivalently, the number of times an edge touches {@code node}).\n",
        "334": "   *\n",
        "335": "   * <p>For directed graphs, this is equivalent to {@code inDegree(node) + outDegree(node)}.\n",
        "336": "   *\n",
        "337": "   * <p>For undirected graphs, this is equivalent to {@code incidentEdges(node).size()} + (number\n",
        "338": "   * of self-loops incident to {@code node}).\n",
        "339": "   *\n",
        "340": "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n",
        "341": "   *\n",
        "342": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "343": "   */\n",
        "344": "  int degree(Object node);\n",
        "345": "\n",
        "346": "  /**\n",
        "347": "   * Returns the count of {@code node}'s {@link #inEdges(Object) incoming edges} in a directed\n",
        "348": "   * graph. In an undirected graph, returns the {@link #degree(Object)}.\n",
        "349": "   *\n",
        "350": "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n",
        "351": "   *\n",
        "352": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "353": "   */\n",
        "354": "  int inDegree(Object node);\n",
        "355": "\n",
        "356": "  /**\n",
        "357": "   * Returns the count of {@code node}'s {@link #outEdges(Object) outgoing edges} in a directed\n",
        "358": "   * graph. In an undirected graph, returns the {@link #degree(Object)}.\n",
        "359": "   *\n",
        "360": "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n",
        "361": "   *\n",
        "362": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "363": "   */\n",
        "364": "  int outDegree(Object node);\n",
        "365": "\n"
    },
    "removed": {}
}