{
    "addition": {
        "106": "  @Test\n",
        "107": "  public void degree_selfLoop() {\n",
        "108": "    addEdge(E11, N1, N1);\n",
        "109": "    assertThat(network.degree(N1)).isEqualTo(2);\n",
        "110": "    addEdge(E12, N1, N2);\n",
        "111": "    assertThat(network.degree(N1)).isEqualTo(3);\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  @Test\n",
        "115": "  public void inDegree_selfLoop() {\n",
        "116": "    addEdge(E11, N1, N1);\n",
        "117": "    assertThat(network.inDegree(N1)).isEqualTo(2);\n",
        "118": "    addEdge(E12, N1, N2);\n",
        "119": "    assertThat(network.inDegree(N1)).isEqualTo(3);\n",
        "120": "  }\n",
        "121": "\n",
        "122": "  @Test\n",
        "123": "  public void outDegree_selfLoop() {\n",
        "124": "    addEdge(E11, N1, N1);\n",
        "125": "    assertThat(network.outDegree(N1)).isEqualTo(2);\n",
        "126": "    addEdge(E12, N2, N1);\n",
        "127": "    assertThat(network.outDegree(N1)).isEqualTo(3);\n",
        "128": "  }\n",
        "129": "\n",
        "133": "    assertThat(addEdge(E11, N1, N1)).isTrue();\n",
        "142": "    assertThat(addEdge(E11, N1, N1)).isFalse();\n",
        "185": "    assertThat(network.removeNode(N1)).isTrue();\n",
        "193": "    assertThat(network.removeEdge(E11)).isTrue();\n"
    },
    "removed": {
        "20": "import static org.junit.Assert.assertFalse;\n",
        "21": "import static org.junit.Assert.assertTrue;\n",
        "111": "    assertTrue(addEdge(E11, N1, N1));\n",
        "120": "    assertFalse(addEdge(E11, N1, N1));\n",
        "163": "    assertTrue(network.removeNode(N1));\n",
        "171": "    assertTrue(network.removeEdge(E11));\n"
    }
}