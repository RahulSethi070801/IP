{
    "addition": {
        "155": "      if (graph.isDirected()) {\n",
        "156": "        assertThat(graph.degree(node)).isEqualTo(\n",
        "157": "            graph.predecessors(node).size() + graph.successors(node).size());\n",
        "158": "        assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node));\n",
        "159": "        assertThat(graph.successors(node)).hasSize(graph.outDegree(node));\n",
        "160": "      } else {\n",
        "161": "        Set<N> neighbors = graph.adjacentNodes(node);\n",
        "162": "        assertThat(graph.degree(node)).isEqualTo(\n",
        "163": "            neighbors.size() + (neighbors.contains(node) ? 1 : 0));\n",
        "164": "        assertThat(graph.inDegree(node)).isEqualTo(graph.degree(node));\n",
        "165": "        assertThat(graph.outDegree(node)).isEqualTo(graph.degree(node));\n",
        "166": "      }\n",
        "167": "\n",
        "169": "        if (!graph.allowsSelfLoops()) {\n",
        "170": "          assertThat(node).isNotEqualTo(adjacentNode);\n",
        "171": "        }\n",
        "283": "  @Test\n",
        "284": "  public void degree_oneEdge() {\n",
        "285": "    addEdge(N1, N2);\n",
        "286": "    assertThat(graph.degree(N1)).isEqualTo(1);\n",
        "287": "    assertThat(graph.degree(N2)).isEqualTo(1);\n",
        "288": "  }\n",
        "289": "\n",
        "290": "  @Test\n",
        "291": "  public void degree_isolatedNode() {\n",
        "292": "    addNode(N1);\n",
        "293": "    assertThat(graph.degree(N1)).isEqualTo(0);\n",
        "294": "  }\n",
        "295": "\n",
        "296": "  @Test\n",
        "297": "  public void degree_nodeNotInGraph() {\n",
        "298": "    try {\n",
        "299": "      graph.degree(NODE_NOT_IN_GRAPH);\n",
        "300": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "301": "    } catch (IllegalArgumentException e) {\n",
        "302": "      assertNodeNotInGraphErrorMessage(e);\n",
        "303": "    }\n",
        "304": "  }\n",
        "305": "\n",
        "306": "  @Test\n",
        "307": "  public void inDegree_isolatedNode() {\n",
        "308": "    addNode(N1);\n",
        "309": "    assertThat(graph.inDegree(N1)).isEqualTo(0);\n",
        "310": "  }\n",
        "311": "\n",
        "312": "  @Test\n",
        "313": "  public void inDegree_nodeNotInGraph() {\n",
        "314": "    try {\n",
        "315": "      graph.inDegree(NODE_NOT_IN_GRAPH);\n",
        "316": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "317": "    } catch (IllegalArgumentException e) {\n",
        "318": "      assertNodeNotInGraphErrorMessage(e);\n",
        "319": "    }\n",
        "320": "  }\n",
        "321": "\n",
        "322": "  @Test\n",
        "323": "  public void outDegree_isolatedNode() {\n",
        "324": "    addNode(N1);\n",
        "325": "    assertThat(graph.outDegree(N1)).isEqualTo(0);\n",
        "326": "  }\n",
        "327": "\n",
        "328": "  @Test\n",
        "329": "  public void outDegree_nodeNotInGraph() {\n",
        "330": "    try {\n",
        "331": "      graph.outDegree(NODE_NOT_IN_GRAPH);\n",
        "332": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "333": "    } catch (IllegalArgumentException e) {\n",
        "334": "      assertNodeNotInGraphErrorMessage(e);\n",
        "335": "    }\n",
        "336": "  }\n",
        "337": "\n"
    },
    "removed": {}
}