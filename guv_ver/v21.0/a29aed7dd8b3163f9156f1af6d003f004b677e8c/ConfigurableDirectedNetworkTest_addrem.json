{
    "addition": {
        "108": "    assertThat(network.incidentNodes(E11).source()).isEqualTo(N1);\n",
        "114": "    assertThat(network.incidentNodes(E11).target()).isEqualTo(N1);\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  @Test\n",
        "118": "  public void degree_selfLoop() {\n",
        "119": "    addEdge(E11, N1, N1);\n",
        "120": "    assertThat(network.degree(N1)).isEqualTo(2);\n",
        "121": "    addEdge(E12, N1, N2);\n",
        "122": "    assertThat(network.degree(N1)).isEqualTo(3);\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  @Test\n",
        "126": "  public void inDegree_selfLoop() {\n",
        "127": "    addEdge(E11, N1, N1);\n",
        "128": "    assertThat(network.inDegree(N1)).isEqualTo(1);\n",
        "129": "    addEdge(E41, N4, N1);\n",
        "130": "    assertThat(network.inDegree(N1)).isEqualTo(2);\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  @Test\n",
        "134": "  public void outDegree_selfLoop() {\n",
        "135": "    addEdge(E11, N1, N1);\n",
        "136": "    assertThat(network.outDegree(N1)).isEqualTo(1);\n",
        "137": "    addEdge(E12, N1, N2);\n",
        "138": "    assertThat(network.outDegree(N1)).isEqualTo(2);\n",
        "144": "    assertThat(addEdge(E11, N1, N1)).isTrue();\n",
        "153": "    assertThat(addEdge(E11, N1, N1)).isFalse();\n",
        "196": "    assertThat(network.removeNode(N1)).isTrue();\n",
        "204": "    assertThat(network.removeEdge(E11)).isTrue();\n"
    },
    "removed": {
        "20": "import static org.junit.Assert.assertEquals;\n",
        "21": "import static org.junit.Assert.assertFalse;\n",
        "22": "import static org.junit.Assert.assertTrue;\n",
        "111": "    assertEquals(N1, network.incidentNodes(E11).source());\n",
        "117": "    assertEquals(N1, network.incidentNodes(E11).target());\n",
        "123": "    assertTrue(addEdge(E11, N1, N1));\n",
        "132": "    assertFalse(addEdge(E11, N1, N1));\n",
        "175": "    assertTrue(network.removeNode(N1));\n",
        "183": "    assertTrue(network.removeEdge(E11));\n"
    }
}