{
    "addition": {
        "110": "  /**\n",
        "111": "   * Returns the count of {@code node}'s incident edges, counting self-loops twice (equivalently,\n",
        "112": "   * the number of times an edge touches {@code node}).\n",
        "113": "   *\n",
        "114": "   * <p>For directed graphs, this is equivalent to {@code inDegree(node) + outDegree(node)}.\n",
        "115": "   *\n",
        "116": "   * <p>For undirected graphs, this is equivalent to {@code adjacentNodes(node).size()} + (1 if\n",
        "117": "   * {@code node} has an incident self-loop, 0 otherwise).\n",
        "118": "   *\n",
        "119": "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n",
        "120": "   *\n",
        "121": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "122": "   */\n",
        "123": "  int degree(Object node);\n",
        "124": "\n",
        "125": "  /**\n",
        "126": "   * Returns the count of {@code node}'s incoming edges (equal to {@code predecessors(node).size()})\n",
        "127": "   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.\n",
        "128": "   *\n",
        "129": "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n",
        "130": "   *\n",
        "131": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "132": "   */\n",
        "133": "  int inDegree(Object node);\n",
        "134": "\n",
        "135": "  /**\n",
        "136": "   * Returns the count of {@code node}'s outgoing edges (equal to {@code successors(node).size()})\n",
        "137": "   * in a directed graph. In an undirected graph, returns the {@link #degree(Object)}.\n",
        "138": "   *\n",
        "139": "   * <p>If the count is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n",
        "140": "   *\n",
        "141": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "142": "   */\n",
        "143": "  int outDegree(Object node);\n",
        "144": "\n"
    },
    "removed": {}
}