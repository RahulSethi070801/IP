{
    "addition": {
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "101": "    N node = checkNotNull(super.removeInEdge(edge, isSelfLoop));\n",
        "102": "    Multiset<N> predecessors = getReference(predecessorsReference);\n",
        "103": "    if (predecessors != null) {\n",
        "104": "      checkState(predecessors.remove(node));\n",
        "111": "    N node = checkNotNull(super.removeOutEdge(edge));\n",
        "112": "    Multiset<N> successors = getReference(successorsReference);\n",
        "113": "    if (successors != null) {\n",
        "114": "      checkState(successors.remove(node));\n",
        "120": "  public void addInEdge(E edge, N node, boolean isSelfLoop) {\n",
        "121": "    super.addInEdge(edge, node, isSelfLoop);\n",
        "122": "    Multiset<N> predecessors = getReference(predecessorsReference);\n",
        "123": "    if (predecessors != null) {\n",
        "124": "      checkState(predecessors.add(node));\n",
        "129": "  public void addOutEdge(E edge, N node) {\n",
        "130": "    super.addOutEdge(edge, node);\n",
        "131": "    Multiset<N> successors = getReference(successorsReference);\n",
        "132": "    if (successors != null) {\n",
        "133": "      checkState(successors.add(node));\n"
    },
    "removed": {
        "100": "    N node = super.removeInEdge(edge, isSelfLoop);\n",
        "101": "    if (node != null) {\n",
        "102": "      Multiset<N> predecessors = getReference(predecessorsReference);\n",
        "103": "      if (predecessors != null) {\n",
        "104": "        checkState(predecessors.remove(node));\n",
        "105": "      }\n",
        "112": "    N node = super.removeOutEdge(edge);\n",
        "113": "    if (node != null) {\n",
        "114": "      Multiset<N> successors = getReference(successorsReference);\n",
        "115": "      if (successors != null) {\n",
        "116": "        checkState(successors.remove(node));\n",
        "117": "      }\n",
        "123": "  public boolean addInEdge(E edge, N node, boolean isSelfLoop) {\n",
        "124": "    if (super.addInEdge(edge, node, isSelfLoop)) {\n",
        "125": "      Multiset<N> predecessors = getReference(predecessorsReference);\n",
        "126": "      if (predecessors != null) {\n",
        "127": "        checkState(predecessors.add(node));\n",
        "128": "      }\n",
        "129": "      return true;\n",
        "131": "    return false;\n",
        "135": "  public boolean addOutEdge(E edge, N node) {\n",
        "136": "    if (super.addOutEdge(edge, node)) {\n",
        "137": "      Multiset<N> successors = getReference(successorsReference);\n",
        "138": "      if (successors != null) {\n",
        "139": "        checkState(successors.add(node));\n",
        "140": "      }\n",
        "141": "      return true;\n",
        "143": "    return false;\n"
    }
}