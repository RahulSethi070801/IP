{"id": "71766941fdf7c29b88c9ae15e04c8532d603a642", "code": [{"0": "guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java", "added": {}, "removed": {"1": ["import static org.junit.Assert.assertEquals;\n"], "2": ["  @Test\n", "  public void inDegree_oneEdge() {\n", "    addEdge(N1, N2);\n", "    assertEquals(1, graph.inDegree(N2));\n", "    // Edge direction handled correctly\n", "    assertEquals(0, graph.inDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_oneEdge() {\n", "    addEdge(N1, N2);\n", "    assertEquals(1, graph.outDegree(N1));\n", "    // Edge direction handled correctly\n", "    assertEquals(0, graph.outDegree(N2));\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [20], "2": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]}}, {"1": "guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java", "added": {}, "removed": {"1": ["  @Test\n", "  public void inDegree_oneEdge() {\n", "    addEdge(E12, N1, N2);\n", "    assertEquals(1, network.inDegree(N2));\n", "    // Edge direction handled correctly\n", "    assertEquals(0, network.inDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_oneEdge() {\n", "    addEdge(E12, N1, N2);\n", "    assertEquals(1, network.outDegree(N1));\n", "    // Edge direction handled correctly\n", "    assertEquals(0, network.outDegree(N2));\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127]}}, {"2": "guava-tests/test/com/google/common/graph/AbstractGraphTest.java", "added": {}, "removed": {"1": ["import static org.junit.Assert.assertEquals;\n"], "2": ["      assertThat(graph.adjacentNodes(node)).hasSize(graph.degree(node));\n", "      assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node));\n", "      assertThat(graph.successors(node)).hasSize(graph.outDegree(node));\n", "\n"], "3": ["  @Test\n", "  public void degree_oneEdge() {\n", "    addEdge(N1, N2);\n", "    assertEquals(1, graph.degree(N1));\n", "    assertEquals(1, graph.degree(N2));\n", "  }\n", "\n", "  @Test\n", "  public void degree_isolatedNode() {\n", "    addNode(N1);\n", "    assertEquals(0, graph.degree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void degree_nodeNotInGraph() {\n", "    try {\n", "      graph.degree(NODE_NOT_IN_GRAPH);\n", "      fail(ERROR_NODE_NOT_IN_GRAPH);\n", "    } catch (IllegalArgumentException e) {\n", "      assertNodeNotInGraphErrorMessage(e);\n", "    }\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_isolatedNode() {\n", "    addNode(N1);\n", "    assertEquals(0, graph.inDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_nodeNotInGraph() {\n", "    try {\n", "      graph.inDegree(NODE_NOT_IN_GRAPH);\n", "      fail(ERROR_NODE_NOT_IN_GRAPH);\n", "    } catch (IllegalArgumentException e) {\n", "      assertNodeNotInGraphErrorMessage(e);\n", "    }\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_isolatedNode() {\n", "    addNode(N1);\n", "    assertEquals(0, graph.outDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_nodeNotInGraph() {\n", "    try {\n", "      graph.outDegree(NODE_NOT_IN_GRAPH);\n", "      fail(ERROR_NODE_NOT_IN_GRAPH);\n", "    } catch (IllegalArgumentException e) {\n", "      assertNodeNotInGraphErrorMessage(e);\n", "    }\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [20], "2": [139, 140, 141, 142], "3": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306]}}, {"3": "guava-tests/test/com/google/common/graph/AbstractNetworkTest.java", "added": {}, "removed": {"1": ["import static org.junit.Assert.assertEquals;\n"], "2": ["      assertThat(network.incidentEdges(node)).hasSize(network.degree(node));\n", "      assertThat(network.degree(node)).isAtLeast(network.adjacentNodes(node).size());\n", "      assertThat(network.inEdges(node)).hasSize(network.inDegree(node));\n", "      assertThat(network.inDegree(node)).isAtLeast(network.predecessors(node).size());\n", "      assertThat(network.outEdges(node)).hasSize(network.outDegree(node));\n", "      assertThat(network.outDegree(node)).isAtLeast(network.successors(node).size());\n", "\n"], "3": ["  @Test\n", "  public void degree_oneEdge() {\n", "    addEdge(E12, N1, N2);\n", "    assertEquals(1, network.degree(N1));\n", "    assertEquals(1, network.degree(N2));\n", "  }\n", "\n", "  @Test\n", "  public void degree_isolatedNode() {\n", "    addNode(N1);\n", "    assertEquals(0, network.degree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void degree_nodeNotInGraph() {\n", "    try {\n", "      network.degree(NODE_NOT_IN_GRAPH);\n", "      fail(ERROR_NODE_NOT_IN_GRAPH);\n", "    } catch (IllegalArgumentException e) {\n", "      assertNodeNotInGraphErrorMessage(e);\n", "    }\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_isolatedNode() {\n", "    addNode(N1);\n", "    assertEquals(0, network.inDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_nodeNotInGraph() {\n", "    try {\n", "      network.inDegree(NODE_NOT_IN_GRAPH);\n", "      fail(ERROR_NODE_NOT_IN_GRAPH);\n", "    } catch (IllegalArgumentException e) {\n", "      assertNodeNotInGraphErrorMessage(e);\n", "    }\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_isolatedNode() {\n", "    addNode(N1);\n", "    assertEquals(0, network.outDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_nodeNotInGraph() {\n", "    try {\n", "      network.outDegree(NODE_NOT_IN_GRAPH);\n", "      fail(ERROR_NODE_NOT_IN_GRAPH);\n", "    } catch (IllegalArgumentException e) {\n", "      assertNodeNotInGraphErrorMessage(e);\n", "    }\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [20], "2": [200, 201, 202, 203, 204, 205, 206], "3": [547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601]}}, {"4": "guava-tests/test/com/google/common/graph/AbstractUndirectedGraphTest.java", "added": {}, "removed": {"1": ["import static org.junit.Assert.assertEquals;\n"], "2": ["  @Test\n", "  public void inDegree_oneEdge() {\n", "    addEdge(N1, N2);\n", "    assertEquals(1, graph.inDegree(N2));\n", "    assertEquals(1, graph.inDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_oneEdge() {\n", "    addEdge(N1, N2);\n", "    assertEquals(1, graph.outDegree(N1));\n", "    assertEquals(1, graph.outDegree(N2));\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [20], "2": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75]}}, {"5": "guava-tests/test/com/google/common/graph/AbstractUndirectedNetworkTest.java", "added": {}, "removed": {"1": ["import static org.junit.Assert.assertEquals;\n"], "2": ["  @Test\n", "  public void inDegree_oneEdge() {\n", "    addEdge(E12, N1, N2);\n", "    assertEquals(1, network.inDegree(N2));\n", "    assertEquals(1, network.inDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_oneEdge() {\n", "    addEdge(E12, N1, N2);\n", "    assertEquals(1, network.outDegree(N1));\n", "    assertEquals(1, network.outDegree(N2));\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [20], "2": [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}}, {"6": "guava-tests/test/com/google/common/graph/ConfigurableDirectedGraphTest.java", "added": {}, "removed": {"1": ["import static org.junit.Assert.assertEquals;\n"], "2": ["  @Test\n", "  public void degree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertEquals(1, graph.degree(N1));\n", "    addEdge(N1, N2);\n", "    assertEquals(2, graph.degree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertEquals(1, graph.inDegree(N1));\n", "    addEdge(N4, N1);\n", "    assertEquals(2, graph.inDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertEquals(1, graph.outDegree(N1));\n", "    addEdge(N1, N2);\n", "    assertEquals(2, graph.outDegree(N1));\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [20], "2": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85]}}, {"7": "guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java", "added": {}, "removed": {"1": ["  @Test\n", "  public void degree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertEquals(1, network.degree(N1));\n", "    addEdge(E12, N1, N2);\n", "    assertEquals(2, network.degree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertEquals(1, network.inDegree(N1));\n", "    addEdge(E41, N4, N1);\n", "    assertEquals(2, network.inDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertEquals(1, network.outDegree(N1));\n", "    addEdge(E12, N1, N2);\n", "    assertEquals(2, network.outDegree(N1));\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139]}}, {"8": "guava-tests/test/com/google/common/graph/ConfigurableUndirectedGraphTest.java", "added": {}, "removed": {"1": ["import static org.junit.Assert.assertEquals;\n"], "2": ["  @Test\n", "  public void degree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertEquals(1, graph.degree(N1));\n", "    addEdge(N1, N2);\n", "    assertEquals(2, graph.degree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertEquals(1, graph.inDegree(N1));\n", "    addEdge(N1, N2);\n", "    assertEquals(2, graph.inDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_selfLoop() {\n", "    addEdge(N1, N1);\n", "    assertEquals(1, graph.outDegree(N1));\n", "    addEdge(N2, N1);\n", "    assertEquals(2, graph.outDegree(N1));\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [20], "2": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85]}}, {"9": "guava-tests/test/com/google/common/graph/ConfigurableUndirectedNetworkTest.java", "added": {}, "removed": {"1": ["import static org.junit.Assert.assertEquals;\n"], "2": ["  @Test\n", "  public void degree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertEquals(1, network.degree(N1));\n", "    addEdge(E12, N1, N2);\n", "    assertEquals(2, network.degree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void inDegree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertEquals(1, network.inDegree(N1));\n", "    addEdge(E12, N1, N2);\n", "    assertEquals(2, network.inDegree(N1));\n", "  }\n", "\n", "  @Test\n", "  public void outDegree_selfLoop() {\n", "    addEdge(E11, N1, N1);\n", "    assertEquals(1, network.outDegree(N1));\n", "    addEdge(E12, N2, N1);\n", "    assertEquals(2, network.outDegree(N1));\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [20], "2": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140]}}, {"10": "guava/src/com/google/common/graph/AbstractGraph.java", "added": {}, "removed": {"1": ["  @Override\n", "  public int degree(Object node) {\n", "    return adjacentNodes(node).size();\n", "  }\n", "\n", "  @Override\n", "  public int inDegree(Object node) {\n", "    return predecessors(node).size();\n", "  }\n", "\n", "  @Override\n", "  public int outDegree(Object node) {\n", "    return successors(node).size();\n", "  }\n", "\n"]}, "added_lines": {}, "removed_lines": {"1": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54]}}, {"11": "guava/src/com/google/common/graph/AbstractNetwork.java", "added": {"1": [" * {@link #equals(Object)} and {@link #hashCode()} results across different network implementations.\n"], "3": ["   * Returns a string representation of this network.\n"]}, "removed": {"1": [" * {@link #equals(Object)} and {@link #hashCode()} results across different graph implementations.\n"], "2": ["  @Override\n", "  public int degree(Object node) {\n", "    return incidentEdges(node).size();\n", "  }\n", "\n", "  @Override\n", "  public int inDegree(Object node) {\n", "    return inEdges(node).size();\n", "  }\n", "\n", "  @Override\n", "  public int outDegree(Object node) {\n", "    return outEdges(node).size();\n", "  }\n", "\n"], "3": ["   * Returns a string representation of this graph.\n"]}, "added_lines": {"1": [30], "3": [119]}, "removed_lines": {"1": [30], "2": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "3": [134]}}, {"12": "guava/src/com/google/common/graph/Graph.java", "added": {"1": ["  // Graph identity\n"]}, "removed": {"1": ["  // Element-level queries\n", "  /**\n", "   * Returns the number of edges incident in this graph to {@code node}.  If this node has more than\n", "   * {@code Integer.MAX_VALUE} incident edges in this graph, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * <p>Note that self-loops only count once towards a node's degree.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int degree(Object node);\n", "\n", "  /**\n", "   * Returns the number of incoming edges in this graph of {@code node}.  If this node has more than\n", "   * {@code Integer.MAX_VALUE} incoming edges in this graph, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int inDegree(Object node);\n", "\n", "  /**\n", "   * Returns the number of outgoing edges in this graph of {@code node}.  If this node has more than\n", "   * {@code Integer.MAX_VALUE} outgoing edges in this graph, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int outDegree(Object node);\n", "\n"]}, "added_lines": {"1": [231]}, "removed_lines": {"1": [231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259]}}, {"13": "guava/src/com/google/common/graph/ImmutableNetwork.java", "added": {"2": ["      int selfLoopCount = graph.edgesConnecting(node, node).size();\n"]}, "removed": {"1": ["import com.google.common.math.IntMath;\n"], "2": ["      int selfLoopCount = graph.allowsSelfLoops()\n", "          // Self-loops count once as incident edges, but twice as (incoming+outgoing) edges.\n", "          ? IntMath.saturatedAdd(inEdgeMap.size() - graph.degree(node), outEdgeMap.size()) : 0;\n"]}, "added_lines": {"2": [90]}, "removed_lines": {"1": [25], "2": [91, 92, 93]}}, {"14": "guava/src/com/google/common/graph/Network.java", "added": {"1": ["  // Network identity\n"]}, "removed": {"1": ["  // Element-level queries\n", "  /**\n", "   * Returns the number of edges incident in this graph to {@code node}.  If this node has more than\n", "   * {@code Integer.MAX_VALUE} incident edges in this graph, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * <p>Note that self-loops only count once towards a node's degree.\n", "   *\n", "   * <p>Equivalent to {@code incidentEdges(node).size()}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int degree(Object node);\n", "\n", "  /**\n", "   * Returns the number of incoming edges in this graph of {@code node}.  If this node has more than\n", "   * {@code Integer.MAX_VALUE} incoming edges in this graph, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * <p>Equivalent to {@code inEdges(node).size()}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int inDegree(Object node);\n", "\n", "  /**\n", "   * Returns the number of outgoing edges in this graph of {@code node}.  If this node has more than\n", "   * {@code Integer.MAX_VALUE} outgoing edges in this graph, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * <p>Equivalent to {@code outEdges(node).size()}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  int outDegree(Object node);\n", "\n"]}, "added_lines": {"1": [352]}, "removed_lines": {"1": [352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386]}}]}
