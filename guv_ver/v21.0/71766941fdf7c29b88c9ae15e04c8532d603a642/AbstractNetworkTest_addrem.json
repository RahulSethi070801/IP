{
    "addition": {},
    "removed": {
        "20": "import static org.junit.Assert.assertEquals;\n",
        "200": "      assertThat(network.incidentEdges(node)).hasSize(network.degree(node));\n",
        "201": "      assertThat(network.degree(node)).isAtLeast(network.adjacentNodes(node).size());\n",
        "202": "      assertThat(network.inEdges(node)).hasSize(network.inDegree(node));\n",
        "203": "      assertThat(network.inDegree(node)).isAtLeast(network.predecessors(node).size());\n",
        "204": "      assertThat(network.outEdges(node)).hasSize(network.outDegree(node));\n",
        "205": "      assertThat(network.outDegree(node)).isAtLeast(network.successors(node).size());\n",
        "206": "\n",
        "547": "  @Test\n",
        "548": "  public void degree_oneEdge() {\n",
        "549": "    addEdge(E12, N1, N2);\n",
        "550": "    assertEquals(1, network.degree(N1));\n",
        "551": "    assertEquals(1, network.degree(N2));\n",
        "552": "  }\n",
        "553": "\n",
        "554": "  @Test\n",
        "555": "  public void degree_isolatedNode() {\n",
        "556": "    addNode(N1);\n",
        "557": "    assertEquals(0, network.degree(N1));\n",
        "558": "  }\n",
        "559": "\n",
        "560": "  @Test\n",
        "561": "  public void degree_nodeNotInGraph() {\n",
        "562": "    try {\n",
        "563": "      network.degree(NODE_NOT_IN_GRAPH);\n",
        "564": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "565": "    } catch (IllegalArgumentException e) {\n",
        "566": "      assertNodeNotInGraphErrorMessage(e);\n",
        "567": "    }\n",
        "568": "  }\n",
        "569": "\n",
        "570": "  @Test\n",
        "571": "  public void inDegree_isolatedNode() {\n",
        "572": "    addNode(N1);\n",
        "573": "    assertEquals(0, network.inDegree(N1));\n",
        "574": "  }\n",
        "575": "\n",
        "576": "  @Test\n",
        "577": "  public void inDegree_nodeNotInGraph() {\n",
        "578": "    try {\n",
        "579": "      network.inDegree(NODE_NOT_IN_GRAPH);\n",
        "580": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "581": "    } catch (IllegalArgumentException e) {\n",
        "582": "      assertNodeNotInGraphErrorMessage(e);\n",
        "583": "    }\n",
        "584": "  }\n",
        "585": "\n",
        "586": "  @Test\n",
        "587": "  public void outDegree_isolatedNode() {\n",
        "588": "    addNode(N1);\n",
        "589": "    assertEquals(0, network.outDegree(N1));\n",
        "590": "  }\n",
        "591": "\n",
        "592": "  @Test\n",
        "593": "  public void outDegree_nodeNotInGraph() {\n",
        "594": "    try {\n",
        "595": "      network.outDegree(NODE_NOT_IN_GRAPH);\n",
        "596": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "597": "    } catch (IllegalArgumentException e) {\n",
        "598": "      assertNodeNotInGraphErrorMessage(e);\n",
        "599": "    }\n",
        "600": "  }\n",
        "601": "\n"
    }
}