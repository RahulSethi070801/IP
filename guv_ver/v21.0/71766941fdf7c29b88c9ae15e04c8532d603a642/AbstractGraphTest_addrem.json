{
    "addition": {},
    "removed": {
        "20": "import static org.junit.Assert.assertEquals;\n",
        "139": "      assertThat(graph.adjacentNodes(node)).hasSize(graph.degree(node));\n",
        "140": "      assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node));\n",
        "141": "      assertThat(graph.successors(node)).hasSize(graph.outDegree(node));\n",
        "142": "\n",
        "252": "  @Test\n",
        "253": "  public void degree_oneEdge() {\n",
        "254": "    addEdge(N1, N2);\n",
        "255": "    assertEquals(1, graph.degree(N1));\n",
        "256": "    assertEquals(1, graph.degree(N2));\n",
        "257": "  }\n",
        "258": "\n",
        "259": "  @Test\n",
        "260": "  public void degree_isolatedNode() {\n",
        "261": "    addNode(N1);\n",
        "262": "    assertEquals(0, graph.degree(N1));\n",
        "263": "  }\n",
        "264": "\n",
        "265": "  @Test\n",
        "266": "  public void degree_nodeNotInGraph() {\n",
        "267": "    try {\n",
        "268": "      graph.degree(NODE_NOT_IN_GRAPH);\n",
        "269": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "270": "    } catch (IllegalArgumentException e) {\n",
        "271": "      assertNodeNotInGraphErrorMessage(e);\n",
        "272": "    }\n",
        "273": "  }\n",
        "274": "\n",
        "275": "  @Test\n",
        "276": "  public void inDegree_isolatedNode() {\n",
        "277": "    addNode(N1);\n",
        "278": "    assertEquals(0, graph.inDegree(N1));\n",
        "279": "  }\n",
        "280": "\n",
        "281": "  @Test\n",
        "282": "  public void inDegree_nodeNotInGraph() {\n",
        "283": "    try {\n",
        "284": "      graph.inDegree(NODE_NOT_IN_GRAPH);\n",
        "285": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "286": "    } catch (IllegalArgumentException e) {\n",
        "287": "      assertNodeNotInGraphErrorMessage(e);\n",
        "288": "    }\n",
        "289": "  }\n",
        "290": "\n",
        "291": "  @Test\n",
        "292": "  public void outDegree_isolatedNode() {\n",
        "293": "    addNode(N1);\n",
        "294": "    assertEquals(0, graph.outDegree(N1));\n",
        "295": "  }\n",
        "296": "\n",
        "297": "  @Test\n",
        "298": "  public void outDegree_nodeNotInGraph() {\n",
        "299": "    try {\n",
        "300": "      graph.outDegree(NODE_NOT_IN_GRAPH);\n",
        "301": "      fail(ERROR_NODE_NOT_IN_GRAPH);\n",
        "302": "    } catch (IllegalArgumentException e) {\n",
        "303": "      assertNodeNotInGraphErrorMessage(e);\n",
        "304": "    }\n",
        "305": "  }\n",
        "306": "\n"
    }
}