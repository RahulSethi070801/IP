[{"func":{"oldfunccode":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_oldfunccode_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_1.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_oldfuncoldJdoc_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[],"dellines":[310,311],"addcode":[],"delcode":["  @Override\n","  Set<N> predecessors(Object node);\n"],"methodSig":" Set<N> predecessors(Object node)"},"doc":{"oldfunccode":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_olddocfunccode_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_1.txt","newfunccode":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_newdocfunccode_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_1.txt","newdoc":"","newJdoc":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_newdocnewJdoc_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_1.txt","olddoc":"","oldJdoc":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_olddocJdoc_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[320],"dellines":[352,343,344,345,348,349,237,350,351],"addcode":["   * {@inheritDoc}\n"],"delcode":["   * Returns the number of edges {@linkplain #incidentEdges(Object) incident} in this graph\n","   * to {@code node}.  If this node has more than {@code Integer.MAX_VALUE} incident edges\n","   * in this graph, returns {@code Integer.MAX_VALUE}.\n","   *\n","   * <p>Note that self-loops only count once towards a node's degree.\n","   * This is consistent with the definition of {@link #incidentEdges(Object)}.\n","   *\n","   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n","   * This is consistent with the definition of {@link #incidentEdges(Object)}.\n"],"methodSig":" int degree(Object node)"},"id":1,"flag":1,"commit":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4"},{"func":{"oldfunccode":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_oldfunccode_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_2.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_oldfuncoldJdoc_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[],"dellines":[310,311],"addcode":[],"delcode":["  @Override\n","  Set<N> predecessors(Object node);\n"],"methodSig":" Set<N> predecessors(Object node)"},"doc":{"oldfunccode":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_olddocfunccode_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_2.txt","newfunccode":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_newdocfunccode_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_2.txt","newdoc":"","newJdoc":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_newdocnewJdoc_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_2.txt","olddoc":"","oldJdoc":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Codes_neg/Match_olddocJdoc_c550125af4a0da6d2ba5a6dc6d44fa400824d9d4_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/c550125af4a0da6d2ba5a6dc6d44fa400824d9d4/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[216],"dellines":[181,182,183,216,184,185,186,187],"addcode":["   * {@inheritDoc}\n"],"delcode":["   * Returns true if each edge in this graph is directed.\n","   *\n","   * <p>A directed edge is an {@linkplain #outEdges(Object) outgoing edge} of its\n","   * {@linkplain #source(Object) source}, and an {@linkplain #inEdges(Object) incoming edge} of its\n","   * {@linkplain #target(Object) target}. An undirected edge connects its\n","   * {@linkplain #incidentNodes(Object) incident nodes} to each other, and is both an\n","   * {@linkplain #outEdges(Object) outgoing edge} and {@linkplain #inEdges(Object) incoming edge}\n","   * of each incident node.\n"],"methodSig":" boolean isDirected()"},"id":1,"flag":1,"commit":"c550125af4a0da6d2ba5a6dc6d44fa400824d9d4"}]