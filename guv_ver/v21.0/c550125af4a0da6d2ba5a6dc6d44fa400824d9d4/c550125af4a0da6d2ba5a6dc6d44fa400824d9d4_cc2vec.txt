{"id": "c550125af4a0da6d2ba5a6dc6d44fa400824d9d4", "code": [{"0": "guava/src/com/google/common/graph/Graph.java", "added": {}, "removed": {"1": ["   *\n", "   * <p>A directed edge is an {@linkplain #outEdges(Object) outgoing edge} of its\n", "   * {@linkplain #source(Object) source}, and an {@linkplain #inEdges(Object) incoming edge} of its\n", "   * {@linkplain #target(Object) target}. An undirected edge connects its\n", "   * {@linkplain #incidentNodes(Object) incident nodes} to each other, and is both an\n", "   * {@linkplain #outEdges(Object) outgoing edge} and {@linkplain #inEdges(Object) incoming edge}\n", "   * of each incident node.\n"], "2": ["   * This is consistent with the definition of {@link #incidentEdges(Object)}.\n"]}, "added_lines": {}, "removed_lines": {"1": [181, 182, 183, 184, 185, 186, 187], "2": [237]}}, {"1": "guava/src/com/google/common/graph/Network.java", "added": {"1": ["   * {@inheritDoc}\n"], "3": ["   * {@inheritDoc}\n"]}, "removed": {"1": ["   * Returns true if each edge in this graph is directed.\n"], "2": ["  /**\n", "   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing\n", "   * {@code node}'s {@linkplain #inEdges(Object) incoming edges} <i>against</i> the direction\n", "   * (if any) of the edge.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  @Override\n", "  Set<N> predecessors(Object node);\n", "\n", "  /**\n", "   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing\n", "   * {@code node}'s {@linkplain #outEdges(Object) outgoing edges} in the direction (if any) of the\n", "   * edge.\n", "   *\n", "   * <p>This is <i>not</i> the same as \"all nodes reachable from {@code node} by following outgoing\n", "   * edges\" (also known as {@code node}'s transitive closure).\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n", "   */\n", "  @Override\n", "  Set<N> successors(Object node);\n", "\n"], "3": ["   * Returns the number of edges {@linkplain #incidentEdges(Object) incident} in this graph\n", "   * to {@code node}.  If this node has more than {@code Integer.MAX_VALUE} incident edges\n", "   * in this graph, returns {@code Integer.MAX_VALUE}.\n", "   *\n", "   * <p>Note that self-loops only count once towards a node's degree.\n", "   * This is consistent with the definition of {@link #incidentEdges(Object)}.\n", "   *\n", "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n"]}, "added_lines": {"1": [216], "3": [320]}, "removed_lines": {"1": [216], "2": [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "3": [343, 344, 345, 348, 349, 350, 351, 352]}}]}
