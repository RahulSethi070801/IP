{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.collect.Iterators;\n",
        "20": "\n",
        "21": "import java.util.AbstractSet;\n",
        "22": "import java.util.Iterator;\n",
        "23": "import java.util.Set;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * An unmodifiable view of a set which may be backed by other sets; this view\n",
        "27": " * will change as the backing sets do.\n",
        "28": " */\n",
        "29": "abstract class SetView<E> extends AbstractSet<E> {\n",
        "30": "\n",
        "31": "  SetView() {}\n",
        "32": "\n",
        "33": "  @Override\n",
        "34": "  public int size() {\n",
        "35": "    return elements().size();\n",
        "36": "  }\n",
        "37": "\n",
        "38": "  @Override\n",
        "39": "  public boolean isEmpty() {\n",
        "40": "    return elements().isEmpty();\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  @Override\n",
        "44": "  public Iterator<E> iterator() {\n",
        "45": "    return Iterators.unmodifiableIterator(elements().iterator());\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  @Override\n",
        "49": "  public boolean contains(Object object) {\n",
        "50": "    return elements().contains(object);\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  abstract Set<E> elements();\n",
        "54": "}\n"
    }
}