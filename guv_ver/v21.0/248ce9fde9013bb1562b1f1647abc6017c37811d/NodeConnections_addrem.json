{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import java.util.Set;\n",
        "20": "\n",
        "21": "/**\n",
        "22": " * An interface for representing an origin node's adjacent nodes and incident edges in a graph.\n",
        "23": " *\n",
        "24": " * @author James Sexton\n",
        "25": " * @param <N> Node parameter type\n",
        "26": " * @param <E> Edge parameter type\n",
        "27": " */\n",
        "28": "interface NodeConnections<N, E> {\n",
        "29": "\n",
        "30": "  Set<N> adjacentNodes();\n",
        "31": "\n",
        "32": "  Set<N> predecessors();\n",
        "33": "\n",
        "34": "  Set<N> successors();\n",
        "35": "\n",
        "36": "  Set<E> incidentEdges();\n",
        "37": "\n",
        "38": "  Set<E> inEdges();\n",
        "39": "\n",
        "40": "  Set<E> outEdges();\n",
        "41": "\n",
        "42": "  /**\n",
        "43": "   * Remove {@code edge} from the sets of in edges. If this is known to be the last remaining edge\n",
        "44": "   * between two (formally) connected nodes, {@link #removePredecessor} must also be called.\n",
        "45": "   */\n",
        "46": "  void removeInEdge(Object edge);\n",
        "47": "\n",
        "48": "  /**\n",
        "49": "   * Remove {@code edge} from the sets of out edges. If this is known to be the last remaining edge\n",
        "50": "   * between two (formally) connected nodes, {@link #removeSuccessor} must also be called.\n",
        "51": "   */\n",
        "52": "  void removeOutEdge(Object edge);\n",
        "53": "\n",
        "54": "  /**\n",
        "55": "   * Remove {@code node} from the set of predecessors.\n",
        "56": "   */\n",
        "57": "  void removePredecessor(Object node);\n",
        "58": "\n",
        "59": "  /**\n",
        "60": "   * Remove {@code node} from the set of successors.\n",
        "61": "   */\n",
        "62": "  void removeSuccessor(Object node);\n",
        "63": "\n",
        "64": "  /**\n",
        "65": "   * Add {@code node} as a predecessor to the origin node, connected with {@code edge}.\n",
        "66": "   * In the case of an undirected graph, it also becomes a successor.\n",
        "67": "   */\n",
        "68": "  void addPredecessor(N node, E edge);\n",
        "69": "\n",
        "70": "  /**\n",
        "71": "   * Add {@code node} as a successor to the origin node, connected with {@code edge}.\n",
        "72": "   * In the case of an undirected graph, it also becomes a predecessor.\n",
        "73": "   */\n",
        "74": "  void addSuccessor(N node, E edge);\n",
        "75": "}\n"
    },
    "removed": {}
}