{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.base.MoreObjects;\n",
        "22": "import com.google.common.base.Objects;\n",
        "23": "import com.google.common.collect.ImmutableSet;\n",
        "24": "import com.google.common.collect.Sets;\n",
        "25": "\n",
        "26": "import java.util.Collections;\n",
        "27": "import java.util.Set;\n",
        "28": "\n",
        "29": "import javax.annotation.Nullable;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * A class representing an origin node's adjacent nodes and incident edges in a directed graph.\n",
        "33": " *\n",
        "34": " * @author James Sexton\n",
        "35": " * @param <N> Node parameter type\n",
        "36": " * @param <E> Edge parameter type\n",
        "37": " */\n",
        "38": "final class DirectedNodeConnections<N, E> implements NodeConnections<N, E> {\n",
        "39": "  private final Set<N> predecessors;\n",
        "40": "  private final Set<N> successors;\n",
        "41": "  private final Set<E> inEdges;\n",
        "42": "  private final Set<E> outEdges;\n",
        "43": "\n",
        "44": "  private DirectedNodeConnections(Set<N> predecessors, Set<N> successors,\n",
        "45": "      Set<E> inEdges, Set<E> outEdges) {\n",
        "46": "    this.predecessors = checkNotNull(predecessors, \"predecessors\");\n",
        "47": "    this.successors = checkNotNull(successors, \"successors\");\n",
        "48": "    this.inEdges = checkNotNull(inEdges, \"inEdges\");\n",
        "49": "    this.outEdges = checkNotNull(outEdges, \"outEdges\");\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  static <N, E> DirectedNodeConnections<N, E> of() {\n",
        "53": "    // TODO(user): Enable users to specify the expected number of neighbors of a new node.\n",
        "54": "    return new DirectedNodeConnections<N, E>(\n",
        "55": "        Sets.<N>newLinkedHashSet(), Sets.<N>newLinkedHashSet(),\n",
        "56": "        Sets.<E>newLinkedHashSet(), Sets.<E>newLinkedHashSet());\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  static <N, E> DirectedNodeConnections<N, E> ofImmutable(Set<N> predecessors, Set<N> successors,\n",
        "60": "      Set<E> inEdges, Set<E> outEdges) {\n",
        "61": "    return new DirectedNodeConnections<N, E>(\n",
        "62": "        ImmutableSet.copyOf(predecessors), ImmutableSet.copyOf(successors),\n",
        "63": "        ImmutableSet.copyOf(inEdges), ImmutableSet.copyOf(outEdges));\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  @Override\n",
        "67": "  public Set<N> adjacentNodes() {\n",
        "68": "    return Sets.union(predecessors(), successors());\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  @Override\n",
        "72": "  public Set<N> predecessors() {\n",
        "73": "    return Collections.unmodifiableSet(predecessors);\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  @Override\n",
        "77": "  public Set<N> successors() {\n",
        "78": "    return Collections.unmodifiableSet(successors);\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  @Override\n",
        "82": "  public Set<E> incidentEdges() {\n",
        "83": "    return Sets.union(inEdges(), outEdges());\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  @Override\n",
        "87": "  public Set<E> inEdges() {\n",
        "88": "    return Collections.unmodifiableSet(inEdges);\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  @Override\n",
        "92": "  public Set<E> outEdges() {\n",
        "93": "    return Collections.unmodifiableSet(outEdges);\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  @Override\n",
        "97": "  public void removeInEdge(Object edge) {\n",
        "98": "    checkNotNull(edge, \"edge\");\n",
        "99": "    inEdges.remove(edge);\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  @Override\n",
        "103": "  public void removeOutEdge(Object edge) {\n",
        "104": "    checkNotNull(edge, \"edge\");\n",
        "105": "    outEdges.remove(edge);\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  @Override\n",
        "109": "  public void removePredecessor(Object node) {\n",
        "110": "    checkNotNull(node, \"node\");\n",
        "111": "    predecessors.remove(node);\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  @Override\n",
        "115": "  public void removeSuccessor(Object node) {\n",
        "116": "    checkNotNull(node, \"node\");\n",
        "117": "    successors.remove(node);\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  @Override\n",
        "121": "  public void addPredecessor(N node, E edge) {\n",
        "122": "    checkNotNull(node, \"node\");\n",
        "123": "    checkNotNull(edge, \"edge\");\n",
        "124": "    predecessors.add(node);\n",
        "125": "    inEdges.add(edge);\n",
        "126": "  }\n",
        "127": "\n",
        "128": "  @Override\n",
        "129": "  public void addSuccessor(N node, E edge) {\n",
        "130": "    checkNotNull(node, \"node\");\n",
        "131": "    checkNotNull(edge, \"edge\");\n",
        "132": "    successors.add(node);\n",
        "133": "    outEdges.add(edge);\n",
        "134": "  }\n",
        "135": "\n",
        "136": "  // For now, hashCode() and equals() are unused by any graph implementation.\n",
        "137": "  // If needed, there may be room for optimization (e.g. only considering the edges).\n",
        "138": "  @Override\n",
        "139": "  public int hashCode() {\n",
        "140": "    return Objects.hashCode(predecessors, successors, inEdges, outEdges);\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  @Override\n",
        "144": "  public boolean equals(@Nullable Object object) {\n",
        "145": "    if (object instanceof DirectedNodeConnections) {\n",
        "146": "      DirectedNodeConnections<?, ?> that = (DirectedNodeConnections<?, ?>) object;\n",
        "147": "      return this.predecessors.equals(that.predecessors)\n",
        "148": "          && this.successors.equals(that.successors)\n",
        "149": "          && this.inEdges.equals(that.inEdges)\n",
        "150": "          && this.outEdges.equals(that.outEdges);\n",
        "151": "    }\n",
        "152": "    return false;\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  @Override\n",
        "156": "  public String toString() {\n",
        "157": "    return MoreObjects.toStringHelper(this)\n",
        "158": "        .add(\"predecessors\", predecessors)\n",
        "159": "        .add(\"successors\", successors)\n",
        "160": "        .add(\"inEdges\", inEdges)\n",
        "161": "        .add(\"outEdges\", outEdges)\n",
        "162": "        .toString();\n",
        "163": "  }\n",
        "164": "}\n"
    },
    "removed": {}
}