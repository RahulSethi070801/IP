{
    "addition": {
        "155": "   * Creates a mutable copy of {@code graph}, using the same nodes and edges.\n",
        "158": "  public static <N> MutableGraph<N> copyOf(Graph<N> graph) {\n",
        "163": "    MutableGraph<N> copy = GraphBuilder.from(graph)\n",
        "164": "        .expectedNodeCount(graph.nodes().size())\n",
        "165": "        .build();\n",
        "167": "    for (N node : graph.nodes()) {\n",
        "169": "      for (N successor : graph.successors(node)) {\n",
        "183": "    MutableNetwork<N, E> copy = NetworkBuilder.from(graph)\n",
        "184": "        .expectedNodeCount(graph.nodes().size())\n",
        "185": "        .expectedEdgeCount(graph.edges().size())\n",
        "186": "        .build();\n",
        "188": "    for (N node : graph.nodes()) {\n",
        "189": "      copy.addNode(node);\n",
        "191": "    for (E edge : graph.edges()) {\n",
        "192": "      addEdge(copy, edge, graph.incidentNodes(edge));\n",
        "194": "\n",
        "195": "    return copy;\n",
        "205": "   * @see Graph#equals(Object)\n"
    },
    "removed": {
        "28": "import com.google.common.base.Predicates;\n",
        "156": "   * Creates a mutable copy of {@code graph}, using the same nodes.\n",
        "158": "  public static <N> MutableGraph<N> copyOf(Graph<N> graph) {\n",
        "159": "    return copyOfInternal(\n",
        "160": "        graph,\n",
        "161": "        GraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()),\n",
        "162": "        Predicates.alwaysTrue());\n",
        "163": "  }\n",
        "164": "\n",
        "166": "  private static <N> MutableGraph<N> copyOfInternal(\n",
        "167": "      Graph<N> graph, GraphBuilder<N> copyBuilder, Predicate<? super N> nodePredicate) {\n",
        "169": "    checkNotNull(nodePredicate, \"nodePredicate\");\n",
        "173": "    MutableGraph<N> copy = copyBuilder.build();\n",
        "175": "    for (N node : Sets.filter(graph.nodes(), nodePredicate)) {\n",
        "177": "      for (N successor : Sets.filter(graph.successors(node), nodePredicate)) {\n",
        "186": "  /**\n",
        "187": "   * Copies all nodes from {@code src} into {@code dest}.\n",
        "188": "   */\n",
        "189": "  public static <N> void copyNodes(Graph<N> src, MutableGraph<N> dest) {\n",
        "190": "    copyNodesInternal(src, dest, Predicates.alwaysTrue());\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  private static <N, E> void copyNodesInternal(\n",
        "194": "      Graph<N> src, MutableGraph<N> dest, Predicate<? super N> nodePredicate) {\n",
        "195": "    checkNotNull(src, \"src\");\n",
        "196": "    checkNotNull(dest, \"dest\");\n",
        "197": "    checkNotNull(nodePredicate, \"nodePredicate\");\n",
        "198": "    for (N node : Sets.filter(src.nodes(), nodePredicate)) {\n",
        "199": "      dest.addNode(node);\n",
        "200": "    }\n",
        "201": "  }\n",
        "202": "\n",
        "207": "    return copyOfInternal(\n",
        "208": "        graph,\n",
        "209": "        NetworkBuilder.from(graph)\n",
        "210": "            .expectedNodeCount(graph.nodes().size())\n",
        "211": "            .expectedEdgeCount(graph.edges().size()),\n",
        "212": "        Predicates.alwaysTrue(),\n",
        "213": "        Predicates.alwaysTrue());\n",
        "214": "  }\n",
        "215": "\n",
        "216": "  private static <N, E> MutableNetwork<N, E> copyOfInternal(\n",
        "217": "      Network<N, E> graph,\n",
        "218": "      NetworkBuilder<N, E> copyBuilder,\n",
        "219": "      Predicate<? super N> nodePredicate,\n",
        "220": "      Predicate<? super E> edgePredicate) {\n",
        "222": "    checkNotNull(nodePredicate, \"nodePredicate\");\n",
        "223": "    checkNotNull(edgePredicate, \"edgePredicate\");\n",
        "224": "    MutableNetwork<N, E> copy = copyBuilder.build();\n",
        "225": "\n",
        "226": "    copyNodesInternal(graph, copy, nodePredicate);\n",
        "227": "    copyEdgesInternal(graph, copy, edgePredicate);\n",
        "229": "    return copy;\n",
        "230": "  }\n",
        "231": "\n",
        "232": "  /**\n",
        "233": "   * Copies all nodes from {@code src} into {@code dest}.\n",
        "234": "   */\n",
        "235": "  public static <N> void copyNodes(Graph<N> src, MutableNetwork<N, ?> dest) {\n",
        "236": "    copyNodesInternal(src, dest, Predicates.alwaysTrue());\n",
        "237": "  }\n",
        "238": "\n",
        "239": "  private static <N, E> void copyNodesInternal(\n",
        "240": "      Graph<N> src, MutableNetwork<N, ?> dest, Predicate<? super N> nodePredicate) {\n",
        "241": "    checkNotNull(src, \"src\");\n",
        "242": "    checkNotNull(dest, \"dest\");\n",
        "243": "    checkNotNull(nodePredicate, \"nodePredicate\");\n",
        "244": "    for (N node : Sets.filter(src.nodes(), nodePredicate)) {\n",
        "245": "      dest.addNode(node);\n",
        "247": "  }\n",
        "248": "\n",
        "249": "  /**\n",
        "250": "   * Copies edges from {@code src} into {@code dest}.\n",
        "251": "   * <p>\n",
        "252": "   * This method DOES NOT copy over edges if their incident nodes are not already in {@code dest}.\n",
        "253": "   */\n",
        "254": "  public static <N, E> void copyEdges(Network<N, E> src, MutableNetwork<N, E> dest) {\n",
        "255": "    copyEdgesInternal(src, dest, Predicates.alwaysTrue());\n",
        "256": "  }\n",
        "257": "\n",
        "258": "  private static <N, E> void copyEdgesInternal(\n",
        "259": "      Network<N, E> src, MutableNetwork<N, E> dest, Predicate<? super E> edgePredicate) {\n",
        "260": "    checkNotNull(src, \"src\");\n",
        "261": "    checkNotNull(dest, \"dest\");\n",
        "262": "    checkNotNull(edgePredicate, \"edgePredicate\");\n",
        "263": "    for (E edge : Sets.filter(src.edges(), edgePredicate)) {\n",
        "264": "      Endpoints<N> endpoints = src.incidentNodes(edge);\n",
        "265": "      if (dest.nodes().containsAll(endpoints)) {\n",
        "266": "        addEdge(dest, edge, endpoints);\n",
        "267": "      }\n",
        "278": "   * @see Network#equals(Object)\n"
    }
}