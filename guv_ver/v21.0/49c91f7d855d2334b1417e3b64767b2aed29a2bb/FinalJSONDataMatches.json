[{"func":{"oldfunccode":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_oldfunccode_49c91f7d855d2334b1417e3b64767b2aed29a2bb_1.txt","newfunccode":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_newfunccode_49c91f7d855d2334b1417e3b64767b2aed29a2bb_1.txt","newdoc":" TODO(b/28087289): we can remove this restriction when Graph supports parallel edges\n TODO(b/28087289): Ensure that multiplicity is preserved if parallel edges are supported.\n","newJdoc":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_newfuncnewJdoc_49c91f7d855d2334b1417e3b64767b2aed29a2bb_1.txt","olddoc":"","oldJdoc":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_oldfuncoldJdoc_49c91f7d855d2334b1417e3b64767b2aed29a2bb_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/49c91f7d855d2334b1417e3b64767b2aed29a2bb/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[163,164,165,167,169,158],"dellines":[160,161,162,163,158,159],"addcode":["  public static <N> MutableGraph<N> copyOf(Graph<N> graph) {\n","    MutableGraph<N> copy = GraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n","    for (N node : graph.nodes()) {\n","      for (N successor : graph.successors(node)) {\n"],"delcode":["  public static <N> MutableGraph<N> copyOf(Graph<N> graph) {\n","    return copyOfInternal(\n","        graph,\n","        GraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()),\n","        Predicates.alwaysTrue());\n","  }\n"],"methodSig":"public static MutableGraph<N> copyOf(Graph<N> graph)"},"doc":{"oldfunccode":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_olddocfunccode_49c91f7d855d2334b1417e3b64767b2aed29a2bb_1.txt","newfunccode":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_newdocfunccode_49c91f7d855d2334b1417e3b64767b2aed29a2bb_1.txt","newdoc":" If both graphs are Network instances, use equal(Network, Network) instead\n Otherwise, if either graph is a Network (but not both), they can't be equal.\n","newJdoc":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_newdocnewJdoc_49c91f7d855d2334b1417e3b64767b2aed29a2bb_1.txt","olddoc":" If both graphs are Network instances, use equal(Network, Network) instead\n Otherwise, if either graph is a Network (but not both), they can't be equal.\n","oldJdoc":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_olddocJdoc_49c91f7d855d2334b1417e3b64767b2aed29a2bb_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/49c91f7d855d2334b1417e3b64767b2aed29a2bb/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[205],"dellines":[278],"addcode":["   * @see Graph#equals(Object)\n"],"delcode":["   * @see Network#equals(Object)\n"],"methodSig":"public static boolean equal(@Nullable Graph<?> graph1, @Nullable Graph<?> graph2)"},"id":3,"flag":1,"commit":"49c91f7d855d2334b1417e3b64767b2aed29a2bb"},{"func":{"oldfunccode":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_oldfunccode_49c91f7d855d2334b1417e3b64767b2aed29a2bb_2.txt","newfunccode":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_newfunccode_49c91f7d855d2334b1417e3b64767b2aed29a2bb_2.txt","newdoc":"","newJdoc":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_newfuncnewJdoc_49c91f7d855d2334b1417e3b64767b2aed29a2bb_2.txt","olddoc":"","oldJdoc":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_oldfuncoldJdoc_49c91f7d855d2334b1417e3b64767b2aed29a2bb_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/49c91f7d855d2334b1417e3b64767b2aed29a2bb/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[192,194,195,183,184,185,186,188,189,191],"dellines":[208,209,210,211,212,213,214,207],"addcode":["    MutableNetwork<N, E> copy = NetworkBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .expectedEdgeCount(graph.edges().size())\n","        .build();\n","    for (N node : graph.nodes()) {\n","      copy.addNode(node);\n","    for (E edge : graph.edges()) {\n","      addEdge(copy, edge, graph.incidentNodes(edge));\n","\n","    return copy;\n"],"delcode":["    return copyOfInternal(\n","        graph,\n","        NetworkBuilder.from(graph)\n","            .expectedNodeCount(graph.nodes().size())\n","            .expectedEdgeCount(graph.edges().size()),\n","        Predicates.alwaysTrue(),\n","        Predicates.alwaysTrue());\n","  }\n"],"methodSig":"public static MutableNetwork<N, E> copyOf(Network<N, E> graph)"},"doc":{"oldfunccode":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_olddocfunccode_49c91f7d855d2334b1417e3b64767b2aed29a2bb_2.txt","newfunccode":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_newdocfunccode_49c91f7d855d2334b1417e3b64767b2aed29a2bb_2.txt","newdoc":" If both graphs are Network instances, use equal(Network, Network) instead\n Otherwise, if either graph is a Network (but not both), they can't be equal.\n If both graphs are Network instances, use equal(Network, Network) instead\n Otherwise, if either graph is a Network (but not both), they can't be equal.\n","newJdoc":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_newdocnewJdoc_49c91f7d855d2334b1417e3b64767b2aed29a2bb_2.txt","olddoc":" If both graphs are Network instances, use equal(Network, Network) instead\n Otherwise, if either graph is a Network (but not both), they can't be equal.\n If both graphs are Network instances, use equal(Network, Network) instead\n Otherwise, if either graph is a Network (but not both), they can't be equal.\n","oldJdoc":"49c91f7d855d2334b1417e3b64767b2aed29a2bb/Codes/Match_olddocJdoc_49c91f7d855d2334b1417e3b64767b2aed29a2bb_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/49c91f7d855d2334b1417e3b64767b2aed29a2bb/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[205],"dellines":[278],"addcode":["   * @see Graph#equals(Object)\n"],"delcode":["   * @see Network#equals(Object)\n"],"methodSig":"public static boolean equal(@Nullable Graph<?> graph1, @Nullable Graph<?> graph2)"},"id":3,"flag":1,"commit":"49c91f7d855d2334b1417e3b64767b2aed29a2bb"}]