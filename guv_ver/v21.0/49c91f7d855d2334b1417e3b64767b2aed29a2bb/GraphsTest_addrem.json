{
    "addition": {},
    "removed": {
        "21": "import static com.google.common.graph.Graphs.copyEdges;\n",
        "22": "import static com.google.common.graph.Graphs.copyNodes;\n",
        "332": "  @Test\n",
        "333": "  public void copyNodes_directedGraph() {\n",
        "334": "    MutableGraph<Integer> directedGraph = buildDirectedTestGraph();\n",
        "335": "    directedGraph.addNode(N3);\n",
        "336": "\n",
        "337": "    MutableGraph<Integer> actualGraph = GraphBuilder.directed().build();\n",
        "338": "    // prepopulate actualGraph to make sure that existing elements don't interfere with the merging\n",
        "339": "    actualGraph.addNode(N4);\n",
        "340": "    actualGraph.addNode(N2);\n",
        "341": "\n",
        "342": "    copyNodes(directedGraph, actualGraph);\n",
        "343": "\n",
        "344": "    MutableGraph<Integer> expectedGraph = GraphBuilder.directed().build();\n",
        "345": "    expectedGraph.addNode(N1);\n",
        "346": "    expectedGraph.addNode(N2);\n",
        "347": "    expectedGraph.addNode(N3);\n",
        "348": "    expectedGraph.addNode(N4);\n",
        "349": "\n",
        "350": "    assertThat(actualGraph).isEqualTo(expectedGraph);\n",
        "351": "  }\n",
        "352": "\n",
        "353": "  @Test\n",
        "354": "  public void copyNodes_undirectedGraph() {\n",
        "355": "    MutableGraph<Integer> undirectedGraph = buildUndirectedTestGraph();\n",
        "356": "    undirectedGraph.addNode(N3);\n",
        "357": "\n",
        "358": "    MutableGraph<Integer> actualGraph = GraphBuilder.undirected().build();\n",
        "359": "    // prepopulate actualGraph to make sure that existing elements don't interfere with the merging\n",
        "360": "    actualGraph.addNode(N4);\n",
        "361": "    actualGraph.addNode(N2);\n",
        "362": "\n",
        "363": "    copyNodes(undirectedGraph, actualGraph);\n",
        "364": "\n",
        "365": "    MutableGraph<Integer> expectedGraph = GraphBuilder.undirected().build();\n",
        "366": "    expectedGraph.addNode(N1);\n",
        "367": "    expectedGraph.addNode(N2);\n",
        "368": "    expectedGraph.addNode(N3);\n",
        "369": "    expectedGraph.addNode(N4);\n",
        "370": "\n",
        "371": "    assertThat(actualGraph).isEqualTo(expectedGraph);\n",
        "372": "  }\n",
        "373": "\n",
        "390": "  @Test\n",
        "391": "  public void copyNodes_directedNetwork() {\n",
        "392": "    MutableNetwork<Integer, String> directedGraph = buildDirectedTestNetwork();\n",
        "393": "    directedGraph.addNode(N3);\n",
        "394": "\n",
        "395": "    MutableNetwork<Integer, String> actualGraph = NetworkBuilder.directed().build();\n",
        "396": "    // prepopulate actualGraph to make sure that existing elements don't interfere with the merging\n",
        "397": "    actualGraph.addNode(N4);\n",
        "398": "    actualGraph.addNode(N2);\n",
        "399": "\n",
        "400": "    copyNodes(directedGraph, actualGraph);\n",
        "401": "\n",
        "402": "    MutableNetwork<Integer, String> expectedGraph = NetworkBuilder.directed().build();\n",
        "403": "    expectedGraph.addNode(N1);\n",
        "404": "    expectedGraph.addNode(N2);\n",
        "405": "    expectedGraph.addNode(N3);\n",
        "406": "    expectedGraph.addNode(N4);\n",
        "407": "\n",
        "408": "    assertThat(actualGraph).isEqualTo(expectedGraph);\n",
        "409": "  }\n",
        "410": "\n",
        "411": "  @Test\n",
        "412": "  public void copyNodes_undirectedNetwork() {\n",
        "413": "    MutableNetwork<Integer, String> undirectedGraph = buildUndirectedTestNetwork();\n",
        "414": "    undirectedGraph.addNode(N3);\n",
        "415": "\n",
        "416": "    MutableNetwork<Integer, String> actualGraph = NetworkBuilder.undirected().build();\n",
        "417": "    // prepopulate actualGraph to make sure that existing elements don't interfere with the merging\n",
        "418": "    actualGraph.addNode(N4);\n",
        "419": "    actualGraph.addNode(N2);\n",
        "420": "\n",
        "421": "    copyNodes(undirectedGraph, actualGraph);\n",
        "422": "\n",
        "423": "    MutableNetwork<Integer, String> expectedGraph = NetworkBuilder.undirected().build();\n",
        "424": "    expectedGraph.addNode(N1);\n",
        "425": "    expectedGraph.addNode(N2);\n",
        "426": "    expectedGraph.addNode(N3);\n",
        "427": "    expectedGraph.addNode(N4);\n",
        "428": "\n",
        "429": "    assertThat(actualGraph).isEqualTo(expectedGraph);\n",
        "430": "  }\n",
        "431": "\n",
        "432": "  @Test\n",
        "433": "  public void copyEdges_directedNetwork() {\n",
        "434": "    Network<Integer, String> directedGraph = buildDirectedTestNetwork();\n",
        "435": "\n",
        "436": "    MutableNetwork<Integer, String> actualGraph\n",
        "437": "        = NetworkBuilder.directed().allowsParallelEdges(true).build();\n",
        "438": "    // prepopulate actualGraph to make sure that existing elements don't interfere with the merging\n",
        "439": "    actualGraph.addEdge(E11, N1, N1);\n",
        "440": "    actualGraph.addEdge(E22, N2, N2);\n",
        "441": "\n",
        "442": "    copyEdges(directedGraph, actualGraph);\n",
        "443": "\n",
        "444": "    MutableNetwork<Integer, String> expectedGraph = buildDirectedTestNetwork();\n",
        "445": "    expectedGraph.addEdge(E22, N2, N2);\n",
        "446": "\n",
        "447": "    assertThat(actualGraph).isEqualTo(expectedGraph);\n",
        "448": "  }\n",
        "449": "\n",
        "450": "  @Test\n",
        "451": "  public void copyEdges_undirectedNetwork() {\n",
        "452": "    Network<Integer, String> undirectedGraph = buildUndirectedTestNetwork();\n",
        "453": "\n",
        "454": "    MutableNetwork<Integer, String> actualGraph =\n",
        "455": "        NetworkBuilder.undirected().allowsParallelEdges(true).build();\n",
        "456": "    // prepopulate actualGraph to make sure that existing elements don't interfere with the merging\n",
        "457": "    actualGraph.addEdge(E11, N1, N1);\n",
        "458": "    actualGraph.addEdge(E22, N2, N2);\n",
        "459": "\n",
        "460": "    copyEdges(undirectedGraph, actualGraph);\n",
        "461": "\n",
        "462": "    MutableNetwork<Integer, String> expectedGraph = buildUndirectedTestNetwork();\n",
        "463": "    expectedGraph.addEdge(E22, N2, N2);\n",
        "464": "\n",
        "465": "    assertThat(actualGraph).isEqualTo(expectedGraph);\n",
        "466": "  }\n",
        "467": "\n",
        "468": "  @Test\n",
        "469": "  public void copyEdges_incidentNodesMissing() {\n",
        "470": "    MutableNetwork<Integer, String> srcGraph = NetworkBuilder.undirected().build();\n",
        "471": "    srcGraph.addEdge(E12, N1, N2);\n",
        "472": "    srcGraph.addEdge(E13, N1, N3);\n",
        "473": "\n",
        "474": "    MutableNetwork<Integer, String> destGraph = NetworkBuilder.undirected().build();\n",
        "475": "    destGraph.addNode(N1);\n",
        "476": "    destGraph.addNode(N2);\n",
        "477": "\n",
        "478": "    copyEdges(srcGraph, destGraph);\n",
        "479": "\n",
        "480": "    // E13 should not be copied over because an incident node is missing in the destination graph.\n",
        "481": "    assertThat(destGraph.edges()).containsExactly(E12);\n",
        "482": "    assertThat(destGraph.nodes()).doesNotContain(N3);\n",
        "483": "  }\n",
        "484": "\n"
    }
}