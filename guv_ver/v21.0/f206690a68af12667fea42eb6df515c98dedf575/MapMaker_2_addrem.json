{
    "addition": {},
    "removed": {
        "29": "import com.google.common.base.Ticker;\n",
        "44": "import java.util.concurrent.TimeUnit;\n",
        "109": "  private static final int DEFAULT_EXPIRATION_NANOS = 0;\n",
        "122": "  long expireAfterWriteNanos = UNSET_INT;\n",
        "123": "\n",
        "128": "  Ticker ticker;\n",
        "129": "\n",
        "317": "  /**\n",
        "318": "   * Specifies that each entry should be automatically removed from the map once a fixed duration\n",
        "319": "   * has elapsed after the entry's creation, or the most recent replacement of its value.\n",
        "320": "   *\n",
        "321": "   * <p>When {@code duration} is zero, elements can be successfully added to the map, but are\n",
        "322": "   * evicted immediately. It can be useful in testing, or to disable caching temporarily without\n",
        "323": "   * a code change.\n",
        "324": "   *\n",
        "325": "   * <p>Expired entries may be counted by {@link Map#size}, but will never be visible to read or\n",
        "326": "   * write operations. Expired entries are currently cleaned up during write operations, or during\n",
        "327": "   * occasional read operations in the absense of writes; though this behavior may change in the\n",
        "328": "   * future.\n",
        "329": "   *\n",
        "330": "   * @param duration the length of time after an entry is created that it should be automatically\n",
        "331": "   *     removed\n",
        "332": "   * @param unit the unit that {@code duration} is expressed in\n",
        "333": "   * @throws IllegalArgumentException if {@code duration} is negative\n",
        "334": "   * @throws IllegalStateException if the time to live or time to idle was already set\n",
        "335": "   * @deprecated Caching functionality in {@code MapMaker} has been moved to\n",
        "336": "   *     {@link com.google.common.cache.CacheBuilder}, with {@link #expireAfterWrite} being replaced\n",
        "337": "   *     by {@link com.google.common.cache.CacheBuilder#expireAfterWrite}. Note that\n",
        "338": "   *     {@code CacheBuilder} is simply an enhanced API for an implementation which was branched\n",
        "339": "   *     from {@code MapMaker}.\n",
        "340": "   */\n",
        "341": "  @CanIgnoreReturnValue\n",
        "342": "  @Deprecated\n",
        "343": "  @Override\n",
        "344": "  MapMaker expireAfterWrite(long duration, TimeUnit unit) {\n",
        "345": "    checkExpiration(duration, unit);\n",
        "346": "    this.expireAfterWriteNanos = unit.toNanos(duration);\n",
        "347": "    if (duration == 0) {\n",
        "348": "      this.evictImmediately = true;\n",
        "349": "    }\n",
        "350": "    useCustomMap = true;\n",
        "351": "    return this;\n",
        "352": "  }\n",
        "353": "\n",
        "354": "  private void checkExpiration(long duration, TimeUnit unit) {\n",
        "355": "    checkState(\n",
        "356": "        expireAfterWriteNanos == UNSET_INT,\n",
        "357": "        \"expireAfterWrite was already set to %s ns\",\n",
        "358": "        expireAfterWriteNanos);\n",
        "359": "    checkArgument(duration >= 0, \"duration cannot be negative: %s %s\", duration, unit);\n",
        "360": "  }\n",
        "361": "\n",
        "362": "  long getExpireAfterWriteNanos() {\n",
        "363": "    return (expireAfterWriteNanos == UNSET_INT) ? DEFAULT_EXPIRATION_NANOS : expireAfterWriteNanos;\n",
        "364": "  }\n",
        "365": "\n",
        "366": "  Ticker getTicker() {\n",
        "367": "    return MoreObjects.firstNonNull(ticker, Ticker.systemTicker());\n",
        "368": "  }\n",
        "369": "\n",
        "477": "    if (expireAfterWriteNanos != UNSET_INT) {\n",
        "478": "      s.add(\"expireAfterWrite\", expireAfterWriteNanos + \"ns\");\n",
        "479": "    }\n"
    }
}