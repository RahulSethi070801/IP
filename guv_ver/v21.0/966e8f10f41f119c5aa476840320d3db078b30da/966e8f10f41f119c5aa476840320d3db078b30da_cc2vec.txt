{"id": "966e8f10f41f119c5aa476840320d3db078b30da", "code": [{"0": "guava-tests/test/com/google/common/graph/IncidentNodesTest.java", "added": {"1": [" *\n", " * TODO(b/24415223): Consider SetTestSuiteBuilder once this supports > 2 nodes (i.e. hypergraphs).\n"], "2": ["\n", "  @Test\n", "  public void testSet_basic() {\n", "    IncidentNodes<String> incidentNodes = IncidentNodes.of(\"source\", \"target\");\n", "    assertThat(incidentNodes).containsExactly(\"source\", \"target\").inOrder();\n", "    new EqualsTester().addEqualityGroup(incidentNodes, ImmutableSet.of(\"source\", \"target\"))\n", "        .testEquals();\n", "  }\n", "\n", "  @Test\n", "  public void testSet_selfLoop() {\n", "    // Allocate new strings to ensure that equals() equality is used instead of reference equality.\n", "    IncidentNodes<String> incidentNodes = IncidentNodes.of(new String(\"node\"), new String(\"node\"));\n", "    assertThat(incidentNodes).containsExactly(\"node\").inOrder();\n", "    new EqualsTester().addEqualityGroup(incidentNodes, ImmutableSet.of(\"node\")).testEquals();\n", "  }\n"]}, "removed": {}, "added_lines": {"1": [30, 31], "2": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86]}, "removed_lines": {}}, {"1": "guava/src/com/google/common/graph/IncidentNodes.java", "added": {"2": ["import javax.annotation.Nullable;\n", "\n", " * An immutable set representing the nodes incident to an edge in a graph.\n"], "3": ["   * In the case of a directed graph, returns the source node of the incident edge. In the case of\n", "   * an undirected graph, returns an arbitrary (but consistent) endpoint of the incident edge.\n", "   * Returns the node opposite to {@link #node1} along the incident edge. In the case of a directed\n", "   * graph, this will always be the target node of the incident edge.\n"], "4": ["      this.node = checkNotNull(node, \"node\");\n"], "5": ["    @Override\n", "    public boolean contains(@Nullable Object object) {\n", "      return node.equals(object);\n", "    }\n", "\n"], "6": ["    /**\n", "     * An immutable set with two non-equal nodes. Iterates as {@code node1}, {@code node2}.\n", "     */\n", "      this.node1 = checkNotNull(node1, \"node1\");\n", "      this.node2 = checkNotNull(node2, \"node2\");\n"], "7": ["    @Override\n", "    public boolean contains(@Nullable Object object) {\n", "      return node1.equals(object) || node2.equals(object);\n", "    }\n", "\n"]}, "removed": {"1": ["import static com.google.common.base.Preconditions.checkArgument;\n"], "2": [" * An immutable set representing the nodes incident to an origin edge in a graph.\n"], "3": ["   * In the case of a directed graph, returns the source node of the origin edge. In the case of\n", "   * an undirected graph, returns an arbitrary (but consistent) endpoint of the origin edge.\n", "   * Returns the node opposite to {@link #node1} along the origin edge. In the case of a directed\n", "   * graph, this will always be the target node of the origin edge.\n"], "4": ["      this.node = checkNotNull(node);\n"], "6": ["      this.node1 = checkNotNull(node1);\n", "      this.node2 = checkNotNull(node2);\n", "      checkArgument(!node1.equals(node2));\n"]}, "added_lines": {"2": [27, 28, 30], "3": [63, 64, 69, 70], "4": [78], "5": [91, 92, 93, 94, 95], "6": [111, 112, 113, 115, 116], "7": [129, 130, 131, 132, 133]}, "removed_lines": {"1": [19], "2": [29], "3": [62, 63, 68, 69], "4": [77], "6": [106, 107, 108]}}]}
