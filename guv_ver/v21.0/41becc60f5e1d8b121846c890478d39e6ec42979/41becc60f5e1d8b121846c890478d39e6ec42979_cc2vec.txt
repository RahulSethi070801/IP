{"id": "41becc60f5e1d8b121846c890478d39e6ec42979", "code": [{"0": "guava-tests/test/com/google/common/graph/AbstractGraphTest.java", "added": {"1": ["  static <N> void validateGraph(Graph<N, ?> graph) {\n"]}, "removed": {"1": ["  static <N> void validateGraph(ValueGraph<N, ?> graph) {\n"]}, "added_lines": {"1": [125]}, "removed_lines": {"1": [125]}}, {"1": "guava-tests/test/com/google/common/graph/AbstractNetworkTest.java", "added": {"1": ["    Graph<Integer, Set<String>> asGraph = network.asGraph();\n"]}, "removed": {"1": ["    ValueGraph<Integer, Set<String>> asGraph = network.asGraph();\n"]}, "added_lines": {"1": [160]}, "removed_lines": {"1": [160]}}, {"2": "guava-tests/test/com/google/common/graph/GraphPropertiesTest.java", "added": {"1": [" * Tests for {@link Graphs#hasCycle(Graph)} and {@link Graphs#hasCycle(Network)}.\n"]}, "removed": {"1": [" * Tests for {@link Graphs#hasCycle(ValueGraph)} and {@link Graphs#hasCycle(Network)}.\n"]}, "added_lines": {"1": [29]}, "removed_lines": {"1": [29]}}, {"3": "guava-tests/test/com/google/common/graph/GraphTest.java", "added": {"1": [" * Tests for {@link ConfigurableMutableGraph} and related functionality.\n", "public final class GraphTest {\n", "  MutableGraph<Integer, String> graph;\n", "        ImmutableGraph.copyOf(graph)).testEquals();\n"], "2": ["  public void directedGraph() {\n", "    graph = GraphBuilder.directed().allowsSelfLoops(true).build();\n"], "3": ["  public void undirectedGraph() {\n", "    graph = GraphBuilder.undirected().allowsSelfLoops(true).build();\n"], "4": ["    graph = GraphBuilder.directed().build();\n"], "5": ["    graph = GraphBuilder.undirected().build();\n"], "6": ["    graph = GraphBuilder.directed().build();\n"], "7": ["    graph = GraphBuilder.undirected().build();\n"], "8": ["    graph = GraphBuilder.directed().build();\n"], "9": ["    graph = GraphBuilder.undirected().build();\n"], "10": ["    graph = GraphBuilder.directed().build();\n"]}, "removed": {"1": [" * Tests for {@link ConfigurableMutableValueGraph} and related functionality.\n", "public final class ValueGraphTest {\n", "  MutableValueGraph<Integer, String> graph;\n", "        ImmutableValueGraph.copyOf(graph)).testEquals();\n"], "2": ["  public void directedValueGraph() {\n", "    graph = ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n"], "3": ["  public void undirectedValueGraph() {\n", "    graph = ValueGraphBuilder.undirected().allowsSelfLoops(true).build();\n"], "4": ["    graph = ValueGraphBuilder.directed().build();\n"], "5": ["    graph = ValueGraphBuilder.undirected().build();\n"], "6": ["    graph = ValueGraphBuilder.directed().build();\n"], "7": ["    graph = ValueGraphBuilder.undirected().build();\n"], "8": ["    graph = ValueGraphBuilder.directed().build();\n"], "9": ["    graph = ValueGraphBuilder.undirected().build();\n"], "10": ["    graph = ValueGraphBuilder.directed().build();\n"]}, "added_lines": {"1": [29, 33, 34, 41], "2": [51, 52], "3": [71, 72], "4": [92], "5": [102], "6": [112], "7": [127], "8": [141], "9": [155], "10": [168]}, "removed_lines": {"1": [29, 33, 34, 41], "2": [51, 52], "3": [71, 72], "4": [92], "5": [102], "6": [112], "7": [127], "8": [141], "9": [155], "10": [168]}}, {"4": "guava-tests/test/com/google/common/graph/GraphsTest.java", "added": {"1": ["  public void inducedSubgraph_BasicGraph() {\n"], "2": ["  public void inducedSubgraph_Graph() {\n", "    MutableGraph<Integer, String> directedGraph = GraphBuilder.directed().build();\n", "    MutableGraph<Integer, String> expectedSubgraph = GraphBuilder.directed().build();\n"], "3": ["  public void copyOf_directedBasicGraph() {\n", "    BasicGraph<Integer> directedGraph = buildDirectedBasicGraph();\n", "  public void copyOf_undirectedBasicGraph() {\n", "    BasicGraph<Integer> undirectedGraph = buildUndirectedBasicGraph();\n", "  public void copyOf_directedGraph() {\n", "    Graph<Integer, String> directedGraph = buildDirectedGraph();\n", "    Graph<Integer, String> copy = copyOf(directedGraph);\n", "  public void copyOf_undirectedGraph() {\n", "    Graph<Integer, String> undirectedGraph = buildUndirectedGraph();\n", "    Graph<Integer, String> copy = copyOf(undirectedGraph);\n", "    Network<Integer, String> directedGraph = buildDirectedNetwork();\n"], "4": ["    Network<Integer, String> undirectedGraph = buildUndirectedNetwork();\n"], "5": ["  private static MutableBasicGraph<Integer> buildDirectedBasicGraph() {\n"], "6": ["  private static MutableBasicGraph<Integer> buildUndirectedBasicGraph() {\n"], "7": ["  private static MutableGraph<Integer, String> buildDirectedGraph() {\n", "    MutableGraph<Integer, String> directedGraph =\n", "        GraphBuilder.directed().allowsSelfLoops(true).build();\n"], "8": ["  private static MutableGraph<Integer, String> buildUndirectedGraph() {\n", "    MutableGraph<Integer, String> undirectedGraph =\n", "        GraphBuilder.undirected().allowsSelfLoops(true).build();\n"], "9": ["  private static MutableNetwork<Integer, String> buildDirectedNetwork() {\n"], "10": ["  private static MutableNetwork<Integer, String> buildUndirectedNetwork() {\n"]}, "removed": {"1": ["  public void inducedSubgraph_Graph() {\n"], "2": ["  public void inducedSubgraph_ValueGraph() {\n", "    MutableValueGraph<Integer, String> directedGraph = ValueGraphBuilder.directed().build();\n", "    MutableValueGraph<Integer, String> expectedSubgraph = ValueGraphBuilder.directed().build();\n"], "3": ["  public void copyOf_directedGraph() {\n", "    BasicGraph<Integer> directedGraph = buildDirectedTestGraph();\n", "  public void copyOf_undirectedGraph() {\n", "    BasicGraph<Integer> undirectedGraph = buildUndirectedTestGraph();\n", "  public void copyOf_directedValueGraph() {\n", "    ValueGraph<Integer, String> directedGraph = buildDirectedTestValueGraph();\n", "    ValueGraph<Integer, String> copy = copyOf(directedGraph);\n", "  public void copyOf_undirectedValueGraph() {\n", "    ValueGraph<Integer, String> undirectedGraph = buildUndirectedTestValueGraph();\n", "    ValueGraph<Integer, String> copy = copyOf(undirectedGraph);\n", "    Network<Integer, String> directedGraph = buildDirectedTestNetwork();\n"], "4": ["    Network<Integer, String> undirectedGraph = buildUndirectedTestNetwork();\n"], "5": ["  private static MutableBasicGraph<Integer> buildDirectedTestGraph() {\n"], "6": ["  private static MutableBasicGraph<Integer> buildUndirectedTestGraph() {\n"], "7": ["  private static MutableValueGraph<Integer, String> buildDirectedTestValueGraph() {\n", "    MutableValueGraph<Integer, String> directedGraph =\n", "        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n"], "8": ["  private static MutableValueGraph<Integer, String> buildUndirectedTestValueGraph() {\n", "    MutableValueGraph<Integer, String> undirectedGraph =\n", "        ValueGraphBuilder.undirected().allowsSelfLoops(true).build();\n"], "9": ["  private static MutableNetwork<Integer, String> buildDirectedTestNetwork() {\n"], "10": ["  private static MutableNetwork<Integer, String> buildUndirectedTestNetwork() {\n"]}, "added_lines": {"1": [339], "2": [358, 361, 368], "3": [416, 417, 424, 425, 432, 433, 435, 440, 441, 443, 449], "4": [457], "5": [622], "6": [632], "7": [642, 643, 644], "8": [652, 653, 654], "9": [662], "10": [674]}, "removed_lines": {"1": [339], "2": [358, 361, 368], "3": [416, 417, 424, 425, 432, 433, 435, 440, 441, 443, 449], "4": [457], "5": [622], "6": [632], "7": [642, 643, 644], "8": [652, 653, 654], "9": [662], "10": [674]}}, {"5": "guava-tests/test/com/google/common/graph/PackageSanityTests.java", "added": {"1": ["      GraphBuilder.directed().allowsSelfLoops(false).expectedNodeCount(16);\n"]}, "removed": {"1": ["      ValueGraphBuilder.directed().allowsSelfLoops(false).expectedNodeCount(16);\n"]}, "added_lines": {"1": [35]}, "removed_lines": {"1": [35]}}, {"6": "guava/src/com/google/common/graph/AbstractBasicGraph.java", "added": {"1": ["    extends AbstractGraph<N, Presence> implements BasicGraph<N> {\n"]}, "removed": {"1": ["    extends AbstractValueGraph<N, Presence> implements BasicGraph<N> {\n"]}, "added_lines": {"1": [35]}, "removed_lines": {"1": [35]}}, {"7": "guava/src/com/google/common/graph/AbstractGraph.java", "added": {"1": [" * This class provides a skeletal implementation of {@link Graph}. It is recommended to extend\n", " * this class rather than implement {@link Graph} directly, to ensure consistent {@link\n"], "2": ["public abstract class AbstractGraph<N, V> implements Graph<N, V> {\n"], "3": ["   * A reasonable default implementation of {@link Graph#edges()} defined in terms of\n"], "4": ["        return EndpointsIterator.of(AbstractGraph.this);\n"], "5": ["    if (!(obj instanceof Graph)) {\n", "    Graph<?, ?> other = (Graph<?, ?>) obj;\n"], "6": ["  private static int degree(Graph<?, ?> graph, Object node) {\n"]}, "removed": {"1": [" * This class provides a skeletal implementation of {@link ValueGraph}. It is recommended to extend\n", " * this class rather than implement {@link ValueGraph} directly, to ensure consistent {@link\n"], "2": ["public abstract class AbstractValueGraph<N, V> implements ValueGraph<N, V> {\n"], "3": ["   * A reasonable default implementation of {@link ValueGraph#edges()} defined in terms of\n"], "4": ["        return EndpointsIterator.of(AbstractValueGraph.this);\n"], "5": ["    if (!(obj instanceof ValueGraph)) {\n", "    ValueGraph<?, ?> other = (ValueGraph<?, ?>) obj;\n"], "6": ["  private static int degree(ValueGraph<?, ?> graph, Object node) {\n"]}, "added_lines": {"1": [34, 35], "2": [44], "3": [62], "4": [70], "5": [97, 100], "6": [155]}, "removed_lines": {"1": [34, 35], "2": [44], "3": [62], "4": [70], "5": [97, 100], "6": [155]}}, {"8": "guava/src/com/google/common/graph/AbstractNetwork.java", "added": {"1": ["  public Graph<N, Set<E>> asGraph() {\n", "    return new AbstractGraph<N, Set<E>>() {\n"]}, "removed": {"1": ["  public ValueGraph<N, Set<E>> asGraph() {\n", "    return new AbstractValueGraph<N, Set<E>>() {\n"]}, "added_lines": {"1": [45, 46]}, "removed_lines": {"1": [45, 46]}}, {"9": "guava/src/com/google/common/graph/BasicGraph.java", "added": {"1": ["public interface BasicGraph<N> extends Graph<N, BasicGraph.Presence> {\n"]}, "removed": {"1": ["public interface BasicGraph<N> extends ValueGraph<N, BasicGraph.Presence> {\n"]}, "added_lines": {"1": [171]}, "removed_lines": {"1": [171]}}, {"10": "guava/src/com/google/common/graph/BasicGraphBuilder.java", "added": {"1": ["   * <p>The \"queryable\" properties are those that are exposed through the {@link Graph} interface,\n", "   * such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)},\n", "   * are not set in the new builder.\n", "  public static <N> BasicGraphBuilder<N> from(Graph<N, ?> graph) {\n"], "2": ["   * Specifies the order of iteration for the elements of {@link Graph#nodes()}.\n"]}, "removed": {"1": ["   * <p>The \"queryable\" properties are those that are exposed through the {@link ValueGraph}\n", "   * interface, such as {@link ValueGraph#isDirected()}. Other properties, such as\n", "   * {@link #expectedNodeCount(int)}, are not set in the new builder.\n", "  public static <N> BasicGraphBuilder<N> from(ValueGraph<N, ?> graph) {\n"], "2": ["   * Specifies the order of iteration for the elements of {@link ValueGraph#nodes()}.\n"]}, "added_lines": {"1": [69, 70, 71, 73], "2": [103]}, "removed_lines": {"1": [69, 70, 71, 73], "2": [103]}}, {"11": "guava/src/com/google/common/graph/ConfigurableGraph.java", "added": {"1": [" * Configurable implementation of {@link Graph} that supports the options supplied by\n"], "2": ["class ConfigurableGraph<N, V> extends AbstractGraph<N, V> {\n"], "3": ["  ConfigurableGraph(AbstractGraphBuilder<? super N> builder) {\n"], "4": ["  ConfigurableGraph(AbstractGraphBuilder<? super N> builder,\n"]}, "removed": {"1": [" * Configurable implementation of {@link ValueGraph} that supports the options supplied by\n"], "2": ["class ConfigurableValueGraph<N, V> extends AbstractValueGraph<N, V> {\n"], "3": ["  ConfigurableValueGraph(AbstractGraphBuilder<? super N> builder) {\n"], "4": ["  ConfigurableValueGraph(AbstractGraphBuilder<? super N> builder,\n"]}, "added_lines": {"1": [32], "2": [56], "3": [68], "4": [80]}, "removed_lines": {"1": [32], "2": [56], "3": [68], "4": [80]}}, {"12": "guava/src/com/google/common/graph/ConfigurableMutableBasicGraph.java", "added": {"1": ["  private final MutableGraph<N, Presence> backingGraph;\n", "    this.backingGraph = new ConfigurableMutableGraph<N, Presence>(builder);\n"]}, "removed": {"1": ["  private final MutableValueGraph<N, Presence> backingGraph;\n", "    this.backingGraph = new ConfigurableMutableValueGraph<N, Presence>(builder);\n"]}, "added_lines": {"1": [33, 39]}, "removed_lines": {"1": [33, 39]}}, {"13": "guava/src/com/google/common/graph/ConfigurableMutableGraph.java", "added": {"1": [" * Configurable implementation of {@link MutableGraph} that supports both directed and undirected\n", " * graphs. Instances of this class should be constructed with {@link GraphBuilder}.\n"], "2": ["final class ConfigurableMutableGraph<N, V>\n", "    extends ConfigurableGraph<N, V> implements MutableGraph<N, V> {\n", "  ConfigurableMutableGraph(AbstractGraphBuilder<? super N> builder) {\n"]}, "removed": {"1": [" * Configurable implementation of {@link MutableValueGraph} that supports both directed and\n", " * undirected graphs. Instances of this class should be constructed with {@link ValueGraphBuilder}.\n"], "2": ["final class ConfigurableMutableValueGraph<N, V>\n", "    extends ConfigurableValueGraph<N, V> implements MutableValueGraph<N, V> {\n", "  ConfigurableMutableValueGraph(AbstractGraphBuilder<? super N> builder) {\n"]}, "added_lines": {"1": [29, 30], "2": [41, 42, 47]}, "removed_lines": {"1": [29, 30], "2": [41, 42, 47]}}, {"14": "guava/src/com/google/common/graph/Endpoints.java", "added": {"1": ["  public static <N> Endpoints<N> of(Graph<?, ?> graph, N nodeA, N nodeB) {\n"]}, "removed": {"1": ["  public static <N> Endpoints<N> of(ValueGraph<?, ?> graph, N nodeA, N nodeB) {\n"]}, "added_lines": {"1": [46]}, "removed_lines": {"1": [46]}}, {"15": "guava/src/com/google/common/graph/EndpointsIterator.java", "added": {"1": [" * A class to facilitate the set returned by {@link Graph#edges()}.\n", "  private final Graph<N, ?> graph;\n", "  static <N> EndpointsIterator<N> of(Graph<N, ?> graph) {\n", "  EndpointsIterator(Graph<N, ?> graph) {\n"], "2": ["    Directed(Graph<N, ?> graph){\n"], "3": ["    Undirected(Graph<N, ?> graph) {\n"]}, "removed": {"1": [" * A class to facilitate the set returned by {@link ValueGraph#edges()}.\n", "  private final ValueGraph<N, ?> graph;\n", "  static <N> EndpointsIterator<N> of(ValueGraph<N, ?> graph) {\n", "  EndpointsIterator(ValueGraph<N, ?> graph) {\n"], "2": ["    Directed(ValueGraph<N, ?> graph){\n"], "3": ["    Undirected(ValueGraph<N, ?> graph) {\n"]}, "added_lines": {"1": [28, 34, 40, 44], "2": [68], "3": [112]}, "removed_lines": {"1": [28, 34, 40, 44], "2": [68], "3": [112]}}, {"16": "guava/src/com/google/common/graph/Graph.java", "added": {"1": ["public interface Graph<N, V> {\n"], "2": ["   * edges\". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)} and {@link\n", "   * Graphs#transitiveClosure(Graph)}.\n"], "3": ["   * Returns {@code true} iff {@code object} is a {@link Graph} that has the same structural\n"], "4": ["   * <p>A reference implementation of this is provided by {@link AbstractGraph#equals(Object)}.\n"], "5": ["   * <p>A reference implementation of this is provided by {@link AbstractGraph#hashCode()}.\n"]}, "removed": {"1": ["public interface ValueGraph<N, V> {\n"], "2": ["   * edges\". For that functionality, see {@link Graphs#reachableNodes(ValueGraph, Object)} and\n", "   * {@link Graphs#transitiveClosure(ValueGraph)}.\n"], "3": ["   * Returns {@code true} iff {@code object} is a {@link ValueGraph} that has the same structural\n"], "4": ["   * <p>A reference implementation of this is provided by {@link AbstractValueGraph#equals(Object)}.\n"], "5": ["   * <p>A reference implementation of this is provided by {@link AbstractValueGraph#hashCode()}.\n"]}, "added_lines": {"1": [42], "2": [102, 103], "3": [131], "4": [147], "5": [157]}, "removed_lines": {"1": [42], "2": [102, 103], "3": [131], "4": [147], "5": [157]}}, {"17": "guava/src/com/google/common/graph/GraphBuilder.java", "added": {"1": [" * A builder for constructing instances of {@link Graph} with user-defined properties.\n"], "2": ["public final class GraphBuilder<N, V> extends AbstractGraphBuilder<N> {\n"], "3": ["  private GraphBuilder(boolean directed) {\n", "   * Returns a {@link GraphBuilder} for building directed graphs.\n", "  public static GraphBuilder<Object, Object> directed() {\n", "    return new GraphBuilder<Object, Object>(true);\n", "   * Returns a {@link GraphBuilder} for building undirected graphs.\n", "  public static GraphBuilder<Object, Object> undirected() {\n", "    return new GraphBuilder<Object, Object>(false);\n", "   * Returns a {@link GraphBuilder} initialized with all properties queryable from\n", "   * <p>The \"queryable\" properties are those that are exposed through the {@link Graph} interface,\n", "   * such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)},\n", "   * are not set in the new builder.\n", "  public static <N> GraphBuilder<N, Object> from(Graph<N, ?> graph) {\n", "    return new GraphBuilder<N, Object>(graph.isDirected())\n"], "4": ["  public GraphBuilder<N, V> allowsSelfLoops(boolean allowsSelfLoops) {\n"], "5": ["  public GraphBuilder<N, V> expectedNodeCount(int expectedNodeCount) {\n"], "6": ["  public <N1 extends N> GraphBuilder<N1, V> nodeOrder(ElementOrder<N1> nodeOrder) {\n", "    GraphBuilder<N1, V> newBuilder = cast();\n", "   * Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.\n", "  public <N1 extends N, V1 extends V> MutableGraph<N1, V1> build() {\n", "    return new ConfigurableMutableGraph<N1, V1>(this);\n", "  private <N1 extends N, V1 extends V> GraphBuilder<N1, V1> cast() {\n", "    return (GraphBuilder<N1, V1>) this;\n"]}, "removed": {"1": [" * A builder for constructing instances of {@link ValueGraph} with user-defined properties.\n"], "2": ["public final class ValueGraphBuilder<N, V> extends AbstractGraphBuilder<N> {\n"], "3": ["  private ValueGraphBuilder(boolean directed) {\n", "   * Returns a {@link ValueGraphBuilder} for building directed graphs.\n", "  public static ValueGraphBuilder<Object, Object> directed() {\n", "    return new ValueGraphBuilder<Object, Object>(true);\n", "   * Returns a {@link ValueGraphBuilder} for building undirected graphs.\n", "  public static ValueGraphBuilder<Object, Object> undirected() {\n", "    return new ValueGraphBuilder<Object, Object>(false);\n", "   * Returns a {@link ValueGraphBuilder} initialized with all properties queryable from\n", "   * <p>The \"queryable\" properties are those that are exposed through the {@link ValueGraph}\n", "   * interface, such as {@link ValueGraph#isDirected()}. Other properties, such as\n", "   * {@link #expectedNodeCount(int)}, are not set in the new builder.\n", "  public static <N> ValueGraphBuilder<N, Object> from(ValueGraph<N, ?> graph) {\n", "    return new ValueGraphBuilder<N, Object>(graph.isDirected())\n"], "4": ["  public ValueGraphBuilder<N, V> allowsSelfLoops(boolean allowsSelfLoops) {\n"], "5": ["  public ValueGraphBuilder<N, V> expectedNodeCount(int expectedNodeCount) {\n"], "6": ["  public <N1 extends N> ValueGraphBuilder<N1, V> nodeOrder(ElementOrder<N1> nodeOrder) {\n", "    ValueGraphBuilder<N1, V> newBuilder = cast();\n", "   * Returns an empty {@link MutableValueGraph} with the properties of this\n", "   * {@link ValueGraphBuilder}.\n", "  public <N1 extends N, V1 extends V> MutableValueGraph<N1, V1> build() {\n", "    return new ConfigurableMutableValueGraph<N1, V1>(this);\n", "  private <N1 extends N, V1 extends V> ValueGraphBuilder<N1, V1> cast() {\n", "    return (ValueGraphBuilder<N1, V1>) this;\n"]}, "added_lines": {"1": [26], "2": [39], "3": [47, 52, 54, 55, 59, 61, 62, 66, 69, 70, 71, 73, 75], "4": [85], "5": [95], "6": [105, 107, 113, 115, 116, 120, 121]}, "removed_lines": {"1": [26], "2": [39], "3": [47, 52, 54, 55, 59, 61, 62, 66, 69, 70, 71, 73, 75], "4": [85], "5": [95], "6": [105, 107, 113, 114, 116, 117, 121, 122]}}, {"18": "guava/src/com/google/common/graph/GraphConnections.java", "added": {"1": [" * in a {@link Graph}.\n"]}, "removed": {"1": [" * in a {@link ValueGraph}.\n"]}, "added_lines": {"1": [25]}, "removed_lines": {"1": [25]}}, {"19": "guava/src/com/google/common/graph/Graphs.java", "added": {"1": [" * Static utility methods for {@link Graph} and {@link Network} instances.\n"], "2": ["  public static boolean hasCycle(Graph<?, ?> graph) {\n"], "3": ["      Graph<?, ?> graph,\n"], "4": ["      Graph<?, ?> graph, Object nextNode, @Nullable Object previousNode) {\n"], "5": ["   * graph with an edge connecting node A to node B iff node B is {@link #reachableNodes(Graph,\n", "  public static <N> BasicGraph<N> transitiveClosure(Graph<N, ?> graph) {\n"], "6": ["  public static <N> Set<N> reachableNodes(Graph<N, ?> graph, Object node) {\n"], "7": ["   * all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} from {@code\n"], "8": ["   * all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} (and\n", "  public static <N, V> MutableGraph<N, V> inducedSubgraph(Graph<N, V> graph,\n", "    MutableGraph<N, V> subgraph = GraphBuilder.from(graph).build();\n"], "9": ["  public static <N, V> MutableGraph<N, V> copyOf(Graph<N, V> graph) {\n", "    MutableGraph<N, V> copy = GraphBuilder.from(graph)\n"]}, "removed": {"1": [" * Static utility methods for {@link ValueGraph} and {@link Network} instances.\n"], "2": ["  public static boolean hasCycle(ValueGraph<?, ?> graph) {\n"], "3": ["      ValueGraph<?, ?> graph,\n"], "4": ["      ValueGraph<?, ?> graph, Object nextNode, @Nullable Object previousNode) {\n"], "5": ["   * graph with an edge connecting node A to node B iff node B is {@link #reachableNodes(ValueGraph,\n", "  public static <N> BasicGraph<N> transitiveClosure(ValueGraph<N, ?> graph) {\n"], "6": ["  public static <N> Set<N> reachableNodes(ValueGraph<N, ?> graph, Object node) {\n"], "7": ["   * all of the nodes in {@code nodes}, and all of the {@link ValueGraph#edges() edges} from {@code\n"], "8": ["   * all of the nodes in {@code nodes}, and all of the {@link ValueGraph#edges() edges} (and\n", "  public static <N, V> MutableValueGraph<N, V> inducedSubgraph(ValueGraph<N, V> graph,\n", "    MutableValueGraph<N, V> subgraph = ValueGraphBuilder.from(graph).build();\n"], "9": ["  public static <N, V> MutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph) {\n", "    MutableValueGraph<N, V> copy = ValueGraphBuilder.from(graph)\n"]}, "added_lines": {"1": [38], "2": [58], "3": [100], "4": [130], "5": [141, 148], "6": [195], "7": [247], "8": [270, 276, 278], "9": [335, 336]}, "removed_lines": {"1": [38], "2": [58], "3": [100], "4": [130], "5": [141, 148], "6": [195], "7": [247], "8": [270, 276, 278], "9": [335, 336]}}, {"20": "guava/src/com/google/common/graph/ImmutableBasicGraph.java", "added": {"1": ["    extends ImmutableGraph<N, Presence> implements BasicGraph<N> {\n"]}, "removed": {"1": ["    extends ImmutableValueGraph<N, Presence> implements BasicGraph<N> {\n"]}, "added_lines": {"1": [36]}, "removed_lines": {"1": [36]}}, {"21": "guava/src/com/google/common/graph/ImmutableGraph.java", "added": {"1": [" * A {@link Graph} whose relationships and edge values are constant. Instances of this class may be\n", " * obtained with {@link #copyOf(Graph)}.\n"], "2": ["public class ImmutableGraph<N, V> extends ConfigurableGraph<N, V> {\n", "  ImmutableGraph(Graph<N, V> graph) {\n", "    super(GraphBuilder.from(graph), getNodeConnections(graph), graph.edges().size());\n", "  public static <N, V> ImmutableGraph<N, V> copyOf(Graph<N, V> graph) {\n", "    return (graph instanceof ImmutableGraph)\n", "        ? (ImmutableGraph<N, V>) graph\n", "        : new ImmutableGraph<N, V>(graph);\n"], "3": ["  public static <N, V> ImmutableGraph<N, V> copyOf(ImmutableGraph<N, V> graph) {\n", "      Graph<N, V> graph) {\n"], "4": ["  private static <N, V> GraphConnections<N, V> connectionsOf(final Graph<N, V> graph,\n"]}, "removed": {"1": [" * A {@link ValueGraph} whose relationships and edge values are constant. Instances of this class\n", " * may be obtained with {@link #copyOf(ValueGraph)}.\n"], "2": ["public class ImmutableValueGraph<N, V> extends ConfigurableValueGraph<N, V> {\n", "  ImmutableValueGraph(ValueGraph<N, V> graph) {\n", "    super(ValueGraphBuilder.from(graph), getNodeConnections(graph), graph.edges().size());\n", "  public static <N, V> ImmutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph) {\n", "    return (graph instanceof ImmutableValueGraph)\n", "        ? (ImmutableValueGraph<N, V>) graph\n", "        : new ImmutableValueGraph<N, V>(graph);\n"], "3": ["  public static <N, V> ImmutableValueGraph<N, V> copyOf(ImmutableValueGraph<N, V> graph) {\n", "      ValueGraph<N, V> graph) {\n"], "4": ["  private static <N, V> GraphConnections<N, V> connectionsOf(final ValueGraph<N, V> graph,\n"]}, "added_lines": {"1": [27, 28], "2": [36, 38, 39, 46, 47, 48, 49], "3": [58, 63], "4": [74]}, "removed_lines": {"1": [27, 28], "2": [36, 38, 39, 46, 47, 48, 49], "3": [58, 63], "4": [74]}}, {"22": "guava/src/com/google/common/graph/MutableGraph.java", "added": {"1": [" * A subtype of {@link Graph} which permits mutations.\n", " * Users should generally use the {@link Graph} interface where possible.\n"], "2": ["public interface MutableGraph<N, V> extends Graph<N, V> {\n"]}, "removed": {"1": [" * A subtype of {@link ValueGraph} which permits mutations.\n", " * Users should generally use the {@link ValueGraph} interface where possible.\n"], "2": ["public interface MutableValueGraph<N, V> extends ValueGraph<N, V> {\n"]}, "added_lines": {"1": [23, 24], "2": [32]}, "removed_lines": {"1": [23, 24], "2": [32]}}, {"23": "guava/src/com/google/common/graph/Network.java", "added": {"1": ["   * Returns a live view of this network as a {@link Graph}. The resulting {@link Graph} will have\n", "   * an edge connecting node A to node B iff this {@link Network} has an edge connecting A to B.\n", "   * <p>{@link Graph#edgeValue(Object, Object)} will return the set of edges connecting node A to\n", "   * node B. It will return the empty set if there are no edges connecting A to B.\n", "  Graph<N, Set<E>> asGraph();\n"]}, "removed": {"1": ["   * Returns a live view of this graph as a {@link ValueGraph}. The resulting {@link ValueGraph}\n", "   * will have an edge connecting node A to node B iff this {@link Network} has an edge connecting\n", "   * A to B.\n", "   * <p>{@link ValueGraph#edgeValue(Object, Object)} will return the set of edges connecting node A\n", "   * to node B. It will return the empty set if there are no edges connecting A to B.\n", "  ValueGraph<N, Set<E>> asGraph();\n"]}, "added_lines": {"1": [227, 228, 230, 231, 233]}, "removed_lines": {"1": [227, 228, 229, 231, 232, 234]}}]}
