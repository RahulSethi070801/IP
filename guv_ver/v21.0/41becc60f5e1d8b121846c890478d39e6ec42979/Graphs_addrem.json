{
    "addition": {
        "38": " * Static utility methods for {@link Graph} and {@link Network} instances.\n",
        "58": "  public static boolean hasCycle(Graph<?, ?> graph) {\n",
        "100": "      Graph<?, ?> graph,\n",
        "130": "      Graph<?, ?> graph, Object nextNode, @Nullable Object previousNode) {\n",
        "141": "   * graph with an edge connecting node A to node B iff node B is {@link #reachableNodes(Graph,\n",
        "148": "  public static <N> BasicGraph<N> transitiveClosure(Graph<N, ?> graph) {\n",
        "195": "  public static <N> Set<N> reachableNodes(Graph<N, ?> graph, Object node) {\n",
        "247": "   * all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} from {@code\n",
        "270": "   * all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} (and\n",
        "276": "  public static <N, V> MutableGraph<N, V> inducedSubgraph(Graph<N, V> graph,\n",
        "278": "    MutableGraph<N, V> subgraph = GraphBuilder.from(graph).build();\n",
        "335": "  public static <N, V> MutableGraph<N, V> copyOf(Graph<N, V> graph) {\n",
        "336": "    MutableGraph<N, V> copy = GraphBuilder.from(graph)\n"
    },
    "removed": {
        "38": " * Static utility methods for {@link ValueGraph} and {@link Network} instances.\n",
        "58": "  public static boolean hasCycle(ValueGraph<?, ?> graph) {\n",
        "100": "      ValueGraph<?, ?> graph,\n",
        "130": "      ValueGraph<?, ?> graph, Object nextNode, @Nullable Object previousNode) {\n",
        "141": "   * graph with an edge connecting node A to node B iff node B is {@link #reachableNodes(ValueGraph,\n",
        "148": "  public static <N> BasicGraph<N> transitiveClosure(ValueGraph<N, ?> graph) {\n",
        "195": "  public static <N> Set<N> reachableNodes(ValueGraph<N, ?> graph, Object node) {\n",
        "247": "   * all of the nodes in {@code nodes}, and all of the {@link ValueGraph#edges() edges} from {@code\n",
        "270": "   * all of the nodes in {@code nodes}, and all of the {@link ValueGraph#edges() edges} (and\n",
        "276": "  public static <N, V> MutableValueGraph<N, V> inducedSubgraph(ValueGraph<N, V> graph,\n",
        "278": "    MutableValueGraph<N, V> subgraph = ValueGraphBuilder.from(graph).build();\n",
        "335": "  public static <N, V> MutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph) {\n",
        "336": "    MutableValueGraph<N, V> copy = ValueGraphBuilder.from(graph)\n"
    }
}