{
    "addition": {
        "26": " * A builder for constructing instances of {@link Graph} with user-defined properties.\n",
        "39": "public final class GraphBuilder<N, V> extends AbstractGraphBuilder<N> {\n",
        "47": "  private GraphBuilder(boolean directed) {\n",
        "52": "   * Returns a {@link GraphBuilder} for building directed graphs.\n",
        "54": "  public static GraphBuilder<Object, Object> directed() {\n",
        "55": "    return new GraphBuilder<Object, Object>(true);\n",
        "59": "   * Returns a {@link GraphBuilder} for building undirected graphs.\n",
        "61": "  public static GraphBuilder<Object, Object> undirected() {\n",
        "62": "    return new GraphBuilder<Object, Object>(false);\n",
        "66": "   * Returns a {@link GraphBuilder} initialized with all properties queryable from\n",
        "69": "   * <p>The \"queryable\" properties are those that are exposed through the {@link Graph} interface,\n",
        "70": "   * such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)},\n",
        "71": "   * are not set in the new builder.\n",
        "73": "  public static <N> GraphBuilder<N, Object> from(Graph<N, ?> graph) {\n",
        "75": "    return new GraphBuilder<N, Object>(graph.isDirected())\n",
        "85": "  public GraphBuilder<N, V> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "95": "  public GraphBuilder<N, V> expectedNodeCount(int expectedNodeCount) {\n",
        "105": "  public <N1 extends N> GraphBuilder<N1, V> nodeOrder(ElementOrder<N1> nodeOrder) {\n",
        "107": "    GraphBuilder<N1, V> newBuilder = cast();\n",
        "113": "   * Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.\n",
        "115": "  public <N1 extends N, V1 extends V> MutableGraph<N1, V1> build() {\n",
        "116": "    return new ConfigurableMutableGraph<N1, V1>(this);\n",
        "120": "  private <N1 extends N, V1 extends V> GraphBuilder<N1, V1> cast() {\n",
        "121": "    return (GraphBuilder<N1, V1>) this;\n"
    },
    "removed": {
        "26": " * A builder for constructing instances of {@link ValueGraph} with user-defined properties.\n",
        "39": "public final class ValueGraphBuilder<N, V> extends AbstractGraphBuilder<N> {\n",
        "47": "  private ValueGraphBuilder(boolean directed) {\n",
        "52": "   * Returns a {@link ValueGraphBuilder} for building directed graphs.\n",
        "54": "  public static ValueGraphBuilder<Object, Object> directed() {\n",
        "55": "    return new ValueGraphBuilder<Object, Object>(true);\n",
        "59": "   * Returns a {@link ValueGraphBuilder} for building undirected graphs.\n",
        "61": "  public static ValueGraphBuilder<Object, Object> undirected() {\n",
        "62": "    return new ValueGraphBuilder<Object, Object>(false);\n",
        "66": "   * Returns a {@link ValueGraphBuilder} initialized with all properties queryable from\n",
        "69": "   * <p>The \"queryable\" properties are those that are exposed through the {@link ValueGraph}\n",
        "70": "   * interface, such as {@link ValueGraph#isDirected()}. Other properties, such as\n",
        "71": "   * {@link #expectedNodeCount(int)}, are not set in the new builder.\n",
        "73": "  public static <N> ValueGraphBuilder<N, Object> from(ValueGraph<N, ?> graph) {\n",
        "75": "    return new ValueGraphBuilder<N, Object>(graph.isDirected())\n",
        "85": "  public ValueGraphBuilder<N, V> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "95": "  public ValueGraphBuilder<N, V> expectedNodeCount(int expectedNodeCount) {\n",
        "105": "  public <N1 extends N> ValueGraphBuilder<N1, V> nodeOrder(ElementOrder<N1> nodeOrder) {\n",
        "107": "    ValueGraphBuilder<N1, V> newBuilder = cast();\n",
        "113": "   * Returns an empty {@link MutableValueGraph} with the properties of this\n",
        "114": "   * {@link ValueGraphBuilder}.\n",
        "116": "  public <N1 extends N, V1 extends V> MutableValueGraph<N1, V1> build() {\n",
        "117": "    return new ConfigurableMutableValueGraph<N1, V1>(this);\n",
        "121": "  private <N1 extends N, V1 extends V> ValueGraphBuilder<N1, V1> cast() {\n",
        "122": "    return (ValueGraphBuilder<N1, V1>) this;\n"
    }
}