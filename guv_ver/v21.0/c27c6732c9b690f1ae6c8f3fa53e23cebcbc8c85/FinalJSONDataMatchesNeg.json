[{"func":{"oldfunccode":"c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85/Codes_neg/Match_oldfunccode_c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85_1.txt","newfunccode":"c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85/Codes_neg/Match_newfunccode_c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85_1.txt","newdoc":"\n     * We'd normally use ServiceLoader here, but it hurts Android startup performance. To avoid\n     * that, we hardcode the JDK Pattern compiler on Android (and, inadvertently, on App Engine and\n     * in Guava, at least for now).\n     \n","newJdoc":"","olddoc":" Returns the first PatternCompiler that loads successfully.\n from hasNext()\n Fall back to the JDK regex library.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85/Platform","pathinproj":"guava/src/com/google/common/base/Platform.java","addlines":[],"dellines":[80,81,82,83,85,86,74,76,77,78,79],"addcode":[],"delcode":["    ServiceLoader<PatternCompiler> loader = ServiceLoader.load(PatternCompiler.class);\n","    try {\n","      for (Iterator<PatternCompiler> it = loader.iterator(); it.hasNext();) {\n","        try {\n","          return it.next();\n","        } catch (ServiceConfigurationError e) {\n","          logPatternCompilerError(e);\n","        }\n","      }\n","      logPatternCompilerError(e);\n","    }\n"],"methodSig":"private static PatternCompiler loadPatternCompiler()"},"doc":{"oldfunccode":"c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85/Codes_neg/Match_olddocfunccode_c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85_1.txt","newfunccode":"c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85/Codes_neg/Match_newdocfunccode_c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85_1.txt","newdoc":" In this case, just dumping the collection to an array and sorting is\n faster than using the implementation for Iterator, which is\n specialized for k much smaller than n.\n c only contains E's and doesn't escape\n","newJdoc":"c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85/Codes_neg/Match_newdocnewJdoc_c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85_1.txt","olddoc":" In this case, just dumping the collection to an array and sorting is\n faster than using the implementation for Iterator, which is\n specialized for k much smaller than n.\n c only contains E's and doesn't escape\n","oldJdoc":"c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85/Codes_neg/Match_olddocJdoc_c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85/Ordering","pathinproj":"guava/src/com/google/common/collect/Ordering.java","addlines":[727,728],"dellines":[727,728],"addcode":["   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n","   * use {@code Streams.stream(iterable).collect(Comparators.least(k, thisComparator))} instead.\n"],"delcode":["   * <p><b>Java 8 users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k,\n","   * thisComparator))} instead.\n"],"methodSig":"public List<E> leastOf(Iterable<E> iterable, int k)"},"id":1,"flag":1,"commit":"c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85"}]