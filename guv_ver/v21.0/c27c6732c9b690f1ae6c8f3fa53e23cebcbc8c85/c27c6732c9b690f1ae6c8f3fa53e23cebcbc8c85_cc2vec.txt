{"id": "c27c6732c9b690f1ae6c8f3fa53e23cebcbc8c85", "code": [{"0": "cycle_whitelist.txt", "added": {"1": ["FIELD java.util.AbstractMap.values com.google.common.collect.TreeRangeMap.SubRangeMap.SubRangeMapAsMap.values.$\n"]}, "removed": {"1": ["FIELD java.util.AbstractMap.valuesCollection com.google.common.collect.TreeRangeMap.SubRangeMap.SubRangeMapAsMap.values.$\n"]}, "added_lines": {"1": [46]}, "removed_lines": {"1": [46]}}, {"1": "guava/pom.xml", "added": {"1": ["        <version>2.5.0</version>\n"]}, "removed": {"1": ["        <version>2.3.7</version>\n"]}, "added_lines": {"1": [52]}, "removed_lines": {"1": [52]}}, {"2": "guava/src/com/google/common/base/Platform.java", "added": {"2": ["    /*\n", "     * We'd normally use ServiceLoader here, but it hurts Android startup performance. To avoid\n", "     * that, we hardcode the JDK Pattern compiler on Android (and, inadvertently, on App Engine and\n", "     * in Guava, at least for now).\n", "     */\n"]}, "removed": {"1": ["import java.util.Iterator;\n", "import java.util.ServiceLoader;\n"], "2": ["    ServiceLoader<PatternCompiler> loader = ServiceLoader.load(PatternCompiler.class);\n", "    // Returns the first PatternCompiler that loads successfully.\n", "    try {\n", "      for (Iterator<PatternCompiler> it = loader.iterator(); it.hasNext();) {\n", "        try {\n", "          return it.next();\n", "        } catch (ServiceConfigurationError e) {\n", "          logPatternCompilerError(e);\n", "        }\n", "      }\n", "    } catch (ServiceConfigurationError e) { // from hasNext()\n", "      logPatternCompilerError(e);\n", "    }\n", "    // Fall back to the JDK regex library.\n"]}, "added_lines": {"2": [72, 73, 74, 75, 76]}, "removed_lines": {"1": [19, 22], "2": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87]}}, {"3": "guava/src/com/google/common/collect/Ordering.java", "added": {"1": ["   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n", "   * use {@code Streams.stream(iterable).collect(Comparators.least(k, thisComparator))} instead.\n"], "2": ["   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n", "   * use {@code Streams.stream(iterable).collect(Comparators.greatest(k, thisComparator))} instead.\n"]}, "removed": {"1": ["   * <p><b>Java 8 users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k,\n", "   * thisComparator))} instead.\n"], "2": ["   * <p><b>Java 8 users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k,\n", "   * thisComparator))} instead.\n"]}, "added_lines": {"1": [727, 728], "2": [801, 802]}, "removed_lines": {"1": [727, 728], "2": [801, 802]}}]}
