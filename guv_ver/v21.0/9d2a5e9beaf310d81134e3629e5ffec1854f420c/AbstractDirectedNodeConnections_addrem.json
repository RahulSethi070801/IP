{
    "addition": {
        "20": "import static com.google.common.base.Preconditions.checkState;\n",
        "22": "import com.google.common.collect.Iterables;\n",
        "24": "import com.google.common.math.IntMath;\n",
        "26": "import java.util.AbstractSet;\n",
        "28": "import java.util.Iterator;\n",
        "50": "  private int selfLoopCount;\n",
        "51": "\n",
        "52": "  protected AbstractDirectedNodeConnections(Map<E, N> inEdgeMap, Map<E, N> outEdgeMap,\n",
        "53": "      int selfLoopCount) {\n",
        "56": "    this.selfLoopCount = selfLoopCount;\n",
        "66": "    return new AbstractSet<E>() {\n",
        "67": "      @Override\n",
        "68": "      public Iterator<E> iterator() {\n",
        "69": "        return selfLoopCount == 0\n",
        "70": "            ? Iterables.concat(inEdges(), outEdges()).iterator()\n",
        "71": "            : Sets.union(inEdges(), outEdges()).iterator();\n",
        "72": "      }\n",
        "73": "\n",
        "74": "      @Override\n",
        "75": "      public int size() {\n",
        "76": "        return IntMath.saturatedAdd(inEdgeMap.size() - selfLoopCount, outEdgeMap.size());\n",
        "77": "      }\n",
        "78": "\n",
        "79": "      @Override\n",
        "80": "      public boolean contains(Object obj) {\n",
        "81": "        return inEdgeMap.containsKey(obj) || outEdgeMap.containsKey(obj);\n",
        "82": "      }\n",
        "83": "    };\n",
        "104": "  public N removeInEdge(Object edge, boolean isSelfLoop) {\n",
        "106": "    if (isSelfLoop) {\n",
        "107": "      selfLoopCount--;\n",
        "108": "      checkState(selfLoopCount >= 0);\n",
        "109": "    }\n",
        "120": "  public boolean addInEdge(E edge, N node, boolean isSelfLoop) {\n",
        "123": "    if (isSelfLoop) {\n",
        "124": "      selfLoopCount++;\n",
        "125": "      checkState(selfLoopCount >= 1);\n",
        "126": "    }\n",
        "129": "      checkState(node.equals(previousNode));\n",
        "141": "      checkState(node.equals(previousNode));\n"
    },
    "removed": {
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "46": "  protected AbstractDirectedNodeConnections(Map<E, N> inEdgeMap, Map<E, N> outEdgeMap) {\n",
        "58": "    return Sets.union(inEdges(), outEdges());\n",
        "79": "  public N removeInEdge(Object edge) {\n",
        "91": "  public boolean addInEdge(E edge, N node) {\n",
        "96": "      checkArgument(node.equals(previousNode));\n",
        "108": "      checkArgument(node.equals(previousNode));\n"
    }
}