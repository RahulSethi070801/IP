{"id": "6e5d50950189567224dcb57df026f08b0709a3ba", "code": [{"0": "guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue\n", "    implements BlockingQueue<E> {\n"]}, "removed": {"2": ["        implements BlockingQueue<E> {\n"]}, "added_lines": {"1": [20], "2": [63, 65]}, "removed_lines": {"2": [63]}}, {"1": "guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n", "\n"], "2": ["@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n"]}, "removed": {}, "added_lines": {"1": [21, 22], "2": [89]}, "removed_lines": {}}, {"2": "guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n", "\n"], "2": ["    @CanIgnoreReturnValue\n", "\n", "    @CanIgnoreReturnValue\n", "    @CanIgnoreReturnValue\n", "    @Override\n", "    public boolean set(T t) {\n", "\n", "    @CanIgnoreReturnValue\n", "    @Override\n", "    public boolean setException(Throwable t) {\n", "    @CanIgnoreReturnValue\n", "    @Override\n", "    public boolean set(T t) {\n", "\n", "    @CanIgnoreReturnValue\n", "    @Override\n", "    public boolean setException(Throwable t) {\n"], "3": ["    @CanIgnoreReturnValue\n", "    public V get(long timeout, TimeUnit unit)\n", "        throws InterruptedException, TimeoutException, ExecutionException {\n"], "4": ["    @CanIgnoreReturnValue\n"], "5": ["    @CanIgnoreReturnValue\n"], "6": ["    @CanIgnoreReturnValue\n"], "7": ["    @CanIgnoreReturnValue\n"]}, "removed": {"2": ["    @Override public boolean set(T t) {\n", "    @Override public boolean setException(Throwable t) {\n", "    @Override public boolean set(T t) {\n", "    @Override public boolean setException(Throwable t) {\n"], "3": ["    public V get(long timeout, TimeUnit unit) throws InterruptedException,\n", "        TimeoutException, ExecutionException {\n"]}, "added_lines": {"1": [21, 22], "2": [39, 41, 42, 47, 48, 49, 52, 53, 54, 55, 62, 63, 64, 67, 68, 69, 70], "3": [134, 136, 137], "4": [156], "5": [172], "6": [226], "7": [244]}, "removed_lines": {"2": [42, 45, 52, 55], "3": [120, 121]}}, {"3": "guava-tests/test/com/google/common/util/concurrent/AbstractFutureCancellationCauseTest.java", "added": {"1": ["    // Load the \"normal\" copy of SettableFuture and related classes.\n", "    SettableFuture<?> unused = SettableFuture.create();\n"]}, "removed": {"1": ["    SettableFuture.create();\n"]}, "added_lines": {"1": [35, 36]}, "removed_lines": {"1": [35]}}, {"4": "guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java", "added": {"1": ["  private static void awaitUnchecked(final CyclicBarrier barrier) {\n", "      barrier.await();\n"]}, "removed": {"1": ["  private static int awaitUnchecked(final CyclicBarrier barrier) {\n", "      return barrier.await();\n"]}, "added_lines": {"1": [609, 611]}, "removed_lines": {"1": [609, 611]}}, {"5": "guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java", "added": {"1": ["      Future<?> unused =\n", "          schedule.schedule(\n", "              null,\n", "              new ScheduledThreadPoolExecutor(1) {\n", "                @Override\n", "                public ScheduledFuture<?> scheduleAtFixedRate(\n", "                    Runnable command, long initialDelay, long period, TimeUnit unit) {\n", "                  assertSingleCallWithCorrectParameters(command, initialDelay, delay, unit);\n", "                  return null;\n", "                }\n", "              },\n", "              testRunnable);\n", "      Future<?> unused =\n", "          schedule.schedule(\n", "              null,\n", "              new ScheduledThreadPoolExecutor(10) {\n", "                @Override\n", "                public ScheduledFuture<?> scheduleWithFixedDelay(\n", "                    Runnable command, long initialDelay, long delay, TimeUnit unit) {\n", "                  assertSingleCallWithCorrectParameters(command, initialDelay, delay, unit);\n", "                  return null;\n", "                }\n", "              },\n", "              testRunnable);\n"]}, "removed": {"1": ["      schedule.schedule(null, new ScheduledThreadPoolExecutor(1) {\n", "        @Override\n", "        public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay,\n", "            long period, TimeUnit unit) {\n", "          assertSingleCallWithCorrectParameters(command, initialDelay, delay, unit);\n", "          return null;\n", "        }\n", "      }, testRunnable);\n", "      schedule.schedule(null, new ScheduledThreadPoolExecutor(10) {\n", "        @Override\n", "        public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay,\n", "            long delay, TimeUnit unit) {\n", "          assertSingleCallWithCorrectParameters(command, initialDelay, delay, unit);\n", "          return null;\n", "        }\n", "      }, testRunnable);\n"]}, "added_lines": {"1": [357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385]}, "removed_lines": {"1": [357, 358, 359, 360, 361, 362, 363, 364, 370, 371, 372, 373, 374, 375, 376, 377]}}, {"6": "guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java", "added": {"1": ["    /*\n", "     * Set up a RecordingListener to perform its built-in assertions, even though we won't look at\n", "     * its state history.\n", "     */\n", "    RecordingListener unused = RecordingListener.record(service);\n"]}, "removed": {"1": ["    RecordingListener.record(service);\n"]}, "added_lines": {"1": [460, 461, 462, 463, 464]}, "removed_lines": {"1": [460]}}, {"7": "guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java", "added": {"1": ["    double[] a = null;\n", "      new AtomicDoubleArray(a);\n", "      fail();\n"], "2": ["      fail();\n"], "3": ["      fail();\n"], "4": ["        fail();\n", "        fail();\n", "        fail();\n", "        fail();\n", "        fail();\n", "        fail();\n", "        fail();\n"]}, "removed": {"1": ["      double[] a = null;\n", "      AtomicDoubleArray aa = new AtomicDoubleArray(a);\n", "      shouldThrow();\n"], "2": ["      shouldThrow();\n"], "3": ["      shouldThrow();\n"], "4": ["        shouldThrow();\n", "        shouldThrow();\n", "        shouldThrow();\n", "        shouldThrow();\n", "        shouldThrow();\n", "        shouldThrow();\n", "        shouldThrow();\n"]}, "added_lines": {"1": [70, 72, 73], "2": [96], "3": [108], "4": [120, 124, 128, 132, 136, 140, 144]}, "removed_lines": {"1": [71, 72, 73], "2": [96], "3": [108], "4": [120, 124, 128, 132, 136, 140, 144]}}, {"8": "guava-tests/test/com/google/common/util/concurrent/FuturesTest.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["    @CanIgnoreReturnValue\n"], "3": ["      ListenableFuture<Object> unused = Futures.transform(root, identity());\n"], "4": ["      ListenableFuture<Object> unused = Futures.transformAsync(root, asyncIdentity());\n"], "5": ["  @CanIgnoreReturnValue\n"], "6": ["    @CanIgnoreReturnValue\n", "    @CanIgnoreReturnValue\n"]}, "removed": {"2": ["\n"], "3": ["      Futures.transform(root, identity());\n"], "4": ["      Futures.transformAsync(root, asyncIdentity());\n"], "6": ["\n"]}, "added_lines": {"1": [47], "2": [197], "3": [299], "4": [540], "5": [2628], "6": [3487, 3493]}, "removed_lines": {"2": [196], "3": [298], "4": [539], "6": [3485]}}, {"9": "guava-tests/test/com/google/common/util/concurrent/GeneratedMonitorTest.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [24], "2": [712]}, "removed_lines": {}}, {"10": "guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java", "added": {"1": ["import java.util.concurrent.ScheduledExecutorService;\n"], "2": ["      fail();\n"], "3": ["      fail();\n"], "4": ["      fail();\n"], "5": ["      fail();\n"], "6": ["    ExecutorService unused = application.getExitingExecutorService(executor);\n"], "7": ["    ScheduledExecutorService unused = application.getExitingScheduledExecutorService(executor);\n"]}, "removed": {"2": ["      shouldThrow();\n"], "3": ["      shouldThrow();\n"], "4": ["      shouldThrow();\n"], "5": ["      shouldThrow();\n"], "6": ["    application.getExitingExecutorService(executor);\n"], "7": ["    application.getExitingScheduledExecutorService(executor);\n"]}, "added_lines": {"1": [71], "2": [469], "3": [483], "4": [504], "5": [520], "6": [601], "7": [628]}, "removed_lines": {"2": [468], "3": [482], "4": [503], "5": [519], "6": [600], "7": [627]}}, {"11": "guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java", "added": {"1": ["    RateLimiter unused;\n", "    unused = RateLimiter.create(1.0, 1, NANOSECONDS);\n", "    unused = RateLimiter.create(1.0, 0, NANOSECONDS);\n"]}, "removed": {"1": ["    RateLimiter.create(1.0, 1, NANOSECONDS);\n", "    RateLimiter.create(1.0, 0, NANOSECONDS);\n"]}, "added_lines": {"1": [170, 171, 172]}, "removed_lines": {"1": [170, 171]}}, {"12": "guava-tests/test/com/google/common/util/concurrent/StripedTest.java", "added": {"1": ["        Object unused = striped.getAt(Integer.MAX_VALUE - i);\n"]}, "removed": {"1": ["        striped.getAt(Integer.MAX_VALUE - i);\n"]}, "added_lines": {"1": [204]}, "removed_lines": {"1": [204]}}, {"13": "guava-tests/test/com/google/common/util/concurrent/ThreadFactoryBuilderTest.java", "added": {"1": ["    ThreadFactory unused;\n", "    unused = builder.build();  // this is allowed\n", "    unused = builder.build();  // this is *also* allowed\n"]}, "removed": {"1": ["    builder.build();  // this is allowed\n", "    builder.build();  // this is *also* allowed\n"]}, "added_lines": {"1": [167, 168, 169]}, "removed_lines": {"1": [167, 168]}}, {"14": "guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java", "added": {"1": ["  private void awaitUnchecked(CyclicBarrier barrier) {\n", "      barrier.await();\n"]}, "removed": {"1": ["  private int awaitUnchecked(CyclicBarrier barrier) {\n", "      return barrier.await();\n"]}, "added_lines": {"1": [165, 167]}, "removed_lines": {"1": [165, 167]}}, {"15": "guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  // We might like @ForOverride here, but some subclasses invoke this from their get() methods.\n"], "3": ["  @CanIgnoreReturnValue\n"], "4": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [19], "2": [58], "3": [73], "4": [101]}, "removed_lines": {}}, {"16": "guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [20], "2": [202], "3": [212]}, "removed_lines": {}}, {"17": "guava/src/com/google/common/util/concurrent/AbstractFuture.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["    @CanIgnoreReturnValue\n", "    @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"], "4": ["  @CanIgnoreReturnValue\n"], "5": ["  @CanIgnoreReturnValue\n"], "6": ["  @CanIgnoreReturnValue\n"], "7": ["  @CanIgnoreReturnValue\n"], "8": ["  @CanIgnoreReturnValue\n"], "9": ["          boolean unused = ATOMIC_HELPER.casValue(this, valueToSet, failure);\n"], "10": ["  @CanIgnoreReturnValue\n"]}, "removed": {"9": ["          ATOMIC_HELPER.casValue(this, valueToSet, failure);\n"]}, "added_lines": {"1": [24], "2": [79, 85], "3": [360], "4": [446], "5": [524], "6": [620], "7": [642], "8": [674], "9": [699], "10": [720]}, "removed_lines": {"9": [690]}}, {"18": "guava/src/com/google/common/util/concurrent/AbstractIdleService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [20], "2": [154], "3": [164]}, "removed_lines": {}}, {"19": "guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [19], "2": [39]}, "removed_lines": {}}, {"20": "guava/src/com/google/common/util/concurrent/AbstractScheduledService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  // TODO(cpovirk): @ForOverride\n"], "3": ["  @CanIgnoreReturnValue\n"], "4": ["  @CanIgnoreReturnValue\n"], "5": ["    // TODO(cpovirk): @ForOverride\n"]}, "removed": {}, "added_lines": {"1": [24], "2": [306], "3": [398], "4": [408], "5": [610]}, "removed_lines": {}}, {"21": "guava/src/com/google/common/util/concurrent/AbstractService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [32], "2": [206], "3": [226]}, "removed_lines": {}}, {"22": "guava/src/com/google/common/util/concurrent/AggregateFuture.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["        // TODO(cpovirk): Think about whether we could/should use Verify to check this.\n", "        boolean unused = addCausalChain(seen, trustedGetException());\n"]}, "removed": {"3": ["        addCausalChain(seen, trustedGetException());\n"]}, "added_lines": {"1": [25], "2": [57], "3": [203, 204]}, "removed_lines": {"3": [201]}}, {"23": "guava/src/com/google/common/util/concurrent/AtomicDouble.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [21], "2": [168], "3": [187]}, "removed_lines": {}}, {"24": "guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [20], "2": [183], "3": [203]}, "removed_lines": {}}, {"25": "guava/src/com/google/common/util/concurrent/AtomicLongMap.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"], "4": ["  @CanIgnoreReturnValue\n"], "5": ["  @CanIgnoreReturnValue\n"], "6": ["  @CanIgnoreReturnValue\n"], "7": ["  @CanIgnoreReturnValue\n"], "8": ["  @CanIgnoreReturnValue\n"], "9": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [22], "2": [89], "3": [97], "4": [106], "5": [142], "6": [150], "7": [159], "8": [196], "9": [244]}, "removed_lines": {}}, {"26": "guava/src/com/google/common/util/concurrent/Callables.java", "added": {"1": ["            boolean unused = trySetName(oldName, currentThread);\n"], "2": ["            boolean unused = trySetName(oldName, currentThread);\n"]}, "removed": {"1": ["            trySetName(oldName, currentThread);\n"], "2": ["            trySetName(oldName, currentThread);\n"]}, "added_lines": {"1": [73], "2": [103]}, "removed_lines": {"1": [73], "2": [103]}}, {"27": "guava/src/com/google/common/util/concurrent/CheckedFuture.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [19], "2": [56]}, "removed_lines": {}}, {"28": "guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n"]}, "removed": {}, "added_lines": {"1": [31], "2": [168]}, "removed_lines": {}}, {"29": "guava/src/com/google/common/util/concurrent/FakeTimeLimiter.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [21], "2": [36]}, "removed_lines": {}}, {"30": "guava/src/com/google/common/util/concurrent/ForwardingBlockingQueue.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n"]}, "removed": {}, "added_lines": {"1": [19], "2": [36]}, "removed_lines": {}}, {"31": "guava/src/com/google/common/util/concurrent/ForwardingCheckedFuture.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n", "  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [20], "2": [43, 49]}, "removed_lines": {}}, {"32": "guava/src/com/google/common/util/concurrent/ForwardingExecutorService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n"]}, "removed": {}, "added_lines": {"1": [19], "2": [38]}, "removed_lines": {}}, {"33": "guava/src/com/google/common/util/concurrent/ForwardingFuture.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n"]}, "removed": {}, "added_lines": {"1": [20], "2": [37]}, "removed_lines": {}}, {"34": "guava/src/com/google/common/util/concurrent/ForwardingListenableFuture.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n"]}, "removed": {}, "added_lines": {"1": [19], "2": [33]}, "removed_lines": {}}, {"35": "guava/src/com/google/common/util/concurrent/ForwardingListeningExecutorService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n"]}, "removed": {}, "added_lines": {"1": [18], "2": [31]}, "removed_lines": {}}, {"36": "guava/src/com/google/common/util/concurrent/Futures.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "11": ["  @CanIgnoreReturnValue // TODO(kak): @CheckReturnValue\n"], "12": ["  @CanIgnoreReturnValue // TODO(kak): @CheckReturnValue\n"], "22": ["  @CanIgnoreReturnValue // TODO(cpovirk): Consider removing, especially if we provide run(Runnable)\n"], "23": ["    @CanIgnoreReturnValue\n"], "24": ["    @CanIgnoreReturnValue\n", "\n", "    /*\n", "     * TODO(cpovirk): Evaluate demand for a run(Runnable) version. Would it allow us to remove\n", "     * @CanIgnoreReturnValue from the call() methods above?\n", "     * https://github.com/google/guava/issues/2371\n", "     */\n"], "29": ["  @CanIgnoreReturnValue\n"], "30": ["  @CanIgnoreReturnValue\n"], "31": ["  @CanIgnoreReturnValue\n"]}, "removed": {"2": ["import javax.annotation.CheckReturnValue;\n"], "3": ["  @CheckReturnValue\n"], "4": ["  @CheckReturnValue\n"], "5": ["  @CheckReturnValue\n"], "6": ["  @CheckReturnValue\n"], "7": ["  @CheckReturnValue\n"], "8": ["  @CheckReturnValue\n"], "9": ["  @CheckReturnValue\n"], "10": ["  @CheckReturnValue\n"], "11": ["  // TODO(kak): @CheckReturnValue\n"], "12": ["  // TODO(kak): @CheckReturnValue\n"], "13": ["  @CheckReturnValue\n"], "14": ["  @CheckReturnValue\n"], "15": ["  @CheckReturnValue\n"], "16": ["  @CheckReturnValue\n"], "17": ["  @CheckReturnValue\n"], "18": ["  @CheckReturnValue\n"], "19": ["  @CheckReturnValue\n"], "20": ["  @CheckReturnValue\n"], "21": ["  @CheckReturnValue\n"], "25": ["  @CheckReturnValue\n"], "26": ["  @CheckReturnValue\n"], "27": ["  @CheckReturnValue\n"], "28": ["  @CheckReturnValue\n"]}, "added_lines": {"1": [34], "11": [363], "12": [434], "22": [849], "23": [901], "24": [910, 914, 915, 916, 917, 918, 919], "29": [1181], "30": [1230], "31": [1270]}, "removed_lines": {"2": [46], "3": [131], "4": [142], "5": [161], "6": [174], "7": [187], "8": [201], "9": [250], "10": [301], "11": [372], "12": [443], "13": [466], "14": [668], "15": [732], "16": [764], "17": [783], "18": [796], "19": [807], "20": [821], "21": [833], "25": [938], "26": [978], "27": [998], "28": [1019]}}, {"37": "guava/src/com/google/common/util/concurrent/FuturesGetChecked.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"], "4": ["  @CanIgnoreReturnValue\n"], "5": ["      Exception unused = newWithCause(exceptionClass, new Exception());\n"]}, "removed": {"5": ["      newWithCause(exceptionClass, new Exception());\n"]}, "added_lines": {"1": [25], "2": [49], "3": [57], "4": [76], "5": [226]}, "removed_lines": {"5": [222]}}, {"38": "guava/src/com/google/common/util/concurrent/ListeningExecutorService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [18], "2": [36]}, "removed_lines": {}}, {"39": "guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [19], "2": [35]}, "removed_lines": {}}, {"40": "guava/src/com/google/common/util/concurrent/MoreExecutors.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [31], "2": [956]}, "removed_lines": {}}, {"41": "guava/src/com/google/common/util/concurrent/RateLimiter.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"], "4": ["  private static void checkPermits(int permits) {\n"]}, "removed": {"4": ["  private static int checkPermits(int permits) {\n", "    return permits;\n"]}, "added_lines": {"1": [31], "2": [265], "3": [279], "4": [441]}, "removed_lines": {"4": [438, 440]}}, {"42": "guava/src/com/google/common/util/concurrent/Service.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [21], "2": [68], "3": [91]}, "removed_lines": {}}, {"43": "guava/src/com/google/common/util/concurrent/ServiceManager.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n"], "3": ["  @CanIgnoreReturnValue\n"]}, "removed": {}, "added_lines": {"1": [55], "2": [273], "3": [327]}, "removed_lines": {}}, {"44": "guava/src/com/google/common/util/concurrent/SettableFuture.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n", "  @Override\n", "  public boolean set(@Nullable V value) {\n", "  @CanIgnoreReturnValue\n", "  @Override\n", "  public boolean setException(Throwable throwable) {\n", "  @CanIgnoreReturnValue\n"]}, "removed": {"2": ["  @Override public boolean set(@Nullable V value) {\n", "  @Override public boolean setException(Throwable throwable) {\n"]}, "added_lines": {"1": [19], "2": [45, 46, 47, 51, 52, 53, 58]}, "removed_lines": {"2": [44, 48]}}, {"45": "guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["    InvocationHandler handler =\n", "        new InvocationHandler() {\n", "          public Object invoke(Object obj, final Method method, final Object[] args)\n", "              throws Throwable {\n", "            Callable<Object> callable =\n", "                new Callable<Object>() {\n", "                  @Override\n", "                  public Object call() throws Exception {\n", "                    try {\n", "                      return method.invoke(target, args);\n", "                    } catch (InvocationTargetException e) {\n", "                      throw throwCause(e, false);\n", "                    }\n", "                  }\n", "                };\n", "            return callWithTimeout(\n", "                callable, timeoutDuration, timeoutUnit, interruptibleMethods.contains(method));\n", "  @CanIgnoreReturnValue\n", "  public <T> T callWithTimeout(\n", "      Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit, boolean amInterruptible)\n", "      throws Exception {\n"]}, "removed": {"2": ["    InvocationHandler handler = new InvocationHandler() {\n", "      @Override\n", "      public Object invoke(Object obj, final Method method, final Object[] args)\n", "          throws Throwable {\n", "        Callable<Object> callable = new Callable<Object>() {\n", "          public Object call() throws Exception {\n", "            try {\n", "              return method.invoke(target, args);\n", "            } catch (InvocationTargetException e) {\n", "              throwCause(e, false);\n", "              throw new AssertionError(\"can't get here\");\n", "            }\n", "        return callWithTimeout(callable, timeoutDuration, timeoutUnit,\n", "            interruptibleMethods.contains(method));\n", "      }\n", "    };\n", "  public <T> T callWithTimeout(Callable<T> callable, long timeoutDuration,\n", "      TimeUnit timeoutUnit, boolean amInterruptible) throws Exception {\n"]}, "added_lines": {"1": [26], "2": [99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 123, 125, 126, 127]}, "removed_lines": {"2": [98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 122, 123]}}, {"46": "guava/src/com/google/common/util/concurrent/ThreadFactoryBuilder.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["import javax.annotation.CheckReturnValue;\n", "\n"], "3": ["@CanIgnoreReturnValue\n"], "4": ["  @CheckReturnValue\n"]}, "removed": {}, "added_lines": {"1": [23], "2": [31, 32], "3": [51], "4": [152]}, "removed_lines": {}}, {"47": "guava/src/com/google/common/util/concurrent/TimeLimiter.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue\n", "  <T> T callWithTimeout(\n", "      Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit, boolean interruptible)\n", "      throws Exception;\n"]}, "removed": {"2": ["  <T> T callWithTimeout(Callable<T> callable, long timeoutDuration,\n", "      TimeUnit timeoutUnit, boolean interruptible) throws Exception;\n"]}, "added_lines": {"1": [21], "2": [107, 108, 109, 110]}, "removed_lines": {"2": [106, 107]}}, {"48": "guava/src/com/google/common/util/concurrent/Uninterruptibles.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["  @CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n"], "3": ["  @CanIgnoreReturnValue\n", "  public static <V> V getUninterruptibly(Future<V> future) throws ExecutionException {\n"], "4": ["  @CanIgnoreReturnValue\n"]}, "removed": {"3": ["  public static <V> V getUninterruptibly(Future<V> future)\n", "      throws ExecutionException {\n"]}, "added_lines": {"1": [25], "2": [80], "3": [138, 139], "4": [169]}, "removed_lines": {"3": [136, 137]}}, {"49": "guava/src/com/google/common/util/concurrent/WrappingExecutorService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n"]}, "removed": {}, "added_lines": {"1": [24], "2": [48]}, "removed_lines": {}}, {"50": "guava/src/com/google/common/util/concurrent/WrappingScheduledExecutorService.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n"], "2": ["@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict.\n"]}, "removed": {}, "added_lines": {"1": [19], "2": [34]}, "removed_lines": {}}, {"51": "guava/src/com/google/common/util/concurrent/package-info.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n", " * <p>Commonly used types include {@link com.google.common.util.concurrent.ListenableFuture} and\n", " * {@link com.google.common.util.concurrent.Service}.\n", " * <p>Commonly used utilities include {@link com.google.common.util.concurrent.Futures}, {@link\n", " * <p>This package is a part of the open-source <a href=\"http://github.com/google/guava\">Guava</a>\n", " * library.\n", "@CheckReturnValue\n", "import javax.annotation.CheckReturnValue;\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " * <p>Commonly used types include {@link\n", " * com.google.common.util.concurrent.ListenableFuture} and {@link\n", " * com.google.common.util.concurrent.Service}.\n", " * <p>Commonly used utilities include {@link\n", " * com.google.common.util.concurrent.Futures}, {@link\n", " * <p>This package is a part of the open-source\n", " * <a href=\"http://github.com/google/guava\">Guava</a> library.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12, 18, 19, 21, 25, 26, 28, 32]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14, 20, 21, 22, 24, 25, 29, 30]}}]}
