{
    "addition": {
        "23": "import static com.google.common.graph.Graphs.reachableNodes;\n",
        "24": "import static com.google.common.graph.Graphs.transitiveClosure;\n",
        "89": "  @Test\n",
        "90": "  public void transitiveClosure_directedGraph() {\n",
        "91": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "92": "    directedGraph.putEdge(N1, N2);\n",
        "93": "    directedGraph.putEdge(N1, N3);\n",
        "94": "    directedGraph.putEdge(N2, N3);\n",
        "95": "    directedGraph.addNode(N4);\n",
        "96": "\n",
        "97": "    MutableGraph<Integer> expectedClosure = GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "98": "    expectedClosure.putEdge(N1, N1);\n",
        "99": "    expectedClosure.putEdge(N1, N2);\n",
        "100": "    expectedClosure.putEdge(N1, N3);\n",
        "101": "    expectedClosure.putEdge(N2, N2);\n",
        "102": "    expectedClosure.putEdge(N2, N3);\n",
        "103": "    expectedClosure.putEdge(N3, N3);\n",
        "104": "    expectedClosure.putEdge(N4, N4);\n",
        "105": "\n",
        "106": "    checkTransitiveClosure(directedGraph, expectedClosure);\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  @Test\n",
        "110": "  public void transitiveClosure_undirectedGraph() {\n",
        "111": "    MutableGraph<Integer> undirectedGraph =\n",
        "112": "        GraphBuilder.undirected().allowsSelfLoops(false).build();\n",
        "113": "    undirectedGraph.putEdge(N1, N2);\n",
        "114": "    undirectedGraph.putEdge(N1, N3);\n",
        "115": "    undirectedGraph.putEdge(N2, N3);\n",
        "116": "    undirectedGraph.addNode(N4);\n",
        "117": "\n",
        "118": "    MutableGraph<Integer> expectedClosure = GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "119": "    expectedClosure.putEdge(N1, N1);\n",
        "120": "    expectedClosure.putEdge(N1, N2);\n",
        "121": "    expectedClosure.putEdge(N1, N3);\n",
        "122": "    expectedClosure.putEdge(N2, N2);\n",
        "123": "    expectedClosure.putEdge(N2, N3);\n",
        "124": "    expectedClosure.putEdge(N3, N3);\n",
        "125": "    expectedClosure.putEdge(N4, N4);\n",
        "126": "\n",
        "127": "    checkTransitiveClosure(undirectedGraph, expectedClosure);\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  @Test\n",
        "131": "  public void transitiveClosure_directedPathGraph() {\n",
        "132": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "133": "    directedGraph.putEdge(N1, N2);\n",
        "134": "    directedGraph.putEdge(N2, N3);\n",
        "135": "    directedGraph.putEdge(N3, N4);\n",
        "136": "\n",
        "137": "    MutableGraph<Integer> expectedClosure = GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "138": "    expectedClosure.putEdge(N1, N1);\n",
        "139": "    expectedClosure.putEdge(N1, N2);\n",
        "140": "    expectedClosure.putEdge(N1, N3);\n",
        "141": "    expectedClosure.putEdge(N1, N4);\n",
        "142": "    expectedClosure.putEdge(N2, N2);\n",
        "143": "    expectedClosure.putEdge(N2, N3);\n",
        "144": "    expectedClosure.putEdge(N2, N4);\n",
        "145": "    expectedClosure.putEdge(N3, N3);\n",
        "146": "    expectedClosure.putEdge(N3, N4);\n",
        "147": "    expectedClosure.putEdge(N4, N4);\n",
        "148": "\n",
        "149": "    checkTransitiveClosure(directedGraph, expectedClosure);\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  @Test\n",
        "153": "  public void transitiveClosure_undirectedPathGraph() {\n",
        "154": "    MutableGraph<Integer> undirectedGraph =\n",
        "155": "        GraphBuilder.undirected().allowsSelfLoops(false).build();\n",
        "156": "    undirectedGraph.putEdge(N1, N2);\n",
        "157": "    undirectedGraph.putEdge(N2, N3);\n",
        "158": "    undirectedGraph.putEdge(N3, N4);\n",
        "159": "\n",
        "160": "    MutableGraph<Integer> expectedClosure = GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "161": "    expectedClosure.putEdge(N1, N1);\n",
        "162": "    expectedClosure.putEdge(N1, N2);\n",
        "163": "    expectedClosure.putEdge(N1, N3);\n",
        "164": "    expectedClosure.putEdge(N1, N4);\n",
        "165": "    expectedClosure.putEdge(N2, N2);\n",
        "166": "    expectedClosure.putEdge(N2, N3);\n",
        "167": "    expectedClosure.putEdge(N2, N4);\n",
        "168": "    expectedClosure.putEdge(N3, N3);\n",
        "169": "    expectedClosure.putEdge(N3, N4);\n",
        "170": "    expectedClosure.putEdge(N4, N4);\n",
        "171": "\n",
        "172": "    checkTransitiveClosure(undirectedGraph, expectedClosure);\n",
        "173": "  }\n",
        "174": "\n",
        "175": "  @Test\n",
        "176": "  public void transitiveClosure_directedCycleGraph() {\n",
        "177": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "178": "    directedGraph.putEdge(N1, N2);\n",
        "179": "    directedGraph.putEdge(N2, N3);\n",
        "180": "    directedGraph.putEdge(N3, N4);\n",
        "181": "    directedGraph.putEdge(N4, N1);\n",
        "182": "\n",
        "183": "    MutableGraph<Integer> expectedClosure = GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "184": "    expectedClosure.putEdge(N1, N1);\n",
        "185": "    expectedClosure.putEdge(N1, N2);\n",
        "186": "    expectedClosure.putEdge(N1, N3);\n",
        "187": "    expectedClosure.putEdge(N1, N4);\n",
        "188": "    expectedClosure.putEdge(N2, N1);\n",
        "189": "    expectedClosure.putEdge(N2, N2);\n",
        "190": "    expectedClosure.putEdge(N2, N3);\n",
        "191": "    expectedClosure.putEdge(N2, N4);\n",
        "192": "    expectedClosure.putEdge(N3, N1);\n",
        "193": "    expectedClosure.putEdge(N3, N2);\n",
        "194": "    expectedClosure.putEdge(N3, N3);\n",
        "195": "    expectedClosure.putEdge(N3, N4);\n",
        "196": "    expectedClosure.putEdge(N4, N1);\n",
        "197": "    expectedClosure.putEdge(N4, N2);\n",
        "198": "    expectedClosure.putEdge(N4, N3);\n",
        "199": "    expectedClosure.putEdge(N4, N4);\n",
        "200": "\n",
        "201": "    checkTransitiveClosure(directedGraph, expectedClosure);\n",
        "202": "  }\n",
        "203": "\n",
        "204": "  @Test\n",
        "205": "  public void transitiveClosure_undirectedCycleGraph() {\n",
        "206": "    MutableGraph<Integer> undirectedGraph =\n",
        "207": "        GraphBuilder.undirected().allowsSelfLoops(false).build();\n",
        "208": "    undirectedGraph.putEdge(N1, N2);\n",
        "209": "    undirectedGraph.putEdge(N2, N3);\n",
        "210": "    undirectedGraph.putEdge(N3, N4);\n",
        "211": "    undirectedGraph.putEdge(N4, N1);\n",
        "212": "\n",
        "213": "    MutableGraph<Integer> expectedClosure = GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "214": "    expectedClosure.putEdge(N1, N1);\n",
        "215": "    expectedClosure.putEdge(N1, N2);\n",
        "216": "    expectedClosure.putEdge(N1, N3);\n",
        "217": "    expectedClosure.putEdge(N1, N4);\n",
        "218": "    expectedClosure.putEdge(N2, N2);\n",
        "219": "    expectedClosure.putEdge(N2, N3);\n",
        "220": "    expectedClosure.putEdge(N2, N4);\n",
        "221": "    expectedClosure.putEdge(N3, N3);\n",
        "222": "    expectedClosure.putEdge(N3, N4);\n",
        "223": "    expectedClosure.putEdge(N4, N4);\n",
        "224": "\n",
        "225": "    checkTransitiveClosure(undirectedGraph, expectedClosure);\n",
        "226": "  }\n",
        "227": "\n",
        "579": "  private static <N> void checkTransitiveClosure(Graph<N> originalGraph, Graph<N> expectedClosure) {\n",
        "580": "    for (N node : originalGraph.nodes()) {\n",
        "581": "      assertThat(reachableNodes(originalGraph, node)).isEqualTo(expectedClosure.successors(node));\n",
        "582": "    }\n",
        "583": "    assertThat(transitiveClosure(originalGraph)).isEqualTo(expectedClosure);\n",
        "584": "  }\n",
        "585": "\n"
    },
    "removed": {}
}