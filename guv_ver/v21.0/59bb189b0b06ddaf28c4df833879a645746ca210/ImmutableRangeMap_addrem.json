{
    "addition": {
        "27": "import java.util.Collections;\n",
        "28": "import java.util.List;\n",
        "92": "    private final List<Map.Entry<Range<K>, V>> entries;\n",
        "95": "      this.entries = Lists.newArrayList();\n",
        "101": "     * @throws IllegalArgumentException if {@code range} is empty\n",
        "108": "      entries.add(Maps.immutableEntry(range, value));\n",
        "126": "     *\n",
        "127": "     * @throws IllegalArgumentException if any two ranges inserted into this builder overlap\n",
        "130": "      Collections.sort(entries, Range.RANGE_LEX_ORDERING.onKeys());\n",
        "132": "          new ImmutableList.Builder<Range<K>>(entries.size());\n",
        "133": "      ImmutableList.Builder<V> valuesBuilder = new ImmutableList.Builder<V>(entries.size());\n",
        "134": "      for (int i = 0; i < entries.size(); i++) {\n",
        "135": "        Range<K> range = entries.get(i).getKey();\n",
        "136": "        if (i > 0) {\n",
        "137": "          Range<K> prevRange = entries.get(i - 1).getKey();\n",
        "138": "          if (range.isConnected(prevRange) && !range.intersection(prevRange).isEmpty()) {\n",
        "139": "            throw new IllegalArgumentException(\n",
        "140": "                \"Overlapping ranges: range \" + prevRange + \" overlaps with entry \" + range);\n",
        "141": "          }\n",
        "142": "        }\n",
        "143": "        rangesBuilder.add(range);\n",
        "144": "        valuesBuilder.add(entries.get(i).getValue());\n"
    },
    "removed": {
        "89": "    private final RangeSet<K> keyRanges;\n",
        "90": "    private final RangeMap<K, V> rangeMap;\n",
        "93": "      this.keyRanges = TreeRangeSet.create();\n",
        "94": "      this.rangeMap = TreeRangeMap.create();\n",
        "100": "     * @throws IllegalArgumentException if {@code range} overlaps with any other ranges inserted\n",
        "101": "     *         into this builder, or if {@code range} is empty\n",
        "108": "      if (!keyRanges.complement().encloses(range)) {\n",
        "109": "        // it's an error case; we can afford an expensive lookup\n",
        "110": "        for (Entry<Range<K>, V> entry : rangeMap.asMapOfRanges().entrySet()) {\n",
        "111": "          Range<K> key = entry.getKey();\n",
        "112": "          if (key.isConnected(range) && !key.intersection(range).isEmpty()) {\n",
        "113": "            throw new IllegalArgumentException(\n",
        "114": "                \"Overlapping ranges: range \" + range + \" overlaps with entry \" + entry);\n",
        "115": "          }\n",
        "116": "        }\n",
        "117": "      }\n",
        "118": "      keyRanges.add(range);\n",
        "119": "      rangeMap.put(range, value);\n",
        "125": "     *\n",
        "126": "     * @throws IllegalArgumentException if any of the ranges in {@code rangeMap} overlap with ranges\n",
        "127": "     *         already in this builder\n",
        "142": "      Map<Range<K>, V> map = rangeMap.asMapOfRanges();\n",
        "144": "          new ImmutableList.Builder<Range<K>>(map.size());\n",
        "145": "      ImmutableList.Builder<V> valuesBuilder = new ImmutableList.Builder<V>(map.size());\n",
        "146": "      for (Entry<Range<K>, V> entry : map.entrySet()) {\n",
        "147": "        rangesBuilder.add(entry.getKey());\n",
        "148": "        valuesBuilder.add(entry.getValue());\n"
    }
}