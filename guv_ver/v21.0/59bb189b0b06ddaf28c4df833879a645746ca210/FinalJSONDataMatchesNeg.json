[{"func":{"oldfunccode":"59bb189b0b06ddaf28c4df833879a645746ca210/Codes_neg/Match_oldfunccode_59bb189b0b06ddaf28c4df833879a645746ca210_1.txt","newfunccode":"59bb189b0b06ddaf28c4df833879a645746ca210/Codes_neg/Match_newfunccode_59bb189b0b06ddaf28c4df833879a645746ca210_1.txt","newdoc":"","newJdoc":"59bb189b0b06ddaf28c4df833879a645746ca210/Codes_neg/Match_newfuncnewJdoc_59bb189b0b06ddaf28c4df833879a645746ca210_1.txt","olddoc":"","oldJdoc":"59bb189b0b06ddaf28c4df833879a645746ca210/Codes_neg/Match_oldfuncoldJdoc_59bb189b0b06ddaf28c4df833879a645746ca210_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/59bb189b0b06ddaf28c4df833879a645746ca210/ImmutableRangeMap","pathinproj":"guava/src/com/google/common/collect/ImmutableRangeMap.java","addlines":[130,132,133,134,135,136,137,138,139,140,141,142,143,144],"dellines":[144,145,146,147,148,142],"addcode":["      Collections.sort(entries, Range.RANGE_LEX_ORDERING.onKeys());\n","          new ImmutableList.Builder<Range<K>>(entries.size());\n","      ImmutableList.Builder<V> valuesBuilder = new ImmutableList.Builder<V>(entries.size());\n","      for (int i = 0; i < entries.size(); i++) {\n","        Range<K> range = entries.get(i).getKey();\n","        if (i > 0) {\n","          Range<K> prevRange = entries.get(i - 1).getKey();\n","          if (range.isConnected(prevRange) && !range.intersection(prevRange).isEmpty()) {\n","            throw new IllegalArgumentException(\n","                \"Overlapping ranges: range \" + prevRange + \" overlaps with entry \" + range);\n","          }\n","        }\n","        rangesBuilder.add(range);\n","        valuesBuilder.add(entries.get(i).getValue());\n"],"delcode":["      Map<Range<K>, V> map = rangeMap.asMapOfRanges();\n","          new ImmutableList.Builder<Range<K>>(map.size());\n","      ImmutableList.Builder<V> valuesBuilder = new ImmutableList.Builder<V>(map.size());\n","      for (Entry<Range<K>, V> entry : map.entrySet()) {\n","        rangesBuilder.add(entry.getKey());\n","        valuesBuilder.add(entry.getValue());\n"],"methodSig":"public ImmutableRangeMap<K, V> build()"},"doc":{"oldfunccode":"59bb189b0b06ddaf28c4df833879a645746ca210/Codes_neg/Match_olddocfunccode_59bb189b0b06ddaf28c4df833879a645746ca210_1.txt","newfunccode":"59bb189b0b06ddaf28c4df833879a645746ca210/Codes_neg/Match_newdocfunccode_59bb189b0b06ddaf28c4df833879a645746ca210_1.txt","newdoc":"","newJdoc":"59bb189b0b06ddaf28c4df833879a645746ca210/Codes_neg/Match_newdocnewJdoc_59bb189b0b06ddaf28c4df833879a645746ca210_1.txt","olddoc":"","oldJdoc":"59bb189b0b06ddaf28c4df833879a645746ca210/Codes_neg/Match_olddocJdoc_59bb189b0b06ddaf28c4df833879a645746ca210_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/59bb189b0b06ddaf28c4df833879a645746ca210/ImmutableRangeMap","pathinproj":"guava/src/com/google/common/collect/ImmutableRangeMap.java","addlines":[],"dellines":[125,126,127],"addcode":[],"delcode":["     *\n","     * @throws IllegalArgumentException if any of the ranges in {@code rangeMap} overlap with ranges\n","     *         already in this builder\n"],"methodSig":"public Builder<K, V> putAll(RangeMap<K, ? extends V> rangeMap)"},"id":1,"flag":1,"commit":"59bb189b0b06ddaf28c4df833879a645746ca210"}]