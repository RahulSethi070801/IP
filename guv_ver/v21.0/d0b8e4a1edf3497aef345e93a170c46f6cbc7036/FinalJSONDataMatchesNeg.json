[{"func":{"oldfunccode":"d0b8e4a1edf3497aef345e93a170c46f6cbc7036/Codes_neg/Match_oldfunccode_d0b8e4a1edf3497aef345e93a170c46f6cbc7036_1.txt","newfunccode":"d0b8e4a1edf3497aef345e93a170c46f6cbc7036/Codes_neg/Match_newfunccode_d0b8e4a1edf3497aef345e93a170c46f6cbc7036_1.txt","newdoc":" Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to Endpoints mapping).\n","newJdoc":"","olddoc":" Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to Endpoints mapping).\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/d0b8e4a1edf3497aef345e93a170c46f6cbc7036/AbstractNetwork","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[131,132,124,125,126],"dellines":[128,123],"addcode":["        Set<E> edges = edgesConnecting(nodeA, nodeB);\n","        checkArgument(!edges.isEmpty(), EDGE_CONNECTING_NOT_IN_GRAPH, nodeA, nodeB);\n","        return edges;\n","        Set<E> edges = edgesConnecting(nodeA, nodeB);\n","        return edges.isEmpty() ? defaultValue : edges;\n"],"delcode":["        return checkNotNull(edgesConnecting(nodeA, nodeB));\n","        return checkNotNull(edgesConnecting(nodeA, nodeB));\n"],"methodSig":"public Graph<N, Set<E>> asGraph()"},"doc":{"oldfunccode":"d0b8e4a1edf3497aef345e93a170c46f6cbc7036/Codes_neg/Match_olddocfunccode_d0b8e4a1edf3497aef345e93a170c46f6cbc7036_1.txt","newfunccode":"d0b8e4a1edf3497aef345e93a170c46f6cbc7036/Codes_neg/Match_newdocfunccode_d0b8e4a1edf3497aef345e93a170c46f6cbc7036_1.txt","newdoc":"","newJdoc":"d0b8e4a1edf3497aef345e93a170c46f6cbc7036/Codes_neg/Match_newdocnewJdoc_d0b8e4a1edf3497aef345e93a170c46f6cbc7036_1.txt","olddoc":"","oldJdoc":"d0b8e4a1edf3497aef345e93a170c46f6cbc7036/Codes_neg/Match_olddocJdoc_d0b8e4a1edf3497aef345e93a170c46f6cbc7036_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/d0b8e4a1edf3497aef345e93a170c46f6cbc7036/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[114],"dellines":[114],"addcode":["   * node B if the set is non-empty, otherwise, it will throw {@link IllegalArgumentException}.\n"],"delcode":["   * node B. It will return the empty set if there are no edges connecting A to B.\n"],"methodSig":" Graph<N, Set<E>> asGraph()"},"id":1,"flag":1,"commit":"d0b8e4a1edf3497aef345e93a170c46f6cbc7036"}]