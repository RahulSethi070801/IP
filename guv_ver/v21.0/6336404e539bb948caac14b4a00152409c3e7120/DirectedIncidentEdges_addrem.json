{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.base.MoreObjects;\n",
        "22": "import com.google.common.base.Objects;\n",
        "23": "import com.google.common.collect.ImmutableSet;\n",
        "24": "\n",
        "25": "import java.util.LinkedHashSet;\n",
        "26": "import java.util.Set;\n",
        "27": "\n",
        "28": "import javax.annotation.Nullable;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * A class representing the edges incident to a node in a directed graph.\n",
        "32": " *\n",
        "33": " * @author Joshua O'Madadhain\n",
        "34": " * @param <E> Edge parameter type\n",
        "35": " */\n",
        "36": "final class DirectedIncidentEdges<E> {\n",
        "37": "\n",
        "38": "  private final Set<E> inEdges;\n",
        "39": "  private final Set<E> outEdges;\n",
        "40": "\n",
        "41": "  private DirectedIncidentEdges(Set<E> inEdges, Set<E> outEdges) {\n",
        "42": "    this.inEdges = checkNotNull(inEdges, \"inEdges\");\n",
        "43": "    this.outEdges = checkNotNull(outEdges, \"outEdges\");\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  static <E> DirectedIncidentEdges<E> of() {\n",
        "47": "    return new DirectedIncidentEdges<E>(new LinkedHashSet<E>(), new LinkedHashSet<E>());\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  static <E> DirectedIncidentEdges<E> ofImmutable(Set<E> inEdges, Set<E> outEdges) {\n",
        "51": "    return new DirectedIncidentEdges<E>(ImmutableSet.copyOf(inEdges),\n",
        "52": "        ImmutableSet.copyOf(outEdges));\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  Set<E> inEdges() {\n",
        "56": "    return inEdges;\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  Set<E> outEdges() {\n",
        "60": "    return outEdges;\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  @Override\n",
        "64": "  public int hashCode() {\n",
        "65": "    return Objects.hashCode(inEdges, outEdges);\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  @Override\n",
        "69": "  public boolean equals(@Nullable Object object) {\n",
        "70": "    if (object instanceof DirectedIncidentEdges) {\n",
        "71": "      DirectedIncidentEdges<?> that = (DirectedIncidentEdges<?>) object;\n",
        "72": "      return this.inEdges.equals(that.inEdges)\n",
        "73": "          && this.outEdges.equals(that.outEdges);\n",
        "74": "    }\n",
        "75": "    return false;\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  @Override\n",
        "79": "  public String toString() {\n",
        "80": "    return MoreObjects.toStringHelper(this)\n",
        "81": "        .add(\"inEdges\", inEdges)\n",
        "82": "        .add(\"outEdges\", outEdges)\n",
        "83": "        .toString();\n",
        "84": "  }\n",
        "85": "}\n"
    },
    "removed": {}
}