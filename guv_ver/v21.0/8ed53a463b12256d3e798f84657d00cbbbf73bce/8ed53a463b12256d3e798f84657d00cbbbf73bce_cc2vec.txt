{"id": "8ed53a463b12256d3e798f84657d00cbbbf73bce", "code": [{"0": "guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java", "added": {"1": ["  @Override\n", "  @Test\n", "  public void incidentNodes_oneEdge() {\n", "    addEdge(E12, N1, N2);\n", "    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2).inOrder();\n", "  }\n", "\n"]}, "removed": {}, "added_lines": {"1": [67, 68, 69, 70, 71, 72, 73]}, "removed_lines": {}}, {"1": "guava-tests/test/com/google/common/graph/ImmutableDirectedMultigraphTest.java", "added": {"1": ["  @Test\n"], "2": ["  @Test\n"]}, "removed": {}, "added_lines": {"1": [55], "2": [63]}, "removed_lines": {}}, {"2": "guava-tests/test/com/google/common/graph/ImmutableUndirectedMultigraphTest.java", "added": {"1": ["  @Test\n"], "2": ["  @Test\n"]}, "removed": {}, "added_lines": {"1": [55], "2": [64]}, "removed_lines": {}}, {"3": "guava/src/com/google/common/graph/DirectedGraph.java", "added": {"1": ["import com.google.errorprone.annotations.CanIgnoreReturnValue;\n", "\n", "import java.util.Set;\n"], "2": ["\n", "  /**\n", "   * {@inheritDoc}\n", "   *\n", "   * <p>If {@code edge} is not a self-loop, the iteration order will be\n", "   * {@code [source(edge), target(edge)]}.\n", "   *\n", "   */\n", "  @Override\n", "  Set<N> incidentNodes(Object edge);\n", "\n", "  /**\n", "   * {@inheritDoc}\n", "   *\n", "   * <p>The {@linkplain #source(Object) source} and {@linkplain #target(Object) target}\n", "   * of the edges returned must be {@code source} and {@code target}, respectively.\n", "   *\n", "   */\n", "  @Override\n", "  Set<E> edgesConnecting(Object source, Object target);\n", "\n", "  /**\n", "   * {@inheritDoc}\n", "   *\n", "   * <p>{@code edge} is an outgoing edge of {@code source} and an incoming edge of {@code target}.\n", "   */\n", "  @Override\n", "  @CanIgnoreReturnValue\n", "  boolean addEdge(E edge, N source, N target);\n"]}, "removed": {}, "added_lines": {"1": [20, 21, 22], "2": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75]}, "removed_lines": {}}, {"4": "guava/src/com/google/common/graph/Graph.java", "added": {"1": ["   * <p>If {@code edge} is a self-loop, the returned set will only have a single node.\n", "   *\n"]}, "removed": {"2": ["   * <p>If the graph is directed, the {@linkplain DirectedGraph#source(Object) source} and\n", "   * {@linkplain DirectedGraph#target(Object) target} of the edges returned must be {@code node1}\n", "   * and {@code node2}, respectively.\n", "   *\n"], "3": ["   * <p>If the graph is directed, {@code node1} is {@code edge}'s source,\n", "   * {@code node2} is {@code edge}'s target, and {@code edge} is an outgoing edge of\n", "   * {@code node1} and an incoming edge of {@code node2}.\n", "   *\n"]}, "added_lines": {"1": [229, 230]}, "removed_lines": {"2": [256, 257, 258, 259], "3": [357, 358, 359, 360]}}]}
