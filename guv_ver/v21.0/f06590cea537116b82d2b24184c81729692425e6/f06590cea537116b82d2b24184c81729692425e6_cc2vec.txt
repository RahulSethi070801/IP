{"id": "f06590cea537116b82d2b24184c81729692425e6", "code": [{"0": "guava/src/com/google/common/net/HostAndPort.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" *\n"], "3": [" * <li>example.com\n", " * <li>example.com:80\n", " * <li>192.0.2.1\n", " * <li>192.0.2.1:80\n", " * <li>[2001:db8::1] - {@link #getHostText()} omits brackets\n", " * <li>[2001:db8::1]:80 - {@link #getHostText()} omits brackets\n", " * <li>2001:db8::1 - Use {@link #requireBracketsForIPv6()} to prohibit this\n", " * <p>Note that this is not an exhaustive list, because these methods are only concerned with\n", " * brackets, colons, and port numbers. Full validation of the host field (if desired) is the\n", " * caller's responsibility.\n"], "4": ["   * Returns the portion of this {@code HostAndPort} instance that should represent the hostname or\n", "   * IPv4/IPv6 literal.\n", "   * <p>A successful parse does not imply any degree of sanity in this field. For additional\n", "   * validation, see the {@link HostSpecifier} class.\n"], "5": ["   * @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)}\n", "   *     to prevent this from occurring.\n"], "6": ["   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to\n", "   * prohibit these.\n", "   * @param host the host string to parse. Must not contain a port number.\n", "   * @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out\n", "   *     of range.\n"], "7": ["   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to\n", "   * prohibit these.\n", "   * @param host the host-only string to parse. Must not contain a port number.\n"], "8": ["   * Note that the host-only formats will leave the port field undefined. You can use\n", "   * {@link #withDefaultPort(int)} to patch in a default value.\n"], "9": ["        // Exactly 1 colon. Split into host:port.\n", "        // 0 or 2+ colons. Bare hostname or IPv6 literal.\n"], "10": ["    checkArgument(\n", "        hostPortString.charAt(0) == '[',\n", "        \"Bracketed host-port string must start with a bracket: %s\",\n", "        hostPortString);\n", "    checkArgument(\n", "        colonIndex > -1 && closeBracketIndex > colonIndex,\n", "        \"Invalid bracketed host/port: %s\",\n", "        hostPortString);\n", "      return new String[] {host, \"\"};\n", "      checkArgument(\n", "          hostPortString.charAt(closeBracketIndex + 1) == ':',\n", "          \"Only a colon may follow a close bracket: %s\",\n", "          hostPortString);\n", "        checkArgument(\n", "            Character.isDigit(hostPortString.charAt(i)),\n", "            \"Port must be numeric: %s\",\n", "            hostPortString);\n", "      return new String[] {host, hostPortString.substring(closeBracketIndex + 2)};\n", "   * You can chain this after {@link #fromString(String)} to include a port in case the port was\n", "   * omitted from the input string. If a port was already provided, then this method is a no-op.\n"], "11": ["   * <p>URI formatting requires that IPv6 literals be surrounded by brackets, like \"[2001:db8::1]\".\n", "   * Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and\n", "   * disallow IPv6 literals that don't contain these brackets.\n", "   * <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To\n", "   * perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)}\n", "   * method.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "3": [" *   <li>example.com\n", " *   <li>example.com:80\n", " *   <li>192.0.2.1\n", " *   <li>192.0.2.1:80\n", " *   <li>[2001:db8::1]     - {@link #getHostText()} omits brackets\n", " *   <li>[2001:db8::1]:80  - {@link #getHostText()} omits brackets\n", " *   <li>2001:db8::1       - Use {@link #requireBracketsForIPv6()} to prohibit this\n", " * <p>Note that this is not an exhaustive list, because these methods are only\n", " * concerned with brackets, colons, and port numbers.  Full validation of the\n", " * host field (if desired) is the caller's responsibility.\n"], "4": ["   * Returns the portion of this {@code HostAndPort} instance that should\n", "   * represent the hostname or IPv4/IPv6 literal.\n", "   * <p>A successful parse does not imply any degree of sanity in this field.\n", "   * For additional validation, see the {@link HostSpecifier} class.\n"], "5": ["   * @throws IllegalStateException if no port is defined.  You can use\n", "   *         {@link #withDefaultPort(int)} to prevent this from occurring.\n"], "6": ["   * <p>Note: Non-bracketed IPv6 literals are allowed.\n", "   * Use {@link #requireBracketsForIPv6()} to prohibit these.\n", "   * @param host the host string to parse.  Must not contain a port number.\n", "   * @throws IllegalArgumentException if {@code host} contains a port number,\n", "   *     or {@code port} is out of range.\n"], "7": ["   * <p>Note: Non-bracketed IPv6 literals are allowed.\n", "   * Use {@link #requireBracketsForIPv6()} to prohibit these.\n", "   * @param host the host-only string to parse.  Must not contain a port number.\n"], "8": ["   * Note that the host-only formats will leave the port field undefined.  You\n", "   * can use {@link #withDefaultPort(int)} to patch in a default value.\n"], "9": ["        // Exactly 1 colon.  Split into host:port.\n", "        // 0 or 2+ colons.  Bare hostname or IPv6 literal.\n"], "10": ["    checkArgument(hostPortString.charAt(0) == '[',\n", "        \"Bracketed host-port string must start with a bracket: %s\", hostPortString);\n", "    checkArgument(colonIndex > -1 && closeBracketIndex > colonIndex,\n", "        \"Invalid bracketed host/port: %s\", hostPortString);\n", "      return new String[] { host, \"\" };\n", "      checkArgument(hostPortString.charAt(closeBracketIndex + 1) == ':',\n", "          \"Only a colon may follow a close bracket: %s\", hostPortString);\n", "        checkArgument(Character.isDigit(hostPortString.charAt(i)),\n", "            \"Port must be numeric: %s\", hostPortString);\n", "      return new String[] { host, hostPortString.substring(closeBracketIndex + 2) };\n", "   * You can chain this after {@link #fromString(String)} to include a port in\n", "   * case the port was omitted from the input string.  If a port was already\n", "   * provided, then this method is a no-op.\n"], "11": ["   * <p>URI formatting requires that IPv6 literals be surrounded by brackets,\n", "   * like \"[2001:db8::1]\".  Chain this call after {@link #fromString(String)}\n", "   * to increase the strictness of the parser, and disallow IPv6 literals\n", "   * that don't contain these brackets.\n", "   * <p>Note that this parser identifies IPv6 literals solely based on the\n", "   * presence of a colon.  To perform actual validation of IP addresses, see\n", "   * the {@link InetAddresses#forString(String)} method.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [35], "3": [47, 48, 49, 50, 51, 52, 53, 56, 57, 58], "4": [86, 87, 89, 90], "5": [105, 106], "6": [123, 124, 126, 129, 130], "7": [142, 143, 145], "8": [159, 160], "9": [179, 183], "10": [215, 216, 217, 218, 221, 222, 223, 224, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 247, 248], "11": [264, 265, 266, 268, 269, 270]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "3": [48, 49, 50, 51, 52, 53, 54, 57, 58, 59], "4": [87, 88, 90, 91], "5": [106, 107], "6": [124, 125, 127, 130, 131], "7": [143, 144, 146], "8": [160, 161], "9": [180, 184], "10": [216, 217, 220, 221, 225, 227, 228, 230, 231, 233, 240, 241, 242], "11": [258, 259, 260, 261, 263, 264, 265]}}, {"1": "guava/src/com/google/common/net/HostSpecifier.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * A syntactically valid host specifier, suitable for use in a URI. This may be either a numeric IP\n", " * address in IPv4 or IPv6 notation, or a domain name.\n", " * <p>Because this class is intended to represent host specifiers which can reasonably be used in a\n", " * URI, the domain name case is further restricted to include only those domain names which end in a\n", " * recognized public suffix; see {@link InternetDomainName#isPublicSuffix()} for details.\n", " * <p>Note that no network lookups are performed by any {@code HostSpecifier} methods. No attempt is\n", " * made to verify that a provided specifier corresponds to a real or accessible host. Only syntactic\n", " * and pattern-based checks are performed.\n", " * <p>If you know that a given string represents a numeric IP address, use {@link InetAddresses} to\n", " * obtain and manipulate a {@link java.net.InetAddress} instance from it rather than using this\n", " * class. Similarly, if you know that a given string represents a domain name, use\n"], "3": ["   * Returns a {@code HostSpecifier} built from the provided {@code specifier}, which is already\n", "   * known to be valid. If the {@code specifier} might be invalid, use {@link #from(String)}\n", "   * instead.\n", "   * <li>An IPv6 address string with or without brackets, like {@code [2001:db8::1]} or\n", "   *     {@code 2001:db8::1}\n"], "4": ["    // Try to interpret the specifier as an IP address. Note we build\n"], "5": ["   * Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if\n", "   * parsing fails. Always use this method in preference to {@link #fromValid(String)} for a\n", "   * specifier that is not already known to be valid.\n", "  public static HostSpecifier from(String specifier) throws ParseException {\n"], "6": ["      ParseException parseException = new ParseException(\"Invalid host specifier: \" + specifier, 0);\n", "   * Determines whether {@code specifier} represents a valid {@link HostSpecifier} as described in\n", "   * the documentation for {@link #fromValid(String)}.\n"], "7": ["   * Returns a string representation of the host specifier suitable for inclusion in a URI. If the\n", "   * host specifier is a domain name, the string will be normalized to all lower case. If the\n", "   * specifier was an IPv6 address without brackets, brackets are added so that the result will be\n", "   * usable in the host part of a URI.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * A syntactically valid host specifier, suitable for use in a URI.\n", " * This may be either a numeric IP address in IPv4 or IPv6 notation, or a\n", " * domain name.\n", " * <p>Because this class is intended to represent host specifiers which can\n", " * reasonably be used in a URI, the domain name case is further restricted to\n", " * include only those domain names which end in a recognized public suffix; see\n", " * {@link InternetDomainName#isPublicSuffix()} for details.\n", " * <p>Note that no network lookups are performed by any {@code HostSpecifier}\n", " * methods.  No attempt is made to verify that a provided specifier corresponds\n", " * to a real or accessible host.  Only syntactic and pattern-based checks are\n", " * performed.\n", " * <p>If you know that a given string represents a numeric IP address, use\n", " * {@link InetAddresses} to obtain and manipulate a\n", " * {@link java.net.InetAddress} instance from it rather than using this class.\n", " * Similarly, if you know that a given string represents a domain name, use\n"], "3": ["   * Returns a {@code HostSpecifier} built from the provided {@code specifier},\n", "   * which is already known to be valid.  If the {@code specifier} might be\n", "   * invalid, use {@link #from(String)} instead.\n", "   * <li>An IPv6 address string with or without brackets, like\n", "   *     {@code [2001:db8::1]} or {@code 2001:db8::1}\n"], "4": ["    // Try to interpret the specifier as an IP address.  Note we build\n"], "5": ["   * Attempts to return a {@code HostSpecifier} for the given string, throwing\n", "   * an exception if parsing fails. Always use this method in preference to\n", "   * {@link #fromValid(String)} for a specifier that is not already known to be\n", "   * valid.\n", "  public static HostSpecifier from(String specifier)\n", "      throws ParseException {\n"], "6": ["      ParseException parseException =\n", "          new ParseException(\"Invalid host specifier: \" + specifier, 0);\n", "   * Determines whether {@code specifier} represents a valid\n", "   * {@link HostSpecifier} as described in the documentation for\n", "   * {@link #fromValid(String)}.\n"], "7": ["   * Returns a string representation of the host specifier suitable for\n", "   * inclusion in a URI.  If the host specifier is a domain name, the\n", "   * string will be normalized to all lower case.  If the specifier was\n", "   * an IPv6 address without brackets, brackets are added so that the\n", "   * result will be usable in the host part of a URI.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [27, 28, 30, 31, 32, 34, 35, 36, 38, 39, 40], "3": [57, 58, 59, 65, 66], "4": [78], "5": [107, 108, 109, 113], "6": [121, 128, 129], "7": [160, 161, 162, 163]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46], "3": [63, 64, 65, 71, 72], "4": [84], "5": [113, 114, 115, 116, 120, 121], "6": [129, 130, 137, 138, 139], "7": [170, 171, 172, 173, 174]}}, {"2": "guava/src/com/google/common/net/HttpHeaders.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": ["   * The HTTP\n", "   * <a href=\"http://tools.ietf.org/html/rfc6797#section-6.1\">{@code Strict-Transport-Security}</a>\n", "   * header field name.\n"], "3": ["   * The HTTP\n", "   * <a href=\"http://tools.ietf.org/html/draft-evans-palmer-key-pinning\">{@code Public-Key-Pins}</a>\n", "   * header field name.\n", "  @Beta public static final String PUBLIC_KEY_PINS = \"Public-Key-Pins\";\n", "  @Beta public static final String PUBLIC_KEY_PINS_REPORT_ONLY = \"Public-Key-Pins-Report-Only\";\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": ["   * The HTTP <a href=\"http://tools.ietf.org/html/rfc6797#section-6.1\">\n", "   * {@code Strict-Transport-Security}</a> header field name.\n"], "3": ["   * The HTTP <a href=\"http://tools.ietf.org/html/draft-evans-palmer-key-pinning\">\n", "   * {@code Public-Key-Pins}</a> header field name.\n", "  @Beta\n", "  public static final String PUBLIC_KEY_PINS = \"Public-Key-Pins\";\n", "  @Beta\n", "  public static final String PUBLIC_KEY_PINS_REPORT_ONLY = \"Public-Key-Pins-Report-Only\";\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [192, 193, 194], "3": [232, 233, 234, 238, 245]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [194, 195], "3": [233, 234, 238, 239, 246, 247]}}, {"3": "guava/src/com/google/common/net/InetAddresses.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p><b>Important note:</b> Unlike {@code InetAddress.getByName()}, the methods of this class never\n", " * cause DNS services to be accessed. For this reason, you should prefer these methods as much as\n", " * possible over their JDK equivalents whenever you are expecting to handle only IP address string\n", " * literals -- there is no blocking DNS penalty for a malformed string.\n", " * <p>When dealing with {@link Inet4Address} and {@link Inet6Address} objects as byte arrays (vis.\n", " * {@code InetAddress.getAddress()}) they are 4 and 16 bytes in length, respectively, and represent\n", " * the address in network byte order.\n", " * <dl>\n", " * <dt>The IPv4 loopback address, {@code \"127.0.0.1\"}.\n", " * <dd>{@code 7f 00 00 01}\n", " * <dt>The IPv6 loopback address, {@code \"::1\"}.\n", " * <dd>{@code 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01}\n", " * <dt>From the IPv6 reserved documentation prefix ({@code 2001:db8::/32}), {@code \"2001:db8::1\"}.\n", " * <dd>{@code 20 01 0d b8 00 00 00 00 00 00 00 00 00 00 00 01}\n", " * <dt>An IPv6 \"IPv4 compatible\" (or \"compat\") address, {@code \"::192.168.0.1\"}.\n", " * <dd>{@code 00 00 00 00 00 00 00 00 00 00 00 00 c0 a8 00 01}\n", " *\n", " * <dt>An IPv6 \"IPv4 mapped\" address, {@code \"::ffff:192.168.0.1\"}.\n", " * <dd>{@code 00 00 00 00 00 00 00 00 00 00 ff ff c0 a8 00 01}\n", " *\n", " * </dl>\n", " * <p>A few notes about IPv6 \"IPv4 mapped\" addresses and their observed use in Java.\n", " * <p>\"IPv4 mapped\" addresses were originally a representation of IPv4 addresses for use on an IPv6\n", " * socket that could receive both IPv4 and IPv6 connections (by disabling the {@code IPV6_V6ONLY}\n", " * socket option on an IPv6 socket). Yes, it's confusing. Nevertheless, these \"mapped\" addresses\n", " * were never supposed to be seen on the wire. That assumption was dropped, some say mistakenly, in\n", " * later RFCs with the apparent aim of making IPv4-to-IPv6 transition simpler.\n", " * <p>Technically one <i>can</i> create a 128bit IPv6 address with the wire format of a \"mapped\"\n", " * address, as shown above, and transmit it in an IPv6 packet header. However, Java's InetAddress\n", " * creation methods appear to adhere doggedly to the original intent of the \"mapped\" address: all\n", " * \"mapped\" addresses return {@link Inet4Address} objects.\n", " *\n", " * <p>For added safety, it is common for IPv6 network operators to filter all packets where either\n", " * the source or destination address appears to be a \"compat\" or \"mapped\" address. Filtering\n", " * suggestions usually recommend discarding any packets with source or destination addresses in the\n", " * invalid range {@code ::/3}, which includes both of these bizarre address formats. For more\n", " * information on \"bogons\", including lists of IPv6 bogon space, see:\n", " * <li><a target=\"_parent\" href=\"http://en.wikipedia.org/wiki/Bogon_filtering\">http://en.wikipedia.\n", " * org/wiki/Bogon_filtering</a>\n", " * <li><a target=\"_parent\" href=\"http://www.cymru.com/Bogons/ipv6.txt\">http://www.cymru.com/Bogons/\n", " * ipv6.txt</a>\n", " * <li><a target=\"_parent\" href=\"http://www.cymru.com/Bogons/v6bogon.html\">http://www.cymru.com/\n", " * Bogons/v6bogon.html</a>\n", " * <li><a target=\"_parent\" href=\"http://www.space.net/~gert/RIPE/ipv6-filters.html\">http://www.\n", " * space.net/~gert/RIPE/ipv6-filters.html</a>\n"], "3": ["    Preconditions.checkArgument(\n", "        bytes.length == 4,\n"], "4": ["   * Returns {@code true} if the supplied string is a valid IP string literal, {@code false}\n", "   * otherwise.\n"], "5": ["          return null; // Colons must not appear after dots.\n", "        return null; // Everything else must be a decimal or hex digit.\n"], "6": ["          return null; // Can't have more than one ::\n", "    int partsHi; // Number of parts to copy from above/before the \"::\"\n", "    int partsLo; // Number of parts to copy from below/after the \"::\"\n", "        return null; // ^: requires ^::\n", "        return null; // :$ requires ::$\n", "      // Otherwise, allocate the entire address to partsHi. The endpoints\n"], "7": ["   * {@link InetAddress#getByAddress} is documented as throwing a checked exception\n", "   * \"if IP address is of illegal length.\" We replace it with an unchecked exception, for use by\n", "   * callers who already know that addr is an array of length 4 or 16.\n"], "8": ["   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6\n", "   * addresses, the output follows <a href=\"http://tools.ietf.org/html/rfc5952\">RFC 5952</a> section\n", "   * 4. The main difference is that this method uses \"::\" for zero compression, while Java's version\n", "   * uses the uncompressed form.\n", "   * <p>This method uses hexadecimal for all IPv6 addresses, including IPv4-mapped IPv6 addresses\n", "   * such as \"::c000:201\". The output does not include a Scope ID.\n"], "9": ["      hextets[i] = Ints.fromBytes((byte) 0, (byte) 0, bytes[2 * i], bytes[2 * i + 1]);\n"], "10": ["   * <p>Only runs of two or more hextets are considered. In case of a tie, the leftmost run wins. If\n", "   * a qualifying run is found, its hextets are replaced by the sentinel value -1.\n"], "11": ["   * <p>In order for \"::\" compression to work, the input should contain negative sentinel values in\n", "   * place of the elided zeroes.\n", "    // While scanning the array, handle these state transitions:\n", "    //   start->num => \"num\"     start->gap => \"::\"\n", "    //   num->num   => \":num\"    num->gap   => \"::\"\n", "    //   gap->num   => \"num\"     gap->gap   => \"\"\n"], "12": ["   * Returns the string representation of an {@link InetAddress} suitable for inclusion in a URI.\n", "   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6\n", "   * addresses it compresses zeroes and surrounds the text with square brackets; for example\n", "   * <a target=\"_parent\" href=\"http://tools.ietf.org/html/rfc3986#section-3.2.2\">RFC 3986</a>, a URI\n", "   * containing an IPv6 string literal is of the form\n", "   * <p>Use of either {@link InetAddresses#toAddrString}, {@link InetAddress#getHostAddress()}, or\n", "   * this method is recommended over {@link InetAddress#toString()} when an IP address string\n", "   * literal is desired. This is because {@link InetAddress#toString()} prints the hostname and the\n", "   * IP address string joined by a \"/\".\n"], "13": ["   * Returns an InetAddress representing the literal IPv4 or IPv6 host portion of a URL, encoded in\n", "   * the format specified by RFC 3986 section 3.2.2.\n", "   * <p>This function is similar to {@link InetAddresses#forString(String)}, however, it requires\n", "   * that IPv6 addresses are surrounded by square brackets.\n", "   * <p>This function is the inverse of {@link InetAddresses#toUriString(java.net.InetAddress)}.\n", "   * @throws IllegalArgumentException if {@code hostAddr} is not a valid IPv4 address, or IPv6\n", "   *     address surrounded by square brackets\n"], "14": ["   * Returns {@code true} if the supplied string is a valid URI IP string literal, {@code false}\n", "   * otherwise.\n"], "15": ["   * <p>An \"IPv4 compatible\", or \"compat\", address is one with 96 leading bits of zero, with the\n", "   * remaining 32 bits interpreted as an IPv4 address. These are conventionally represented in\n", "   * string literals as {@code \"::192.168.0.1\"}, though {@code \"::c0a8:1\"} is also considered an\n", "   * IPv4 compatible address (and equivalent to {@code \"::192.168.0.1\"}).\n", "   * <a target=\"_parent\" href=\"http://tools.ietf.org/html/rfc4291#section-2.5.5.1\">RFC 4291</a>.\n", "   * <p>NOTE: This method is different from {@link Inet6Address#isIPv4CompatibleAddress} in that it\n", "   * more correctly classifies {@code \"::\"} and {@code \"::1\"} as proper IPv6 addresses (which they\n", "   * are), NOT IPv4 compatible addresses (which they are generally NOT considered to be).\n"], "16": ["    if ((bytes[12] == 0)\n", "        && (bytes[13] == 0)\n", "        && (bytes[14] == 0)\n"], "17": ["    Preconditions.checkArgument(\n", "        isCompatIPv4Address(ip), \"Address '%s' is not IPv4-compatible.\", toAddrString(ip));\n"], "18": ["   * <p>6to4 addresses begin with the {@code \"2002::/16\"} prefix. The next 32 bits are the IPv4\n", "   * address of the host to which IPv6-in-IPv4 tunneled packets should be routed.\n", "   * <a target=\"_parent\" href=\"http://tools.ietf.org/html/rfc3056#section-2\">RFC 3056</a>.\n"], "19": ["    Preconditions.checkArgument(\n", "        is6to4Address(ip), \"Address '%s' is not a 6to4 address.\", toAddrString(ip));\n", "   * A simple immutable data class to encapsulate the information to be found in a Teredo address.\n", "   * <p>All of the fields in this class are encoded in various portions of the IPv6 address as part\n", "   * of the protocol. More protocols details can be found at:\n", "   * <a target=\"_parent\" href=\"http://en.wikipedia.org/wiki/Teredo_tunneling\">http://en.wikipedia.\n", "   * org/wiki/Teredo_tunneling</a>.\n", "   * <a target=\"_parent\" href=\"http://tools.ietf.org/html/rfc4380\">RFC 4380</a>.\n"], "20": ["     * <p>Both server and client can be {@code null}, in which case the value {@code \"0.0.0.0\"} will\n", "     * be assumed.\n", "     * @throws IllegalArgumentException if either of the {@code port} or the {@code flags} arguments\n", "     *     are out of range of an unsigned short\n", "      Preconditions.checkArgument(\n", "          (port >= 0) && (port <= 0xffff), \"port '%s' is out of range (0 <= port <= 0xffff)\", port);\n", "      Preconditions.checkArgument(\n", "          (flags >= 0) && (flags <= 0xffff),\n", "          \"flags '%s' is out of range (0 <= flags <= 0xffff)\",\n", "          flags);\n"], "21": ["    return (bytes[0] == (byte) 0x20)\n", "        && (bytes[1] == (byte) 0x01)\n", "        && (bytes[2] == 0)\n", "        && (bytes[3] == 0);\n"], "22": ["    Preconditions.checkArgument(\n", "        isTeredoAddress(ip), \"Address '%s' is not a Teredo address.\", toAddrString(ip));\n"], "23": ["   * <p>From RFC 5214: \"ISATAP interface identifiers are constructed in Modified EUI-64 format [...]\n", "   * by concatenating the 24-bit IANA OUI (00-00-5E), the 8-bit hexadecimal value 0xFE, and a 32-bit\n", "   * IPv4 address in network byte order [...]\"\n", "   * <a target=\"_parent\" href=\"http://tools.ietf.org/html/rfc5214#section-6.1\">RFC 5214</a>.\n"], "24": ["    return (bytes[9] == (byte) 0x00) && (bytes[10] == (byte) 0x5e) && (bytes[11] == (byte) 0xfe);\n"], "25": ["    Preconditions.checkArgument(\n", "        isIsatapAddress(ip), \"Address '%s' is not an ISATAP address.\", toAddrString(ip));\n", "   * Examines the Inet6Address to determine if it is an IPv6 address of one of the specified address\n", "   * types that contain an embedded IPv4 address.\n", "   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial\n", "   * spoofability. With other transition addresses spoofing involves (at least) infection of one's\n", "   * BGP routing table.\n"], "26": ["   * Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an\n", "   * IPv6 address of one of the specified address types that contain an embedded IPv4 address.\n", "   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial\n", "   * spoofability. With other transition addresses spoofing involves (at least) infection of one's\n", "   * BGP routing table.\n"], "27": ["   * <p>An \"IPv4 mapped\" address is anything in the range ::ffff:0:0/96 (sometimes written as\n", "   * ::ffff:0.0.0.0/96), with the last 32 bits interpreted as an IPv4 address.\n", "   * <a target=\"_parent\" href=\"http://tools.ietf.org/html/rfc4291#section-2.5.5.2\">RFC 4291</a>.\n", "   * <p>Note: This method takes a {@code String} argument because {@link InetAddress} automatically\n", "   * collapses mapped addresses to IPv4. (It is actually possible to avoid this using one of the\n", "   * obscure {@link Inet6Address} methods, but it would be unwise to depend on such a\n", "   * poorly-documented feature.)\n"], "28": ["   * <p>HACK: As long as applications continue to use IPv4 addresses for indexing into tables,\n", "   * accounting, et cetera, it may be necessary to <b>coerce</b> IPv6 addresses into IPv4 addresses.\n", "   * This function does so by hashing the upper 64 bits into {@code 224.0.0.0/3} (64 bits into 29\n", "   * bits).\n", "   * <p>NOTE: This function is failsafe for security purposes: ALL IPv6 addresses (except localhost\n", "   * (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4\n", "   * address that might permit elevated privileges.\n"], "29": ["      return LOOPBACK4; // ::1\n", "      return ANY4; // ::0\n"], "30": ["    // Many strategies for hashing are possible. This might suffice for now.\n", "    // Fixup to avoid some \"illegal\" values. Currently the only potential\n"], "31": ["   * Returns an integer representing an IPv4 address regardless of whether the supplied argument is\n", "   * an IPv4 address or not.\n", "   * <p>IPv6 addresses are <b>coerced</b> to IPv4 addresses before being converted to integers.\n", "   * <p>As long as there are applications that assume that all IP addresses are IPv4 addresses and\n", "   * can therefore be converted safely to integers (for whatever purpose) this function can be used\n", "   * to handle IPv6 addresses as well until the application is suitably fixed.\n", "   * <p>NOTE: an IPv6 address coerced to an IPv4 address can only be used for such purposes as\n", "   * rudimentary identification or indexing into a collection of real {@link InetAddress}es. They\n", "   * cannot be used as real addresses for the purposes of network communication.\n"], "32": ["   * Returns an Inet4Address having the integer value specified by the argument.\n"], "33": ["   * Returns an address from a <b>little-endian ordered</b> byte array (the opposite of what\n", "   * {@link InetAddress#getByAddress} expects).\n", "   * <p>IPv4 address byte array must be 4 bytes long and IPv6 byte array must be 16 bytes long.\n"], "34": ["   * Returns a new InetAddress that is one less than the passed in address. This method works for\n", "   * both IPv4 and IPv6 addresses.\n"], "35": ["   * Returns a new InetAddress that is one more than the passed in address. This method works for\n", "   * both IPv4 and IPv6 addresses.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p><b>Important note:</b> Unlike {@code InetAddress.getByName()}, the\n", " * methods of this class never cause DNS services to be accessed. For\n", " * this reason, you should prefer these methods as much as possible over\n", " * their JDK equivalents whenever you are expecting to handle only\n", " * IP address string literals -- there is no blocking DNS penalty for a\n", " * malformed string.\n", " * <p>When dealing with {@link Inet4Address} and {@link Inet6Address}\n", " * objects as byte arrays (vis. {@code InetAddress.getAddress()}) they\n", " * are 4 and 16 bytes in length, respectively, and represent the address\n", " * in network byte order.\n", " * <ul>\n", " * <li>The IPv4 loopback address, {@code \"127.0.0.1\"}.<br/>\n", " *     {@code 7f 00 00 01}\n", " * <li>The IPv6 loopback address, {@code \"::1\"}.<br/>\n", " *     {@code 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01}\n", " * <li>From the IPv6 reserved documentation prefix ({@code 2001:db8::/32}),\n", " *     {@code \"2001:db8::1\"}.<br/>\n", " *     {@code 20 01 0d b8 00 00 00 00 00 00 00 00 00 00 00 01}\n", " * <li>An IPv6 \"IPv4 compatible\" (or \"compat\") address,\n", " *     {@code \"::192.168.0.1\"}.<br/>\n", " *     {@code 00 00 00 00 00 00 00 00 00 00 00 00 c0 a8 00 01}\n", " * <li>An IPv6 \"IPv4 mapped\" address, {@code \"::ffff:192.168.0.1\"}.<br/>\n", " *     {@code 00 00 00 00 00 00 00 00 00 00 ff ff c0 a8 00 01}\n", " * </ul>\n", " * <p>A few notes about IPv6 \"IPv4 mapped\" addresses and their observed\n", " * use in Java.\n", " * <br><br>\n", " * \"IPv4 mapped\" addresses were originally a representation of IPv4\n", " * addresses for use on an IPv6 socket that could receive both IPv4\n", " * and IPv6 connections (by disabling the {@code IPV6_V6ONLY} socket\n", " * option on an IPv6 socket).  Yes, it's confusing.  Nevertheless,\n", " * these \"mapped\" addresses were never supposed to be seen on the\n", " * wire.  That assumption was dropped, some say mistakenly, in later\n", " * RFCs with the apparent aim of making IPv4-to-IPv6 transition simpler.\n", " * <p>Technically one <i>can</i> create a 128bit IPv6 address with the wire\n", " * format of a \"mapped\" address, as shown above, and transmit it in an\n", " * IPv6 packet header.  However, Java's InetAddress creation methods\n", " * appear to adhere doggedly to the original intent of the \"mapped\"\n", " * address: all \"mapped\" addresses return {@link Inet4Address} objects.\n", " * <p>For added safety, it is common for IPv6 network operators to filter\n", " * all packets where either the source or destination address appears to\n", " * be a \"compat\" or \"mapped\" address.  Filtering suggestions usually\n", " * recommend discarding any packets with source or destination addresses\n", " * in the invalid range {@code ::/3}, which includes both of these bizarre\n", " * address formats.  For more information on \"bogons\", including lists\n", " * of IPv6 bogon space, see:\n", " * <li><a target=\"_parent\"\n", " *        href=\"http://en.wikipedia.org/wiki/Bogon_filtering\"\n", " *       >http://en.wikipedia.org/wiki/Bogon_filtering</a>\n", " * <li><a target=\"_parent\"\n", " *        href=\"http://www.cymru.com/Bogons/ipv6.txt\"\n", " *       >http://www.cymru.com/Bogons/ipv6.txt</a>\n", " * <li><a target=\"_parent\"\n", " *        href=\"http://www.cymru.com/Bogons/v6bogon.html\"\n", " *       >http://www.cymru.com/Bogons/v6bogon.html</a>\n", " * <li><a target=\"_parent\"\n", " *        href=\"http://www.space.net/~gert/RIPE/ipv6-filters.html\"\n", " *       >http://www.space.net/~gert/RIPE/ipv6-filters.html</a>\n"], "3": ["    Preconditions.checkArgument(bytes.length == 4,\n"], "4": ["   * Returns {@code true} if the supplied string is a valid IP string\n", "   * literal, {@code false} otherwise.\n"], "5": ["          return null;  // Colons must not appear after dots.\n", "        return null;  // Everything else must be a decimal or hex digit.\n"], "6": ["          return null;  // Can't have more than one ::\n", "    int partsHi;  // Number of parts to copy from above/before the \"::\"\n", "    int partsLo;  // Number of parts to copy from below/after the \"::\"\n", "        return null;  // ^: requires ^::\n", "        return null;  // :$ requires ::$\n", "      // Otherwise, allocate the entire address to partsHi.  The endpoints\n"], "7": ["   * {@link InetAddress#getByAddress} is documented as throwing a checked\n", "   * exception \"if IP address is of illegal length.\"  We replace it with\n", "   * an unchecked exception, for use by callers who already know that addr\n", "   * is an array of length 4 or 16.\n"], "8": ["   * <p>For IPv4 addresses, this is identical to\n", "   * {@link InetAddress#getHostAddress()}, but for IPv6 addresses, the output\n", "   * follows <a href=\"http://tools.ietf.org/html/rfc5952\">RFC 5952</a>\n", "   * section 4.  The main difference is that this method uses \"::\" for zero\n", "   * compression, while Java's version uses the uncompressed form.\n", "   * <p>This method uses hexadecimal for all IPv6 addresses, including\n", "   * IPv4-mapped IPv6 addresses such as \"::c000:201\".  The output does not\n", "   * include a Scope ID.\n"], "9": ["      hextets[i] = Ints.fromBytes(\n", "          (byte) 0, (byte) 0, bytes[2 * i], bytes[2 * i + 1]);\n"], "10": ["   * <p>Only runs of two or more hextets are considered.  In case of a tie, the\n", "   * leftmost run wins.  If a qualifying run is found, its hextets are replaced\n", "   * by the sentinel value -1.\n"], "11": ["   * <p>In order for \"::\" compression to work, the input should contain negative\n", "   * sentinel values in place of the elided zeroes.\n", "    /*\n", "     * While scanning the array, handle these state transitions:\n", "     *   start->num => \"num\"     start->gap => \"::\"\n", "     *   num->num   => \":num\"    num->gap   => \"::\"\n", "     *   gap->num   => \"num\"     gap->gap   => \"\"\n", "     */\n"], "12": ["   * Returns the string representation of an {@link InetAddress} suitable\n", "   * for inclusion in a URI.\n", "   * <p>For IPv4 addresses, this is identical to\n", "   * {@link InetAddress#getHostAddress()}, but for IPv6 addresses it\n", "   * compresses zeroes and surrounds the text with square brackets; for example\n", "   * <a target=\"_parent\"\n", "   *    href=\"http://tools.ietf.org/html/rfc3986#section-3.2.2\"\n", "   *  >http://tools.ietf.org/html/rfc3986</a>,\n", "   * a URI containing an IPv6 string literal is of the form\n", "   * <p>Use of either {@link InetAddresses#toAddrString},\n", "   * {@link InetAddress#getHostAddress()}, or this method is recommended over\n", "   * {@link InetAddress#toString()} when an IP address string literal is\n", "   * desired.  This is because {@link InetAddress#toString()} prints the\n", "   * hostname and the IP address string joined by a \"/\".\n"], "13": ["   * Returns an InetAddress representing the literal IPv4 or IPv6 host\n", "   * portion of a URL, encoded in the format specified by RFC 3986 section 3.2.2.\n", "   * <p>This function is similar to {@link InetAddresses#forString(String)},\n", "   * however, it requires that IPv6 addresses are surrounded by square brackets.\n", "   * <p>This function is the inverse of\n", "   * {@link InetAddresses#toUriString(java.net.InetAddress)}.\n", "   * @throws IllegalArgumentException if {@code hostAddr} is not a valid\n", "   *     IPv4 address, or IPv6 address surrounded by square brackets\n"], "14": ["   * Returns {@code true} if the supplied string is a valid URI IP string\n", "   * literal, {@code false} otherwise.\n"], "15": ["   * <p>An \"IPv4 compatible\", or \"compat\", address is one with 96 leading\n", "   * bits of zero, with the remaining 32 bits interpreted as an\n", "   * IPv4 address.  These are conventionally represented in string\n", "   * literals as {@code \"::192.168.0.1\"}, though {@code \"::c0a8:1\"} is\n", "   * also considered an IPv4 compatible address (and equivalent to\n", "   * {@code \"::192.168.0.1\"}).\n", "   * <a target=\"_parent\"\n", "   *    href=\"http://tools.ietf.org/html/rfc4291#section-2.5.5.1\"\n", "   *    >http://tools.ietf.org/html/rfc4291</a>\n", "   * <p>NOTE: This method is different from\n", "   * {@link Inet6Address#isIPv4CompatibleAddress} in that it more\n", "   * correctly classifies {@code \"::\"} and {@code \"::1\"} as\n", "   * proper IPv6 addresses (which they are), NOT IPv4 compatible\n", "   * addresses (which they are generally NOT considered to be).\n"], "16": ["    if ((bytes[12] == 0) && (bytes[13] == 0) && (bytes[14] == 0)\n"], "17": ["    Preconditions.checkArgument(isCompatIPv4Address(ip),\n", "        \"Address '%s' is not IPv4-compatible.\", toAddrString(ip));\n"], "18": ["   * <p>6to4 addresses begin with the {@code \"2002::/16\"} prefix.\n", "   * The next 32 bits are the IPv4 address of the host to which\n", "   * IPv6-in-IPv4 tunneled packets should be routed.\n", "   * <a target=\"_parent\" href=\"http://tools.ietf.org/html/rfc3056#section-2\"\n", "   *    >http://tools.ietf.org/html/rfc3056</a>\n"], "19": ["    Preconditions.checkArgument(is6to4Address(ip),\n", "        \"Address '%s' is not a 6to4 address.\", toAddrString(ip));\n", "   * A simple immutable data class to encapsulate the information to be found in a\n", "   * Teredo address.\n", "   * <p>All of the fields in this class are encoded in various portions\n", "   * of the IPv6 address as part of the protocol.  More protocols details\n", "   * can be found at:\n", "   * <a target=\"_parent\" href=\"http://en.wikipedia.org/wiki/Teredo_tunneling\"\n", "   *    >http://en.wikipedia.org/wiki/Teredo_tunneling</a>.\n", "   * <a target=\"_parent\" href=\"http://tools.ietf.org/html/rfc4380\"\n", "   *    >http://tools.ietf.org/html/rfc4380</a>.\n"], "20": ["     * <p>Both server and client can be {@code null}, in which case the\n", "     * value {@code \"0.0.0.0\"} will be assumed.\n", "     * @throws IllegalArgumentException if either of the {@code port} or the {@code flags}\n", "     *     arguments are out of range of an unsigned short\n", "      Preconditions.checkArgument((port >= 0) && (port <= 0xffff),\n", "          \"port '%s' is out of range (0 <= port <= 0xffff)\", port);\n", "      Preconditions.checkArgument((flags >= 0) && (flags <= 0xffff),\n", "          \"flags '%s' is out of range (0 <= flags <= 0xffff)\", flags);\n"], "21": ["    return (bytes[0] == (byte) 0x20) && (bytes[1] == (byte) 0x01)\n", "           && (bytes[2] == 0) && (bytes[3] == 0);\n"], "22": ["    Preconditions.checkArgument(isTeredoAddress(ip),\n", "        \"Address '%s' is not a Teredo address.\", toAddrString(ip));\n"], "23": ["   * <p>From RFC 5214: \"ISATAP interface identifiers are constructed in\n", "   * Modified EUI-64 format [...] by concatenating the 24-bit IANA OUI\n", "   * (00-00-5E), the 8-bit hexadecimal value 0xFE, and a 32-bit IPv4\n", "   * address in network byte order [...]\"\n", "   * <a target=\"_parent\" href=\"http://tools.ietf.org/html/rfc5214#section-6.1\"\n", "   *    >http://tools.ietf.org/html/rfc5214</a>\n"], "24": ["    return (bytes[9] == (byte) 0x00) && (bytes[10] == (byte) 0x5e)\n", "           && (bytes[11] == (byte) 0xfe);\n"], "25": ["    Preconditions.checkArgument(isIsatapAddress(ip),\n", "        \"Address '%s' is not an ISATAP address.\", toAddrString(ip));\n", "   * Examines the Inet6Address to determine if it is an IPv6 address of one\n", "   * of the specified address types that contain an embedded IPv4 address.\n", "   * <p>NOTE: ISATAP addresses are explicitly excluded from this method\n", "   * due to their trivial spoofability.  With other transition addresses\n", "   * spoofing involves (at least) infection of one's BGP routing table.\n"], "26": ["   * Examines the Inet6Address to extract the embedded IPv4 client address\n", "   * if the InetAddress is an IPv6 address of one of the specified address\n", "   * types that contain an embedded IPv4 address.\n", "   * <p>NOTE: ISATAP addresses are explicitly excluded from this method\n", "   * due to their trivial spoofability.  With other transition addresses\n", "   * spoofing involves (at least) infection of one's BGP routing table.\n"], "27": ["   * <p>An \"IPv4 mapped\" address is anything in the range ::ffff:0:0/96\n", "   * (sometimes written as ::ffff:0.0.0.0/96), with the last 32 bits\n", "   * interpreted as an IPv4 address.\n", "   * <a target=\"_parent\"\n", "   *    href=\"http://tools.ietf.org/html/rfc4291#section-2.5.5.2\"\n", "   *    >http://tools.ietf.org/html/rfc4291</a>\n", "   * <p>Note: This method takes a {@code String} argument because\n", "   * {@link InetAddress} automatically collapses mapped addresses to IPv4.\n", "   * (It is actually possible to avoid this using one of the obscure\n", "   * {@link Inet6Address} methods, but it would be unwise to depend on such\n", "   * a poorly-documented feature.)\n"], "28": ["   * <p>HACK: As long as applications continue to use IPv4 addresses for\n", "   * indexing into tables, accounting, et cetera, it may be necessary to\n", "   * <b>coerce</b> IPv6 addresses into IPv4 addresses. This function does\n", "   * so by hashing the upper 64 bits into {@code 224.0.0.0/3}\n", "   * (64 bits into 29 bits).\n", "   * <p>NOTE: This function is failsafe for security purposes: ALL IPv6\n", "   * addresses (except localhost (::1)) are hashed to avoid the security\n", "   * risk associated with extracting an embedded IPv4 address that might\n", "   * permit elevated privileges.\n"], "29": ["      return LOOPBACK4;  // ::1\n", "      return ANY4;  // ::0\n"], "30": ["    // Many strategies for hashing are possible.  This might suffice for now.\n", "    // Fixup to avoid some \"illegal\" values.  Currently the only potential\n"], "31": ["   * Returns an integer representing an IPv4 address regardless of\n", "   * whether the supplied argument is an IPv4 address or not.\n", "   * <p>IPv6 addresses are <b>coerced</b> to IPv4 addresses before being\n", "   * converted to integers.\n", "   * <p>As long as there are applications that assume that all IP addresses\n", "   * are IPv4 addresses and can therefore be converted safely to integers\n", "   * (for whatever purpose) this function can be used to handle IPv6\n", "   * addresses as well until the application is suitably fixed.\n", "   * <p>NOTE: an IPv6 address coerced to an IPv4 address can only be used\n", "   * for such purposes as rudimentary identification or indexing into a\n", "   * collection of real {@link InetAddress}es.  They cannot be used as\n", "   * real addresses for the purposes of network communication.\n"], "32": ["   * Returns an Inet4Address having the integer value specified by\n", "   * the argument.\n"], "33": ["   * Returns an address from a <b>little-endian ordered</b> byte array\n", "   * (the opposite of what {@link InetAddress#getByAddress} expects).\n", "   * <p>IPv4 address byte array must be 4 bytes long and IPv6 byte array\n", "   * must be 16 bytes long.\n"], "34": ["   * Returns a new InetAddress that is one less than the passed in address.\n", "   * This method works for both IPv4 and IPv6 addresses.\n"], "35": ["   * Returns a new InetAddress that is one more than the passed in address.\n", "   * This method works for both IPv4 and IPv6 addresses.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [39, 40, 41, 42, 44, 45, 46, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95], "3": [120, 121], "4": [151, 152], "5": [171, 175], "6": [221, 227, 228, 234, 237, 240], "7": [307, 308, 309], "8": [325, 326, 327, 328, 330, 331], "9": [347], "10": [356, 357], "11": [387, 388, 393, 394, 395, 396], "12": [417, 419, 420, 424, 425, 428, 429, 430, 431], "13": [444, 445, 447, 448, 450, 454, 455], "14": [481, 482], "15": [499, 500, 501, 502, 505, 507, 508, 509], "16": [520, 521, 522], "17": [538, 539], "18": [547, 548, 551], "19": [569, 570, 576, 578, 579, 580, 581, 584], "20": [598, 599, 601, 602, 607, 608, 609, 610, 611, 612], "21": [647, 648, 649, 650], "22": [661, 662], "23": [685, 686, 687, 690], "24": [712], "25": [723, 724, 730, 731, 733, 734, 735], "26": [746, 747, 749, 750, 751], "27": [776, 777, 780, 782, 783, 784, 785], "28": [812, 813, 814, 815, 819, 820, 821], "29": [842, 844], "30": [857, 863], "31": [873, 874, 876, 878, 879, 880, 882, 883, 884], "32": [895], "33": [905, 906, 908], "34": [923, 924], "35": [946, 947]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 54, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "3": [135], "4": [165, 166], "5": [185, 189], "6": [235, 241, 242, 248, 251, 254], "7": [321, 322, 323, 324], "8": [340, 341, 342, 343, 344, 346, 347, 348], "9": [364, 365], "10": [374, 375, 376], "11": [406, 407, 412, 413, 414, 415, 416, 417], "12": [438, 439, 441, 442, 443, 447, 448, 449, 450, 453, 454, 455, 456, 457], "13": [470, 471, 473, 474, 476, 477, 481, 482], "14": [508, 509], "15": [526, 527, 528, 529, 530, 531, 534, 535, 536, 538, 539, 540, 541, 542], "16": [553], "17": [569, 570], "18": [578, 579, 580, 583, 584], "19": [602, 603, 609, 610, 612, 613, 614, 615, 616, 619, 620], "20": [634, 635, 637, 638, 643, 644, 645, 646], "21": [681, 682], "22": [693, 694], "23": [717, 718, 719, 720, 723, 724], "24": [746, 747], "25": [758, 759, 765, 766, 768, 769, 770], "26": [781, 782, 783, 785, 786, 787], "27": [812, 813, 814, 817, 818, 819, 821, 822, 823, 824, 825], "28": [852, 853, 854, 855, 856, 860, 861, 862, 863], "29": [884, 886], "30": [899, 905], "31": [915, 916, 918, 919, 921, 922, 923, 924, 926, 927, 928, 929], "32": [940, 941], "33": [951, 952, 954, 955], "34": [970, 971], "35": [993, 994]}}, {"4": "guava/src/com/google/common/net/InternetDomainName.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * foo.co.uk}. Only syntactic analysis is performed; no DNS lookups or other network interactions\n", " * take place. Thus there is no guarantee that the domain actually exists on the internet.\n", " * <p>One common use of this class is to determine whether a given string is likely to represent an\n", " * addressable domain on the web -- that is, for a candidate string {@code \"xxx\"}, might browsing to\n", " * {@code \"http://xxx/\"} result in a webpage being displayed? In the past, this test was frequently\n", " * done by determining whether the domain ended with a {@linkplain #isPublicSuffix() public suffix}\n", " * but was not itself a public suffix. However, this test is no longer accurate. There are many\n", " * domains which are both public suffixes and addressable as hosts; {@code \"uk.com\"} is one example.\n", " * As a result, the only useful test to determine if a domain is a plausible web host is\n", " * {@link #hasPublicSuffix()}. This will return {@code true} for many domains which (currently) are\n", " * not hosts, such as {@code \"com\"}, but given that any public suffix may become a host without\n", " * warning, it is better to err on the side of permissiveness and thus avoid spurious rejection of\n", " * valid sites.\n", " *\n", " * <li>Unicode dot separators other than the ASCII period ({@code '.'}) are converted to the ASCII\n", " *     period.\n", " * <p>The normalized values will be returned from {@link #toString()} and {@link #parts()}, and will\n", " * be reflected in the result of {@link #equals(Object)}.\n", " *\n", " * <p><a href=\"http://en.wikipedia.org/wiki/Internationalized_domain_name\">Internationalized domain\n", " * names</a> such as {@code \u7f51\u7edc.cn} are supported, as are the equivalent\n", " * <a href=\"http://en.wikipedia.org/wiki/Internationalized_domain_name\">IDNA Punycode-encoded</a>\n", " * versions.\n"], "3": ["  private static final CharMatcher DOTS_MATCHER = CharMatcher.anyOf(\".\\u3002\\uFF0E\\uFF61\");\n", "   * Value of {@link #publicSuffixIndex} which indicates that no public suffix was found.\n", "   * Maximum parts (labels) in a domain name. This value arises from the 255-octet limit described\n", "   * in <a href=\"http://www.ietf.org/rfc/rfc2181.txt\">RFC 2181</a> part 11 with the fact that the\n", "   * encoding of each part occupies at least two bytes (dot plus label externally, length byte plus\n", "   * label internally). Thus, if all labels have the minimum size of one byte, 127 of them will fit.\n", "   * Maximum length of a full domain name, including separators, and leaving room for the root\n", "   * label. See <a href=\"http://www.ietf.org/rfc/rfc2181.txt\">RFC 2181</a> part 11.\n"], "4": ["   * The index in the {@link #parts()} list at which the public suffix begins. For example, for the\n", "   * domain name {@code www.google.co.uk}, the value would be 2 (the index of the {@code co} part).\n", "   * The value is negative (specifically, {@link #NO_PUBLIC_SUFFIX_FOUND}) if no public suffix was\n"], "5": ["    checkArgument(name.length() <= MAX_LENGTH, \"Domain name too long: '%s':\", name);\n", "    checkArgument(parts.size() <= MAX_PARTS, \"Domain has too many parts: '%s'\", name);\n", "   * Returns the index of the leftmost part of the public suffix, or -1 if not found. Note that the\n", "   * value defined as the \"public suffix\" may not be a public suffix according to\n", "   * {@link #isPublicSuffix()} if the domain ends with an excluded domain pattern such as\n", "   * {@code \"nhs.uk\"}.\n"], "6": ["   * Returns an instance of {@link InternetDomainName} after lenient validation. Specifically,\n", "   * validation against <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n", "   * (\"Internationalizing Domain Names in Applications\") is skipped, while validation against\n", "   * <a href=\"http://www.ietf.org/rfc/rfc1035.txt\">RFC 1035</a> is relaxed in the following ways:\n", "   * <li>Parts other than the final part may start with a digit, as mandated by\n", "   * <a href=\"https://tools.ietf.org/html/rfc1123#section-2\">RFC 1123</a>.\n", "   * @throws IllegalArgumentException if {@code name} is not syntactically valid according to\n", "   *     {@link #isValid}\n"], "7": ["   * Validation method used by {@from} to ensure that the domain name is syntactically valid\n", "   * according to RFC 1035.\n"], "8": ["   * Helper method for {@link #validateSyntax(List)}. Validates that one part of a domain name is\n", "   * valid.\n"], "9": ["     * GWT claims to support java.lang.Character's char-classification methods, but it actually only\n", "     * works for ASCII. So for now, assume any non-ASCII characters are valid. The only place this\n", "     * seems to be documented is here:\n", "     * <p>ASCII characters in the part are expected to be valid per RFC 1035, with underscore also\n", "     * being allowed due to widespread practice.\n"], "10": ["     * Note that we allow (in contravention of a strict interpretation of the relevant RFCs) domain\n", "     * parts other than the last may begin with a digit (for example, \"3com.com\"). It's important to\n", "     * disallow an initial digit in the last part; it's the only thing that stops an IPv4 numeric\n", "     * address like 127.0.0.1 from looking like a valid domain name.\n"], "11": ["   * Returns the individual components of this domain name, normalized to all lower case. For\n", "   * example, for the domain name {@code mail.google.com}, this method returns the list\n", "   * {@code [\"mail\", \"google\", \"com\"]}.\n", "   * Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla\n", "   * Foundation's <a href=\"http://publicsuffix.org/\">Public Suffix List</a> (PSL). A public suffix\n", "   * is one under which Internet users can directly register names, such as {@code com},\n", "   * {@code co.uk} or {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> public\n", "   * suffixes include {@code google}, {@code google.com} and {@code foo.co.uk}.\n", "   * @return {@code true} if this domain name appears exactly on the public suffix list\n"], "12": ["   * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},\n", "   * including if it is a public suffix itself. For example, returns {@code true} for\n", "   * {@code www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code google} or\n", "   * {@code google.foo}. This is the recommended method for determining whether a domain is\n", "   * potentially an addressable host.\n"], "13": ["   * Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or\n", "   * {@code null} if no public suffix is present.\n"], "14": ["   * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},\n", "   * while not being a public suffix itself. For example, returns {@code true} for\n", "   * {@code www.google.com}, {@code foo.co.uk} and {@code bar.ca.us}, but not for {@code google},\n", "   * {@code com}, or {@code\n", "   * <p><b>Warning:</b> a {@code false} result from this method does not imply that the domain does\n", "   * not represent an addressable host, as many public suffixes are also addressable hosts. Use\n", "   * {@link #hasPublicSuffix()} for that test.\n", "   * <p>This method can be used to determine whether it will probably be possible to set cookies on\n", "   * the domain, though even that depends on individual browsers' implementations of cookie\n", "   * controls. See <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a> for details.\n"], "15": ["   * Indicates whether this domain name is composed of exactly one subdomain component followed by a\n", "   * {@linkplain #isPublicSuffix() public suffix}. For example, returns {@code true} for\n", "   * {@code google.com} and {@code foo.co.uk}, but not for {@code www.google.com} or {@code co.uk}.\n", "   * <p><b>Warning:</b> A {@code true} result from this method does not imply that the domain is at\n", "   * the highest level which is addressable as a host, as many public suffixes are also addressable\n", "   * hosts. For example, the domain {@code bar.uk.com} has a public suffix of {@code uk.com}, so it\n", "   * would return {@code true} from this method. But {@code uk.com} is itself an addressable host.\n", "   * <p>This method can be used to determine whether a domain is probably the highest level for\n", "   * which cookies may be set, though even that depends on individual browsers' implementations of\n", "   * cookie controls. See <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a> for details.\n"], "16": ["   * Returns the portion of this domain name that is one level beneath the public suffix. For\n", "   * example, for {@code x.adwords.google.co.uk} it returns {@code google.co.uk}, since\n", "   * {@code co.uk} is a public suffix.\n", "   * <p>If {@link #isTopPrivateDomain()} is true, the current domain name instance is returned.\n", "   * <p>This method should not be used to determine the topmost parent domain which is addressable\n", "   * as a host, as many public suffixes are also addressable hosts. For example, the domain\n", "   * {@code foo.bar.uk.com} has a public suffix of {@code uk.com}, so it would return\n", "   * {@code bar.uk.com} from this method. But {@code uk.com} is itself an addressable host.\n", "   * <p>This method can be used to determine the probable highest level parent domain for which\n", "   * cookies may be set, though even that depends on individual browsers' implementations of cookie\n", "   * controls.\n", "   * @throws IllegalStateException if this domain does not end with a public suffix\n"], "17": ["   * Returns an {@code InternetDomainName} that is the immediate ancestor of this one; that is, the\n", "   * current domain with the leftmost part removed. For example, the parent of\n", "   * {@code www.google.com} is {@code google.com}.\n", "   * @throws IllegalStateException if the domain has no parent, as determined by {@link #hasParent}\n"], "18": ["   * Returns the ancestor of the current domain at the given number of levels \"higher\" (rightward)\n", "   * in the subdomain list. The number of levels must be non-negative, and less than {@code N-1},\n", "   * where {@code N} is the number of parts in the domain.\n"], "19": ["   * Creates and returns a new {@code InternetDomainName} by prepending the argument and a dot to\n", "   * the current name. For example, {@code\n", "   * InternetDomainName.from(\"foo.com\").child(\"www.bar\")} returns a new {@code InternetDomainName}\n", "   * with the value {@code www.bar.foo.com}. Only lenient validation is performed, as described\n", "   * {@link #from(String) here}.\n"], "20": ["   * Indicates whether the argument is a syntactically valid domain name using lenient validation.\n", "   * Specifically, validation against <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a> (\n", "   * \"Internationalizing Domain Names in Applications\") is skipped.\n"], "21": ["   * Does the domain name match one of the \"wildcard\" patterns (e.g. {@code \"*.ar\"})?\n"], "22": ["   * Equality testing is based on the text supplied by the caller, after normalization as described\n", "   * in the class documentation. For example, a non-ASCII Unicode domain name and the Punycode\n", "   * version of the same domain name would not be considered equal.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * foo.co.uk}. Only syntactic analysis is performed; no DNS lookups or other\n", " * network interactions take place. Thus there is no guarantee that the domain\n", " * actually exists on the internet.\n", " * <p>One common use of this class is to determine whether a given string is\n", " * likely to represent an addressable domain on the web -- that is, for a\n", " * candidate string {@code \"xxx\"}, might browsing to {@code \"http://xxx/\"}\n", " * result in a webpage being displayed? In the past, this test was frequently\n", " * done by determining whether the domain ended with a {@linkplain\n", " * #isPublicSuffix() public suffix} but was not itself a public suffix. However,\n", " * this test is no longer accurate. There are many domains which are both public\n", " * suffixes and addressable as hosts; {@code \"uk.com\"} is one example. As a\n", " * result, the only useful test to determine if a domain is a plausible web host\n", " * is {@link #hasPublicSuffix()}. This will return {@code true} for many domains\n", " * which (currently) are not hosts, such as {@code \"com\"}, but given that any\n", " * public suffix may become a host without warning, it is better to err on the\n", " * side of permissiveness and thus avoid spurious rejection of valid sites.\n", " * <li>Unicode dot separators other than the ASCII period ({@code '.'}) are\n", " * converted to the ASCII period.\n", " * <p>The normalized values will be returned from {@link #toString()} and\n", " * {@link #parts()}, and will be reflected in the result of\n", " * {@link #equals(Object)}.\n", " * <p><a href=\"http://en.wikipedia.org/wiki/Internationalized_domain_name\">\n", " * Internationalized domain names</a> such as {@code \u7f51\u7edc.cn} are supported, as\n", " * are the equivalent <a\n", " * href=\"http://en.wikipedia.org/wiki/Internationalized_domain_name\">IDNA\n", " * Punycode-encoded</a> versions.\n"], "3": ["  private static final CharMatcher DOTS_MATCHER =\n", "      CharMatcher.anyOf(\".\\u3002\\uFF0E\\uFF61\");\n", "   * Value of {@link #publicSuffixIndex} which indicates that no public suffix\n", "   * was found.\n", "   * Maximum parts (labels) in a domain name. This value arises from\n", "   * the 255-octet limit described in\n", "   * <a href=\"http://www.ietf.org/rfc/rfc2181.txt\">RFC 2181</a> part 11 with\n", "   * the fact that the encoding of each part occupies at least two bytes\n", "   * (dot plus label externally, length byte plus label internally). Thus, if\n", "   * all labels have the minimum size of one byte, 127 of them will fit.\n", "   * Maximum length of a full domain name, including separators, and\n", "   * leaving room for the root label. See\n", "   * <a href=\"http://www.ietf.org/rfc/rfc2181.txt\">RFC 2181</a> part 11.\n"], "4": ["   * The index in the {@link #parts()} list at which the public suffix begins.\n", "   * For example, for the domain name {@code www.google.co.uk}, the value would\n", "   * be 2 (the index of the {@code co} part). The value is negative\n", "   * (specifically, {@link #NO_PUBLIC_SUFFIX_FOUND}) if no public suffix was\n"], "5": ["    checkArgument(name.length() <= MAX_LENGTH,\n", "        \"Domain name too long: '%s':\", name);\n", "    checkArgument(parts.size() <= MAX_PARTS,\n", "        \"Domain has too many parts: '%s'\", name);\n", "   * Returns the index of the leftmost part of the public suffix, or -1 if not\n", "   * found. Note that the value defined as the \"public suffix\" may not be a\n", "   * public suffix according to {@link #isPublicSuffix()} if the domain ends\n", "   * with an excluded domain pattern such as {@code \"nhs.uk\"}.\n"], "6": ["   * Returns an instance of {@link InternetDomainName} after lenient\n", "   * validation.  Specifically, validation against <a\n", "   * href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n", "   * (\"Internationalizing Domain Names in Applications\") is skipped, while\n", "   * validation against <a\n", "   * href=\"http://www.ietf.org/rfc/rfc1035.txt\">RFC 1035</a> is relaxed in\n", "   * the following ways:\n", "   * <li>Parts other than the final part may start with a digit, as mandated\n", "   *     by <a href=\"https://tools.ietf.org/html/rfc1123#section-2\">RFC\n", "   *     1123</a>.\n", "   * @throws IllegalArgumentException if {@code name} is not syntactically valid\n", "   *     according to {@link #isValid}\n"], "7": ["   * Validation method used by {@from} to ensure that the domain name is\n", "   * syntactically valid according to RFC 1035.\n"], "8": ["   * Helper method for {@link #validateSyntax(List)}. Validates that one part of\n", "   * a domain name is valid.\n"], "9": ["     * GWT claims to support java.lang.Character's char-classification methods,\n", "     * but it actually only works for ASCII. So for now, assume any non-ASCII\n", "     * characters are valid. The only place this seems to be documented is here:\n", "     * <p>ASCII characters in the part are expected to be valid per RFC 1035,\n", "     * with underscore also being allowed due to widespread practice.\n"], "10": ["     * Note that we allow (in contravention of a strict interpretation of the\n", "     * relevant RFCs) domain parts other than the last may begin with a digit\n", "     * (for example, \"3com.com\"). It's important to disallow an initial digit in\n", "     * the last part; it's the only thing that stops an IPv4 numeric address\n", "     * like 127.0.0.1 from looking like a valid domain name.\n"], "11": ["   * Returns the individual components of this domain name, normalized to all\n", "   * lower case. For example, for the domain name {@code mail.google.com}, this\n", "   * method returns the list {@code [\"mail\", \"google\", \"com\"]}.\n", "   * Indicates whether this domain name represents a <i>public suffix</i>, as\n", "   * defined by the Mozilla Foundation's\n", "   * <a href=\"http://publicsuffix.org/\">Public Suffix List</a> (PSL). A public\n", "   * suffix is one under which Internet users can directly register names, such\n", "   * as {@code com}, {@code co.uk} or {@code pvt.k12.wy.us}. Examples of domain\n", "   * names that are <i>not</i> public suffixes include {@code google}, {@code\n", "   * google.com} and {@code foo.co.uk}.\n", "   * @return {@code true} if this domain name appears exactly on the public\n", "   *     suffix list\n"], "12": ["   * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix()\n", "   * public suffix}, including if it is a public suffix itself. For example,\n", "   * returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and\n", "   * {@code com}, but not for {@code google} or {@code google.foo}. This is\n", "   * the recommended method for determining whether a domain is potentially an\n", "   * addressable host.\n"], "13": ["   * Returns the {@linkplain #isPublicSuffix() public suffix} portion of the\n", "   * domain name, or {@code null} if no public suffix is present.\n"], "14": ["   * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix()\n", "   * public suffix}, while not being a public suffix itself. For example,\n", "   * returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and\n", "   * {@code bar.ca.us}, but not for {@code google}, {@code com}, or {@code\n", "   * <p><b>Warning:</b> a {@code false} result from this method does not imply\n", "   * that the domain does not represent an addressable host, as many public\n", "   * suffixes are also addressable hosts. Use {@link #hasPublicSuffix()} for\n", "   * that test.\n", "   * <p>This method can be used to determine whether it will probably be\n", "   * possible to set cookies on the domain, though even that depends on\n", "   * individual browsers' implementations of cookie controls. See\n", "   * <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a> for details.\n"], "15": ["   * Indicates whether this domain name is composed of exactly one subdomain\n", "   * component followed by a {@linkplain #isPublicSuffix() public suffix}. For\n", "   * example, returns {@code true} for {@code google.com} and {@code foo.co.uk},\n", "   * but not for {@code www.google.com} or {@code co.uk}.\n", "   * <p><b>Warning:</b> A {@code true} result from this method does not imply\n", "   * that the domain is at the highest level which is addressable as a host, as\n", "   * many public suffixes are also addressable hosts. For example, the domain\n", "   * {@code bar.uk.com} has a public suffix of {@code uk.com}, so it would\n", "   * return {@code true} from this method. But {@code uk.com} is itself an\n", "   * addressable host.\n", "   * <p>This method can be used to determine whether a domain is probably the\n", "   * highest level for which cookies may be set, though even that depends on\n", "   * individual browsers' implementations of cookie controls. See\n", "   * <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a> for details.\n"], "16": ["   * Returns the portion of this domain name that is one level beneath the\n", "   * public suffix. For example, for {@code x.adwords.google.co.uk} it returns\n", "   * {@code google.co.uk}, since {@code co.uk} is a public suffix.\n", "   * <p>If {@link #isTopPrivateDomain()} is true, the current domain name\n", "   * instance is returned.\n", "   * <p>This method should not be used to determine the topmost parent domain\n", "   * which is addressable as a host, as many public suffixes are also\n", "   * addressable hosts. For example, the domain {@code foo.bar.uk.com} has\n", "   * a public suffix of {@code uk.com}, so it would return {@code bar.uk.com}\n", "   * from this method. But {@code uk.com} is itself an addressable host.\n", "   * <p>This method can be used to determine the probable highest level parent\n", "   * domain for which cookies may be set, though even that depends on individual\n", "   * browsers' implementations of cookie controls.\n", "   * @throws IllegalStateException if this domain does not end with a\n", "   *     public suffix\n"], "17": ["   * Returns an {@code InternetDomainName} that is the immediate ancestor of\n", "   * this one; that is, the current domain with the leftmost part removed. For\n", "   * example, the parent of {@code www.google.com} is {@code google.com}.\n", "   * @throws IllegalStateException if the domain has no parent, as determined\n", "   *     by {@link #hasParent}\n"], "18": ["   * Returns the ancestor of the current domain at the given number of levels\n", "   * \"higher\" (rightward) in the subdomain list. The number of levels must be\n", "   * non-negative, and less than {@code N-1}, where {@code N} is the number of\n", "   * parts in the domain.\n"], "19": ["   * Creates and returns a new {@code InternetDomainName} by prepending the\n", "   * argument and a dot to the current name. For example, {@code\n", "   * InternetDomainName.from(\"foo.com\").child(\"www.bar\")} returns a new\n", "   * {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only\n", "   * lenient validation is performed, as described {@link #from(String) here}.\n"], "20": ["   * Indicates whether the argument is a syntactically valid domain name using\n", "   * lenient validation. Specifically, validation against <a\n", "   * href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n", "   * (\"Internationalizing Domain Names in Applications\") is skipped.\n"], "21": ["   * Does the domain name match one of the \"wildcard\" patterns (e.g.\n", "   * {@code \"*.ar\"})?\n"], "22": ["   * Equality testing is based on the text supplied by the caller,\n", "   * after normalization as described in the class documentation. For\n", "   * example, a non-ASCII Unicode domain name and the Punycode version\n", "   * of the same domain name would not be considered equal.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 59, 60, 61, 62, 63, 64, 65], "3": [74, 79, 86, 87, 88, 89, 94, 95], "4": [116, 117, 118], "5": [138, 142, 149, 150, 151, 152], "6": [180, 181, 182, 183, 187, 188, 193, 194], "7": [202, 203], "8": [232, 233], "9": [249, 250, 251, 254, 255], "10": [272, 273, 274, 275], "11": [286, 287, 288, 295, 296, 297, 298, 299, 301], "12": [309, 310, 311, 312, 313], "13": [322, 323], "14": [332, 333, 334, 335, 338, 339, 340, 342, 343, 344], "15": [353, 354, 355, 357, 358, 359, 360, 362, 363, 364], "16": [373, 374, 375, 377, 379, 380, 381, 382, 384, 385, 386, 388], "17": [407, 408, 409, 411], "18": [419, 420, 421], "19": [430, 431, 432, 433, 434], "20": [444, 445, 446], "21": [474], "22": [490, 491, 492]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70], "3": [79, 80, 85, 86, 93, 94, 95, 96, 97, 98, 103, 104, 105], "4": [126, 127, 128, 129], "5": [149, 150, 154, 155, 162, 163, 164, 165], "6": [193, 194, 195, 196, 197, 198, 199, 203, 204, 205, 210, 211], "7": [219, 220], "8": [249, 250], "9": [266, 267, 268, 271, 272], "10": [289, 290, 291, 292, 293], "11": [304, 305, 306, 313, 314, 315, 316, 317, 318, 319, 321, 322], "12": [330, 331, 332, 333, 334, 335], "13": [344, 345], "14": [354, 355, 356, 357, 360, 361, 362, 363, 365, 366, 367, 368], "15": [377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392], "16": [401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419], "17": [438, 439, 440, 442, 443], "18": [451, 452, 453, 454], "19": [463, 464, 465, 466, 467], "20": [477, 478, 479, 480], "21": [508, 509], "22": [525, 526, 527, 528]}}, {"5": "guava/src/com/google/common/net/MediaType.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": ["  private static final CharMatcher TOKEN_MATCHER =\n", "      ascii()\n", "          .and(javaIsoControl().negate())\n", "          .and(CharMatcher.isNot(' '))\n", "          .and(CharMatcher.noneOf(\"()<>@,;:\\\\\\\"/[]?=\"));\n", "  private static final CharMatcher QUOTED_TEXT_MATCHER = ascii().and(CharMatcher.noneOf(\"\\\"\\\\\\r\"));\n"], "3": ["   * \"common name\" of the media. This is often, but not necessarily the same as the subtype.\n"], "4": ["   * <a href=\"http://www.iana.org/assignments/media-types/text/tab-separated-values\">Tab separated\n", "   * values</a>.\n"], "5": ["   * The media type for the Photoshop File Format ({@code psd} files) as defined by\n", "   * <a href=\"http://www.iana.org/assignments/media-types/image/vnd.adobe.photoshop\">IANA</a>, and\n", "   * found in {@code /etc/mime.types}, e.g.\n", "   * <a href=\"http://svn.apache.org/repos/asf/httpd/httpd/branches/1.3.x/conf/mime.types\"></a> of\n", "   * the Apache <a href=\"http://httpd.apache.org/\">HTTPD project</a>; for the specification, see\n", "   * Adobe Photoshop Document Format</a> and\n", "   * <a href=\"http://en.wikipedia.org/wiki/Adobe_Photoshop#File_format\">Wikipedia</a>; this is the\n", "   * regular output/input of Photoshop (which can also export to various image formats; note that\n", "   * files with extension \"PSB\" are in a distinct but related format). <p>This is a more recent\n", "   * replacement for the older, experimental type {@code x-photoshop}:\n", "   * <a href=\"http://tools.ietf.org/html/rfc2046#section-6\">RFC-2046.6</a>.\n"], "6": ["   * Media type for L24 audio, as defined by <a href=\"https://tools.ietf.org/html/rfc3190\">RFC\n", "   * 3190</a>.\n"], "7": ["   * Media type for Vorbis Audio, as defined by <a href=\"http://tools.ietf.org/html/rfc5215\">RFC\n", "   * 5215</a>.\n"], "8": ["   * <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dd562994(v=vs.85).aspx\">file\n", "   * name extensions for Windows Media metafiles</a>.\n"], "9": ["   * <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dd562994(v=vs.85).aspx\">file\n", "   * name extensions for Windows Media metafiles</a>.\n"], "10": ["   * Media type for WAVE format, as defined by <a href=\"https://tools.ietf.org/html/rfc2361\">RFC\n", "   * 2361</a>.\n"], "11": ["   * Media type for Flash video. For more information, see <a href=\n", "   * \"http://help.adobe.com/en_US/ActionScript/3.0_ProgrammingAS3/WS5b3ccc516d4fbf351e63e3d118a9b90204-7d48.html\"\n"], "12": ["   * <a href=\"ftp://www.3gpp.org/tsg_sa/TSG_SA/TSGS_23/Docs/PDF/SP-040065.pdf#page=10\">3GPP TS\n", "   * 26.244</a>.\n"], "13": ["   * <a href=\"http://www.3gpp2.org/Public_html/specs/C.S0050-B_v1.0_070521.pdf#page=16\">3GPP2\n", "   * C.S0050-B</a>.\n"], "14": ["  public static final MediaType APPLE_PASSBOOK =\n", "      createConstant(APPLICATION_TYPE, \"vnd.apple.pkpass\");\n"], "15": ["  public static final MediaType FORM_DATA =\n", "      createConstant(APPLICATION_TYPE, \"x-www-form-urlencoded\");\n"], "16": ["   * other situations as it is not specified by any RFC and does not appear in the\n", "   * <a href=\"http://www.iana.org/assignments/media-types\">/IANA MIME Media Types</a> list. Consider\n", "\n", "  /**\n", "   * <a href=\"http://www.rfc-editor.org/rfc/rfc4329.txt\">RFC 4329</a> declares this to be the\n", "   * correct media type for JavaScript, but {@link #TEXT_JAVASCRIPT_UTF_8 text/javascript} may be\n", "   * necessary in certain situations for compatibility.\n", "   */\n", "   * Media type for the <a href=\"http://www.w3.org/TR/appmanifest/\">Manifest for a web\n", "   * application</a>.\n"], "17": ["   * Media type for <a href=\"http://goo.gl/1pGBFm\">Apple over-the-air mobile configuration\n", "   * profiles</a>.\n"], "18": ["  public static final MediaType OOXML_DOCUMENT =\n", "      createConstant(\n", "          APPLICATION_TYPE, \"vnd.openxmlformats-officedocument.wordprocessingml.document\");\n", "  public static final MediaType OOXML_PRESENTATION =\n", "      createConstant(\n", "          APPLICATION_TYPE, \"vnd.openxmlformats-officedocument.presentationml.presentation\");\n"], "19": ["   * <a href=\"http://www.iana.org/assignments/media-types/application/font-sfnt\">registered</a> with\n", "   * the IANA.\n", "  public static final MediaType SHOCKWAVE_FLASH =\n", "      createConstant(APPLICATION_TYPE, \"x-shockwave-flash\");\n"], "20": ["   * Media type for the <a href=\"http://en.wikipedia.org/wiki/Web_Open_Font_Format\">Web Open Font\n", "   * Format</a> (WOFF) <a href=\"http://www.w3.org/TR/WOFF/\">defined</a> by the W3C. This is\n", "   * <a href=\"http://www.iana.org/assignments/media-types/application/font-woff\">registered</a> with\n", "   * the IANA.\n"], "21": ["   * <a href=\"http://docs.oasis-open.org/xri/xrd/v1.0/cd02/xrd-1.0-cd02.html\">XRD definition</a> and\n", "   * implemented in projects such as <a href=\"http://code.google.com/p/webfinger/\">WebFinger</a>.\n"], "22": ["  private MediaType(String type, String subtype, ImmutableListMultimap<String, String> parameters) {\n", "  /** Returns the top-level media type. For example, {@code \"text\"} in {@code \"text/plain\"}. */\n", "  /** Returns the media subtype. For example, {@code \"plain\"} in {@code \"text/plain\"}. */\n"], "23": ["    return Maps.transformValues(\n", "        parameters.asMap(),\n", "          @Override\n", "          public ImmutableMultiset<String> apply(Collection<String> input) {\n"], "24": ["   * media type this method does not consider the number of occurrences of a parameter. For example,\n", "   * {@code \"text/plain; charset=UTF-8\"} satisfies\n"], "25": ["   *     type, but not the subtype.\n"], "26": ["  private static MediaType create(\n", "      String type, String subtype, Multimap<String, String> parameters) {\n", "    checkArgument(\n", "        !WILDCARD.equals(normalizedType) || WILDCARD.equals(normalizedSubtype),\n"], "27": ["  @Override\n", "  public boolean equals(@Nullable Object obj) {\n"], "28": ["  @Override\n", "  public int hashCode() {\n"], "29": ["   * Returns the string representation of this media type in the format described in\n", "   * <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>.\n", "  @Override\n", "  public String toString() {\n"], "30": ["      Multimap<String, String> quotedParameters =\n", "          Multimaps.transformValues(\n", "              parameters,\n", "              new Function<String, String>() {\n", "                @Override\n", "                public String apply(String value) {\n", "                  return TOKEN_MATCHER.matchesAllOf(value) ? value : escapeAndQuote(value);\n", "                }\n", "              });\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": ["  private static final CharMatcher TOKEN_MATCHER = ascii().and(javaIsoControl().negate())\n", "      .and(CharMatcher.isNot(' '))\n", "      .and(CharMatcher.noneOf(\"()<>@,;:\\\\\\\"/[]?=\"));\n", "  private static final CharMatcher QUOTED_TEXT_MATCHER = ascii()\n", "      .and(CharMatcher.noneOf(\"\\\"\\\\\\r\"));\n"], "3": ["   * \"common name\" of the media.  This is often, but not necessarily the same as the subtype.\n"], "4": ["   * <a href=\"http://www.iana.org/assignments/media-types/text/tab-separated-values\">\n", "   * Tab separated values</a>.\n"], "5": ["   * The media type for the Photoshop File Format ({@code psd} files) as defined by <a href=\n", "   * \"http://www.iana.org/assignments/media-types/image/vnd.adobe.photoshop\">IANA</a>, and found in\n", "   * {@code /etc/mime.types}, e.g. <a href=\n", "   * \"http://svn.apache.org/repos/asf/httpd/httpd/branches/1.3.x/conf/mime.types\"></a> of the Apache\n", "   * <a href=\"http://httpd.apache.org/\">HTTPD project</a>; for the specification, see\n", "   * Adobe Photoshop Document Format</a> and <a href=\n", "   * \"http://en.wikipedia.org/wiki/Adobe_Photoshop#File_format\">Wikipedia</a>; this is the regular\n", "   * output/input of Photoshop (which can also export to various image formats; note that files with\n", "   * extension \"PSB\" are in a distinct but related format).\n", "   * <p>This is a more recent replacement for the older, experimental type\n", "   * {@code x-photoshop}: <a href=\"http://tools.ietf.org/html/rfc2046#section-6\">RFC-2046.6</a>.\n"], "6": ["   * Media type for L24 audio, as defined by\n", "   * <a href=\"https://tools.ietf.org/html/rfc3190\">RFC 3190</a>.\n"], "7": ["   * Media type for Vorbis Audio, as defined by\n", "   * <a href=\"http://tools.ietf.org/html/rfc5215\">RFC 5215</a>.\n"], "8": ["   * <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dd562994(v=vs.85).aspx\"\n", "   * >file name extensions for Windows Media metafiles</a>.\n"], "9": ["   * <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dd562994(v=vs.85).aspx\"\n", "   * >file name extensions for Windows Media metafiles</a>.\n"], "10": ["   * Media type for WAVE format, as defined by\n", "   * <a href=\"https://tools.ietf.org/html/rfc2361\">RFC 2361</a>.\n"], "11": ["   * Media type for Flash video. For more information, see\n", "   * <a href=\"http://help.adobe.com/en_US/ActionScript/3.0_ProgrammingAS3/WS5b3ccc516d4fbf351e63e3d118a9b90204-7d48.html\"\n"], "12": ["   * <a href=\"ftp://www.3gpp.org/tsg_sa/TSG_SA/TSGS_23/Docs/PDF/SP-040065.pdf#page=10\"\n", "   * >3GPP TS 26.244</a>.\n"], "13": ["   * <a href=\"http://www.3gpp2.org/Public_html/specs/C.S0050-B_v1.0_070521.pdf#page=16\"\n", "   * >3GPP2 C.S0050-B</a>.\n"], "14": ["  public static final MediaType APPLE_PASSBOOK = createConstant(APPLICATION_TYPE,\n", "      \"vnd.apple.pkpass\");\n"], "15": ["  public static final MediaType FORM_DATA = createConstant(APPLICATION_TYPE,\n", "      \"x-www-form-urlencoded\");\n"], "16": ["   * other situations as it is not specified by any RFC and does not appear in the <a href=\n", "   * \"http://www.iana.org/assignments/media-types\">/IANA MIME Media Types</a> list. Consider\n", "   *\n", "   /**\n", "    * <a href=\"http://www.rfc-editor.org/rfc/rfc4329.txt\">RFC 4329</a> declares this to be the\n", "    * correct media type for JavaScript, but {@link #TEXT_JAVASCRIPT_UTF_8 text/javascript} may be\n", "    * necessary in certain situations for compatibility.\n", "    */\n", "   * Media type for the\n", "   * <a href=\"http://www.w3.org/TR/appmanifest/\">Manifest for a web application</a>.\n"], "17": ["   * Media type for\n", "   * <a href=\"http://goo.gl/1pGBFm\">Apple over-the-air mobile configuration profiles</a>.\n"], "18": ["  public static final MediaType OOXML_DOCUMENT = createConstant(APPLICATION_TYPE,\n", "      \"vnd.openxmlformats-officedocument.wordprocessingml.document\");\n", "  public static final MediaType OOXML_PRESENTATION = createConstant(APPLICATION_TYPE,\n", "      \"vnd.openxmlformats-officedocument.presentationml.presentation\");\n"], "19": ["   * <a href=\"http://www.iana.org/assignments/media-types/application/font-sfnt\">registered</a>\n", "   * with the IANA.\n", "  public static final MediaType SHOCKWAVE_FLASH = createConstant(APPLICATION_TYPE,\n", "      \"x-shockwave-flash\");\n"], "20": ["   * Media type for the\n", "   * <a href=\"http://en.wikipedia.org/wiki/Web_Open_Font_Format\">Web Open Font Format</a> (WOFF)\n", "   * <a href=\"http://www.w3.org/TR/WOFF/\">defined</a> by the W3C. This is\n", "   * <a href=\"http://www.iana.org/assignments/media-types/application/font-woff\">registered</a>\n", "   * with the IANA.\n"], "21": ["   * <a href=\"http://docs.oasis-open.org/xri/xrd/v1.0/cd02/xrd-1.0-cd02.html\"> XRD definition</a>\n", "   * and implemented in projects such as\n", "   * <a href=\"http://code.google.com/p/webfinger/\">WebFinger</a>.\n"], "22": ["  private MediaType(String type, String subtype,\n", "      ImmutableListMultimap<String, String> parameters) {\n", "  /** Returns the top-level media type.  For example, {@code \"text\"} in {@code \"text/plain\"}. */\n", "  /** Returns the media subtype.  For example, {@code \"plain\"} in {@code \"text/plain\"}. */\n"], "23": ["    return Maps.transformValues(parameters.asMap(),\n", "          @Override public ImmutableMultiset<String> apply(Collection<String> input) {\n"], "24": ["   * media type this method does not consider the number of occurrences of a parameter.  For\n", "   * example, {@code \"text/plain; charset=UTF-8\"} satisfies\n"], "25": ["   * type, but not the subtype.\n"], "26": ["  private static MediaType create(String type, String subtype,\n", "      Multimap<String, String> parameters) {\n", "    checkArgument(!WILDCARD.equals(normalizedType) || WILDCARD.equals(normalizedSubtype),\n"], "27": ["  @Override public boolean equals(@Nullable Object obj) {\n"], "28": ["  @Override public int hashCode() {\n"], "29": ["   * Returns the string representation of this media type in the format described in <a\n", "   * href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>.\n", "  @Override public String toString() {\n"], "30": ["      Multimap<String, String> quotedParameters = Multimaps.transformValues(parameters,\n", "          new Function<String, String>() {\n", "            @Override public String apply(String value) {\n", "              return TOKEN_MATCHER.matchesAllOf(value) ? value : escapeAndQuote(value);\n", "            }\n", "          });\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [87, 88, 89, 90, 91, 92], "3": [126], "4": [155, 156], "5": [187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198], "6": [214, 215], "7": [238, 239], "8": [247, 248], "9": [256, 257], "10": [272, 273], "11": [288, 289], "12": [298, 299], "13": [307, 308], "14": [336, 337], "15": [358, 359], "16": [372, 373, 379, 381, 382, 383, 384, 385, 390, 391], "17": [402, 403], "18": [415, 416, 417, 418, 419, 420], "19": [446, 447, 452, 453], "20": [469, 470, 471, 472], "21": [481, 482], "22": [495, 501, 506], "23": [517, 518, 520, 521], "24": [630, 631], "25": [644], "26": [695, 696, 702, 703], "27": [814, 815], "28": [829, 830], "29": [843, 844, 846, 847], "30": [861, 862, 863, 864, 865, 866, 867, 868, 869]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [89, 90, 91, 92, 93], "3": [127], "4": [156, 157], "5": [188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199], "6": [215, 216], "7": [239, 240], "8": [248, 249], "9": [257, 258], "10": [273, 274], "11": [289, 290], "12": [299, 300], "13": [308, 309], "14": [337, 338], "15": [359, 360], "16": [373, 374, 377, 382, 383, 384, 385, 386, 391, 392], "17": [403, 404], "18": [416, 417, 418, 419], "19": [444, 445, 450, 451], "20": [467, 468, 469, 470, 471], "21": [480, 481, 482], "22": [495, 496, 502, 507], "23": [518, 520], "24": [629, 630], "25": [643], "26": [694, 695, 701], "27": [812], "28": [826], "29": [839, 840, 842], "30": [856, 857, 858, 859, 860, 861]}}, {"6": "guava/src/com/google/common/net/PercentEscaper.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * A {@code UnicodeEscaper} that escapes some set of Java characters using a UTF-8 based percent\n", " * encoding scheme. The set of safe characters (those which remain unescaped) can be specified on\n", " * construction.\n", " * <p>This class is primarily used for creating URI escapers in {@link UrlEscapers} but can be used\n", " * directly if required. While URI escapers impose specific semantics on which characters are\n", " * considered 'safe', this class has a minimal set of restrictions.\n", " * <li>If {@code plusForSpace} was specified, the space character \" \" is converted into a plus sign\n", " *     {@code \"+\"}.\n", " * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each byte\n", " *     is then represented by the 3-character string \"%XX\", where \"XX\" is the two-digit, uppercase,\n", " *     hexadecimal representation of the byte value.\n", " * <p>For performance reasons the only currently supported character encoding of this class is\n", " * UTF-8.\n", " * <i>\"URI producers and normalizers should use uppercase hexadecimal digits for all\n", " * percent-encodings.\"</i>\n"], "3": ["  private static final char[] PLUS_SIGN = {'+'};\n", "  private static final char[] UPPER_HEX_DIGITS = \"0123456789ABCDEF\".toCharArray();\n"], "4": ["   * An array of flags where for any {@code char c} if {@code safeOctets[c]} is true then {@code c}\n", "   * should remain unmodified in the output. If {@code c > safeOctets.length} then it should be\n", "   * escaped.\n", "   * Constructs a percent escaper with the specified safe characters and optional handling of the\n", "   * space character.\n", "   * <p>Not that it is allowed, but not necessarily desirable to specify {@code %} as a safe\n", "   * character. This has the effect of creating an escaper which has no well defined inverse but it\n", "   * can be useful when escaping additional characters.\n", "   * @param safeChars a non null string specifying additional safe characters for this escaper (the\n", "   *     ranges 0..9, a..z and A..Z are always safe and should not be specified here)\n", "   * @param plusForSpace true if ASCII space should be escaped to {@code +} rather than {@code %20}\n", "    checkNotNull(safeChars); // eager for GWT.\n", "          \"Alphanumeric characters are always 'safe' and should not be explicitly specified\");\n", "    safeChars += \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n"], "5": ["   * Creates a boolean array with entries corresponding to the character values specified in\n", "   * safeChars set to true. The array is as small as is required to hold the given character\n", "   * information.\n"], "6": ["   * Overridden for performance. For unescaped strings this improved the performance of the uri\n", "   * escaper from ~760ns to ~400ns as measured by {@link CharEscapersBenchmark}.\n"], "7": ["   * Overridden for performance. For unescaped strings this improved the performance of the uri\n", "   * escaper from ~400ns to ~170ns as measured by {@link CharEscapersBenchmark}.\n"], "8": ["      throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * A {@code UnicodeEscaper} that escapes some set of Java characters using a\n", " * UTF-8 based percent encoding scheme. The set of safe characters (those which\n", " * remain unescaped) can be specified on construction.\n", " * <p>This class is primarily used for creating URI escapers in {@link\n", " * UrlEscapers} but can be used directly if required. While URI escapers impose\n", " * specific semantics on which characters are considered 'safe', this class has\n", " * a minimal set of restrictions.\n", " * <li>If {@code plusForSpace} was specified, the space character \" \" is\n", " *     converted into a plus sign {@code \"+\"}.\n", " * <li>All other characters are converted into one or more bytes using UTF-8\n", " *     encoding and each byte is then represented by the 3-character string\n", " *     \"%XX\", where \"XX\" is the two-digit, uppercase, hexadecimal representation\n", " *     of the byte value.\n", " * <p>For performance reasons the only currently supported character encoding of\n", " * this class is UTF-8.\n", " * <i>\"URI producers and normalizers should use uppercase hexadecimal digits\n", " * for all percent-encodings.\"</i>\n"], "3": ["  private static final char[] PLUS_SIGN = { '+' };\n", "  private static final char[] UPPER_HEX_DIGITS =\n", "      \"0123456789ABCDEF\".toCharArray();\n"], "4": ["   * An array of flags where for any {@code char c} if {@code safeOctets[c]} is\n", "   * true then {@code c} should remain unmodified in the output. If\n", "   * {@code c > safeOctets.length} then it should be escaped.\n", "   * Constructs a percent escaper with the specified safe characters and\n", "   * optional handling of the space character.\n", "   * <p>Not that it is allowed, but not necessarily desirable to specify {@code %}\n", "   * as a safe character. This has the effect of creating an escaper which has no\n", "   * well defined inverse but it can be useful when escaping additional characters.\n", "   * @param safeChars a non null string specifying additional safe characters\n", "   *        for this escaper (the ranges 0..9, a..z and A..Z are always safe and\n", "   *        should not be specified here)\n", "   * @param plusForSpace true if ASCII space should be escaped to {@code +}\n", "   *        rather than {@code %20}\n", "    checkNotNull(safeChars);  // eager for GWT.\n", "          \"Alphanumeric characters are always 'safe' and should not be \" +\n", "          \"explicitly specified\");\n", "    safeChars += \"abcdefghijklmnopqrstuvwxyz\" +\n", "                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n", "                 \"0123456789\";\n"], "5": ["   * Creates a boolean array with entries corresponding to the character values\n", "   * specified in safeChars set to true. The array is as small as is required to\n", "   * hold the given character information.\n"], "6": ["   * Overridden for performance. For unescaped strings this improved the\n", "   * performance of the uri escaper from ~760ns to ~400ns as measured by\n", "   * {@link CharEscapersBenchmark}.\n"], "7": ["   * Overridden for performance. For unescaped strings this improved the\n", "   * performance of the uri escaper from ~400ns to ~170ns as measured by\n", "   * {@link CharEscapersBenchmark}.\n"], "8": ["      throw new IllegalArgumentException(\n", "          \"Invalid unicode character value \" + cp);\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [24, 25, 26, 28, 29, 30, 35, 36, 37, 38, 39, 42, 43, 47, 48], "3": [58, 61], "4": [69, 70, 71, 76, 77, 79, 80, 81, 83, 84, 85, 91, 95, 97], "5": [109, 110, 111], "6": [127, 128], "7": [143, 144], "8": [235]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [26, 27, 28, 30, 31, 32, 33, 38, 39, 40, 41, 42, 43, 46, 47, 51, 52], "3": [62, 65, 66], "4": [74, 75, 76, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 98, 102, 103, 105, 106, 107], "5": [119, 120, 121], "6": [137, 138, 139], "7": [154, 155, 156], "8": [247, 248]}}, {"7": "guava/src/com/google/common/net/UrlEscapers.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * {@code Escaper} instances suitable for strings to be included in particular sections of URLs.\n", " * <p>If the resulting URLs are inserted into an HTML or XML document, they will require additional\n", " * escaping with {@link com.google.common.html.HtmlEscapers} or\n", " * {@link com.google.common.xml.XmlEscapers}.\n"], "3": ["   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in\n", "   * <a href=\"http://goo.gl/OQEc8\">URL form parameter names and values</a>. Escaping is performed\n", "   * with the UTF-8 character encoding. The caller is responsible for\n", "   * <a href=\"http://goo.gl/i20ms\">replacing any unpaired carriage return or line feed characters\n", "   * with a CR+LF pair</a> on any non-file inputs before escaping them with this escaper.\n", "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the\n", "   *     same.\n", "   * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n", "   *     byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n", "   *     uppercase, hexadecimal representation of the byte value.\n", "   * <p>This escaper is suitable for escaping parameter names and values even when\n", "   * <a href=\"http://goo.gl/utn6M\">using the non-standard semicolon</a>, rather than the ampersand,\n", "   * as a parameter delimiter. Nevertheless, we recommend using the ampersand unless you must\n", "   * interoperate with systems that require semicolons.\n", "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.\n", "   * From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>:\n", "   *\n", "   * <blockquote><p>\"URI producers and normalizers should use uppercase hexadecimal digits for all\n", "   * percent-encodings.\"</blockquote>\n"], "4": ["   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in\n", "   * <a href=\"http://goo.gl/swjbR\">URL path segments</a>. The returned escaper escapes all non-ASCII\n", "   * characters, even though <a href=\"http://goo.gl/xIJWe\">many of these are accepted in modern\n", "   * URLs</a>. (<a href=\"http://goo.gl/WMGvZ\">If the escaper were to leave these characters\n", "   * unescaped, they would be escaped by the consumer at parse time, anyway.</a>) Additionally, the\n", "   * escaper escapes the slash character (\"/\"). While slashes are acceptable in URL paths, they are\n", "   * considered by the specification to be separators between \"path segments.\" This implies that, if\n", "   * you wish for your path to contain slashes, you must escape each segment separately and then\n", "   * join them.\n", "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the\n", "   *     same.\n", "   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", and \"=\" remain the\n", "   *     same.\n", "   * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n", "   *     byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n", "   *     uppercase, hexadecimal representation of the byte value.\n", "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.\n", "   * From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>:\n", "   *\n", "   * <blockquote><p>\"URI producers and normalizers should use uppercase hexadecimal digits for all\n", "   * percent-encodings.\"</blockquote>\n"], "5": ["   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in a\n", "   * <a href=\"http://goo.gl/xXEq4p\">URL fragment</a>. The returned escaper escapes all non-ASCII\n", "   * characters, even though <a href=\"http://goo.gl/xIJWe\">many of these are accepted in modern\n", "   * URLs</a>. (<a href=\"http://goo.gl/WMGvZ\">If the escaper were to leave these characters\n", "   * unescaped, they would be escaped by the consumer at parse time, anyway.</a>)\n", "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the\n", "   *     same.\n", "   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", and \"=\" remain the\n", "   *     same.\n", "   * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n", "   *     byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n", "   *     uppercase, hexadecimal representation of the byte value.\n", "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.\n", "   * From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>:\n", "   *\n", "   * <blockquote><p>\"URI producers and normalizers should use uppercase hexadecimal digits for all\n", "   * percent-encodings.\"</blockquote>\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * {@code Escaper} instances suitable for strings to be included in particular\n", " * sections of URLs.\n", " * <p>If the resulting URLs are inserted into an HTML or XML document, they will\n", " * require additional escaping with {@link com.google.common.html.HtmlEscapers}\n", " * or {@link com.google.common.xml.XmlEscapers}.\n"], "3": ["   * Returns an {@link Escaper} instance that escapes strings so they can be\n", "   * safely included in <a href=\"http://goo.gl/OQEc8\">URL form parameter names\n", "   * and values</a>. Escaping is performed with the UTF-8 character encoding.\n", "   * The caller is responsible for <a href=\"http://goo.gl/i20ms\">replacing any\n", "   * unpaired carriage return or line feed characters with a CR+LF pair</a> on\n", "   * any non-file inputs before escaping them with this escaper.\n", "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\"\n", "   *     through \"9\" remain the same.\n", "   * <li>All other characters are converted into one or more bytes using UTF-8\n", "   *     encoding and each byte is then represented by the 3-character string\n", "   *     \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal\n", "   *     representation of the byte value.\n", "   * <p>This escaper is suitable for escaping parameter names and values even\n", "   * when <a href=\"http://goo.gl/utn6M\">using the non-standard semicolon</a>,\n", "   * rather than the ampersand, as a parameter delimiter. Nevertheless, we\n", "   * recommend using the ampersand unless you must interoperate with systems\n", "   * that require semicolons.\n", "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase\n", "   * hexadecimal sequences. From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">\n", "   * RFC 3986</a>:<br>\n", "   * <i>\"URI producers and normalizers should use uppercase hexadecimal digits\n", "   * for all percent-encodings.\"</i>\n"], "4": ["   * Returns an {@link Escaper} instance that escapes strings so they can be\n", "   * safely included in <a href=\"http://goo.gl/swjbR\">URL path segments</a>. The\n", "   * returned escaper escapes all non-ASCII characters, even though <a\n", "   * href=\"http://goo.gl/xIJWe\">many of these are accepted in modern URLs</a>.\n", "   * (<a href=\"http://goo.gl/WMGvZ\">If the escaper were to leave these\n", "   * characters unescaped, they would be escaped by the consumer at parse time,\n", "   * anyway.</a>) Additionally, the escaper escapes the slash character (\"/\").\n", "   * While slashes are acceptable in URL paths, they are considered by the\n", "   * specification to be separators between \"path segments.\" This implies that,\n", "   * if you wish for your path to contain slashes, you must escape each segment\n", "   * separately and then join them.\n", "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\"\n", "   *     through \"9\" remain the same.\n", "   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\",\n", "   *     and \"=\" remain the same.\n", "   * <li>All other characters are converted into one or more bytes using UTF-8\n", "   *     encoding and each byte is then represented by the 3-character string\n", "   *     \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal\n", "   *     representation of the byte value.\n", "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase\n", "   * hexadecimal sequences. From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">\n", "   * RFC 3986</a>:<br>\n", "   * <i>\"URI producers and normalizers should use uppercase hexadecimal digits\n", "   * for all percent-encodings.\"</i>\n"], "5": ["   * Returns an {@link Escaper} instance that escapes strings so they can be\n", "   * safely included in a <a href=\"http://goo.gl/xXEq4p\">URL fragment</a>. The\n", "   * returned escaper escapes all non-ASCII characters, even though <a\n", "   * href=\"http://goo.gl/xIJWe\">many of these are accepted in modern URLs</a>.\n", "   * (<a href=\"http://goo.gl/WMGvZ\">If the escaper were to leave these\n", "   * characters unescaped, they would be escaped by the consumer at parse time,\n", "   * anyway.</a>)\n", "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\"\n", "   *     through \"9\" remain the same.\n", "   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\",\n", "   *     and \"=\" remain the same.\n", "   * <li>All other characters are converted into one or more bytes using UTF-8\n", "   *     encoding and each byte is then represented by the 3-character string\n", "   *     \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal\n", "   *     representation of the byte value.\n", "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase\n", "   * hexadecimal sequences. From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">\n", "   * RFC 3986</a>:<br>\n", "   * <i>\"URI producers and normalizers should use uppercase hexadecimal digits\n", "   * for all percent-encodings.\"</i>\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [22, 24, 25, 26], "3": [49, 50, 51, 52, 53, 57, 58, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75], "4": [86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 102, 103, 105, 106, 107, 110, 111, 112, 113, 114], "5": [124, 125, 126, 127, 128, 132, 133, 136, 137, 140, 141, 142, 145, 146, 147, 148, 149]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [24, 25, 27, 28, 29], "3": [52, 53, 54, 55, 56, 57, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81], "4": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 110, 111, 113, 114, 115, 116, 119, 120, 121, 122, 123], "5": [133, 134, 135, 136, 137, 138, 139, 143, 144, 147, 148, 151, 152, 153, 154, 157, 158, 159, 160, 161]}}, {"8": "guava/src/com/google/common/net/package-info.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n", " * This package contains utility methods and classes for working with net addresses (numeric IP and\n", " * domain names).\n", " * <p>This package is a part of the open-source <a href=\"http://github.com/google/guava\">Guava</a>\n", " * library.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " * This package contains utility methods and classes for working with net\n", " * addresses (numeric IP and domain names).\n", " * <p>This package is a part of the open-source\n", " * <a href=\"http://github.com/google/guava\">Guava</a> library.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12, 16, 17, 19, 20]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14, 18, 19, 21, 22]}}]}
