{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "22": " * {@code Escaper} instances suitable for strings to be included in particular sections of URLs.\n",
        "24": " * <p>If the resulting URLs are inserted into an HTML or XML document, they will require additional\n",
        "25": " * escaping with {@link com.google.common.html.HtmlEscapers} or\n",
        "26": " * {@link com.google.common.xml.XmlEscapers}.\n",
        "49": "   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in\n",
        "50": "   * <a href=\"http://goo.gl/OQEc8\">URL form parameter names and values</a>. Escaping is performed\n",
        "51": "   * with the UTF-8 character encoding. The caller is responsible for\n",
        "52": "   * <a href=\"http://goo.gl/i20ms\">replacing any unpaired carriage return or line feed characters\n",
        "53": "   * with a CR+LF pair</a> on any non-file inputs before escaping them with this escaper.\n",
        "57": "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the\n",
        "58": "   *     same.\n",
        "61": "   * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n",
        "62": "   *     byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n",
        "63": "   *     uppercase, hexadecimal representation of the byte value.\n",
        "66": "   * <p>This escaper is suitable for escaping parameter names and values even when\n",
        "67": "   * <a href=\"http://goo.gl/utn6M\">using the non-standard semicolon</a>, rather than the ampersand,\n",
        "68": "   * as a parameter delimiter. Nevertheless, we recommend using the ampersand unless you must\n",
        "69": "   * interoperate with systems that require semicolons.\n",
        "71": "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.\n",
        "72": "   * From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>:\n",
        "73": "   *\n",
        "74": "   * <blockquote><p>\"URI producers and normalizers should use uppercase hexadecimal digits for all\n",
        "75": "   * percent-encodings.\"</blockquote>\n",
        "86": "   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in\n",
        "87": "   * <a href=\"http://goo.gl/swjbR\">URL path segments</a>. The returned escaper escapes all non-ASCII\n",
        "88": "   * characters, even though <a href=\"http://goo.gl/xIJWe\">many of these are accepted in modern\n",
        "89": "   * URLs</a>. (<a href=\"http://goo.gl/WMGvZ\">If the escaper were to leave these characters\n",
        "90": "   * unescaped, they would be escaped by the consumer at parse time, anyway.</a>) Additionally, the\n",
        "91": "   * escaper escapes the slash character (\"/\"). While slashes are acceptable in URL paths, they are\n",
        "92": "   * considered by the specification to be separators between \"path segments.\" This implies that, if\n",
        "93": "   * you wish for your path to contain slashes, you must escape each segment separately and then\n",
        "94": "   * join them.\n",
        "98": "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the\n",
        "99": "   *     same.\n",
        "102": "   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", and \"=\" remain the\n",
        "103": "   *     same.\n",
        "105": "   * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n",
        "106": "   *     byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n",
        "107": "   *     uppercase, hexadecimal representation of the byte value.\n",
        "110": "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.\n",
        "111": "   * From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>:\n",
        "112": "   *\n",
        "113": "   * <blockquote><p>\"URI producers and normalizers should use uppercase hexadecimal digits for all\n",
        "114": "   * percent-encodings.\"</blockquote>\n",
        "124": "   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in a\n",
        "125": "   * <a href=\"http://goo.gl/xXEq4p\">URL fragment</a>. The returned escaper escapes all non-ASCII\n",
        "126": "   * characters, even though <a href=\"http://goo.gl/xIJWe\">many of these are accepted in modern\n",
        "127": "   * URLs</a>. (<a href=\"http://goo.gl/WMGvZ\">If the escaper were to leave these characters\n",
        "128": "   * unescaped, they would be escaped by the consumer at parse time, anyway.</a>)\n",
        "132": "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the\n",
        "133": "   *     same.\n",
        "136": "   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", and \"=\" remain the\n",
        "137": "   *     same.\n",
        "140": "   * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n",
        "141": "   *     byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n",
        "142": "   *     uppercase, hexadecimal representation of the byte value.\n",
        "145": "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.\n",
        "146": "   * From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>:\n",
        "147": "   *\n",
        "148": "   * <blockquote><p>\"URI producers and normalizers should use uppercase hexadecimal digits for all\n",
        "149": "   * percent-encodings.\"</blockquote>\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "24": " * {@code Escaper} instances suitable for strings to be included in particular\n",
        "25": " * sections of URLs.\n",
        "27": " * <p>If the resulting URLs are inserted into an HTML or XML document, they will\n",
        "28": " * require additional escaping with {@link com.google.common.html.HtmlEscapers}\n",
        "29": " * or {@link com.google.common.xml.XmlEscapers}.\n",
        "52": "   * Returns an {@link Escaper} instance that escapes strings so they can be\n",
        "53": "   * safely included in <a href=\"http://goo.gl/OQEc8\">URL form parameter names\n",
        "54": "   * and values</a>. Escaping is performed with the UTF-8 character encoding.\n",
        "55": "   * The caller is responsible for <a href=\"http://goo.gl/i20ms\">replacing any\n",
        "56": "   * unpaired carriage return or line feed characters with a CR+LF pair</a> on\n",
        "57": "   * any non-file inputs before escaping them with this escaper.\n",
        "61": "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\"\n",
        "62": "   *     through \"9\" remain the same.\n",
        "65": "   * <li>All other characters are converted into one or more bytes using UTF-8\n",
        "66": "   *     encoding and each byte is then represented by the 3-character string\n",
        "67": "   *     \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal\n",
        "68": "   *     representation of the byte value.\n",
        "71": "   * <p>This escaper is suitable for escaping parameter names and values even\n",
        "72": "   * when <a href=\"http://goo.gl/utn6M\">using the non-standard semicolon</a>,\n",
        "73": "   * rather than the ampersand, as a parameter delimiter. Nevertheless, we\n",
        "74": "   * recommend using the ampersand unless you must interoperate with systems\n",
        "75": "   * that require semicolons.\n",
        "77": "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase\n",
        "78": "   * hexadecimal sequences. From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">\n",
        "79": "   * RFC 3986</a>:<br>\n",
        "80": "   * <i>\"URI producers and normalizers should use uppercase hexadecimal digits\n",
        "81": "   * for all percent-encodings.\"</i>\n",
        "92": "   * Returns an {@link Escaper} instance that escapes strings so they can be\n",
        "93": "   * safely included in <a href=\"http://goo.gl/swjbR\">URL path segments</a>. The\n",
        "94": "   * returned escaper escapes all non-ASCII characters, even though <a\n",
        "95": "   * href=\"http://goo.gl/xIJWe\">many of these are accepted in modern URLs</a>.\n",
        "96": "   * (<a href=\"http://goo.gl/WMGvZ\">If the escaper were to leave these\n",
        "97": "   * characters unescaped, they would be escaped by the consumer at parse time,\n",
        "98": "   * anyway.</a>) Additionally, the escaper escapes the slash character (\"/\").\n",
        "99": "   * While slashes are acceptable in URL paths, they are considered by the\n",
        "100": "   * specification to be separators between \"path segments.\" This implies that,\n",
        "101": "   * if you wish for your path to contain slashes, you must escape each segment\n",
        "102": "   * separately and then join them.\n",
        "106": "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\"\n",
        "107": "   *     through \"9\" remain the same.\n",
        "110": "   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\",\n",
        "111": "   *     and \"=\" remain the same.\n",
        "113": "   * <li>All other characters are converted into one or more bytes using UTF-8\n",
        "114": "   *     encoding and each byte is then represented by the 3-character string\n",
        "115": "   *     \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal\n",
        "116": "   *     representation of the byte value.\n",
        "119": "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase\n",
        "120": "   * hexadecimal sequences. From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">\n",
        "121": "   * RFC 3986</a>:<br>\n",
        "122": "   * <i>\"URI producers and normalizers should use uppercase hexadecimal digits\n",
        "123": "   * for all percent-encodings.\"</i>\n",
        "133": "   * Returns an {@link Escaper} instance that escapes strings so they can be\n",
        "134": "   * safely included in a <a href=\"http://goo.gl/xXEq4p\">URL fragment</a>. The\n",
        "135": "   * returned escaper escapes all non-ASCII characters, even though <a\n",
        "136": "   * href=\"http://goo.gl/xIJWe\">many of these are accepted in modern URLs</a>.\n",
        "137": "   * (<a href=\"http://goo.gl/WMGvZ\">If the escaper were to leave these\n",
        "138": "   * characters unescaped, they would be escaped by the consumer at parse time,\n",
        "139": "   * anyway.</a>)\n",
        "143": "   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\"\n",
        "144": "   *     through \"9\" remain the same.\n",
        "147": "   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\",\n",
        "148": "   *     and \"=\" remain the same.\n",
        "151": "   * <li>All other characters are converted into one or more bytes using UTF-8\n",
        "152": "   *     encoding and each byte is then represented by the 3-character string\n",
        "153": "   *     \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal\n",
        "154": "   *     representation of the byte value.\n",
        "157": "   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase\n",
        "158": "   * hexadecimal sequences. From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">\n",
        "159": "   * RFC 3986</a>:<br>\n",
        "160": "   * <i>\"URI producers and normalizers should use uppercase hexadecimal digits\n",
        "161": "   * for all percent-encodings.\"</i>\n"
    }
}