{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "24": " * A {@code UnicodeEscaper} that escapes some set of Java characters using a UTF-8 based percent\n",
        "25": " * encoding scheme. The set of safe characters (those which remain unescaped) can be specified on\n",
        "26": " * construction.\n",
        "28": " * <p>This class is primarily used for creating URI escapers in {@link UrlEscapers} but can be used\n",
        "29": " * directly if required. While URI escapers impose specific semantics on which characters are\n",
        "30": " * considered 'safe', this class has a minimal set of restrictions.\n",
        "35": " * <li>If {@code plusForSpace} was specified, the space character \" \" is converted into a plus sign\n",
        "36": " *     {@code \"+\"}.\n",
        "37": " * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each byte\n",
        "38": " *     is then represented by the 3-character string \"%XX\", where \"XX\" is the two-digit, uppercase,\n",
        "39": " *     hexadecimal representation of the byte value.\n",
        "42": " * <p>For performance reasons the only currently supported character encoding of this class is\n",
        "43": " * UTF-8.\n",
        "47": " * <i>\"URI producers and normalizers should use uppercase hexadecimal digits for all\n",
        "48": " * percent-encodings.\"</i>\n",
        "58": "  private static final char[] PLUS_SIGN = {'+'};\n",
        "61": "  private static final char[] UPPER_HEX_DIGITS = \"0123456789ABCDEF\".toCharArray();\n",
        "69": "   * An array of flags where for any {@code char c} if {@code safeOctets[c]} is true then {@code c}\n",
        "70": "   * should remain unmodified in the output. If {@code c > safeOctets.length} then it should be\n",
        "71": "   * escaped.\n",
        "76": "   * Constructs a percent escaper with the specified safe characters and optional handling of the\n",
        "77": "   * space character.\n",
        "79": "   * <p>Not that it is allowed, but not necessarily desirable to specify {@code %} as a safe\n",
        "80": "   * character. This has the effect of creating an escaper which has no well defined inverse but it\n",
        "81": "   * can be useful when escaping additional characters.\n",
        "83": "   * @param safeChars a non null string specifying additional safe characters for this escaper (the\n",
        "84": "   *     ranges 0..9, a..z and A..Z are always safe and should not be specified here)\n",
        "85": "   * @param plusForSpace true if ASCII space should be escaped to {@code +} rather than {@code %20}\n",
        "91": "    checkNotNull(safeChars); // eager for GWT.\n",
        "95": "          \"Alphanumeric characters are always 'safe' and should not be explicitly specified\");\n",
        "97": "    safeChars += \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n",
        "109": "   * Creates a boolean array with entries corresponding to the character values specified in\n",
        "110": "   * safeChars set to true. The array is as small as is required to hold the given character\n",
        "111": "   * information.\n",
        "127": "   * Overridden for performance. For unescaped strings this improved the performance of the uri\n",
        "128": "   * escaper from ~760ns to ~400ns as measured by {@link CharEscapersBenchmark}.\n",
        "143": "   * Overridden for performance. For unescaped strings this improved the performance of the uri\n",
        "144": "   * escaper from ~400ns to ~170ns as measured by {@link CharEscapersBenchmark}.\n",
        "235": "      throw new IllegalArgumentException(\"Invalid unicode character value \" + cp);\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "26": " * A {@code UnicodeEscaper} that escapes some set of Java characters using a\n",
        "27": " * UTF-8 based percent encoding scheme. The set of safe characters (those which\n",
        "28": " * remain unescaped) can be specified on construction.\n",
        "30": " * <p>This class is primarily used for creating URI escapers in {@link\n",
        "31": " * UrlEscapers} but can be used directly if required. While URI escapers impose\n",
        "32": " * specific semantics on which characters are considered 'safe', this class has\n",
        "33": " * a minimal set of restrictions.\n",
        "38": " * <li>If {@code plusForSpace} was specified, the space character \" \" is\n",
        "39": " *     converted into a plus sign {@code \"+\"}.\n",
        "40": " * <li>All other characters are converted into one or more bytes using UTF-8\n",
        "41": " *     encoding and each byte is then represented by the 3-character string\n",
        "42": " *     \"%XX\", where \"XX\" is the two-digit, uppercase, hexadecimal representation\n",
        "43": " *     of the byte value.\n",
        "46": " * <p>For performance reasons the only currently supported character encoding of\n",
        "47": " * this class is UTF-8.\n",
        "51": " * <i>\"URI producers and normalizers should use uppercase hexadecimal digits\n",
        "52": " * for all percent-encodings.\"</i>\n",
        "62": "  private static final char[] PLUS_SIGN = { '+' };\n",
        "65": "  private static final char[] UPPER_HEX_DIGITS =\n",
        "66": "      \"0123456789ABCDEF\".toCharArray();\n",
        "74": "   * An array of flags where for any {@code char c} if {@code safeOctets[c]} is\n",
        "75": "   * true then {@code c} should remain unmodified in the output. If\n",
        "76": "   * {@code c > safeOctets.length} then it should be escaped.\n",
        "81": "   * Constructs a percent escaper with the specified safe characters and\n",
        "82": "   * optional handling of the space character.\n",
        "84": "   * <p>Not that it is allowed, but not necessarily desirable to specify {@code %}\n",
        "85": "   * as a safe character. This has the effect of creating an escaper which has no\n",
        "86": "   * well defined inverse but it can be useful when escaping additional characters.\n",
        "88": "   * @param safeChars a non null string specifying additional safe characters\n",
        "89": "   *        for this escaper (the ranges 0..9, a..z and A..Z are always safe and\n",
        "90": "   *        should not be specified here)\n",
        "91": "   * @param plusForSpace true if ASCII space should be escaped to {@code +}\n",
        "92": "   *        rather than {@code %20}\n",
        "98": "    checkNotNull(safeChars);  // eager for GWT.\n",
        "102": "          \"Alphanumeric characters are always 'safe' and should not be \" +\n",
        "103": "          \"explicitly specified\");\n",
        "105": "    safeChars += \"abcdefghijklmnopqrstuvwxyz\" +\n",
        "106": "                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n",
        "107": "                 \"0123456789\";\n",
        "119": "   * Creates a boolean array with entries corresponding to the character values\n",
        "120": "   * specified in safeChars set to true. The array is as small as is required to\n",
        "121": "   * hold the given character information.\n",
        "137": "   * Overridden for performance. For unescaped strings this improved the\n",
        "138": "   * performance of the uri escaper from ~760ns to ~400ns as measured by\n",
        "139": "   * {@link CharEscapersBenchmark}.\n",
        "154": "   * Overridden for performance. For unescaped strings this improved the\n",
        "155": "   * performance of the uri escaper from ~400ns to ~170ns as measured by\n",
        "156": "   * {@link CharEscapersBenchmark}.\n",
        "247": "      throw new IllegalArgumentException(\n",
        "248": "          \"Invalid unicode character value \" + cp);\n"
    }
}