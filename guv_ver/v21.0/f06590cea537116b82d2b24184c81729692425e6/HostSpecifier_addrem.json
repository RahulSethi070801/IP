{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "27": " * A syntactically valid host specifier, suitable for use in a URI. This may be either a numeric IP\n",
        "28": " * address in IPv4 or IPv6 notation, or a domain name.\n",
        "30": " * <p>Because this class is intended to represent host specifiers which can reasonably be used in a\n",
        "31": " * URI, the domain name case is further restricted to include only those domain names which end in a\n",
        "32": " * recognized public suffix; see {@link InternetDomainName#isPublicSuffix()} for details.\n",
        "34": " * <p>Note that no network lookups are performed by any {@code HostSpecifier} methods. No attempt is\n",
        "35": " * made to verify that a provided specifier corresponds to a real or accessible host. Only syntactic\n",
        "36": " * and pattern-based checks are performed.\n",
        "38": " * <p>If you know that a given string represents a numeric IP address, use {@link InetAddresses} to\n",
        "39": " * obtain and manipulate a {@link java.net.InetAddress} instance from it rather than using this\n",
        "40": " * class. Similarly, if you know that a given string represents a domain name, use\n",
        "57": "   * Returns a {@code HostSpecifier} built from the provided {@code specifier}, which is already\n",
        "58": "   * known to be valid. If the {@code specifier} might be invalid, use {@link #from(String)}\n",
        "59": "   * instead.\n",
        "65": "   * <li>An IPv6 address string with or without brackets, like {@code [2001:db8::1]} or\n",
        "66": "   *     {@code 2001:db8::1}\n",
        "78": "    // Try to interpret the specifier as an IP address. Note we build\n",
        "107": "   * Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if\n",
        "108": "   * parsing fails. Always use this method in preference to {@link #fromValid(String)} for a\n",
        "109": "   * specifier that is not already known to be valid.\n",
        "113": "  public static HostSpecifier from(String specifier) throws ParseException {\n",
        "121": "      ParseException parseException = new ParseException(\"Invalid host specifier: \" + specifier, 0);\n",
        "128": "   * Determines whether {@code specifier} represents a valid {@link HostSpecifier} as described in\n",
        "129": "   * the documentation for {@link #fromValid(String)}.\n",
        "160": "   * Returns a string representation of the host specifier suitable for inclusion in a URI. If the\n",
        "161": "   * host specifier is a domain name, the string will be normalized to all lower case. If the\n",
        "162": "   * specifier was an IPv6 address without brackets, brackets are added so that the result will be\n",
        "163": "   * usable in the host part of a URI.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "29": " * A syntactically valid host specifier, suitable for use in a URI.\n",
        "30": " * This may be either a numeric IP address in IPv4 or IPv6 notation, or a\n",
        "31": " * domain name.\n",
        "33": " * <p>Because this class is intended to represent host specifiers which can\n",
        "34": " * reasonably be used in a URI, the domain name case is further restricted to\n",
        "35": " * include only those domain names which end in a recognized public suffix; see\n",
        "36": " * {@link InternetDomainName#isPublicSuffix()} for details.\n",
        "38": " * <p>Note that no network lookups are performed by any {@code HostSpecifier}\n",
        "39": " * methods.  No attempt is made to verify that a provided specifier corresponds\n",
        "40": " * to a real or accessible host.  Only syntactic and pattern-based checks are\n",
        "41": " * performed.\n",
        "43": " * <p>If you know that a given string represents a numeric IP address, use\n",
        "44": " * {@link InetAddresses} to obtain and manipulate a\n",
        "45": " * {@link java.net.InetAddress} instance from it rather than using this class.\n",
        "46": " * Similarly, if you know that a given string represents a domain name, use\n",
        "63": "   * Returns a {@code HostSpecifier} built from the provided {@code specifier},\n",
        "64": "   * which is already known to be valid.  If the {@code specifier} might be\n",
        "65": "   * invalid, use {@link #from(String)} instead.\n",
        "71": "   * <li>An IPv6 address string with or without brackets, like\n",
        "72": "   *     {@code [2001:db8::1]} or {@code 2001:db8::1}\n",
        "84": "    // Try to interpret the specifier as an IP address.  Note we build\n",
        "113": "   * Attempts to return a {@code HostSpecifier} for the given string, throwing\n",
        "114": "   * an exception if parsing fails. Always use this method in preference to\n",
        "115": "   * {@link #fromValid(String)} for a specifier that is not already known to be\n",
        "116": "   * valid.\n",
        "120": "  public static HostSpecifier from(String specifier)\n",
        "121": "      throws ParseException {\n",
        "129": "      ParseException parseException =\n",
        "130": "          new ParseException(\"Invalid host specifier: \" + specifier, 0);\n",
        "137": "   * Determines whether {@code specifier} represents a valid\n",
        "138": "   * {@link HostSpecifier} as described in the documentation for\n",
        "139": "   * {@link #fromValid(String)}.\n",
        "170": "   * Returns a string representation of the host specifier suitable for\n",
        "171": "   * inclusion in a URI.  If the host specifier is a domain name, the\n",
        "172": "   * string will be normalized to all lower case.  If the specifier was\n",
        "173": "   * an IPv6 address without brackets, brackets are added so that the\n",
        "174": "   * result will be usable in the host part of a URI.\n"
    }
}