[{"func":{"oldfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_oldfunccode_f06590cea537116b82d2b24184c81729692425e6_1.txt","newfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newfunccode_f06590cea537116b82d2b24184c81729692425e6_1.txt","newdoc":" For IPv4, Java's formatting is good enough.\n","newJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newfuncnewJdoc_f06590cea537116b82d2b24184c81729692425e6_1.txt","olddoc":" For IPv4, Java's formatting is good enough.\n","oldJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_oldfuncoldJdoc_f06590cea537116b82d2b24184c81729692425e6_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f06590cea537116b82d2b24184c81729692425e6/InetAddresses","pathinproj":"guava/src/com/google/common/net/InetAddresses.java","addlines":[347],"dellines":[364,365],"addcode":["      hextets[i] = Ints.fromBytes((byte) 0, (byte) 0, bytes[2 * i], bytes[2 * i + 1]);\n"],"delcode":["      hextets[i] = Ints.fromBytes(\n","          (byte) 0, (byte) 0, bytes[2 * i], bytes[2 * i + 1]);\n"],"methodSig":"public static String toAddrString(InetAddress ip)"},"doc":{"oldfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_olddocfunccode_f06590cea537116b82d2b24184c81729692425e6_1.txt","newfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newdocfunccode_f06590cea537116b82d2b24184c81729692425e6_1.txt","newdoc":"","newJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newdocnewJdoc_f06590cea537116b82d2b24184c81729692425e6_1.txt","olddoc":"","oldJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_olddocJdoc_f06590cea537116b82d2b24184c81729692425e6_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f06590cea537116b82d2b24184c81729692425e6/InetAddresses","pathinproj":"guava/src/com/google/common/net/InetAddresses.java","addlines":[417,419,420,424,425,428,429,430,431],"dellines":[448,449,450,453,454,455,456,457,438,439,441,442,443,447],"addcode":["   * Returns the string representation of an {@link InetAddress} suitable for inclusion in a URI.\n","   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6\n","   * addresses it compresses zeroes and surrounds the text with square brackets; for example\n","   * <a target=\"_parent\" href=\"http://tools.ietf.org/html/rfc3986#section-3.2.2\">RFC 3986</a>, a URI\n","   * containing an IPv6 string literal is of the form\n","   * <p>Use of either {@link InetAddresses#toAddrString}, {@link InetAddress#getHostAddress()}, or\n","   * this method is recommended over {@link InetAddress#toString()} when an IP address string\n","   * literal is desired. This is because {@link InetAddress#toString()} prints the hostname and the\n","   * IP address string joined by a \"/\".\n"],"delcode":["   * Returns the string representation of an {@link InetAddress} suitable\n","   * for inclusion in a URI.\n","   * <p>For IPv4 addresses, this is identical to\n","   * {@link InetAddress#getHostAddress()}, but for IPv6 addresses it\n","   * compresses zeroes and surrounds the text with square brackets; for example\n","   * <a target=\"_parent\"\n","   *    href=\"http://tools.ietf.org/html/rfc3986#section-3.2.2\"\n","   *  >http://tools.ietf.org/html/rfc3986</a>,\n","   * a URI containing an IPv6 string literal is of the form\n","   * <p>Use of either {@link InetAddresses#toAddrString},\n","   * {@link InetAddress#getHostAddress()}, or this method is recommended over\n","   * {@link InetAddress#toString()} when an IP address string literal is\n","   * desired.  This is because {@link InetAddress#toString()} prints the\n","   * hostname and the IP address string joined by a \"/\".\n"],"methodSig":"public static String toUriString(InetAddress ip)"},"id":5,"flag":1,"commit":"f06590cea537116b82d2b24184c81729692425e6"},{"func":{"oldfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_oldfunccode_f06590cea537116b82d2b24184c81729692425e6_2.txt","newfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newfunccode_f06590cea537116b82d2b24184c81729692425e6_2.txt","newdoc":" For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n","newJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newfuncnewJdoc_f06590cea537116b82d2b24184c81729692425e6_2.txt","olddoc":" For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n","oldJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_oldfuncoldJdoc_f06590cea537116b82d2b24184c81729692425e6_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f06590cea537116b82d2b24184c81729692425e6/InetAddresses","pathinproj":"guava/src/com/google/common/net/InetAddresses.java","addlines":[347],"dellines":[364,365],"addcode":["      hextets[i] = Ints.fromBytes((byte) 0, (byte) 0, bytes[2 * i], bytes[2 * i + 1]);\n"],"delcode":["      hextets[i] = Ints.fromBytes(\n","          (byte) 0, (byte) 0, bytes[2 * i], bytes[2 * i + 1]);\n"],"methodSig":"public static String toAddrString(InetAddress ip)"},"doc":{"oldfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_olddocfunccode_f06590cea537116b82d2b24184c81729692425e6_2.txt","newfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newdocfunccode_f06590cea537116b82d2b24184c81729692425e6_2.txt","newdoc":"","newJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newdocnewJdoc_f06590cea537116b82d2b24184c81729692425e6_2.txt","olddoc":"","oldJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_olddocJdoc_f06590cea537116b82d2b24184c81729692425e6_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f06590cea537116b82d2b24184c81729692425e6/InternetDomainName","pathinproj":"guava/src/com/google/common/net/InternetDomainName.java","addlines":[193,194,180,181,182,183,187,188],"dellines":[193,194,210,195,211,196,197,198,199,203,204,205],"addcode":["   * Returns an instance of {@link InternetDomainName} after lenient validation. Specifically,\n","   * validation against <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n","   * (\"Internationalizing Domain Names in Applications\") is skipped, while validation against\n","   * <a href=\"http://www.ietf.org/rfc/rfc1035.txt\">RFC 1035</a> is relaxed in the following ways:\n","   * <li>Parts other than the final part may start with a digit, as mandated by\n","   * <a href=\"https://tools.ietf.org/html/rfc1123#section-2\">RFC 1123</a>.\n","   * @throws IllegalArgumentException if {@code name} is not syntactically valid according to\n","   *     {@link #isValid}\n"],"delcode":["   * Returns an instance of {@link InternetDomainName} after lenient\n","   * validation.  Specifically, validation against <a\n","   * href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n","   * (\"Internationalizing Domain Names in Applications\") is skipped, while\n","   * validation against <a\n","   * href=\"http://www.ietf.org/rfc/rfc1035.txt\">RFC 1035</a> is relaxed in\n","   * the following ways:\n","   * <li>Parts other than the final part may start with a digit, as mandated\n","   *     by <a href=\"https://tools.ietf.org/html/rfc1123#section-2\">RFC\n","   *     1123</a>.\n","   * @throws IllegalArgumentException if {@code name} is not syntactically valid\n","   *     according to {@link #isValid}\n"],"methodSig":"public static InternetDomainName from(String domain)"},"id":5,"flag":1,"commit":"f06590cea537116b82d2b24184c81729692425e6"},{"func":{"oldfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_oldfunccode_f06590cea537116b82d2b24184c81729692425e6_3.txt","newfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newfunccode_f06590cea537116b82d2b24184c81729692425e6_3.txt","newdoc":" For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n","newJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newfuncnewJdoc_f06590cea537116b82d2b24184c81729692425e6_3.txt","olddoc":" For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n","oldJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_oldfuncoldJdoc_f06590cea537116b82d2b24184c81729692425e6_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f06590cea537116b82d2b24184c81729692425e6/InetAddresses","pathinproj":"guava/src/com/google/common/net/InetAddresses.java","addlines":[347],"dellines":[364,365],"addcode":["      hextets[i] = Ints.fromBytes((byte) 0, (byte) 0, bytes[2 * i], bytes[2 * i + 1]);\n"],"delcode":["      hextets[i] = Ints.fromBytes(\n","          (byte) 0, (byte) 0, bytes[2 * i], bytes[2 * i + 1]);\n"],"methodSig":"public static String toAddrString(InetAddress ip)"},"doc":{"oldfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_olddocfunccode_f06590cea537116b82d2b24184c81729692425e6_3.txt","newfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newdocfunccode_f06590cea537116b82d2b24184c81729692425e6_3.txt","newdoc":"","newJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newdocnewJdoc_f06590cea537116b82d2b24184c81729692425e6_3.txt","olddoc":"","oldJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_olddocJdoc_f06590cea537116b82d2b24184c81729692425e6_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f06590cea537116b82d2b24184c81729692425e6/InternetDomainName","pathinproj":"guava/src/com/google/common/net/InternetDomainName.java","addlines":[444,445,446],"dellines":[480,477,478,479],"addcode":["   * Indicates whether the argument is a syntactically valid domain name using lenient validation.\n","   * Specifically, validation against <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a> (\n","   * \"Internationalizing Domain Names in Applications\") is skipped.\n"],"delcode":["   * Indicates whether the argument is a syntactically valid domain name using\n","   * lenient validation. Specifically, validation against <a\n","   * href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n","   * (\"Internationalizing Domain Names in Applications\") is skipped.\n"],"methodSig":"public static boolean isValid(String name)"},"id":5,"flag":1,"commit":"f06590cea537116b82d2b24184c81729692425e6"},{"func":{"oldfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_oldfunccode_f06590cea537116b82d2b24184c81729692425e6_4.txt","newfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newfunccode_f06590cea537116b82d2b24184c81729692425e6_4.txt","newdoc":" For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n","newJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newfuncnewJdoc_f06590cea537116b82d2b24184c81729692425e6_4.txt","olddoc":" For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n For IPv4, Java's formatting is good enough.\n","oldJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_oldfuncoldJdoc_f06590cea537116b82d2b24184c81729692425e6_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f06590cea537116b82d2b24184c81729692425e6/InetAddresses","pathinproj":"guava/src/com/google/common/net/InetAddresses.java","addlines":[347],"dellines":[364,365],"addcode":["      hextets[i] = Ints.fromBytes((byte) 0, (byte) 0, bytes[2 * i], bytes[2 * i + 1]);\n"],"delcode":["      hextets[i] = Ints.fromBytes(\n","          (byte) 0, (byte) 0, bytes[2 * i], bytes[2 * i + 1]);\n"],"methodSig":"public static String toAddrString(InetAddress ip)"},"doc":{"oldfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_olddocfunccode_f06590cea537116b82d2b24184c81729692425e6_4.txt","newfunccode":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newdocfunccode_f06590cea537116b82d2b24184c81729692425e6_4.txt","newdoc":"","newJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_newdocnewJdoc_f06590cea537116b82d2b24184c81729692425e6_4.txt","olddoc":"","oldJdoc":"f06590cea537116b82d2b24184c81729692425e6/Codes/Match_olddocJdoc_f06590cea537116b82d2b24184c81729692425e6_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f06590cea537116b82d2b24184c81729692425e6/UrlEscapers","pathinproj":"guava/src/com/google/common/net/UrlEscapers.java","addlines":[128,132,133,136,137,140,141,142,145,146,147,148,149,124,125,126,127],"dellines":[160,161,133,134,135,136,137,138,139,143,144,147,148,151,152,153,154,157,158,159],"addcode":["   * Returns an {@link Escaper} instance that escapes strings so they can be safely included in a\n","   * <a href=\"http://goo.gl/xXEq4p\">URL fragment</a>. The returned escaper escapes all non-ASCII\n","   * characters, even though <a href=\"http://goo.gl/xIJWe\">many of these are accepted in modern\n","   * URLs</a>. (<a href=\"http://goo.gl/WMGvZ\">If the escaper were to leave these characters\n","   * unescaped, they would be escaped by the consumer at parse time, anyway.</a>)\n","   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\" through \"9\" remain the\n","   *     same.\n","   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", and \"=\" remain the\n","   *     same.\n","   * <li>All other characters are converted into one or more bytes using UTF-8 encoding and each\n","   *     byte is then represented by the 3-character string \"%XY\", where \"XY\" is the two-digit,\n","   *     uppercase, hexadecimal representation of the byte value.\n","   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase hexadecimal sequences.\n","   * From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>:\n","   *\n","   * <blockquote><p>\"URI producers and normalizers should use uppercase hexadecimal digits for all\n","   * percent-encodings.\"</blockquote>\n"],"delcode":["   * Returns an {@link Escaper} instance that escapes strings so they can be\n","   * safely included in a <a href=\"http://goo.gl/xXEq4p\">URL fragment</a>. The\n","   * returned escaper escapes all non-ASCII characters, even though <a\n","   * href=\"http://goo.gl/xIJWe\">many of these are accepted in modern URLs</a>.\n","   * (<a href=\"http://goo.gl/WMGvZ\">If the escaper were to leave these\n","   * characters unescaped, they would be escaped by the consumer at parse time,\n","   * anyway.</a>)\n","   * <li>The alphanumeric characters \"a\" through \"z\", \"A\" through \"Z\" and \"0\"\n","   *     through \"9\" remain the same.\n","   * <li>The subdelimiters \"!\", \"$\", \"&amp;\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\",\n","   *     and \"=\" remain the same.\n","   * <li>All other characters are converted into one or more bytes using UTF-8\n","   *     encoding and each byte is then represented by the 3-character string\n","   *     \"%XY\", where \"XY\" is the two-digit, uppercase, hexadecimal\n","   *     representation of the byte value.\n","   * <p><b>Note:</b> Unlike other escapers, URL escapers produce uppercase\n","   * hexadecimal sequences. From <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">\n","   * RFC 3986</a>:<br>\n","   * <i>\"URI producers and normalizers should use uppercase hexadecimal digits\n","   * for all percent-encodings.\"</i>\n"],"methodSig":"public static Escaper urlFragmentEscaper()"},"id":5,"flag":1,"commit":"f06590cea537116b82d2b24184c81729692425e6"}]