{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "35": " *\n",
        "47": " * <li>example.com\n",
        "48": " * <li>example.com:80\n",
        "49": " * <li>192.0.2.1\n",
        "50": " * <li>192.0.2.1:80\n",
        "51": " * <li>[2001:db8::1] - {@link #getHostText()} omits brackets\n",
        "52": " * <li>[2001:db8::1]:80 - {@link #getHostText()} omits brackets\n",
        "53": " * <li>2001:db8::1 - Use {@link #requireBracketsForIPv6()} to prohibit this\n",
        "56": " * <p>Note that this is not an exhaustive list, because these methods are only concerned with\n",
        "57": " * brackets, colons, and port numbers. Full validation of the host field (if desired) is the\n",
        "58": " * caller's responsibility.\n",
        "86": "   * Returns the portion of this {@code HostAndPort} instance that should represent the hostname or\n",
        "87": "   * IPv4/IPv6 literal.\n",
        "89": "   * <p>A successful parse does not imply any degree of sanity in this field. For additional\n",
        "90": "   * validation, see the {@link HostSpecifier} class.\n",
        "105": "   * @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)}\n",
        "106": "   *     to prevent this from occurring.\n",
        "123": "   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to\n",
        "124": "   * prohibit these.\n",
        "126": "   * @param host the host string to parse. Must not contain a port number.\n",
        "129": "   * @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out\n",
        "130": "   *     of range.\n",
        "142": "   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to\n",
        "143": "   * prohibit these.\n",
        "145": "   * @param host the host-only string to parse. Must not contain a port number.\n",
        "159": "   * Note that the host-only formats will leave the port field undefined. You can use\n",
        "160": "   * {@link #withDefaultPort(int)} to patch in a default value.\n",
        "179": "        // Exactly 1 colon. Split into host:port.\n",
        "183": "        // 0 or 2+ colons. Bare hostname or IPv6 literal.\n",
        "215": "    checkArgument(\n",
        "216": "        hostPortString.charAt(0) == '[',\n",
        "217": "        \"Bracketed host-port string must start with a bracket: %s\",\n",
        "218": "        hostPortString);\n",
        "221": "    checkArgument(\n",
        "222": "        colonIndex > -1 && closeBracketIndex > colonIndex,\n",
        "223": "        \"Invalid bracketed host/port: %s\",\n",
        "224": "        hostPortString);\n",
        "228": "      return new String[] {host, \"\"};\n",
        "230": "      checkArgument(\n",
        "231": "          hostPortString.charAt(closeBracketIndex + 1) == ':',\n",
        "232": "          \"Only a colon may follow a close bracket: %s\",\n",
        "233": "          hostPortString);\n",
        "235": "        checkArgument(\n",
        "236": "            Character.isDigit(hostPortString.charAt(i)),\n",
        "237": "            \"Port must be numeric: %s\",\n",
        "238": "            hostPortString);\n",
        "240": "      return new String[] {host, hostPortString.substring(closeBracketIndex + 2)};\n",
        "247": "   * You can chain this after {@link #fromString(String)} to include a port in case the port was\n",
        "248": "   * omitted from the input string. If a port was already provided, then this method is a no-op.\n",
        "264": "   * <p>URI formatting requires that IPv6 literals be surrounded by brackets, like \"[2001:db8::1]\".\n",
        "265": "   * Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and\n",
        "266": "   * disallow IPv6 literals that don't contain these brackets.\n",
        "268": "   * <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To\n",
        "269": "   * perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)}\n",
        "270": "   * method.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "48": " *   <li>example.com\n",
        "49": " *   <li>example.com:80\n",
        "50": " *   <li>192.0.2.1\n",
        "51": " *   <li>192.0.2.1:80\n",
        "52": " *   <li>[2001:db8::1]     - {@link #getHostText()} omits brackets\n",
        "53": " *   <li>[2001:db8::1]:80  - {@link #getHostText()} omits brackets\n",
        "54": " *   <li>2001:db8::1       - Use {@link #requireBracketsForIPv6()} to prohibit this\n",
        "57": " * <p>Note that this is not an exhaustive list, because these methods are only\n",
        "58": " * concerned with brackets, colons, and port numbers.  Full validation of the\n",
        "59": " * host field (if desired) is the caller's responsibility.\n",
        "87": "   * Returns the portion of this {@code HostAndPort} instance that should\n",
        "88": "   * represent the hostname or IPv4/IPv6 literal.\n",
        "90": "   * <p>A successful parse does not imply any degree of sanity in this field.\n",
        "91": "   * For additional validation, see the {@link HostSpecifier} class.\n",
        "106": "   * @throws IllegalStateException if no port is defined.  You can use\n",
        "107": "   *         {@link #withDefaultPort(int)} to prevent this from occurring.\n",
        "124": "   * <p>Note: Non-bracketed IPv6 literals are allowed.\n",
        "125": "   * Use {@link #requireBracketsForIPv6()} to prohibit these.\n",
        "127": "   * @param host the host string to parse.  Must not contain a port number.\n",
        "130": "   * @throws IllegalArgumentException if {@code host} contains a port number,\n",
        "131": "   *     or {@code port} is out of range.\n",
        "143": "   * <p>Note: Non-bracketed IPv6 literals are allowed.\n",
        "144": "   * Use {@link #requireBracketsForIPv6()} to prohibit these.\n",
        "146": "   * @param host the host-only string to parse.  Must not contain a port number.\n",
        "160": "   * Note that the host-only formats will leave the port field undefined.  You\n",
        "161": "   * can use {@link #withDefaultPort(int)} to patch in a default value.\n",
        "180": "        // Exactly 1 colon.  Split into host:port.\n",
        "184": "        // 0 or 2+ colons.  Bare hostname or IPv6 literal.\n",
        "216": "    checkArgument(hostPortString.charAt(0) == '[',\n",
        "217": "        \"Bracketed host-port string must start with a bracket: %s\", hostPortString);\n",
        "220": "    checkArgument(colonIndex > -1 && closeBracketIndex > colonIndex,\n",
        "221": "        \"Invalid bracketed host/port: %s\", hostPortString);\n",
        "225": "      return new String[] { host, \"\" };\n",
        "227": "      checkArgument(hostPortString.charAt(closeBracketIndex + 1) == ':',\n",
        "228": "          \"Only a colon may follow a close bracket: %s\", hostPortString);\n",
        "230": "        checkArgument(Character.isDigit(hostPortString.charAt(i)),\n",
        "231": "            \"Port must be numeric: %s\", hostPortString);\n",
        "233": "      return new String[] { host, hostPortString.substring(closeBracketIndex + 2) };\n",
        "240": "   * You can chain this after {@link #fromString(String)} to include a port in\n",
        "241": "   * case the port was omitted from the input string.  If a port was already\n",
        "242": "   * provided, then this method is a no-op.\n",
        "258": "   * <p>URI formatting requires that IPv6 literals be surrounded by brackets,\n",
        "259": "   * like \"[2001:db8::1]\".  Chain this call after {@link #fromString(String)}\n",
        "260": "   * to increase the strictness of the parser, and disallow IPv6 literals\n",
        "261": "   * that don't contain these brackets.\n",
        "263": "   * <p>Note that this parser identifies IPv6 literals solely based on the\n",
        "264": "   * presence of a colon.  To perform actual validation of IP addresses, see\n",
        "265": "   * the {@link InetAddresses#forString(String)} method.\n"
    }
}