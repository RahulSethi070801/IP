{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "87": "  private static final CharMatcher TOKEN_MATCHER =\n",
        "88": "      ascii()\n",
        "89": "          .and(javaIsoControl().negate())\n",
        "90": "          .and(CharMatcher.isNot(' '))\n",
        "91": "          .and(CharMatcher.noneOf(\"()<>@,;:\\\\\\\"/[]?=\"));\n",
        "92": "  private static final CharMatcher QUOTED_TEXT_MATCHER = ascii().and(CharMatcher.noneOf(\"\\\"\\\\\\r\"));\n",
        "126": "   * \"common name\" of the media. This is often, but not necessarily the same as the subtype.\n",
        "155": "   * <a href=\"http://www.iana.org/assignments/media-types/text/tab-separated-values\">Tab separated\n",
        "156": "   * values</a>.\n",
        "187": "   * The media type for the Photoshop File Format ({@code psd} files) as defined by\n",
        "188": "   * <a href=\"http://www.iana.org/assignments/media-types/image/vnd.adobe.photoshop\">IANA</a>, and\n",
        "189": "   * found in {@code /etc/mime.types}, e.g.\n",
        "190": "   * <a href=\"http://svn.apache.org/repos/asf/httpd/httpd/branches/1.3.x/conf/mime.types\"></a> of\n",
        "191": "   * the Apache <a href=\"http://httpd.apache.org/\">HTTPD project</a>; for the specification, see\n",
        "193": "   * Adobe Photoshop Document Format</a> and\n",
        "194": "   * <a href=\"http://en.wikipedia.org/wiki/Adobe_Photoshop#File_format\">Wikipedia</a>; this is the\n",
        "195": "   * regular output/input of Photoshop (which can also export to various image formats; note that\n",
        "196": "   * files with extension \"PSB\" are in a distinct but related format). <p>This is a more recent\n",
        "197": "   * replacement for the older, experimental type {@code x-photoshop}:\n",
        "198": "   * <a href=\"http://tools.ietf.org/html/rfc2046#section-6\">RFC-2046.6</a>.\n",
        "214": "   * Media type for L24 audio, as defined by <a href=\"https://tools.ietf.org/html/rfc3190\">RFC\n",
        "215": "   * 3190</a>.\n",
        "238": "   * Media type for Vorbis Audio, as defined by <a href=\"http://tools.ietf.org/html/rfc5215\">RFC\n",
        "239": "   * 5215</a>.\n",
        "247": "   * <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dd562994(v=vs.85).aspx\">file\n",
        "248": "   * name extensions for Windows Media metafiles</a>.\n",
        "256": "   * <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dd562994(v=vs.85).aspx\">file\n",
        "257": "   * name extensions for Windows Media metafiles</a>.\n",
        "272": "   * Media type for WAVE format, as defined by <a href=\"https://tools.ietf.org/html/rfc2361\">RFC\n",
        "273": "   * 2361</a>.\n",
        "288": "   * Media type for Flash video. For more information, see <a href=\n",
        "289": "   * \"http://help.adobe.com/en_US/ActionScript/3.0_ProgrammingAS3/WS5b3ccc516d4fbf351e63e3d118a9b90204-7d48.html\"\n",
        "298": "   * <a href=\"ftp://www.3gpp.org/tsg_sa/TSG_SA/TSGS_23/Docs/PDF/SP-040065.pdf#page=10\">3GPP TS\n",
        "299": "   * 26.244</a>.\n",
        "307": "   * <a href=\"http://www.3gpp2.org/Public_html/specs/C.S0050-B_v1.0_070521.pdf#page=16\">3GPP2\n",
        "308": "   * C.S0050-B</a>.\n",
        "336": "  public static final MediaType APPLE_PASSBOOK =\n",
        "337": "      createConstant(APPLICATION_TYPE, \"vnd.apple.pkpass\");\n",
        "358": "  public static final MediaType FORM_DATA =\n",
        "359": "      createConstant(APPLICATION_TYPE, \"x-www-form-urlencoded\");\n",
        "372": "   * other situations as it is not specified by any RFC and does not appear in the\n",
        "373": "   * <a href=\"http://www.iana.org/assignments/media-types\">/IANA MIME Media Types</a> list. Consider\n",
        "379": "\n",
        "381": "  /**\n",
        "382": "   * <a href=\"http://www.rfc-editor.org/rfc/rfc4329.txt\">RFC 4329</a> declares this to be the\n",
        "383": "   * correct media type for JavaScript, but {@link #TEXT_JAVASCRIPT_UTF_8 text/javascript} may be\n",
        "384": "   * necessary in certain situations for compatibility.\n",
        "385": "   */\n",
        "390": "   * Media type for the <a href=\"http://www.w3.org/TR/appmanifest/\">Manifest for a web\n",
        "391": "   * application</a>.\n",
        "402": "   * Media type for <a href=\"http://goo.gl/1pGBFm\">Apple over-the-air mobile configuration\n",
        "403": "   * profiles</a>.\n",
        "415": "  public static final MediaType OOXML_DOCUMENT =\n",
        "416": "      createConstant(\n",
        "417": "          APPLICATION_TYPE, \"vnd.openxmlformats-officedocument.wordprocessingml.document\");\n",
        "418": "  public static final MediaType OOXML_PRESENTATION =\n",
        "419": "      createConstant(\n",
        "420": "          APPLICATION_TYPE, \"vnd.openxmlformats-officedocument.presentationml.presentation\");\n",
        "446": "   * <a href=\"http://www.iana.org/assignments/media-types/application/font-sfnt\">registered</a> with\n",
        "447": "   * the IANA.\n",
        "452": "  public static final MediaType SHOCKWAVE_FLASH =\n",
        "453": "      createConstant(APPLICATION_TYPE, \"x-shockwave-flash\");\n",
        "469": "   * Media type for the <a href=\"http://en.wikipedia.org/wiki/Web_Open_Font_Format\">Web Open Font\n",
        "470": "   * Format</a> (WOFF) <a href=\"http://www.w3.org/TR/WOFF/\">defined</a> by the W3C. This is\n",
        "471": "   * <a href=\"http://www.iana.org/assignments/media-types/application/font-woff\">registered</a> with\n",
        "472": "   * the IANA.\n",
        "481": "   * <a href=\"http://docs.oasis-open.org/xri/xrd/v1.0/cd02/xrd-1.0-cd02.html\">XRD definition</a> and\n",
        "482": "   * implemented in projects such as <a href=\"http://code.google.com/p/webfinger/\">WebFinger</a>.\n",
        "495": "  private MediaType(String type, String subtype, ImmutableListMultimap<String, String> parameters) {\n",
        "501": "  /** Returns the top-level media type. For example, {@code \"text\"} in {@code \"text/plain\"}. */\n",
        "506": "  /** Returns the media subtype. For example, {@code \"plain\"} in {@code \"text/plain\"}. */\n",
        "517": "    return Maps.transformValues(\n",
        "518": "        parameters.asMap(),\n",
        "520": "          @Override\n",
        "521": "          public ImmutableMultiset<String> apply(Collection<String> input) {\n",
        "630": "   * media type this method does not consider the number of occurrences of a parameter. For example,\n",
        "631": "   * {@code \"text/plain; charset=UTF-8\"} satisfies\n",
        "644": "   *     type, but not the subtype.\n",
        "695": "  private static MediaType create(\n",
        "696": "      String type, String subtype, Multimap<String, String> parameters) {\n",
        "702": "    checkArgument(\n",
        "703": "        !WILDCARD.equals(normalizedType) || WILDCARD.equals(normalizedSubtype),\n",
        "814": "  @Override\n",
        "815": "  public boolean equals(@Nullable Object obj) {\n",
        "829": "  @Override\n",
        "830": "  public int hashCode() {\n",
        "843": "   * Returns the string representation of this media type in the format described in\n",
        "844": "   * <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>.\n",
        "846": "  @Override\n",
        "847": "  public String toString() {\n",
        "861": "      Multimap<String, String> quotedParameters =\n",
        "862": "          Multimaps.transformValues(\n",
        "863": "              parameters,\n",
        "864": "              new Function<String, String>() {\n",
        "865": "                @Override\n",
        "866": "                public String apply(String value) {\n",
        "867": "                  return TOKEN_MATCHER.matchesAllOf(value) ? value : escapeAndQuote(value);\n",
        "868": "                }\n",
        "869": "              });\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "89": "  private static final CharMatcher TOKEN_MATCHER = ascii().and(javaIsoControl().negate())\n",
        "90": "      .and(CharMatcher.isNot(' '))\n",
        "91": "      .and(CharMatcher.noneOf(\"()<>@,;:\\\\\\\"/[]?=\"));\n",
        "92": "  private static final CharMatcher QUOTED_TEXT_MATCHER = ascii()\n",
        "93": "      .and(CharMatcher.noneOf(\"\\\"\\\\\\r\"));\n",
        "127": "   * \"common name\" of the media.  This is often, but not necessarily the same as the subtype.\n",
        "156": "   * <a href=\"http://www.iana.org/assignments/media-types/text/tab-separated-values\">\n",
        "157": "   * Tab separated values</a>.\n",
        "188": "   * The media type for the Photoshop File Format ({@code psd} files) as defined by <a href=\n",
        "189": "   * \"http://www.iana.org/assignments/media-types/image/vnd.adobe.photoshop\">IANA</a>, and found in\n",
        "190": "   * {@code /etc/mime.types}, e.g. <a href=\n",
        "191": "   * \"http://svn.apache.org/repos/asf/httpd/httpd/branches/1.3.x/conf/mime.types\"></a> of the Apache\n",
        "192": "   * <a href=\"http://httpd.apache.org/\">HTTPD project</a>; for the specification, see\n",
        "194": "   * Adobe Photoshop Document Format</a> and <a href=\n",
        "195": "   * \"http://en.wikipedia.org/wiki/Adobe_Photoshop#File_format\">Wikipedia</a>; this is the regular\n",
        "196": "   * output/input of Photoshop (which can also export to various image formats; note that files with\n",
        "197": "   * extension \"PSB\" are in a distinct but related format).\n",
        "198": "   * <p>This is a more recent replacement for the older, experimental type\n",
        "199": "   * {@code x-photoshop}: <a href=\"http://tools.ietf.org/html/rfc2046#section-6\">RFC-2046.6</a>.\n",
        "215": "   * Media type for L24 audio, as defined by\n",
        "216": "   * <a href=\"https://tools.ietf.org/html/rfc3190\">RFC 3190</a>.\n",
        "239": "   * Media type for Vorbis Audio, as defined by\n",
        "240": "   * <a href=\"http://tools.ietf.org/html/rfc5215\">RFC 5215</a>.\n",
        "248": "   * <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dd562994(v=vs.85).aspx\"\n",
        "249": "   * >file name extensions for Windows Media metafiles</a>.\n",
        "257": "   * <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/dd562994(v=vs.85).aspx\"\n",
        "258": "   * >file name extensions for Windows Media metafiles</a>.\n",
        "273": "   * Media type for WAVE format, as defined by\n",
        "274": "   * <a href=\"https://tools.ietf.org/html/rfc2361\">RFC 2361</a>.\n",
        "289": "   * Media type for Flash video. For more information, see\n",
        "290": "   * <a href=\"http://help.adobe.com/en_US/ActionScript/3.0_ProgrammingAS3/WS5b3ccc516d4fbf351e63e3d118a9b90204-7d48.html\"\n",
        "299": "   * <a href=\"ftp://www.3gpp.org/tsg_sa/TSG_SA/TSGS_23/Docs/PDF/SP-040065.pdf#page=10\"\n",
        "300": "   * >3GPP TS 26.244</a>.\n",
        "308": "   * <a href=\"http://www.3gpp2.org/Public_html/specs/C.S0050-B_v1.0_070521.pdf#page=16\"\n",
        "309": "   * >3GPP2 C.S0050-B</a>.\n",
        "337": "  public static final MediaType APPLE_PASSBOOK = createConstant(APPLICATION_TYPE,\n",
        "338": "      \"vnd.apple.pkpass\");\n",
        "359": "  public static final MediaType FORM_DATA = createConstant(APPLICATION_TYPE,\n",
        "360": "      \"x-www-form-urlencoded\");\n",
        "373": "   * other situations as it is not specified by any RFC and does not appear in the <a href=\n",
        "374": "   * \"http://www.iana.org/assignments/media-types\">/IANA MIME Media Types</a> list. Consider\n",
        "377": "   *\n",
        "382": "   /**\n",
        "383": "    * <a href=\"http://www.rfc-editor.org/rfc/rfc4329.txt\">RFC 4329</a> declares this to be the\n",
        "384": "    * correct media type for JavaScript, but {@link #TEXT_JAVASCRIPT_UTF_8 text/javascript} may be\n",
        "385": "    * necessary in certain situations for compatibility.\n",
        "386": "    */\n",
        "391": "   * Media type for the\n",
        "392": "   * <a href=\"http://www.w3.org/TR/appmanifest/\">Manifest for a web application</a>.\n",
        "403": "   * Media type for\n",
        "404": "   * <a href=\"http://goo.gl/1pGBFm\">Apple over-the-air mobile configuration profiles</a>.\n",
        "416": "  public static final MediaType OOXML_DOCUMENT = createConstant(APPLICATION_TYPE,\n",
        "417": "      \"vnd.openxmlformats-officedocument.wordprocessingml.document\");\n",
        "418": "  public static final MediaType OOXML_PRESENTATION = createConstant(APPLICATION_TYPE,\n",
        "419": "      \"vnd.openxmlformats-officedocument.presentationml.presentation\");\n",
        "444": "   * <a href=\"http://www.iana.org/assignments/media-types/application/font-sfnt\">registered</a>\n",
        "445": "   * with the IANA.\n",
        "450": "  public static final MediaType SHOCKWAVE_FLASH = createConstant(APPLICATION_TYPE,\n",
        "451": "      \"x-shockwave-flash\");\n",
        "467": "   * Media type for the\n",
        "468": "   * <a href=\"http://en.wikipedia.org/wiki/Web_Open_Font_Format\">Web Open Font Format</a> (WOFF)\n",
        "469": "   * <a href=\"http://www.w3.org/TR/WOFF/\">defined</a> by the W3C. This is\n",
        "470": "   * <a href=\"http://www.iana.org/assignments/media-types/application/font-woff\">registered</a>\n",
        "471": "   * with the IANA.\n",
        "480": "   * <a href=\"http://docs.oasis-open.org/xri/xrd/v1.0/cd02/xrd-1.0-cd02.html\"> XRD definition</a>\n",
        "481": "   * and implemented in projects such as\n",
        "482": "   * <a href=\"http://code.google.com/p/webfinger/\">WebFinger</a>.\n",
        "495": "  private MediaType(String type, String subtype,\n",
        "496": "      ImmutableListMultimap<String, String> parameters) {\n",
        "502": "  /** Returns the top-level media type.  For example, {@code \"text\"} in {@code \"text/plain\"}. */\n",
        "507": "  /** Returns the media subtype.  For example, {@code \"plain\"} in {@code \"text/plain\"}. */\n",
        "518": "    return Maps.transformValues(parameters.asMap(),\n",
        "520": "          @Override public ImmutableMultiset<String> apply(Collection<String> input) {\n",
        "629": "   * media type this method does not consider the number of occurrences of a parameter.  For\n",
        "630": "   * example, {@code \"text/plain; charset=UTF-8\"} satisfies\n",
        "643": "   * type, but not the subtype.\n",
        "694": "  private static MediaType create(String type, String subtype,\n",
        "695": "      Multimap<String, String> parameters) {\n",
        "701": "    checkArgument(!WILDCARD.equals(normalizedType) || WILDCARD.equals(normalizedSubtype),\n",
        "812": "  @Override public boolean equals(@Nullable Object obj) {\n",
        "826": "  @Override public int hashCode() {\n",
        "839": "   * Returns the string representation of this media type in the format described in <a\n",
        "840": "   * href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>.\n",
        "842": "  @Override public String toString() {\n",
        "856": "      Multimap<String, String> quotedParameters = Multimaps.transformValues(parameters,\n",
        "857": "          new Function<String, String>() {\n",
        "858": "            @Override public String apply(String value) {\n",
        "859": "              return TOKEN_MATCHER.matchesAllOf(value) ? value : escapeAndQuote(value);\n",
        "860": "            }\n",
        "861": "          });\n"
    }
}