{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "36": " * foo.co.uk}. Only syntactic analysis is performed; no DNS lookups or other network interactions\n",
        "37": " * take place. Thus there is no guarantee that the domain actually exists on the internet.\n",
        "39": " * <p>One common use of this class is to determine whether a given string is likely to represent an\n",
        "40": " * addressable domain on the web -- that is, for a candidate string {@code \"xxx\"}, might browsing to\n",
        "41": " * {@code \"http://xxx/\"} result in a webpage being displayed? In the past, this test was frequently\n",
        "42": " * done by determining whether the domain ended with a {@linkplain #isPublicSuffix() public suffix}\n",
        "43": " * but was not itself a public suffix. However, this test is no longer accurate. There are many\n",
        "44": " * domains which are both public suffixes and addressable as hosts; {@code \"uk.com\"} is one example.\n",
        "45": " * As a result, the only useful test to determine if a domain is a plausible web host is\n",
        "46": " * {@link #hasPublicSuffix()}. This will return {@code true} for many domains which (currently) are\n",
        "47": " * not hosts, such as {@code \"com\"}, but given that any public suffix may become a host without\n",
        "48": " * warning, it is better to err on the side of permissiveness and thus avoid spurious rejection of\n",
        "49": " * valid sites.\n",
        "52": " *\n",
        "55": " * <li>Unicode dot separators other than the ASCII period ({@code '.'}) are converted to the ASCII\n",
        "56": " *     period.\n",
        "59": " * <p>The normalized values will be returned from {@link #toString()} and {@link #parts()}, and will\n",
        "60": " * be reflected in the result of {@link #equals(Object)}.\n",
        "61": " *\n",
        "62": " * <p><a href=\"http://en.wikipedia.org/wiki/Internationalized_domain_name\">Internationalized domain\n",
        "63": " * names</a> such as {@code \u7f51\u7edc.cn} are supported, as are the equivalent\n",
        "64": " * <a href=\"http://en.wikipedia.org/wiki/Internationalized_domain_name\">IDNA Punycode-encoded</a>\n",
        "65": " * versions.\n",
        "74": "  private static final CharMatcher DOTS_MATCHER = CharMatcher.anyOf(\".\\u3002\\uFF0E\\uFF61\");\n",
        "79": "   * Value of {@link #publicSuffixIndex} which indicates that no public suffix was found.\n",
        "86": "   * Maximum parts (labels) in a domain name. This value arises from the 255-octet limit described\n",
        "87": "   * in <a href=\"http://www.ietf.org/rfc/rfc2181.txt\">RFC 2181</a> part 11 with the fact that the\n",
        "88": "   * encoding of each part occupies at least two bytes (dot plus label externally, length byte plus\n",
        "89": "   * label internally). Thus, if all labels have the minimum size of one byte, 127 of them will fit.\n",
        "94": "   * Maximum length of a full domain name, including separators, and leaving room for the root\n",
        "95": "   * label. See <a href=\"http://www.ietf.org/rfc/rfc2181.txt\">RFC 2181</a> part 11.\n",
        "116": "   * The index in the {@link #parts()} list at which the public suffix begins. For example, for the\n",
        "117": "   * domain name {@code www.google.co.uk}, the value would be 2 (the index of the {@code co} part).\n",
        "118": "   * The value is negative (specifically, {@link #NO_PUBLIC_SUFFIX_FOUND}) if no public suffix was\n",
        "138": "    checkArgument(name.length() <= MAX_LENGTH, \"Domain name too long: '%s':\", name);\n",
        "142": "    checkArgument(parts.size() <= MAX_PARTS, \"Domain has too many parts: '%s'\", name);\n",
        "149": "   * Returns the index of the leftmost part of the public suffix, or -1 if not found. Note that the\n",
        "150": "   * value defined as the \"public suffix\" may not be a public suffix according to\n",
        "151": "   * {@link #isPublicSuffix()} if the domain ends with an excluded domain pattern such as\n",
        "152": "   * {@code \"nhs.uk\"}.\n",
        "180": "   * Returns an instance of {@link InternetDomainName} after lenient validation. Specifically,\n",
        "181": "   * validation against <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n",
        "182": "   * (\"Internationalizing Domain Names in Applications\") is skipped, while validation against\n",
        "183": "   * <a href=\"http://www.ietf.org/rfc/rfc1035.txt\">RFC 1035</a> is relaxed in the following ways:\n",
        "187": "   * <li>Parts other than the final part may start with a digit, as mandated by\n",
        "188": "   * <a href=\"https://tools.ietf.org/html/rfc1123#section-2\">RFC 1123</a>.\n",
        "193": "   * @throws IllegalArgumentException if {@code name} is not syntactically valid according to\n",
        "194": "   *     {@link #isValid}\n",
        "202": "   * Validation method used by {@from} to ensure that the domain name is syntactically valid\n",
        "203": "   * according to RFC 1035.\n",
        "232": "   * Helper method for {@link #validateSyntax(List)}. Validates that one part of a domain name is\n",
        "233": "   * valid.\n",
        "249": "     * GWT claims to support java.lang.Character's char-classification methods, but it actually only\n",
        "250": "     * works for ASCII. So for now, assume any non-ASCII characters are valid. The only place this\n",
        "251": "     * seems to be documented is here:\n",
        "254": "     * <p>ASCII characters in the part are expected to be valid per RFC 1035, with underscore also\n",
        "255": "     * being allowed due to widespread practice.\n",
        "272": "     * Note that we allow (in contravention of a strict interpretation of the relevant RFCs) domain\n",
        "273": "     * parts other than the last may begin with a digit (for example, \"3com.com\"). It's important to\n",
        "274": "     * disallow an initial digit in the last part; it's the only thing that stops an IPv4 numeric\n",
        "275": "     * address like 127.0.0.1 from looking like a valid domain name.\n",
        "286": "   * Returns the individual components of this domain name, normalized to all lower case. For\n",
        "287": "   * example, for the domain name {@code mail.google.com}, this method returns the list\n",
        "288": "   * {@code [\"mail\", \"google\", \"com\"]}.\n",
        "295": "   * Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla\n",
        "296": "   * Foundation's <a href=\"http://publicsuffix.org/\">Public Suffix List</a> (PSL). A public suffix\n",
        "297": "   * is one under which Internet users can directly register names, such as {@code com},\n",
        "298": "   * {@code co.uk} or {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> public\n",
        "299": "   * suffixes include {@code google}, {@code google.com} and {@code foo.co.uk}.\n",
        "301": "   * @return {@code true} if this domain name appears exactly on the public suffix list\n",
        "309": "   * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},\n",
        "310": "   * including if it is a public suffix itself. For example, returns {@code true} for\n",
        "311": "   * {@code www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code google} or\n",
        "312": "   * {@code google.foo}. This is the recommended method for determining whether a domain is\n",
        "313": "   * potentially an addressable host.\n",
        "322": "   * Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or\n",
        "323": "   * {@code null} if no public suffix is present.\n",
        "332": "   * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},\n",
        "333": "   * while not being a public suffix itself. For example, returns {@code true} for\n",
        "334": "   * {@code www.google.com}, {@code foo.co.uk} and {@code bar.ca.us}, but not for {@code google},\n",
        "335": "   * {@code com}, or {@code\n",
        "338": "   * <p><b>Warning:</b> a {@code false} result from this method does not imply that the domain does\n",
        "339": "   * not represent an addressable host, as many public suffixes are also addressable hosts. Use\n",
        "340": "   * {@link #hasPublicSuffix()} for that test.\n",
        "342": "   * <p>This method can be used to determine whether it will probably be possible to set cookies on\n",
        "343": "   * the domain, though even that depends on individual browsers' implementations of cookie\n",
        "344": "   * controls. See <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a> for details.\n",
        "353": "   * Indicates whether this domain name is composed of exactly one subdomain component followed by a\n",
        "354": "   * {@linkplain #isPublicSuffix() public suffix}. For example, returns {@code true} for\n",
        "355": "   * {@code google.com} and {@code foo.co.uk}, but not for {@code www.google.com} or {@code co.uk}.\n",
        "357": "   * <p><b>Warning:</b> A {@code true} result from this method does not imply that the domain is at\n",
        "358": "   * the highest level which is addressable as a host, as many public suffixes are also addressable\n",
        "359": "   * hosts. For example, the domain {@code bar.uk.com} has a public suffix of {@code uk.com}, so it\n",
        "360": "   * would return {@code true} from this method. But {@code uk.com} is itself an addressable host.\n",
        "362": "   * <p>This method can be used to determine whether a domain is probably the highest level for\n",
        "363": "   * which cookies may be set, though even that depends on individual browsers' implementations of\n",
        "364": "   * cookie controls. See <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a> for details.\n",
        "373": "   * Returns the portion of this domain name that is one level beneath the public suffix. For\n",
        "374": "   * example, for {@code x.adwords.google.co.uk} it returns {@code google.co.uk}, since\n",
        "375": "   * {@code co.uk} is a public suffix.\n",
        "377": "   * <p>If {@link #isTopPrivateDomain()} is true, the current domain name instance is returned.\n",
        "379": "   * <p>This method should not be used to determine the topmost parent domain which is addressable\n",
        "380": "   * as a host, as many public suffixes are also addressable hosts. For example, the domain\n",
        "381": "   * {@code foo.bar.uk.com} has a public suffix of {@code uk.com}, so it would return\n",
        "382": "   * {@code bar.uk.com} from this method. But {@code uk.com} is itself an addressable host.\n",
        "384": "   * <p>This method can be used to determine the probable highest level parent domain for which\n",
        "385": "   * cookies may be set, though even that depends on individual browsers' implementations of cookie\n",
        "386": "   * controls.\n",
        "388": "   * @throws IllegalStateException if this domain does not end with a public suffix\n",
        "407": "   * Returns an {@code InternetDomainName} that is the immediate ancestor of this one; that is, the\n",
        "408": "   * current domain with the leftmost part removed. For example, the parent of\n",
        "409": "   * {@code www.google.com} is {@code google.com}.\n",
        "411": "   * @throws IllegalStateException if the domain has no parent, as determined by {@link #hasParent}\n",
        "419": "   * Returns the ancestor of the current domain at the given number of levels \"higher\" (rightward)\n",
        "420": "   * in the subdomain list. The number of levels must be non-negative, and less than {@code N-1},\n",
        "421": "   * where {@code N} is the number of parts in the domain.\n",
        "430": "   * Creates and returns a new {@code InternetDomainName} by prepending the argument and a dot to\n",
        "431": "   * the current name. For example, {@code\n",
        "432": "   * InternetDomainName.from(\"foo.com\").child(\"www.bar\")} returns a new {@code InternetDomainName}\n",
        "433": "   * with the value {@code www.bar.foo.com}. Only lenient validation is performed, as described\n",
        "434": "   * {@link #from(String) here}.\n",
        "444": "   * Indicates whether the argument is a syntactically valid domain name using lenient validation.\n",
        "445": "   * Specifically, validation against <a href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a> (\n",
        "446": "   * \"Internationalizing Domain Names in Applications\") is skipped.\n",
        "474": "   * Does the domain name match one of the \"wildcard\" patterns (e.g. {@code \"*.ar\"})?\n",
        "490": "   * Equality testing is based on the text supplied by the caller, after normalization as described\n",
        "491": "   * in the class documentation. For example, a non-ASCII Unicode domain name and the Punycode\n",
        "492": "   * version of the same domain name would not be considered equal.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "38": " * foo.co.uk}. Only syntactic analysis is performed; no DNS lookups or other\n",
        "39": " * network interactions take place. Thus there is no guarantee that the domain\n",
        "40": " * actually exists on the internet.\n",
        "42": " * <p>One common use of this class is to determine whether a given string is\n",
        "43": " * likely to represent an addressable domain on the web -- that is, for a\n",
        "44": " * candidate string {@code \"xxx\"}, might browsing to {@code \"http://xxx/\"}\n",
        "45": " * result in a webpage being displayed? In the past, this test was frequently\n",
        "46": " * done by determining whether the domain ended with a {@linkplain\n",
        "47": " * #isPublicSuffix() public suffix} but was not itself a public suffix. However,\n",
        "48": " * this test is no longer accurate. There are many domains which are both public\n",
        "49": " * suffixes and addressable as hosts; {@code \"uk.com\"} is one example. As a\n",
        "50": " * result, the only useful test to determine if a domain is a plausible web host\n",
        "51": " * is {@link #hasPublicSuffix()}. This will return {@code true} for many domains\n",
        "52": " * which (currently) are not hosts, such as {@code \"com\"}, but given that any\n",
        "53": " * public suffix may become a host without warning, it is better to err on the\n",
        "54": " * side of permissiveness and thus avoid spurious rejection of valid sites.\n",
        "59": " * <li>Unicode dot separators other than the ASCII period ({@code '.'}) are\n",
        "60": " * converted to the ASCII period.\n",
        "62": " * <p>The normalized values will be returned from {@link #toString()} and\n",
        "63": " * {@link #parts()}, and will be reflected in the result of\n",
        "64": " * {@link #equals(Object)}.\n",
        "66": " * <p><a href=\"http://en.wikipedia.org/wiki/Internationalized_domain_name\">\n",
        "67": " * Internationalized domain names</a> such as {@code \u7f51\u7edc.cn} are supported, as\n",
        "68": " * are the equivalent <a\n",
        "69": " * href=\"http://en.wikipedia.org/wiki/Internationalized_domain_name\">IDNA\n",
        "70": " * Punycode-encoded</a> versions.\n",
        "79": "  private static final CharMatcher DOTS_MATCHER =\n",
        "80": "      CharMatcher.anyOf(\".\\u3002\\uFF0E\\uFF61\");\n",
        "85": "   * Value of {@link #publicSuffixIndex} which indicates that no public suffix\n",
        "86": "   * was found.\n",
        "93": "   * Maximum parts (labels) in a domain name. This value arises from\n",
        "94": "   * the 255-octet limit described in\n",
        "95": "   * <a href=\"http://www.ietf.org/rfc/rfc2181.txt\">RFC 2181</a> part 11 with\n",
        "96": "   * the fact that the encoding of each part occupies at least two bytes\n",
        "97": "   * (dot plus label externally, length byte plus label internally). Thus, if\n",
        "98": "   * all labels have the minimum size of one byte, 127 of them will fit.\n",
        "103": "   * Maximum length of a full domain name, including separators, and\n",
        "104": "   * leaving room for the root label. See\n",
        "105": "   * <a href=\"http://www.ietf.org/rfc/rfc2181.txt\">RFC 2181</a> part 11.\n",
        "126": "   * The index in the {@link #parts()} list at which the public suffix begins.\n",
        "127": "   * For example, for the domain name {@code www.google.co.uk}, the value would\n",
        "128": "   * be 2 (the index of the {@code co} part). The value is negative\n",
        "129": "   * (specifically, {@link #NO_PUBLIC_SUFFIX_FOUND}) if no public suffix was\n",
        "149": "    checkArgument(name.length() <= MAX_LENGTH,\n",
        "150": "        \"Domain name too long: '%s':\", name);\n",
        "154": "    checkArgument(parts.size() <= MAX_PARTS,\n",
        "155": "        \"Domain has too many parts: '%s'\", name);\n",
        "162": "   * Returns the index of the leftmost part of the public suffix, or -1 if not\n",
        "163": "   * found. Note that the value defined as the \"public suffix\" may not be a\n",
        "164": "   * public suffix according to {@link #isPublicSuffix()} if the domain ends\n",
        "165": "   * with an excluded domain pattern such as {@code \"nhs.uk\"}.\n",
        "193": "   * Returns an instance of {@link InternetDomainName} after lenient\n",
        "194": "   * validation.  Specifically, validation against <a\n",
        "195": "   * href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n",
        "196": "   * (\"Internationalizing Domain Names in Applications\") is skipped, while\n",
        "197": "   * validation against <a\n",
        "198": "   * href=\"http://www.ietf.org/rfc/rfc1035.txt\">RFC 1035</a> is relaxed in\n",
        "199": "   * the following ways:\n",
        "203": "   * <li>Parts other than the final part may start with a digit, as mandated\n",
        "204": "   *     by <a href=\"https://tools.ietf.org/html/rfc1123#section-2\">RFC\n",
        "205": "   *     1123</a>.\n",
        "210": "   * @throws IllegalArgumentException if {@code name} is not syntactically valid\n",
        "211": "   *     according to {@link #isValid}\n",
        "219": "   * Validation method used by {@from} to ensure that the domain name is\n",
        "220": "   * syntactically valid according to RFC 1035.\n",
        "249": "   * Helper method for {@link #validateSyntax(List)}. Validates that one part of\n",
        "250": "   * a domain name is valid.\n",
        "266": "     * GWT claims to support java.lang.Character's char-classification methods,\n",
        "267": "     * but it actually only works for ASCII. So for now, assume any non-ASCII\n",
        "268": "     * characters are valid. The only place this seems to be documented is here:\n",
        "271": "     * <p>ASCII characters in the part are expected to be valid per RFC 1035,\n",
        "272": "     * with underscore also being allowed due to widespread practice.\n",
        "289": "     * Note that we allow (in contravention of a strict interpretation of the\n",
        "290": "     * relevant RFCs) domain parts other than the last may begin with a digit\n",
        "291": "     * (for example, \"3com.com\"). It's important to disallow an initial digit in\n",
        "292": "     * the last part; it's the only thing that stops an IPv4 numeric address\n",
        "293": "     * like 127.0.0.1 from looking like a valid domain name.\n",
        "304": "   * Returns the individual components of this domain name, normalized to all\n",
        "305": "   * lower case. For example, for the domain name {@code mail.google.com}, this\n",
        "306": "   * method returns the list {@code [\"mail\", \"google\", \"com\"]}.\n",
        "313": "   * Indicates whether this domain name represents a <i>public suffix</i>, as\n",
        "314": "   * defined by the Mozilla Foundation's\n",
        "315": "   * <a href=\"http://publicsuffix.org/\">Public Suffix List</a> (PSL). A public\n",
        "316": "   * suffix is one under which Internet users can directly register names, such\n",
        "317": "   * as {@code com}, {@code co.uk} or {@code pvt.k12.wy.us}. Examples of domain\n",
        "318": "   * names that are <i>not</i> public suffixes include {@code google}, {@code\n",
        "319": "   * google.com} and {@code foo.co.uk}.\n",
        "321": "   * @return {@code true} if this domain name appears exactly on the public\n",
        "322": "   *     suffix list\n",
        "330": "   * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix()\n",
        "331": "   * public suffix}, including if it is a public suffix itself. For example,\n",
        "332": "   * returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and\n",
        "333": "   * {@code com}, but not for {@code google} or {@code google.foo}. This is\n",
        "334": "   * the recommended method for determining whether a domain is potentially an\n",
        "335": "   * addressable host.\n",
        "344": "   * Returns the {@linkplain #isPublicSuffix() public suffix} portion of the\n",
        "345": "   * domain name, or {@code null} if no public suffix is present.\n",
        "354": "   * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix()\n",
        "355": "   * public suffix}, while not being a public suffix itself. For example,\n",
        "356": "   * returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and\n",
        "357": "   * {@code bar.ca.us}, but not for {@code google}, {@code com}, or {@code\n",
        "360": "   * <p><b>Warning:</b> a {@code false} result from this method does not imply\n",
        "361": "   * that the domain does not represent an addressable host, as many public\n",
        "362": "   * suffixes are also addressable hosts. Use {@link #hasPublicSuffix()} for\n",
        "363": "   * that test.\n",
        "365": "   * <p>This method can be used to determine whether it will probably be\n",
        "366": "   * possible to set cookies on the domain, though even that depends on\n",
        "367": "   * individual browsers' implementations of cookie controls. See\n",
        "368": "   * <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a> for details.\n",
        "377": "   * Indicates whether this domain name is composed of exactly one subdomain\n",
        "378": "   * component followed by a {@linkplain #isPublicSuffix() public suffix}. For\n",
        "379": "   * example, returns {@code true} for {@code google.com} and {@code foo.co.uk},\n",
        "380": "   * but not for {@code www.google.com} or {@code co.uk}.\n",
        "382": "   * <p><b>Warning:</b> A {@code true} result from this method does not imply\n",
        "383": "   * that the domain is at the highest level which is addressable as a host, as\n",
        "384": "   * many public suffixes are also addressable hosts. For example, the domain\n",
        "385": "   * {@code bar.uk.com} has a public suffix of {@code uk.com}, so it would\n",
        "386": "   * return {@code true} from this method. But {@code uk.com} is itself an\n",
        "387": "   * addressable host.\n",
        "389": "   * <p>This method can be used to determine whether a domain is probably the\n",
        "390": "   * highest level for which cookies may be set, though even that depends on\n",
        "391": "   * individual browsers' implementations of cookie controls. See\n",
        "392": "   * <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a> for details.\n",
        "401": "   * Returns the portion of this domain name that is one level beneath the\n",
        "402": "   * public suffix. For example, for {@code x.adwords.google.co.uk} it returns\n",
        "403": "   * {@code google.co.uk}, since {@code co.uk} is a public suffix.\n",
        "405": "   * <p>If {@link #isTopPrivateDomain()} is true, the current domain name\n",
        "406": "   * instance is returned.\n",
        "408": "   * <p>This method should not be used to determine the topmost parent domain\n",
        "409": "   * which is addressable as a host, as many public suffixes are also\n",
        "410": "   * addressable hosts. For example, the domain {@code foo.bar.uk.com} has\n",
        "411": "   * a public suffix of {@code uk.com}, so it would return {@code bar.uk.com}\n",
        "412": "   * from this method. But {@code uk.com} is itself an addressable host.\n",
        "414": "   * <p>This method can be used to determine the probable highest level parent\n",
        "415": "   * domain for which cookies may be set, though even that depends on individual\n",
        "416": "   * browsers' implementations of cookie controls.\n",
        "418": "   * @throws IllegalStateException if this domain does not end with a\n",
        "419": "   *     public suffix\n",
        "438": "   * Returns an {@code InternetDomainName} that is the immediate ancestor of\n",
        "439": "   * this one; that is, the current domain with the leftmost part removed. For\n",
        "440": "   * example, the parent of {@code www.google.com} is {@code google.com}.\n",
        "442": "   * @throws IllegalStateException if the domain has no parent, as determined\n",
        "443": "   *     by {@link #hasParent}\n",
        "451": "   * Returns the ancestor of the current domain at the given number of levels\n",
        "452": "   * \"higher\" (rightward) in the subdomain list. The number of levels must be\n",
        "453": "   * non-negative, and less than {@code N-1}, where {@code N} is the number of\n",
        "454": "   * parts in the domain.\n",
        "463": "   * Creates and returns a new {@code InternetDomainName} by prepending the\n",
        "464": "   * argument and a dot to the current name. For example, {@code\n",
        "465": "   * InternetDomainName.from(\"foo.com\").child(\"www.bar\")} returns a new\n",
        "466": "   * {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only\n",
        "467": "   * lenient validation is performed, as described {@link #from(String) here}.\n",
        "477": "   * Indicates whether the argument is a syntactically valid domain name using\n",
        "478": "   * lenient validation. Specifically, validation against <a\n",
        "479": "   * href=\"http://www.ietf.org/rfc/rfc3490.txt\">RFC 3490</a>\n",
        "480": "   * (\"Internationalizing Domain Names in Applications\") is skipped.\n",
        "508": "   * Does the domain name match one of the \"wildcard\" patterns (e.g.\n",
        "509": "   * {@code \"*.ar\"})?\n",
        "525": "   * Equality testing is based on the text supplied by the caller,\n",
        "526": "   * after normalization as described in the class documentation. For\n",
        "527": "   * example, a non-ASCII Unicode domain name and the Punycode version\n",
        "528": "   * of the same domain name would not be considered equal.\n"
    }
}