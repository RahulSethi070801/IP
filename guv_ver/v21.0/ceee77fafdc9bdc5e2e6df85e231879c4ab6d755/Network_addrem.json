{
    "addition": {
        "25": " * Unlike {@link BasicGraph}, {@link Network} represents edges as explicit first-class objects.\n",
        "26": " * Users that are not interested in edges as first-class objects should use the {@link BasicGraph}\n",
        "29": " * <p>For convenience, we may use the term 'graph' refer to {@link BasicGraph}s and/or\n",
        "30": " * {@link Network}s.\n",
        "109": " * <li>There are no Node or Edge classes built in.  So you can have a\n",
        "110": " *     {@code Network<Integer, String>} or a {@code Network<Author,Publication>} or a\n",
        "111": " *     {@code Network<Webpage,Link>}.\n",
        "160": " * <li>Prefer extending {@link AbstractBasicGraph} over implementing {@link BasicGraph} directly.\n",
        "161": " *     This will ensure that the implementations of {@link #equals(Object)} and\n",
        "227": "   * Returns a live view of this graph as a {@link ValueGraph}. The resulting {@link ValueGraph}\n",
        "228": "   * will have an edge connecting node A to node B iff this {@link Network} has an edge connecting\n",
        "229": "   * A to B.\n",
        "230": "   *\n",
        "231": "   * <p>{@link ValueGraph#edgeValue(Object, Object)} will return the set of edges connecting node A\n",
        "232": "   * to node B. It will return the empty set if there are no edges connecting A to B.\n",
        "234": "  ValueGraph<N, Set<E>> asGraph();\n"
    },
    "removed": {
        "25": " * Unlike {@link Graph}, {@link Network} represents edges as explicit first-class objects.\n",
        "26": " * Users that are not interested in edges as first-class objects should use the {@link Graph}\n",
        "29": " * <p>For convenience, we may use the term 'graph' refer to {@link Graph}s and/or {@link Network}s.\n",
        "108": " * <li>There are no Node or Edge classes built in.  So you can have a {@code Graph<Integer, String>}\n",
        "109": " *     or a {@code Graph<Author,Publication>} or a {@code Graph<Webpage,Link>}.\n",
        "158": " * <li>Prefer extending {@link AbstractGraph} over implementing {@link Graph} directly. This will\n",
        "159": " *     ensure that the implementations of {@link #equals(Object)} and\n",
        "225": "   * Returns a live view of this graph as a {@link Graph}. The resulting {@link Graph} will have an\n",
        "226": "   * edge connecting node A to node B iff this {@link Network} has an edge connecting A to B.\n",
        "228": "  Graph<N> asGraph();\n"
    }
}