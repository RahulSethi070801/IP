{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.graph.GraphConstants.GRAPH_STRING_FORMAT;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.Beta;\n",
        "22": "import com.google.common.graph.BasicGraph.Presence;\n",
        "23": "\n",
        "24": "/**\n",
        "25": " * This class provides a skeletal implementation of {@link BasicGraph}. It is recommended to extend\n",
        "26": " * this class rather than implement {@link BasicGraph} directly, to ensure consistent {@link\n",
        "27": " * #equals(Object)} and {@link #hashCode()} results across different graph implementations.\n",
        "28": " *\n",
        "29": " * @author James Sexton\n",
        "30": " * @param <N> Node parameter type\n",
        "31": " * @since 20.0\n",
        "32": " */\n",
        "33": "@Beta\n",
        "34": "public abstract class AbstractBasicGraph<N>\n",
        "35": "    extends AbstractValueGraph<N, Presence> implements BasicGraph<N> {\n",
        "36": "\n",
        "37": "  /**\n",
        "38": "   * Returns a string representation of this graph.\n",
        "39": "   */\n",
        "40": "  @Override\n",
        "41": "  public String toString() {\n",
        "42": "    String propertiesString = String.format(\n",
        "43": "        \"isDirected: %s, allowsSelfLoops: %s\", isDirected(), allowsSelfLoops());\n",
        "44": "    return String.format(GRAPH_STRING_FORMAT,\n",
        "45": "        propertiesString,\n",
        "46": "        nodes(),\n",
        "47": "        edges());\n",
        "48": "  }\n",
        "49": "}\n"
    },
    "removed": {}
}