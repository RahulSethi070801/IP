{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "/**\n",
        "20": " * Configurable implementation of {@link MutableGraph} that supports both directed and undirected\n",
        "21": " * graphs. Instances of this class should be constructed with {@link GraphBuilder}.\n",
        "22": " *\n",
        "23": " * <p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},\n",
        "24": " * which is in O(d_node) where d_node is the degree of {@code node}.\n",
        "25": " *\n",
        "26": " * @author James Sexton\n",
        "27": " * @param <N> Node parameter type\n",
        "28": " */\n",
        "29": "final class ConfigurableMutableGraph<N> extends ForwardingGraph<N> implements MutableGraph<N> {\n",
        "30": "  private static final Object DUMMY_EDGE_VALUE = new Object();\n",
        "31": "\n",
        "32": "  private final MutableValueGraph<N, Object> backingGraph;\n",
        "33": "\n",
        "34": "  /**\n",
        "35": "   * Constructs a {@link MutableGraph} with the properties specified in {@code builder}.\n",
        "36": "   */\n",
        "37": "  ConfigurableMutableGraph(AbstractGraphBuilder<? super N> builder) {\n",
        "38": "    this.backingGraph = new ConfigurableMutableValueGraph<N, Object>(builder);\n",
        "39": "  }\n",
        "40": "\n",
        "41": "  @Override\n",
        "42": "  public boolean addNode(N node) {\n",
        "43": "    return backingGraph.addNode(node);\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  @Override\n",
        "47": "  public boolean putEdge(N nodeA, N nodeB) {\n",
        "48": "    return backingGraph.putEdgeValue(nodeA, nodeB, DUMMY_EDGE_VALUE) == null;\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  @Override\n",
        "52": "  public boolean removeNode(Object node) {\n",
        "53": "    return backingGraph.removeNode(node);\n",
        "54": "  }\n",
        "55": "\n",
        "56": "  @Override\n",
        "57": "  public boolean removeEdge(Object nodeA, Object nodeB) {\n",
        "58": "    return backingGraph.removeEdge(nodeA, nodeB) != null;\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  @Override\n",
        "62": "  protected Graph<N> delegate() {\n",
        "63": "    return backingGraph;\n",
        "64": "  }\n",
        "65": "}\n"
    }
}