[{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_1.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[],"dellines":[251,252],"addcode":[],"delcode":["  public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes) {\n","    MutableGraph<N> subgraph = GraphBuilder.from(graph).build();\n"],"methodSig":"public static MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_1.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_1.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ConfigurableNetwork","pathinproj":"guava/src/com/google/common/graph/ConfigurableNetwork.java","addlines":[],"dellines":[116,117,118,119,120,121,122],"addcode":[],"delcode":["  /**\n","   * {@inheritDoc}\n","   *\n","   * <p>The order of iteration for this set is determined by the {@code ElementOrder<E>} provided\n","   * to the {@code GraphBuilder} that was used to create this instance.\n","   * By default, that order is the order in which the edges were added to the graph.\n","   */\n"],"methodSig":"public Set<E> edges()"},"id":1,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_2.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/BasicGraphBuilder","pathinproj":"guava/src/com/google/common/graph/BasicGraphBuilder.java","addlines":[121,122],"dellines":[],"addcode":["  private <N1 extends N> BasicGraphBuilder<N1> cast() {\n","    return (BasicGraphBuilder<N1>) this;\n"],"delcode":[],"methodSig":"private BasicGraphBuilder<N1> cast()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_2.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_2.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_2.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraphBuilder","pathinproj":"guava/src/com/google/common/graph/ValueGraphBuilder.java","addlines":[103],"dellines":[103],"addcode":["   * Specifies the order of iteration for the elements of {@link BasicGraph#nodes()}.\n"],"delcode":["   * Specifies the order of iteration for the elements of {@link Graph#nodes()}.\n"],"methodSig":"public ValueGraphBuilder<N1, V> nodeOrder(ElementOrder<N1> nodeOrder)"},"id":5,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_3.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" This falls into the undirected A->B->A case. The Graph interface does not support parallel\n edges, so this traversal would require reusing the undirected AB edge.\n","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[],"dellines":[130],"addcode":[],"delcode":["      Graph<?> graph, Object nextNode, @Nullable Object previousNode) {\n"],"methodSig":"private static boolean canTraverseWithoutReusingEdge(Graph<?> graph, Object nextNode, @Nullable Object previousNode)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_3.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_3.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_3.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_4.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" According to the degree sum formula, this is equal to twice the number of edges.\n","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/AbstractGraph","pathinproj":"guava/src/com/google/common/graph/AbstractGraph.java","addlines":[51,52,53,54,55,57,58,59],"dellines":[49,50,51,52,53,55,56,57],"addcode":["  protected long edgeCount() {\n","    long degreeSum = 0L;\n","    for (N node : nodes()) {\n","      degreeSum += degree(this, node);\n","    }\n","    checkState((degreeSum & 1) == 0);\n","    return degreeSum >>> 1;\n","  }\n"],"delcode":["  protected long edgeCount() {\n","    long degreeSum = 0L;\n","    for (N node : nodes()) {\n","      degreeSum += degree(this, node);\n","    }\n","    checkState((degreeSum & 1) == 0);\n","    return degreeSum >>> 1;\n","  }\n"],"methodSig":"protected long edgeCount()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_4.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_4.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_4.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_5.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ForwardingGraph","pathinproj":"guava/src/com/google/common/graph/ForwardingGraph.java","addlines":[72,73,74,75],"dellines":[64,65,66,67],"addcode":["  @Override\n","  public Set<N> predecessors(Object node) {\n","    return backingGraph.predecessors(node);\n","  }\n"],"delcode":["  @Override\n","  public Set<N> predecessors(Object node) {\n","    return delegate().predecessors(node);\n","  }\n"],"methodSig":"public Set<N> predecessors(Object node)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_5.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_5.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_5.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_6.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" ImmutableMap.Builder maintains the order of the elements as inserted, so the map will have\n whatever ordering the graph's nodes do, so ImmutableSortedMap is unnecessary even if the\n input nodes are sorted.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ImmutableGraph","pathinproj":"guava/src/com/google/common/graph/ImmutableGraph.java","addlines":[],"dellines":[67,68,72,73,74,75,76,77],"addcode":[],"delcode":["  private static <N> ImmutableMap<N, GraphConnections<N, Object>> getNodeConnections(\n","      Graph<N> graph) {\n","    ImmutableMap.Builder<N, GraphConnections<N, Object>> nodeConnections = ImmutableMap.builder();\n","    for (N node : graph.nodes()) {\n","      nodeConnections.put(node, connectionsOf(graph, node));\n","    }\n","    return nodeConnections.build();\n","  }\n"],"methodSig":"private static ImmutableMap<N, GraphConnections<N, Object>> getNodeConnections(Graph<N> graph)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_6.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_6.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_6.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_7.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ForwardingGraph","pathinproj":"guava/src/com/google/common/graph/ForwardingGraph.java","addlines":[80,77,78,79],"dellines":[69,70,71,72],"addcode":["  @Override\n","  public Set<N> successors(Object node) {\n","    return backingGraph.successors(node);\n","  }\n"],"delcode":["  @Override\n","  public Set<N> successors(Object node) {\n","    return delegate().successors(node);\n","  }\n"],"methodSig":"public Set<N> successors(Object node)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_7.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_7.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_7.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_8.txt","newdoc":" Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to Endpoints mapping).\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/AbstractNetwork","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[118,119,120,121,122,123,124,45,125,46,126,127],"dellines":[],"addcode":["  public ValueGraph<N, Set<E>> asGraph() {\n","    return new AbstractValueGraph<N, Set<E>>() {\n","\n","      @Override\n","      public Set<E> edgeValue(Object nodeA, Object nodeB) {\n","        return checkNotNull(edgesConnecting(nodeA, nodeB));\n","      }\n","\n","      @Override\n","      public Set<E> edgeValueOrDefault(Object nodeA, Object nodeB, Set<E> defaultValue) {\n","        return checkNotNull(edgesConnecting(nodeA, nodeB));\n","      }\n"],"delcode":[],"methodSig":"public ValueGraph<N, Set<E>> asGraph()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_8.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_8.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_8.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_9.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" Throws an exception if node is not an element of graph.\n Perform a breadth-first traversal rooted at the input node.\n","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[],"dellines":[194],"addcode":[],"delcode":["  public static <N> Set<N> reachableNodes(Graph<N> graph, Object node) {\n"],"methodSig":"public static Set<N> reachableNodes(Graph<N> graph, Object node)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_9.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_9.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_9.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_10.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ForwardingGraph","pathinproj":"guava/src/com/google/common/graph/ForwardingGraph.java","addlines":[],"dellines":[32],"addcode":[],"delcode":["  protected abstract Graph<N> delegate();\n"],"methodSig":"protected abstract Graph<N> delegate()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_10.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_10.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_10.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_11.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ForwardingGraph","pathinproj":"guava/src/com/google/common/graph/ForwardingGraph.java","addlines":[67,68,69,70],"dellines":[59,60,61,62],"addcode":["  @Override\n","  public Set<N> adjacentNodes(Object node) {\n","    return backingGraph.adjacentNodes(node);\n","  }\n"],"delcode":["  @Override\n","  public Set<N> adjacentNodes(Object node) {\n","    return delegate().adjacentNodes(node);\n","  }\n"],"methodSig":"public Set<N> adjacentNodes(Object node)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_11.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_11.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_11.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_12.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[],"dellines":[251,252],"addcode":[],"delcode":["  public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes) {\n","    MutableGraph<N> subgraph = GraphBuilder.from(graph).build();\n"],"methodSig":"public static MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_12.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_12.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_12.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_13.txt","newdoc":" Every node is, at a minimum, reachable from itself. Since the resulting transitive closure\n will have no isolated nodes, we can skip adding nodes explicitly and let putEdge() do it.\n Note: works for both directed and undirected graphs, but we only use in the directed case.\n An optimization for the undirected case: for every node B reachable from node A,\n node A and node B have the same reachability set.\n","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfuncnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_13.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[148,149,150],"dellines":[],"addcode":["  public static <N> BasicGraph<N> transitiveClosure(ValueGraph<N, ?> graph) {\n","    MutableBasicGraph<N> transitiveClosure =\n","        BasicGraphBuilder.from(graph).allowsSelfLoops(true).build();\n"],"delcode":[],"methodSig":"public static BasicGraph<N> transitiveClosure(ValueGraph<N, ?> graph)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_13.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_13.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_13.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_14.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ForwardingGraph","pathinproj":"guava/src/com/google/common/graph/ForwardingGraph.java","addlines":[42,43,44,45],"dellines":[34,35,36,37],"addcode":["  @Override\n","  public Set<N> nodes() {\n","    return backingGraph.nodes();\n","  }\n"],"delcode":["  @Override\n","  public Set<N> nodes() {\n","    return delegate().nodes();\n","  }\n"],"methodSig":"public Set<N> nodes()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_14.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_14.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_14.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_14.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_15.txt","newdoc":" An edge-free graph is acyclic by definition.\n Optimization for the undirected case: at least one cycle must exist.\n","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfuncnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_15.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[58],"dellines":[],"addcode":["  public static boolean hasCycle(ValueGraph<?, ?> graph) {\n"],"delcode":[],"methodSig":"public static boolean hasCycle(ValueGraph<?, ?> graph)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_15.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_15.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_15.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_16.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ConfigurableMutableGraph","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableGraph.java","addlines":[92,93,94,95],"dellines":[41,42,43,44],"addcode":["  @Override\n","  public boolean addNode(N node) {\n","    return backingGraph.addNode(node);\n","  }\n"],"delcode":["  @Override\n","  public boolean addNode(N node) {\n","    return backingGraph.addNode(node);\n","  }\n"],"methodSig":"public boolean addNode(N node)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_16.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_16.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_16.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_17.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ConfigurableMutableGraph","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableGraph.java","addlines":[97,98,99,100],"dellines":[48,49,46,47],"addcode":["  @Override\n","  public boolean putEdge(N nodeA, N nodeB) {\n","    return backingGraph.putEdgeValue(nodeA, nodeB, Presence.EDGE_EXISTS) == null;\n","  }\n"],"delcode":["  @Override\n","  public boolean putEdge(N nodeA, N nodeB) {\n","    return backingGraph.putEdgeValue(nodeA, nodeB, DUMMY_EDGE_VALUE) == null;\n","  }\n"],"methodSig":"public boolean putEdge(N nodeA, N nodeB)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_17.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_17.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_17.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_17.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_18.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ForwardingGraph","pathinproj":"guava/src/com/google/common/graph/ForwardingGraph.java","addlines":[64,65,62,63],"dellines":[54,55,56,57],"addcode":["  @Override\n","  public ElementOrder<N> nodeOrder() {\n","    return backingGraph.nodeOrder();\n","  }\n"],"delcode":["  @Override\n","  public ElementOrder<N> nodeOrder() {\n","    return delegate().nodeOrder();\n","  }\n"],"methodSig":"public ElementOrder<N> nodeOrder()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_18.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_18.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_18.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_18.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_19.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ImmutableGraph","pathinproj":"guava/src/com/google/common/graph/ImmutableGraph.java","addlines":[],"dellines":[80,81,82,83,84,85,86,79],"addcode":[],"delcode":["  private static <N> GraphConnections<N, Object> connectionsOf(Graph<N> graph, N node) {\n","    return graph.isDirected()\n","        ? DirectedGraphConnections.ofImmutable(\n","            graph.predecessors(node),\n","            Maps.asMap(graph.successors(node), Functions.constant(DUMMY_EDGE_VALUE)))\n","        : UndirectedGraphConnections.ofImmutable(\n","            Maps.asMap(graph.adjacentNodes(node), Functions.constant(DUMMY_EDGE_VALUE)));\n","  }\n"],"methodSig":"private static GraphConnections<N, Object> connectionsOf(Graph<N> graph, N node)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_19.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_19.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_19.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_19.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_20.txt","newdoc":" Throws an exception if node is not an element of graph.\n Perform a breadth-first traversal rooted at the input node.\n","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfuncnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_20.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[195],"dellines":[],"addcode":["  public static <N> Set<N> reachableNodes(ValueGraph<N, ?> graph, Object node) {\n"],"delcode":[],"methodSig":"public static Set<N> reachableNodes(ValueGraph<N, ?> graph, Object node)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_20.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_20.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_20.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_20.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_21.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfuncnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_21.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraphBuilder","pathinproj":"guava/src/com/google/common/graph/ValueGraphBuilder.java","addlines":[73],"dellines":[],"addcode":["  public static <N> ValueGraphBuilder<N, Object> from(ValueGraph<N, ?> graph) {\n"],"delcode":[],"methodSig":"public static ValueGraphBuilder<N, Object> from(ValueGraph<N, ?> graph)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_21.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_21.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_21.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_21.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_22.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfuncnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_22.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[100],"dellines":[],"addcode":["      ValueGraph<?, ?> graph,\n"],"delcode":[],"methodSig":"private static boolean subgraphHasCycle(ValueGraph<?, ?> graph, Map<Object, NodeVisitState> visitedNodes, Object node, @Nullable Object previousNode)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_22.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_22.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_22.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_22.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_23.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" An edge-free graph is acyclic by definition.\n Optimization for the undirected case: at least one cycle must exist.\n","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_23.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[],"dellines":[58],"addcode":[],"delcode":["  public static boolean hasCycle(Graph<?> graph) {\n"],"methodSig":"public static boolean hasCycle(Graph<?> graph)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_23.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_23.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_23.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_23.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_24.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfuncnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_24.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[252,253,254],"dellines":[],"addcode":["  public static <N> MutableBasicGraph<N> inducedSubgraph(BasicGraph<N> graph,\n","      Iterable<? extends N> nodes) {\n","    MutableBasicGraph<N> subgraph = BasicGraphBuilder.from(graph).build();\n"],"delcode":[],"methodSig":"public static MutableBasicGraph<N> inducedSubgraph(BasicGraph<N> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_24.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_24.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_24.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_24.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_25.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/AbstractGraph","pathinproj":"guava/src/com/google/common/graph/AbstractGraph.java","addlines":[48,40,41,42,43,44,45,46,47],"dellines":[119,120,121,122,123,124,125,126,127],"addcode":["  @Override\n","  public String toString() {\n","    String propertiesString = String.format(\n","        \"isDirected: %s, allowsSelfLoops: %s\", isDirected(), allowsSelfLoops());\n","    return String.format(GRAPH_STRING_FORMAT,\n","        propertiesString,\n","        nodes(),\n","        edges());\n","  }\n"],"delcode":["  @Override\n","  public String toString() {\n","    String propertiesString = String.format(\n","        \"isDirected: %s, allowsSelfLoops: %s\", isDirected(), allowsSelfLoops());\n","    return String.format(GRAPH_STRING_FORMAT,\n","        propertiesString,\n","        nodes(),\n","        edges());\n","  }\n"],"methodSig":"public String toString()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_25.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_25.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_25.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_26.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfuncnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_26.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[234],"dellines":[],"addcode":["  ValueGraph<N, Set<E>> asGraph();\n"],"delcode":[],"methodSig":" ValueGraph<N, Set<E>> asGraph()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_26.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_26.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_26.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_26.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_27.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ConfigurableMutableGraph","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableGraph.java","addlines":[107,108,109,110],"dellines":[56,57,58,59],"addcode":["  @Override\n","  public boolean removeEdge(Object nodeA, Object nodeB) {\n","    return backingGraph.removeEdge(nodeA, nodeB) != null;\n","  }\n"],"delcode":["  @Override\n","  public boolean removeEdge(Object nodeA, Object nodeB) {\n","    return backingGraph.removeEdge(nodeA, nodeB) != null;\n","  }\n"],"methodSig":"public boolean removeEdge(Object nodeA, Object nodeB)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_27.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_27.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_27.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_27.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_28.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ForwardingGraph","pathinproj":"guava/src/com/google/common/graph/ForwardingGraph.java","addlines":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,47,48,49,50],"dellines":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,39,40,41,42,63],"addcode":["  @Override\n","  public Set<Endpoints<N>> edges() {\n","    return backingGraph.edges();\n","  }\n","  @Override\n","  public Set<Endpoints<N>> edges() {\n","    return new AbstractSet<Endpoints<N>>() {\n","      @Override\n","      public Iterator<Endpoints<N>> iterator() {\n","        return EndpointsIterator.of(AbstractValueGraph.this);\n","      }\n","\n","      @Override\n","      public int size() {\n","        return Ints.saturatedCast(edgeCount());\n","      }\n","\n","      @Override\n","      public boolean contains(Object obj) {\n","        if (!(obj instanceof Endpoints)) {\n","          return false;\n","        }\n","        Endpoints<?> endpoints = (Endpoints<?>) obj;\n","        return isDirected() == endpoints.isDirected()\n","            && nodes().contains(endpoints.nodeA())\n","            && successors(endpoints.nodeA()).contains(endpoints.nodeB());\n","      }\n","    };\n","  }\n"],"delcode":["  @Override\n","  public Set<Endpoints<N>> edges() {\n","    return delegate().edges();\n","  }\n","  @Override\n","  public Set<Endpoints<N>> edges() {\n","    return new AbstractSet<Endpoints<N>>() {\n","      @Override\n","      public Iterator<Endpoints<N>> iterator() {\n","        return EndpointsIterator.of(AbstractGraph.this);\n","      }\n","\n","      @Override\n","      public int size() {\n","        return Ints.saturatedCast(edgeCount());\n","      }\n","\n","      @Override\n","      public boolean contains(Object obj) {\n","        if (!(obj instanceof Endpoints)) {\n","          return false;\n","        }\n","        Endpoints<?> endpoints = (Endpoints<?>) obj;\n","        return isDirected() == endpoints.isDirected()\n","            && nodes().contains(endpoints.nodeA())\n","            && successors(endpoints.nodeA()).contains(endpoints.nodeB());\n","      }\n","    };\n","  }\n"],"methodSig":"public Set<Endpoints<N>> edges()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_28.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_28.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_28.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_28.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_29.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ForwardingGraph","pathinproj":"guava/src/com/google/common/graph/ForwardingGraph.java","addlines":[52,53,54,55],"dellines":[44,45,46,47],"addcode":["  @Override\n","  public boolean isDirected() {\n","    return backingGraph.isDirected();\n","  }\n"],"delcode":["  @Override\n","  public boolean isDirected() {\n","    return delegate().isDirected();\n","  }\n"],"methodSig":"public boolean isDirected()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_29.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_29.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_29.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_29.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_30.txt","newdoc":" This falls into the undirected A->B->A case. The Graph interface does not support parallel\n edges, so this traversal would require reusing the undirected AB edge.\n","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newfuncnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_30.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[130],"dellines":[],"addcode":["      ValueGraph<?, ?> graph, Object nextNode, @Nullable Object previousNode) {\n"],"delcode":[],"methodSig":"private static boolean canTraverseWithoutReusingEdge(ValueGraph<?, ?> graph, Object nextNode, @Nullable Object previousNode)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_30.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_30.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_30.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_30.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_31.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ForwardingGraph","pathinproj":"guava/src/com/google/common/graph/ForwardingGraph.java","addlines":[57,58,59,60],"dellines":[49,50,51,52],"addcode":["  @Override\n","  public boolean allowsSelfLoops() {\n","    return backingGraph.allowsSelfLoops();\n","  }\n"],"delcode":["  @Override\n","  public boolean allowsSelfLoops() {\n","    return delegate().allowsSelfLoops();\n","  }\n"],"methodSig":"public boolean allowsSelfLoops()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_31.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_31.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_31.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_31.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_32.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_32.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[],"dellines":[100],"addcode":[],"delcode":["      Graph<?> graph,\n"],"methodSig":"private static boolean subgraphHasCycle(Graph<?> graph, Map<Object, NodeVisitState> visitedNodes, Object node, @Nullable Object previousNode)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_32.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_32.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_32.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_32.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_33.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_33.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraphBuilder","pathinproj":"guava/src/com/google/common/graph/ValueGraphBuilder.java","addlines":[],"dellines":[73],"addcode":[],"delcode":["  public static <N> ValueGraphBuilder<N, Object> from(Graph<N> graph) {\n"],"methodSig":"public static ValueGraphBuilder<N, Object> from(Graph<N> graph)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_33.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_33.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_33.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_33.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_34.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" Every node is, at a minimum, reachable from itself. Since the resulting transitive closure\n will have no isolated nodes, we can skip adding nodes explicitly and let putEdge() do it.\n Note: works for both directed and undirected graphs, but we only use in the directed case.\n An optimization for the undirected case: for every node B reachable from node A,\n node A and node B have the same reachability set.\n","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_34.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[],"dellines":[148,149],"addcode":[],"delcode":["  public static <N> Graph<N> transitiveClosure(Graph<N> graph) {\n","    MutableGraph<N> transitiveClosure = GraphBuilder.from(graph).allowsSelfLoops(true).build();\n"],"methodSig":"public static Graph<N> transitiveClosure(Graph<N> graph)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_34.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_34.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_34.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_34.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_35.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" Defer to AbstractGraph implementation.\n Optimized implementation assumes no parallel edges (1:1 edge to Endpoints mapping).\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/AbstractNetwork","pathinproj":"guava/src/com/google/common/graph/AbstractNetwork.java","addlines":[],"dellines":[44,45],"addcode":[],"delcode":["  public Graph<N> asGraph() {\n","    return new AbstractGraph<N>() {\n"],"methodSig":"public Graph<N> asGraph()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_35.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_35.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_35.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_35.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_36.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_36.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[],"dellines":[228],"addcode":[],"delcode":["  Graph<N> asGraph();\n"],"methodSig":" Graph<N> asGraph()"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_36.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_36.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_36.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_36.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_37.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfuncoldJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_37.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/AbstractGraph","pathinproj":"guava/src/com/google/common/graph/AbstractGraph.java","addlines":[],"dellines":[144,145,138,139,140,141,142,143],"addcode":[],"delcode":["  private static int degree(Graph<?> graph, Object node) {\n","    if (graph.isDirected()) {\n","      return IntMath.saturatedAdd(graph.predecessors(node).size(), graph.successors(node).size());\n","    } else {\n","      int selfLoops = (graph.allowsSelfLoops() && graph.adjacentNodes(node).contains(node)) ? 1 : 0;\n","      return IntMath.saturatedAdd(graph.adjacentNodes(node).size(), selfLoops);\n","    }\n","  }\n"],"methodSig":"private static int degree(Graph<?> graph, Object node)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_37.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_37.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_37.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_37.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"},{"func":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_oldfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_38.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ConfigurableMutableGraph","pathinproj":"guava/src/com/google/common/graph/ConfigurableMutableGraph.java","addlines":[102,103,104,105],"dellines":[51,52,53,54],"addcode":["  @Override\n","  public boolean removeNode(Object node) {\n","    return backingGraph.removeNode(node);\n","  }\n"],"delcode":["  @Override\n","  public boolean removeNode(Object node) {\n","    return backingGraph.removeNode(node);\n","  }\n"],"methodSig":"public boolean removeNode(Object node)"},"doc":{"oldfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_38.txt","newfunccode":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocfunccode_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_38.txt","newdoc":"","newJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_newdocnewJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_38.txt","olddoc":"","oldJdoc":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/Codes/Match_olddocJdoc_ceee77fafdc9bdc5e2e6df85e231879c4ab6d755_38.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/ceee77fafdc9bdc5e2e6df85e231879c4ab6d755/ValueGraph","pathinproj":"guava/src/com/google/common/graph/ValueGraph.java","addlines":[153,154,155],"dellines":[75,76,77],"addcode":["   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n","   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n","   * Object) edge value}.\n"],"delcode":["   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n","   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n","   * #edgeValue(Object, Object) edge value}.\n"],"methodSig":" int hashCode()"},"id":3,"flag":1,"commit":"ceee77fafdc9bdc5e2e6df85e231879c4ab6d755"}]