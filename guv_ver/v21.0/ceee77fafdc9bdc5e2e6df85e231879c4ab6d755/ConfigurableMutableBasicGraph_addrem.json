{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import java.util.Set;\n",
        "20": "\n",
        "21": "/**\n",
        "22": " * Configurable implementation of {@link MutableBasicGraph} that supports both directed and\n",
        "23": " * undirected graphs. Instances of this class should be constructed with {@link BasicGraphBuilder}.\n",
        "24": " *\n",
        "25": " * <p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},\n",
        "26": " * which is in O(d_node) where d_node is the degree of {@code node}.\n",
        "27": " *\n",
        "28": " * @author James Sexton\n",
        "29": " * @param <N> Node parameter type\n",
        "30": " */\n",
        "31": "final class ConfigurableMutableBasicGraph<N>\n",
        "32": "    extends AbstractBasicGraph<N> implements MutableBasicGraph<N> {\n",
        "33": "  private final MutableValueGraph<N, Presence> backingGraph;\n",
        "34": "\n",
        "35": "  /**\n",
        "36": "   * Constructs a {@link MutableBasicGraph} with the properties specified in {@code builder}.\n",
        "37": "   */\n",
        "38": "  ConfigurableMutableBasicGraph(AbstractGraphBuilder<? super N> builder) {\n",
        "39": "    this.backingGraph = new ConfigurableMutableValueGraph<N, Presence>(builder);\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  @Override\n",
        "43": "  public Set<N> nodes() {\n",
        "44": "    return backingGraph.nodes();\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  @Override\n",
        "48": "  public Set<Endpoints<N>> edges() {\n",
        "49": "    return backingGraph.edges();\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  @Override\n",
        "53": "  public boolean isDirected() {\n",
        "54": "    return backingGraph.isDirected();\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  @Override\n",
        "58": "  public boolean allowsSelfLoops() {\n",
        "59": "    return backingGraph.allowsSelfLoops();\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  @Override\n",
        "63": "  public ElementOrder<N> nodeOrder() {\n",
        "64": "    return backingGraph.nodeOrder();\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  @Override\n",
        "68": "  public Set<N> adjacentNodes(Object node) {\n",
        "69": "    return backingGraph.adjacentNodes(node);\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  @Override\n",
        "73": "  public Set<N> predecessors(Object node) {\n",
        "74": "    return backingGraph.predecessors(node);\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  @Override\n",
        "78": "  public Set<N> successors(Object node) {\n",
        "79": "    return backingGraph.successors(node);\n",
        "80": "  }\n",
        "81": "\n",
        "82": "  @Override\n",
        "83": "  public Presence edgeValue(Object nodeA, Object nodeB) {\n",
        "84": "    return backingGraph.edgeValue(nodeA, nodeB);\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  @Override\n",
        "88": "  public Presence edgeValueOrDefault(Object nodeA, Object nodeB, Presence defaultValue) {\n",
        "89": "    return backingGraph.edgeValueOrDefault(nodeA, nodeB, defaultValue);\n",
        "90": "  }\n",
        "91": "\n",
        "92": "  @Override\n",
        "93": "  public boolean addNode(N node) {\n",
        "94": "    return backingGraph.addNode(node);\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  @Override\n",
        "98": "  public boolean putEdge(N nodeA, N nodeB) {\n",
        "99": "    return backingGraph.putEdgeValue(nodeA, nodeB, Presence.EDGE_EXISTS) == null;\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  @Override\n",
        "103": "  public boolean removeNode(Object node) {\n",
        "104": "    return backingGraph.removeNode(node);\n",
        "105": "  }\n",
        "106": "\n",
        "107": "  @Override\n",
        "108": "  public boolean removeEdge(Object nodeA, Object nodeB) {\n",
        "109": "    return backingGraph.removeEdge(nodeA, nodeB) != null;\n",
        "110": "  }\n",
        "111": "}\n"
    },
    "removed": {}
}