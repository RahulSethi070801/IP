{
    "addition": {
        "20": "import java.util.Set;\n",
        "24": " * An interface to represent a graph data structure. Graphs can be either directed or undirected\n",
        "25": " * (but cannot have both directed edges and undirected edges). Every edge is associated with an\n",
        "26": " * arbitrary user-provided value. Parallel edges are not supported (although the Value type may be,\n",
        "27": " * for example, a collection).\n",
        "29": " * <p>Nodes in a graph are analogous to keys in a Map - they must be unique within a graph.\n",
        "30": " * Values in a graph are analogous to values in a Map - they may be any arbitrary object.\n",
        "31": " *\n",
        "32": " * TODO(b/30133524): Rewrite the top-level javadoc from scratch.\n",
        "33": " *\n",
        "34": " * TODO(jasexton): Rename interface (and various other classes) to \"Graph\".\n",
        "42": "public interface ValueGraph<N, V> {\n",
        "43": "  //\n",
        "44": "  // Graph-level accessors\n",
        "45": "  //\n",
        "46": "\n",
        "47": "  /**\n",
        "48": "   * Returns all nodes in this graph, in the order specified by {@link #nodeOrder()}.\n",
        "49": "   */\n",
        "50": "  Set<N> nodes();\n",
        "51": "\n",
        "52": "  /**\n",
        "53": "   * Returns all edges in this graph.\n",
        "54": "   */\n",
        "55": "  Set<Endpoints<N>> edges();\n",
        "56": "\n",
        "57": "  //\n",
        "58": "  // Graph properties\n",
        "59": "  //\n",
        "60": "\n",
        "61": "  /**\n",
        "62": "   * Returns true if the edges in this graph have a direction associated with them.\n",
        "63": "   */\n",
        "64": "  boolean isDirected();\n",
        "65": "\n",
        "66": "  /**\n",
        "67": "   * Returns true if this graph allows self-loops (edges that connect a node to itself).\n",
        "68": "   * Attempting to add a self-loop to a graph that does not allow them will throw an\n",
        "69": "   * {@link UnsupportedOperationException}.\n",
        "70": "   */\n",
        "71": "  boolean allowsSelfLoops();\n",
        "72": "\n",
        "73": "  /**\n",
        "74": "   * Returns the order of iteration for the elements of {@link #nodes()}.\n",
        "75": "   */\n",
        "76": "  ElementOrder<N> nodeOrder();\n",
        "77": "\n",
        "78": "  //\n",
        "79": "  // Element-level accessors\n",
        "80": "  //\n",
        "81": "\n",
        "82": "  /**\n",
        "83": "   * Returns the nodes which have an incident edge in common with {@code node} in this graph.\n",
        "84": "   *\n",
        "85": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "86": "   */\n",
        "87": "  Set<N> adjacentNodes(Object node);\n",
        "88": "\n",
        "89": "  /**\n",
        "90": "   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing\n",
        "91": "   * {@code node}'s incoming edges <i>against</i> the direction (if any) of the edge.\n",
        "92": "   *\n",
        "93": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "94": "   */\n",
        "95": "  Set<N> predecessors(Object node);\n",
        "96": "\n",
        "97": "  /**\n",
        "98": "   * Returns all nodes in this graph adjacent to {@code node} which can be reached by traversing\n",
        "99": "   * {@code node}'s outgoing edges in the direction (if any) of the edge.\n",
        "100": "   *\n",
        "101": "   * <p>This is <i>not</i> the same as \"all nodes reachable from {@code node} by following outgoing\n",
        "102": "   * edges\". For that functionality, see {@link Graphs#reachableNodes(ValueGraph, Object)} and\n",
        "103": "   * {@link Graphs#transitiveClosure(ValueGraph)}.\n",
        "104": "   *\n",
        "105": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "106": "   */\n",
        "107": "  Set<N> successors(Object node);\n",
        "108": "\n",
        "119": "   * associated with that edge; otherwise, returns {@code defaultValue}.\n",
        "120": "   *\n",
        "121": "   * @throws IllegalArgumentException if {@code nodeA} or {@code nodeB} is not an element of\n",
        "122": "   *     this graph\n",
        "127": "  // Graph identity\n",
        "134": "   * <p>Thus, two graphs A and B are equal if <b>all</b> of the following are true:\n",
        "153": "   * Returns the hash code for this graph. The hash code of a graph is defined as the hash code\n",
        "154": "   * of a map from each of its {@link #edges() edges} to the associated {@link #edgeValue(Object,\n",
        "155": "   * Object) edge value}.\n"
    },
    "removed": {
        "23": " * A subtype of {@link Graph} that associates a value with each edge.\n",
        "25": " * TODO(b/30133524) Flesh out class-level javadoc.\n",
        "33": "public interface ValueGraph<N, V> extends Graph<N> {\n",
        "44": "   * associated with that edge. Otherwise, returns {@code defaultValue}.\n",
        "49": "  // ValueGraph identity\n",
        "56": "   * <p>Thus, two value graphs A and B are equal if <b>all</b> of the following are true:\n",
        "75": "   * Returns the hash code for this value graph. The hash code of a value graph is defined as\n",
        "76": "   * the hash code of a map from each of its {@link #edges() edges} to the associated {@link\n",
        "77": "   * #edgeValue(Object, Object) edge value}.\n"
    }
}