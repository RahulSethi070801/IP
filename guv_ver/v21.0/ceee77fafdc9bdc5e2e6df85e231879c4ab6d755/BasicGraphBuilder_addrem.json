{
    "addition": {
        "26": " * A builder for constructing instances of {@link BasicGraph} with user-defined properties.\n",
        "39": "public final class BasicGraphBuilder<N> extends AbstractGraphBuilder<N> {\n",
        "47": "  private BasicGraphBuilder(boolean directed) {\n",
        "52": "   * Returns a {@link BasicGraphBuilder} for building directed graphs.\n",
        "54": "  public static BasicGraphBuilder<Object> directed() {\n",
        "55": "    return new BasicGraphBuilder<Object>(true);\n",
        "59": "   * Returns a {@link BasicGraphBuilder} for building undirected graphs.\n",
        "61": "  public static BasicGraphBuilder<Object> undirected() {\n",
        "62": "    return new BasicGraphBuilder<Object>(false);\n",
        "66": "   * Returns a {@link BasicGraphBuilder} initialized with all properties queryable from\n",
        "67": "   * {@code graph}.\n",
        "69": "   * <p>The \"queryable\" properties are those that are exposed through the {@link ValueGraph}\n",
        "70": "   * interface, such as {@link ValueGraph#isDirected()}. Other properties, such as\n",
        "71": "   * {@link #expectedNodeCount(int)}, are not set in the new builder.\n",
        "73": "  public static <N> BasicGraphBuilder<N> from(ValueGraph<N, ?> graph) {\n",
        "75": "    return new BasicGraphBuilder<Object>(graph.isDirected())\n",
        "85": "  public BasicGraphBuilder<N> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "95": "  public BasicGraphBuilder<N> expectedNodeCount(int expectedNodeCount) {\n",
        "103": "   * Specifies the order of iteration for the elements of {@link ValueGraph#nodes()}.\n",
        "105": "  public <N1 extends N> BasicGraphBuilder<N1> nodeOrder(ElementOrder<N1> nodeOrder) {\n",
        "107": "    BasicGraphBuilder<N1> newBuilder = cast();\n",
        "113": "   * Returns an empty {@link MutableBasicGraph} with the properties of this\n",
        "114": "   * {@link BasicGraphBuilder}.\n",
        "116": "  public <N1 extends N> MutableBasicGraph<N1> build() {\n",
        "117": "    return new ConfigurableMutableBasicGraph<N1>(this);\n",
        "121": "  private <N1 extends N> BasicGraphBuilder<N1> cast() {\n",
        "122": "    return (BasicGraphBuilder<N1>) this;\n"
    },
    "removed": {
        "26": " * A builder for constructing instances of {@link Graph} with user-defined properties.\n",
        "39": "public final class GraphBuilder<N> extends AbstractGraphBuilder<N> {\n",
        "47": "  private GraphBuilder(boolean directed) {\n",
        "52": "   * Returns a {@link GraphBuilder} for building directed graphs.\n",
        "54": "  public static GraphBuilder<Object> directed() {\n",
        "55": "    return new GraphBuilder<Object>(true);\n",
        "59": "   * Returns a {@link GraphBuilder} for building undirected graphs.\n",
        "61": "  public static GraphBuilder<Object> undirected() {\n",
        "62": "    return new GraphBuilder<Object>(false);\n",
        "66": "   * Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}.\n",
        "68": "   * <p>The \"queryable\" properties are those that are exposed through the {@link Graph} interface,\n",
        "69": "   * such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)},\n",
        "70": "   * are not set in the new builder.\n",
        "72": "  public static <N> GraphBuilder<N> from(Graph<N> graph) {\n",
        "74": "    return new GraphBuilder<Object>(graph.isDirected())\n",
        "84": "  public GraphBuilder<N> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "94": "  public GraphBuilder<N> expectedNodeCount(int expectedNodeCount) {\n",
        "102": "   * Specifies the order of iteration for the elements of {@link Graph#nodes()}.\n",
        "104": "  public <N1 extends N> GraphBuilder<N1> nodeOrder(ElementOrder<N1> nodeOrder) {\n",
        "106": "    GraphBuilder<N1> newBuilder = cast();\n",
        "112": "   * Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.\n",
        "114": "  public <N1 extends N> MutableGraph<N1> build() {\n",
        "115": "    return new ConfigurableMutableGraph<N1>(this);\n",
        "119": "  private <N1 extends N> GraphBuilder<N1> cast() {\n",
        "120": "    return (GraphBuilder<N1>) this;\n"
    }
}