{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkState;\n",
        "20": "import static com.google.common.graph.GraphConstants.GRAPH_STRING_FORMAT;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.Beta;\n",
        "23": "import com.google.common.base.Function;\n",
        "24": "import com.google.common.collect.Maps;\n",
        "25": "import com.google.common.math.IntMath;\n",
        "26": "import com.google.common.primitives.Ints;\n",
        "27": "import java.util.AbstractSet;\n",
        "28": "import java.util.Iterator;\n",
        "29": "import java.util.Set;\n",
        "30": "import javax.annotation.Nullable;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * This class provides a skeletal implementation of {@link Graph}. It is recommended to extend this\n",
        "34": " * class rather than implement {@link Graph} directly, to ensure consistent {@link #equals(Object)}\n",
        "35": " * and {@link #hashCode()} results across different graph implementations.\n",
        "36": " *\n",
        "37": " * @author James Sexton\n",
        "38": " * @param <N> Node parameter type\n",
        "39": " * @since 20.0\n",
        "40": " */\n",
        "41": "@Beta\n",
        "42": "public abstract class AbstractGraph<N> implements Graph<N> {\n",
        "43": "\n",
        "44": "  /**\n",
        "45": "   * Returns the number of edges in this graph; used to calculate the size of {@link #edges()}.\n",
        "46": "   * The default implementation is O(|N|). You can manually keep track of the number of edges and\n",
        "47": "   * override this method for better performance.\n",
        "48": "   */\n",
        "49": "  protected long edgeCount() {\n",
        "50": "    long degreeSum = 0L;\n",
        "51": "    for (N node : nodes()) {\n",
        "52": "      degreeSum += degree(this, node);\n",
        "53": "    }\n",
        "54": "    // According to the degree sum formula, this is equal to twice the number of edges.\n",
        "55": "    checkState((degreeSum & 1) == 0);\n",
        "56": "    return degreeSum >>> 1;\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  /**\n",
        "60": "   * A reasonable default implementation of {@link Graph#edges()} defined in terms of\n",
        "61": "   * {@link #nodes()} and {@link #successors(Object)}.\n",
        "62": "   */\n",
        "63": "  @Override\n",
        "64": "  public Set<Endpoints<N>> edges() {\n",
        "65": "    return new AbstractSet<Endpoints<N>>() {\n",
        "66": "      @Override\n",
        "67": "      public Iterator<Endpoints<N>> iterator() {\n",
        "68": "        return EndpointsIterator.of(AbstractGraph.this);\n",
        "69": "      }\n",
        "70": "\n",
        "71": "      @Override\n",
        "72": "      public int size() {\n",
        "73": "        return Ints.saturatedCast(edgeCount());\n",
        "74": "      }\n",
        "75": "\n",
        "76": "      @Override\n",
        "77": "      public boolean contains(Object obj) {\n",
        "78": "        if (!(obj instanceof Endpoints)) {\n",
        "79": "          return false;\n",
        "80": "        }\n",
        "81": "        Endpoints<?> endpoints = (Endpoints<?>) obj;\n",
        "82": "        return isDirected() == endpoints.isDirected()\n",
        "83": "            && nodes().contains(endpoints.nodeA())\n",
        "84": "            && successors(endpoints.nodeA()).contains(endpoints.nodeB());\n",
        "85": "      }\n",
        "86": "    };\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  @Override\n",
        "90": "  public boolean equals(@Nullable Object obj) {\n",
        "91": "    if (obj == this) {\n",
        "92": "      return true;\n",
        "93": "    }\n",
        "94": "    if (!(obj instanceof Graph)) {\n",
        "95": "      return false;\n",
        "96": "    }\n",
        "97": "    Graph<?> other = (Graph<?>) obj;\n",
        "98": "\n",
        "99": "    return (this instanceof ValueGraph) == (other instanceof ValueGraph)\n",
        "100": "        && isDirected() == other.isDirected()\n",
        "101": "        && nodes().equals(other.nodes())\n",
        "102": "        && edges().equals(other.edges());\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  @Override\n",
        "106": "  public int hashCode() {\n",
        "107": "    Function<N, Set<N>> nodeToSuccessors = new Function<N, Set<N>>() {\n",
        "108": "      @Override\n",
        "109": "      public Set<N> apply(N node) {\n",
        "110": "        return successors(node);\n",
        "111": "      }\n",
        "112": "    };\n",
        "113": "    return Maps.asMap(nodes(), nodeToSuccessors).hashCode();\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  /**\n",
        "117": "   * Returns a string representation of this graph.\n",
        "118": "   */\n",
        "119": "  @Override\n",
        "120": "  public String toString() {\n",
        "121": "    String propertiesString = String.format(\n",
        "122": "        \"isDirected: %s, allowsSelfLoops: %s\", isDirected(), allowsSelfLoops());\n",
        "123": "    return String.format(GRAPH_STRING_FORMAT,\n",
        "124": "        propertiesString,\n",
        "125": "        nodes(),\n",
        "126": "        edges());\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  /**\n",
        "130": "   * Returns the number of times an edge touches {@code node} in {@code graph}. This is equivalent\n",
        "131": "   * to the number of edges incident to {@code node} in the graph, with self-loops counting twice.\n",
        "132": "   *\n",
        "133": "   * <p>If this number is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n",
        "134": "   *\n",
        "135": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "136": "   */\n",
        "137": "  // TODO(b/30649235): What to do with this? Move to Graphs or interfaces? Provide in/outDegree?\n",
        "138": "  private static int degree(Graph<?> graph, Object node) {\n",
        "139": "    if (graph.isDirected()) {\n",
        "140": "      return IntMath.saturatedAdd(graph.predecessors(node).size(), graph.successors(node).size());\n",
        "141": "    } else {\n",
        "142": "      int selfLoops = (graph.allowsSelfLoops() && graph.adjacentNodes(node).contains(node)) ? 1 : 0;\n",
        "143": "      return IntMath.saturatedAdd(graph.adjacentNodes(node).size(), selfLoops);\n",
        "144": "    }\n",
        "145": "  }\n",
        "146": "}\n"
    }
}