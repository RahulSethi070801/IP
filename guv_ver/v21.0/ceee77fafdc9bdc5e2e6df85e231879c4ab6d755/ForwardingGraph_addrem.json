{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import java.util.Set;\n",
        "20": "\n",
        "21": "/**\n",
        "22": " * A {@link Graph} which forwards its method calls (except equals/hashCode/toString, which instead\n",
        "23": " * it inherits from AbstractGraph) to another {@link Graph}.\n",
        "24": " * \n",
        "25": " * <p>Currently used to allow {@link Graph}s to be implemented via {ValueGraph}s.\n",
        "26": " *\n",
        "27": " * @author James Sexton\n",
        "28": " * @since 20.0\n",
        "29": " */\n",
        "30": "abstract class ForwardingGraph<N> extends AbstractGraph<N> implements Graph<N> {\n",
        "31": "\n",
        "32": "  protected abstract Graph<N> delegate();\n",
        "33": "\n",
        "34": "  @Override\n",
        "35": "  public Set<N> nodes() {\n",
        "36": "    return delegate().nodes();\n",
        "37": "  }\n",
        "38": "\n",
        "39": "  @Override\n",
        "40": "  public Set<Endpoints<N>> edges() {\n",
        "41": "    return delegate().edges();\n",
        "42": "  }\n",
        "43": "\n",
        "44": "  @Override\n",
        "45": "  public boolean isDirected() {\n",
        "46": "    return delegate().isDirected();\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  @Override\n",
        "50": "  public boolean allowsSelfLoops() {\n",
        "51": "    return delegate().allowsSelfLoops();\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  @Override\n",
        "55": "  public ElementOrder<N> nodeOrder() {\n",
        "56": "    return delegate().nodeOrder();\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  @Override\n",
        "60": "  public Set<N> adjacentNodes(Object node) {\n",
        "61": "    return delegate().adjacentNodes(node);\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  @Override\n",
        "65": "  public Set<N> predecessors(Object node) {\n",
        "66": "    return delegate().predecessors(node);\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  @Override\n",
        "70": "  public Set<N> successors(Object node) {\n",
        "71": "    return delegate().successors(node);\n",
        "72": "  }\n",
        "73": "}\n",
        "74": "\n"
    }
}