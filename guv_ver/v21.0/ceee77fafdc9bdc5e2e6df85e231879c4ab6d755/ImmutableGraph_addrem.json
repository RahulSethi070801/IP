{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.Beta;\n",
        "22": "import com.google.common.base.Functions;\n",
        "23": "import com.google.common.collect.ImmutableMap;\n",
        "24": "import com.google.common.collect.Maps;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * A {@link Graph} whose relationships are constant. Instances of this class may be obtained\n",
        "28": " * with {@link #copyOf(Graph)}.\n",
        "29": " *\n",
        "30": " * @author James Sexton\n",
        "31": " * @author Joshua O'Madadhain\n",
        "32": " * @author Omar Darwish\n",
        "33": " * @param <N> Node parameter type\n",
        "34": " * @since 20.0\n",
        "35": " */\n",
        "36": "@Beta\n",
        "37": "public final class ImmutableGraph<N> extends ForwardingGraph<N> {\n",
        "38": "  private static final Object DUMMY_EDGE_VALUE = new Object();\n",
        "39": "\n",
        "40": "  private final ValueGraph<N, Object> backingGraph;\n",
        "41": "\n",
        "42": "  private ImmutableGraph(Graph<N> graph) {\n",
        "43": "    this.backingGraph = new ConfigurableValueGraph<N, Object>(\n",
        "44": "        GraphBuilder.from(graph), getNodeConnections(graph), graph.edges().size());\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  /**\n",
        "48": "   * Returns an immutable copy of {@code graph}.\n",
        "49": "   */\n",
        "50": "  @SuppressWarnings(\"unchecked\")\n",
        "51": "  public static <N> ImmutableGraph<N> copyOf(Graph<N> graph) {\n",
        "52": "    return (graph instanceof ImmutableGraph)\n",
        "53": "        ? (ImmutableGraph<N>) graph\n",
        "54": "        : new ImmutableGraph<N>(graph);\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  /**\n",
        "58": "   * Simply returns its argument.\n",
        "59": "   *\n",
        "60": "   * @deprecated no need to use this\n",
        "61": "   */\n",
        "62": "  @Deprecated\n",
        "63": "  public static <N> ImmutableGraph<N> copyOf(ImmutableGraph<N> graph) {\n",
        "64": "    return checkNotNull(graph);\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  private static <N> ImmutableMap<N, GraphConnections<N, Object>> getNodeConnections(\n",
        "68": "      Graph<N> graph) {\n",
        "69": "    // ImmutableMap.Builder maintains the order of the elements as inserted, so the map will have\n",
        "70": "    // whatever ordering the graph's nodes do, so ImmutableSortedMap is unnecessary even if the\n",
        "71": "    // input nodes are sorted.\n",
        "72": "    ImmutableMap.Builder<N, GraphConnections<N, Object>> nodeConnections = ImmutableMap.builder();\n",
        "73": "    for (N node : graph.nodes()) {\n",
        "74": "      nodeConnections.put(node, connectionsOf(graph, node));\n",
        "75": "    }\n",
        "76": "    return nodeConnections.build();\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  private static <N> GraphConnections<N, Object> connectionsOf(Graph<N> graph, N node) {\n",
        "80": "    return graph.isDirected()\n",
        "81": "        ? DirectedGraphConnections.ofImmutable(\n",
        "82": "            graph.predecessors(node),\n",
        "83": "            Maps.asMap(graph.successors(node), Functions.constant(DUMMY_EDGE_VALUE)))\n",
        "84": "        : UndirectedGraphConnections.ofImmutable(\n",
        "85": "            Maps.asMap(graph.adjacentNodes(node), Functions.constant(DUMMY_EDGE_VALUE)));\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  @Override\n",
        "89": "  protected Graph<N> delegate() {\n",
        "90": "    return backingGraph;\n",
        "91": "  }\n",
        "92": "}\n"
    }
}