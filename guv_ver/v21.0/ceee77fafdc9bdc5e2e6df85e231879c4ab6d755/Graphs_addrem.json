{
    "addition": {
        "38": " * Static utility methods for {@link ValueGraph} and {@link Network} instances.\n",
        "58": "  public static boolean hasCycle(ValueGraph<?, ?> graph) {\n",
        "100": "      ValueGraph<?, ?> graph,\n",
        "130": "      ValueGraph<?, ?> graph, Object nextNode, @Nullable Object previousNode) {\n",
        "141": "   * graph with an edge connecting node A to node B iff node B is {@link #reachableNodes(ValueGraph,\n",
        "144": "   * <p>This is a \"snapshot\" based on the current topology of {@code graph}, rather than a live view\n",
        "145": "   * of the transitive closure of {@code graph}. In other words, the returned {@link BasicGraph}\n",
        "148": "  public static <N> BasicGraph<N> transitiveClosure(ValueGraph<N, ?> graph) {\n",
        "149": "    MutableBasicGraph<N> transitiveClosure =\n",
        "150": "        BasicGraphBuilder.from(graph).allowsSelfLoops(true).build();\n",
        "188": "   * <p>This is a \"snapshot\" based on the current topology of {@code graph}, rather than a live view\n",
        "189": "   * of the set of nodes reachable from {@code node}. In other words, the returned {@link Set} will\n",
        "190": "   * not be updated after modifications to {@code graph}.\n",
        "195": "  public static <N> Set<N> reachableNodes(ValueGraph<N, ?> graph, Object node) {\n",
        "247": "   * all of the nodes in {@code nodes}, and all of the {@link ValueGraph#edges() edges} from {@code\n",
        "252": "  public static <N> MutableBasicGraph<N> inducedSubgraph(BasicGraph<N> graph,\n",
        "253": "      Iterable<? extends N> nodes) {\n",
        "254": "    MutableBasicGraph<N> subgraph = BasicGraphBuilder.from(graph).build();\n",
        "270": "   * all of the nodes in {@code nodes}, and all of the {@link ValueGraph#edges() edges} (and\n",
        "271": "   * associated edge values) from {@code graph} for which the endpoints are both contained by\n",
        "272": "   * {@code nodes}.\n",
        "319": "  public static <N> MutableBasicGraph<N> copyOf(BasicGraph<N> graph) {\n",
        "320": "    MutableBasicGraph<N> copy = BasicGraphBuilder.from(graph)\n"
    },
    "removed": {
        "38": " * Static utility methods for {@link Graph} instances.\n",
        "58": "  public static boolean hasCycle(Graph<?> graph) {\n",
        "100": "      Graph<?> graph,\n",
        "130": "      Graph<?> graph, Object nextNode, @Nullable Object previousNode) {\n",
        "141": "   * graph with an edge connecting node A to node B iff node B is {@link #reachableNodes(Graph,\n",
        "144": "   * <p>This is a \"snapshot\" based on the current topology of {@code graph}, rather than a live\n",
        "145": "   * view of the transitive closure of {@code graph}. In other words, the returned {@link Graph}\n",
        "148": "  public static <N> Graph<N> transitiveClosure(Graph<N> graph) {\n",
        "149": "    MutableGraph<N> transitiveClosure = GraphBuilder.from(graph).allowsSelfLoops(true).build();\n",
        "187": "   * <p>This is a \"snapshot\" based on the current topology of {@code graph}, rather than a live\n",
        "188": "   * view of the set of nodes reachable from {@code node}. In other words, the returned {@link Set}\n",
        "189": "   * will not be updated after modifications to {@code graph}.\n",
        "194": "  public static <N> Set<N> reachableNodes(Graph<N> graph, Object node) {\n",
        "246": "   * all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} from {@code\n",
        "251": "  public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes) {\n",
        "252": "    MutableGraph<N> subgraph = GraphBuilder.from(graph).build();\n",
        "268": "   * all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} (and associated\n",
        "269": "   * edge values) from {@code graph} for which the endpoints are both contained by {@code nodes}.\n",
        "316": "  public static <N> MutableGraph<N> copyOf(Graph<N> graph) {\n",
        "317": "    MutableGraph<N> copy = GraphBuilder.from(graph)\n"
    }
}