{
    "addition": {
        "19": "import static com.google.common.base.Preconditions.checkState;\n",
        "25": "import com.google.common.math.IntMath;\n",
        "26": "import com.google.common.primitives.Ints;\n",
        "27": "import java.util.AbstractSet;\n",
        "28": "import java.util.Iterator;\n",
        "30": "import java.util.Set;\n",
        "36": " * #equals(Object)} and {@link #hashCode()} results across different graph implementations.\n",
        "44": "public abstract class AbstractValueGraph<N, V> implements ValueGraph<N, V> {\n",
        "46": "  /**\n",
        "47": "   * Returns the number of edges in this graph; used to calculate the size of {@link #edges()}.\n",
        "48": "   * The default implementation is O(|N|). You can manually keep track of the number of edges and\n",
        "49": "   * override this method for better performance.\n",
        "50": "   */\n",
        "51": "  protected long edgeCount() {\n",
        "52": "    long degreeSum = 0L;\n",
        "53": "    for (N node : nodes()) {\n",
        "54": "      degreeSum += degree(this, node);\n",
        "55": "    }\n",
        "56": "    // According to the degree sum formula, this is equal to twice the number of edges.\n",
        "57": "    checkState((degreeSum & 1) == 0);\n",
        "58": "    return degreeSum >>> 1;\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  /**\n",
        "62": "   * A reasonable default implementation of {@link ValueGraph#edges()} defined in terms of\n",
        "63": "   * {@link #nodes()} and {@link #successors(Object)}.\n",
        "64": "   */\n",
        "65": "  @Override\n",
        "66": "  public Set<Endpoints<N>> edges() {\n",
        "67": "    return new AbstractSet<Endpoints<N>>() {\n",
        "68": "      @Override\n",
        "69": "      public Iterator<Endpoints<N>> iterator() {\n",
        "70": "        return EndpointsIterator.of(AbstractValueGraph.this);\n",
        "71": "      }\n",
        "72": "\n",
        "73": "      @Override\n",
        "74": "      public int size() {\n",
        "75": "        return Ints.saturatedCast(edgeCount());\n",
        "76": "      }\n",
        "77": "\n",
        "78": "      @Override\n",
        "79": "      public boolean contains(Object obj) {\n",
        "80": "        if (!(obj instanceof Endpoints)) {\n",
        "81": "          return false;\n",
        "82": "        }\n",
        "83": "        Endpoints<?> endpoints = (Endpoints<?>) obj;\n",
        "84": "        return isDirected() == endpoints.isDirected()\n",
        "85": "            && nodes().contains(endpoints.nodeA())\n",
        "86": "            && successors(endpoints.nodeA()).contains(endpoints.nodeB());\n",
        "87": "      }\n",
        "88": "    };\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n",
        "108": "    for (Endpoints<N> edge : edges()) {\n",
        "124": "   * Returns a string representation of this graph.\n",
        "145": "\n",
        "146": "  /**\n",
        "147": "   * Returns the number of times an edge touches {@code node} in {@code graph}. This is equivalent\n",
        "148": "   * to the number of edges incident to {@code node} in the graph, with self-loops counting twice.\n",
        "149": "   *\n",
        "150": "   * <p>If this number is greater than {@code Integer.MAX_VALUE}, returns {@code Integer.MAX_VALUE}.\n",
        "151": "   *\n",
        "152": "   * @throws IllegalArgumentException if {@code node} is not an element of this graph\n",
        "153": "   */\n",
        "154": "  // TODO(b/30649235): What to do with this? Move to Graphs or interfaces? Provide in/outDegree?\n",
        "155": "  private static int degree(ValueGraph<?, ?> graph, Object node) {\n",
        "156": "    if (graph.isDirected()) {\n",
        "157": "      return IntMath.saturatedAdd(graph.predecessors(node).size(), graph.successors(node).size());\n",
        "158": "    } else {\n",
        "159": "      int selfLoops = (graph.allowsSelfLoops() && graph.adjacentNodes(node).contains(node)) ? 1 : 0;\n",
        "160": "      return IntMath.saturatedAdd(graph.adjacentNodes(node).size(), selfLoops);\n",
        "161": "    }\n",
        "162": "  }\n"
    },
    "removed": {
        "30": " * #equals(Object)} and {@link #hashCode()} results across different value graph implementations.\n",
        "38": "public abstract class AbstractValueGraph<N, V>\n",
        "39": "    extends AbstractGraph<N> implements ValueGraph<N, V> {\n",
        "57": "    for (Endpoints<?> edge : edges()) {\n",
        "73": "   * Returns a string representation of this value graph.\n"
    }
}