{
    "addition": {
        "21": "import static com.google.common.util.concurrent.Futures.getDone;\n",
        "43": "    /*\n",
        "44": "     * We don't need to override any of methods that we override in the prod version (and in fact we\n",
        "45": "     * can't) because they are already final.\n",
        "46": "     */\n",
        "63": "  /*\n",
        "64": "   * TODO(cpovirk): Consider making cancel() final (under GWT only, since we can't change the\n",
        "65": "   * server) by migrating our overrides to use afterDone().\n",
        "66": "   */\n",
        "87": "  public final boolean isCancelled() {\n",
        "92": "  public final boolean isDone() {\n",
        "96": "  /*\n",
        "97": "   * We let people override {@code get()} in the server version (though perhaps we shouldn't). Here,\n",
        "98": "   * we don't want that, and anyway, users can't, thanks to the package-private parameter.\n",
        "99": "   */\n",
        "101": "  public final V get() throws InterruptedException, ExecutionException {\n",
        "107": "  public final V get(long timeout, TimeUnit unit)\n",
        "114": "  public final void addListener(Runnable runnable, Executor executor) {\n",
        "298": "      if (delegate instanceof AbstractFuture) {\n",
        "309": "      /*\n",
        "310": "       * Almost everything in GWT is an AbstractFuture (which is as good as TrustedFuture under\n",
        "311": "       * GWT). But ImmediateFuture and UncheckedThrowingFuture aren't, so we still need this case.\n",
        "312": "       */\n",
        "314": "        forceSet(getDone(delegate));\n"
    },
    "removed": {
        "22": "import static com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly;\n",
        "43": "    @Override public final V get() throws InterruptedException, ExecutionException {\n",
        "44": "      return super.get();\n",
        "45": "    }\n",
        "46": "\n",
        "47": "    @Override public final V get(long timeout, TimeUnit unit)\n",
        "48": "        throws InterruptedException, ExecutionException, TimeoutException {\n",
        "49": "      return super.get(timeout, unit);\n",
        "50": "    }\n",
        "51": "\n",
        "52": "    @Override public final boolean isDone() {\n",
        "53": "      return super.isDone();\n",
        "54": "    }\n",
        "55": "\n",
        "56": "    @Override public final boolean isCancelled() {\n",
        "57": "      return super.isCancelled();\n",
        "58": "    }\n",
        "59": "\n",
        "60": "    @Override public final void addListener(Runnable listener, Executor executor) {\n",
        "61": "      super.addListener(listener, executor);\n",
        "62": "    }\n",
        "99": "  public boolean isCancelled() {\n",
        "104": "  public boolean isDone() {\n",
        "109": "  public V get() throws InterruptedException, ExecutionException {\n",
        "115": "  public V get(long timeout, TimeUnit unit)\n",
        "122": "  public void addListener(Runnable runnable, Executor executor) {\n",
        "306": "      if (delegate instanceof TrustedFuture) {\n",
        "318": "        forceSet(getUninterruptibly(delegate));\n"
    }
}