[{"func":{"oldfunccode":"","newfunccode":"2d9d38c335bc38adc7045c90283f8e4f90048b6e/Codes_neg/Match_newfunccode_2d9d38c335bc38adc7045c90283f8e4f90048b6e_1.txt","newdoc":"","newJdoc":"2d9d38c335bc38adc7045c90283f8e4f90048b6e/Codes_neg/Match_newfuncnewJdoc_2d9d38c335bc38adc7045c90283f8e4f90048b6e_1.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/2d9d38c335bc38adc7045c90283f8e4f90048b6e/TreeTraverser","pathinproj":"guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeTraverser.java","addlines":[73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"dellines":[],"addcode":["  public static <T> TreeTraverser<T> using(\n","      final Function<T, ? extends Iterable<T>> nodeToChildrenFunction) {\n","    checkNotNull(nodeToChildrenFunction);\n","    return new TreeTraverser<T>() {\n","      @Override\n","      public Iterable<T> children(T root) {\n","        return nodeToChildrenFunction.apply(root);\n","      }\n","    };\n","  }\n","  public static <T> TreeTraverser<T> using(\n","      final Function<T, ? extends Iterable<T>> nodeToChildrenFunction) {\n","    checkNotNull(nodeToChildrenFunction);\n","    return new TreeTraverser<T>() {\n","      @Override\n","      public Iterable<T> children(T root) {\n","        return nodeToChildrenFunction.apply(root);\n","      }\n","    };\n","  }\n"],"delcode":[],"methodSig":"public static TreeTraverser<T> using(final Function<T, ? extends Iterable<T>> nodeToChildrenFunction)"},"doc":{"oldfunccode":"2d9d38c335bc38adc7045c90283f8e4f90048b6e/Codes_neg/Match_olddocfunccode_2d9d38c335bc38adc7045c90283f8e4f90048b6e_1.txt","newfunccode":"2d9d38c335bc38adc7045c90283f8e4f90048b6e/Codes_neg/Match_newdocfunccode_2d9d38c335bc38adc7045c90283f8e4f90048b6e_1.txt","newdoc":"","newJdoc":"2d9d38c335bc38adc7045c90283f8e4f90048b6e/Codes_neg/Match_newdocnewJdoc_2d9d38c335bc38adc7045c90283f8e4f90048b6e_1.txt","olddoc":"","oldJdoc":"2d9d38c335bc38adc7045c90283f8e4f90048b6e/Codes_neg/Match_olddocJdoc_2d9d38c335bc38adc7045c90283f8e4f90048b6e_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/2d9d38c335bc38adc7045c90283f8e4f90048b6e/Converter","pathinproj":"guava/src/com/google/common/base/Converter.java","addlines":[409,410,411,412],"dellines":[409,410,411,412],"addcode":["   * Returns a converter based on separate forward and backward functions. This is useful if the\n","   * function instances already exist, or so that you can supply lambda expressions. If those\n","   * circumstances don't apply, you probably don't need to use this; subclass {@code Converter} and\n","   * implement its {@link #doForward} and {@link #doBackward} methods directly.\n"],"delcode":["   * Returns a converter based on <i>existing</i> forward and backward functions. Note that it is\n","   * unnecessary to create <i>new</i> classes implementing {@code Function} just to pass them in\n","   * here. Instead, simply subclass {@code Converter} and implement its {@link #doForward} and\n","   * {@link #doBackward} methods directly.\n"],"methodSig":"public static Converter<A, B> from(Function<? super A, ? extends B> forwardFunction, Function<? super B, ? extends A> backwardFunction)"},"id":1,"flag":1,"commit":"2d9d38c335bc38adc7045c90283f8e4f90048b6e"}]