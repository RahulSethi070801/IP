{
    "addition": {
        "21": "import com.google.common.base.Function;\n",
        "30": " * <p>For example, the tree\n",
        "32": " * <pre>{@code\n",
        "33": " *        h\n",
        "34": " *      / | \\\n",
        "35": " *     /  e  \\\n",
        "36": " *    d       g\n",
        "37": " *   /|\\      |\n",
        "38": " *  / | \\     f\n",
        "39": " * a  b  c\n",
        "40": " *\n",
        "41": " * }</pre>\n",
        "48": " * <p><b>For Java 8 users:</b> Because this is an abstract class, not an interface, you can't use a\n",
        "49": " * lambda expression to extend it:\n",
        "50": " *\n",
        "51": " * <pre>{@code\n",
        "52": " * // won't work\n",
        "53": " * TreeTraverser<NodeType> traverser = node -> node.getChildNodes();\n",
        "54": " * }</pre>\n",
        "55": " *\n",
        "56": " * Instead, you can pass a lambda expression to the {@code using} factory method:\n",
        "57": " *\n",
        "58": " * <pre>{@code\n",
        "59": " * TreeTraverser<NodeType> traverser = TreeTraverser.using(node -> node.getChildNodes());\n",
        "60": " * }</pre>\n",
        "61": " *\n",
        "65": "  /**\n",
        "66": "   * Returns a tree traverser that uses the given function to navigate from a node to its children.\n",
        "67": "   * This is useful if the function instance already exists, or so that you can supply a lambda\n",
        "68": "   * expressions. If those circumstances don't apply, you probably don't need to use this; subclass\n",
        "69": "   * {@code TreeTraverser} and implement its {@link #children} method directly.\n",
        "70": "   *\n",
        "71": "   * @since 20.0\n",
        "72": "   */\n",
        "73": "  public static <T> TreeTraverser<T> using(\n",
        "74": "      final Function<T, ? extends Iterable<T>> nodeToChildrenFunction) {\n",
        "75": "    checkNotNull(nodeToChildrenFunction);\n",
        "76": "    return new TreeTraverser<T>() {\n",
        "77": "      @Override\n",
        "78": "      public Iterable<T> children(T root) {\n",
        "79": "        return nodeToChildrenFunction.apply(root);\n",
        "80": "      }\n",
        "81": "    };\n",
        "82": "  }\n"
    },
    "removed": {
        "29": " * <p>For example, the tree <pre>   {@code\n",
        "31": " *          h\n",
        "32": " *        / | \\\n",
        "33": " *       /  e  \\\n",
        "34": " *      d       g\n",
        "35": " *     /|\\      |\n",
        "36": " *    / | \\     f\n",
        "37": " *   a  b  c\n",
        "38": " *   }</pre>\n"
    }
}