{"id": "6ed0a709a546f1d2c3de6a56c032c2c5261926ae", "code": [{"0": "guava-tests/test/com/google/common/graph/GraphEqualsTest.java", "added": {"1": ["  // Node/edge sets and node/edge connections are the same, but directedness differs.\n"], "2": ["    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n"]}, "removed": {"1": ["  // Node/edge sets and node/edge connections are the same, but types differ.\n", "  // (In this case the graphs are considered equal; the type differences are irrelevant.)\n"], "2": ["    new EqualsTester().addEqualityGroup(graph, g2).testEquals();\n"]}, "added_lines": {"1": [100], "2": [108]}, "removed_lines": {"1": [100, 101], "2": [109]}}, {"1": "guava-tests/test/com/google/common/graph/NetworkEqualsTest.java", "added": {"1": ["  // Node/edge sets and node/edge connections are the same, but directedness differs.\n"], "2": ["    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n"]}, "removed": {"1": ["  // Node/edge sets and node/edge connections are the same, but types differ.\n", "  // (In this case the graphs are considered equal; the type differences are irrelevant.)\n"], "2": ["    new EqualsTester().addEqualityGroup(graph, g2).testEquals();\n"]}, "added_lines": {"1": [116], "2": [124]}, "removed_lines": {"1": [116, 117], "2": [125]}}, {"2": "guava/src/com/google/common/graph/Graph.java", "added": {"1": ["   * Returns {@code true} iff {@code object} is a graph that has the same structural relationships\n", "   * <li>A and B have the same {@link #isDirected() directedness}.\n", "   * <li>A and B have the same node set.\n", "   * <li>A and B have the same adjacency relationships, i.e., for each node, the sets of successor\n", "   *     and predecessor nodes are the same in both graphs.\n"], "2": ["   * <p>Note: {@link Network} instances can only be equal to other {@link Network} instances.\n", "   * In particular, {@link Graph}s that are not also {@link Network}s cannot be equal to\n", "   * {@link Network}s.\n", "   *\n"], "3": ["   * of a map from each of the graph's nodes to its successor nodes.\n"]}, "removed": {"1": ["   * Returns {@code true} iff {@code object} is a graph that has the same node relationships\n", "   * <li>A and B have the same node set\n", "   * <li>A and B have the same adjacency relationships, e.g., for each {@code node} the sets of\n", "   *     successor and predecessor nodes are the same in both graphs.\n", "   *     <br>This implies that every edge in A and B connects the same nodes in the same\n", "   *     direction (if any).\n"], "3": ["   * of a map from each of the graph's nodes to their adjacent nodes.\n", "   *\n", "   * <p>Note that by this definition, two graphs that are equal in every aspect except edge\n", "   * direction will have the same hash code (but can still be differentiated by\n", "   * {@link #equals(Object)}.\n"]}, "added_lines": {"1": [259, 264, 265, 266, 267], "2": [275, 276, 277, 278], "3": [286]}, "removed_lines": {"1": [259, 264, 265, 266, 267, 268], "3": [283, 286, 287, 288, 289]}}, {"3": "guava/src/com/google/common/graph/Graphs.java", "added": {"1": ["   * Returns true iff {@code graph1} and {@code graph2} are equal as defined by\n", "   * {@link Graph#equals(Object)}.\n"], "2": ["    if (graph1.isDirected() != graph2.isDirected()) {\n", "      return false;\n", "    }\n", "\n"], "3": ["   * Returns true iff {@code graph1} and {@code graph2} are equal as defined by\n", "   * {@link Network#equals(Object)}.\n"], "4": ["    if (graph1.isDirected() != graph2.isDirected()) {\n", "    if (!graph1.nodes().equals(graph2.nodes()) || !graph1.edges().equals(graph2.edges())) {\n", "    for (Object edge : graph1.edges()) {\n", "      if (!graph1.incidentNodes(edge).equals(graph2.incidentNodes(edge))) {\n"], "5": ["   * Returns the hash code of {@code graph} as defined by {@link Graph#hashCode()}.\n", "    return nodeToSuccessorNodes(graph).hashCode();\n", "   * Returns the hash code of {@code graph} as defined by {@link Network#hashCode()}.\n", "    return nodeToOutEdges(graph).hashCode();\n"], "6": ["   * and the set of outgoing edges as values.\n", "  private static <N, E> Map<N, Set<E>> nodeToOutEdges(final Network<N, E> graph) {\n", "        return graph.outEdges(node);\n", "   * and the set of successor nodes as values.\n", "  private static <N> Map<N, Set<N>> nodeToSuccessorNodes(final Graph<N> graph) {\n", "        return graph.successors(node);\n"]}, "removed": {"1": ["   * Returns true iff {@code graph1} and {@code graph2} have the same node connections.\n", "   *\n", "   * <p>Note: {@link Network} instances can only be equal to other {@link Network} instances.\n", "   * In particular, {@link Graph}s that are not also {@link Network}s cannot be equal\n", "   * to {@link Network}s.\n", "   *\n", "   * @see Graph#equals(Object)\n"], "3": ["      boolean bothUndirected = !graph1.isDirected() && !graph2.isDirected();\n", "      if (!bothUndirected && !graph1.predecessors(node).equals(graph2.predecessors(node))) {\n", "        return false;\n", "      }\n", "   * Returns true iff {@code graph1} and {@code graph2} have the same node/edge relationships.\n", "   *\n", "   * @see Network#equals(Object)\n"], "4": ["    if (graph1.edges().size() != graph2.edges().size()) {\n", "    if (!graph1.nodes().equals(graph2.nodes())) {\n", "    for (Object node : graph1.nodes()) {\n", "      if (!graph1.inEdges(node).equals(graph2.inEdges(node))) {\n", "        return false;\n", "      }\n", "      boolean bothUndirected = !graph1.isDirected() && !graph2.isDirected();\n", "      if (!bothUndirected && !graph1.outEdges(node).equals(graph2.outEdges(node))) {\n"], "5": ["   * Returns the hash code of {@code graph}.\n", "   *\n", "   * @see Graph#hashCode()\n", "    return nodeToAdjacentNodes(graph).hashCode();\n", "   * Returns the hash code of {@code graph}.\n", "   *\n", "   * @see Network#hashCode()\n", "    return nodeToIncidentEdges(graph).hashCode();\n"], "6": ["   * and the set of incident edges as values.\n", "  private static <N, E> Map<N, Set<E>> nodeToIncidentEdges(final Network<N, E> graph) {\n", "        return graph.incidentEdges(node);\n", "   * and the set of adjacent nodes as values.\n", "  private static <N> Map<N, Set<N>> nodeToAdjacentNodes(final Graph<N> graph) {\n", "        return graph.adjacentNodes(node);\n"]}, "added_lines": {"1": [256, 257], "2": [278, 279, 280, 281], "3": [296, 297], "4": [308, 312, 316, 317], "5": [326, 332, 336, 339], "6": [377, 379, 384, 391, 393, 398]}, "removed_lines": {"1": [256, 257, 258, 259, 260, 261, 262], "3": [291, 292, 293, 294, 301, 302, 303], "4": [314, 318, 322, 323, 324, 325, 326, 327], "5": [336, 337, 338, 344, 348, 349, 350, 353], "6": [391, 393, 398, 405, 407, 412]}}, {"4": "guava/src/com/google/common/graph/Network.java", "added": {"1": ["   * Returns {@code true} iff {@code object} is a graph that has the same structural relationships\n", "   * <li>A and B have the same {@link #isDirected() directedness}.\n", "   * <li>A and B have the same node set.\n", "   * <li>A and B have the same edge set.\n", "   * <li>Every edge in A and B connects the same nodes in the same direction (if any).\n"], "2": ["   * <p>Note: {@link Network} instances can only be equal to other {@link Network} instances.\n", "   * In particular, {@link Graph}s that are not also {@link Network}s cannot be equal to\n", "   * {@link Network}s.\n", "   *\n", "   * <p>A reference implementation of this is provided by {@link Graphs#equal(Network, Network)}.\n", "   * of a map from each of the graph's nodes to its outgoing edges.\n"]}, "removed": {"1": ["   * Returns {@code true} iff {@code object} is a graph that has the same node/edge relationships\n", "   * <li>A and B have the same node set\n", "   * <li>A and B have the same edge set\n", "   * <li>A and B have the same incidence relationships, e.g., for each node/edge in A and in B\n", "   *     its incident edge/node set in A is the same as its incident edge/node set in B.\n", "   *     <br>Thus, every edge in A and B connect the same nodes in the same direction (if any).\n"], "2": ["   * <p>A reference implementation of this is provided by\n", "   * {@link Graphs#equal(Network, Network)}.\n", "   * of a map from each of the graph's nodes to their incident edges.\n", "   *\n", "   * <p>Note that by this definition, two graphs that are equal in every aspect except edge\n", "   * direction will have the same hash code (but can still be differentiated by\n", "   * {@link #equals(Object)}).\n"]}, "added_lines": {"1": [328, 333, 334, 335, 336], "2": [344, 345, 346, 347, 348, 355]}, "removed_lines": {"1": [328, 333, 334, 335, 336, 337], "2": [345, 346, 353, 356, 357, 358, 359]}}]}
