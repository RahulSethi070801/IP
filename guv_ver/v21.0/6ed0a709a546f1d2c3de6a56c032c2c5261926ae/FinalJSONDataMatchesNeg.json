[{"func":{"oldfunccode":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_oldfunccode_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_1.txt","newfunccode":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_newfunccode_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_1.txt","newdoc":"","newJdoc":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_newfuncnewJdoc_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_1.txt","olddoc":"","oldJdoc":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_oldfuncoldJdoc_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[332],"dellines":[344],"addcode":["    return nodeToSuccessorNodes(graph).hashCode();\n"],"delcode":["    return nodeToAdjacentNodes(graph).hashCode();\n"],"methodSig":"public static int hashCode(Graph<?> graph)"},"doc":{"oldfunccode":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_olddocfunccode_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_1.txt","newfunccode":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_newdocfunccode_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_1.txt","newdoc":"","newJdoc":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_newdocnewJdoc_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_1.txt","olddoc":"","oldJdoc":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_olddocJdoc_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[355,286],"dellines":[288,353,289,356,357,358,359,283,286,287],"addcode":["   * of a map from each of the graph's nodes to its outgoing edges.\n","   * of a map from each of the graph's nodes to its successor nodes.\n"],"delcode":["   * of a map from each of the graph's nodes to their incident edges.\n","   *\n","   * <p>Note that by this definition, two graphs that are equal in every aspect except edge\n","   * direction will have the same hash code (but can still be differentiated by\n","   * {@link #equals(Object)}).\n","   * of a map from each of the graph's nodes to their adjacent nodes.\n","   *\n","   * <p>Note that by this definition, two graphs that are equal in every aspect except edge\n","   * direction will have the same hash code (but can still be differentiated by\n","   * {@link #equals(Object)}.\n"],"methodSig":" int hashCode()"},"id":1,"flag":1,"commit":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae"},{"func":{"oldfunccode":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_oldfunccode_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_2.txt","newfunccode":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_newfunccode_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_2.txt","newdoc":"","newJdoc":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_newfuncnewJdoc_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_2.txt","olddoc":"","oldJdoc":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_oldfuncoldJdoc_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[308,312,316,317],"dellines":[322,323,324,325,326,327,314,318],"addcode":["    if (graph1.isDirected() != graph2.isDirected()) {\n","    if (!graph1.nodes().equals(graph2.nodes()) || !graph1.edges().equals(graph2.edges())) {\n","    for (Object edge : graph1.edges()) {\n","      if (!graph1.incidentNodes(edge).equals(graph2.incidentNodes(edge))) {\n"],"delcode":["    if (graph1.edges().size() != graph2.edges().size()) {\n","    if (!graph1.nodes().equals(graph2.nodes())) {\n","    for (Object node : graph1.nodes()) {\n","      if (!graph1.inEdges(node).equals(graph2.inEdges(node))) {\n","        return false;\n","      }\n","      boolean bothUndirected = !graph1.isDirected() && !graph2.isDirected();\n","      if (!bothUndirected && !graph1.outEdges(node).equals(graph2.outEdges(node))) {\n"],"methodSig":"public static boolean equal(@Nullable Network<?, ?> graph1, @Nullable Network<?, ?> graph2)"},"doc":{"oldfunccode":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_olddocfunccode_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_2.txt","newfunccode":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_newdocfunccode_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_2.txt","newdoc":"","newJdoc":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_newdocnewJdoc_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_2.txt","olddoc":"","oldJdoc":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Codes_neg/Match_olddocJdoc_6ed0a709a546f1d2c3de6a56c032c2c5261926ae_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/6ed0a709a546f1d2c3de6a56c032c2c5261926ae/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[355,286],"dellines":[288,353,289,356,357,358,359,283,286,287],"addcode":["   * of a map from each of the graph's nodes to its outgoing edges.\n","   * of a map from each of the graph's nodes to its successor nodes.\n"],"delcode":["   * of a map from each of the graph's nodes to their incident edges.\n","   *\n","   * <p>Note that by this definition, two graphs that are equal in every aspect except edge\n","   * direction will have the same hash code (but can still be differentiated by\n","   * {@link #equals(Object)}).\n","   * of a map from each of the graph's nodes to their adjacent nodes.\n","   *\n","   * <p>Note that by this definition, two graphs that are equal in every aspect except edge\n","   * direction will have the same hash code (but can still be differentiated by\n","   * {@link #equals(Object)}.\n"],"methodSig":" int hashCode()"},"id":1,"flag":1,"commit":"6ed0a709a546f1d2c3de6a56c032c2c5261926ae"}]