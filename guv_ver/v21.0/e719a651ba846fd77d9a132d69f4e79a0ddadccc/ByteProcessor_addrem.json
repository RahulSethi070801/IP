{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "25": " * <p>{@link #processBytes} will be called for each line that is read, and should return\n",
        "26": " * {@code false} when you want to stop processing.\n",
        "35": "   * This method will be called for each chunk of bytes in an input stream. The implementation\n",
        "36": "   * should process the bytes from {@code buf[off]} through {@code buf[off + len - 1]} (inclusive).\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "27": " * <p>{@link #processBytes} will be called for each line that is read, and\n",
        "28": " * should return {@code false} when you want to stop processing.\n",
        "37": "   * This method will be called for each chunk of bytes in an\n",
        "38": "   * input stream. The implementation should process the bytes\n",
        "39": "   * from {@code buf[off]} through {@code buf[off + len - 1]}\n",
        "40": "   * (inclusive).\n"
    }
}