{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "49": "import java.nio.charset.StandardCharsets;\n",
        "74": "   * Returns a buffered reader that reads from a file using the given character set.\n",
        "77": "   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n",
        "78": "   *     helpful predefined constants\n",
        "81": "  public static BufferedReader newReader(File file, Charset charset) throws FileNotFoundException {\n",
        "84": "    return new BufferedReader(new InputStreamReader(new FileInputStream(file), charset));\n",
        "88": "   * Returns a buffered writer that writes to a file using the given character set.\n",
        "91": "   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for\n",
        "92": "   *     helpful predefined constants\n",
        "95": "  public static BufferedWriter newWriter(File file, Charset charset) throws FileNotFoundException {\n",
        "98": "    return new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), charset));\n",
        "160": "   * Reads a file of the given expected size from the given input stream, if it will fit into a byte\n",
        "161": "   * array. This method handles the case where the file size changes between when the size is read\n",
        "162": "   * and when the contents are read from the stream.\n",
        "164": "  static byte[] readFile(InputStream in, long expectedSize) throws IOException {\n",
        "166": "      throw new OutOfMemoryError(\n",
        "167": "          \"file is too large to fit in a byte array: \" + expectedSize + \" bytes\");\n",
        "178": "   * Returns a new {@link ByteSink} for writing bytes to the given file. The given {@code modes}\n",
        "179": "   * control how the file is opened for writing. When no mode is provided, the file will be\n",
        "180": "   * truncated before writing. When the {@link FileWriteMode#APPEND APPEND} mode is provided, writes\n",
        "181": "   * will append to the end of the file without truncating it.\n",
        "211": "   * Returns a new {@link CharSource} for reading character data from the given file using the given\n",
        "212": "   * character set.\n",
        "221": "   * Returns a new {@link CharSink} for writing character data to the given file using the given\n",
        "222": "   * character set. The given {@code modes} control how the file is opened for writing. When no mode\n",
        "223": "   * is provided, the file will be truncated before writing. When the {@link FileWriteMode#APPEND\n",
        "224": "   * APPEND} mode is provided, writes will append to the end of the file without truncating it.\n",
        "228": "  public static CharSink asCharSink(File file, Charset charset, FileWriteMode... modes) {\n",
        "243": "   * @throws IllegalArgumentException if the file is bigger than the largest possible byte array\n",
        "244": "   *     (2^31 - 1)\n",
        "252": "   * Reads all characters from a file into a {@link String}, using the given character set.\n",
        "255": "   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n",
        "256": "   *     helpful predefined constants\n",
        "289": "   * <p><b>Warning:</b> If {@code to} represents an existing file, that file will be overwritten\n",
        "290": "   * with the contents of {@code from}. If {@code to} and {@code from} refer to the <i>same</i>\n",
        "291": "   * file, the contents of that file will be deleted.\n",
        "299": "    checkArgument(!from.equals(to), \"Source %s and destination %s must be different\", from, to);\n",
        "304": "   * Writes a character sequence (such as a string) to a file using the given character set.\n",
        "308": "   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for\n",
        "309": "   *     helpful predefined constants\n",
        "312": "  public static void write(CharSequence from, File to, Charset charset) throws IOException {\n",
        "317": "   * Appends a character sequence (such as a string) to a file using the given character set.\n",
        "321": "   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for\n",
        "322": "   *     helpful predefined constants\n",
        "325": "  public static void append(CharSequence from, File to, Charset charset) throws IOException {\n",
        "330": "   * Private helper method. Writes a character sequence to a file, optionally appending.\n",
        "334": "   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for\n",
        "335": "   *     helpful predefined constants\n",
        "339": "  private static void write(CharSequence from, File to, Charset charset, boolean append)\n",
        "340": "      throws IOException {\n",
        "345": "   * Copies all characters from a file to an appendable object, using the given character set.\n",
        "348": "   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n",
        "349": "   *     helpful predefined constants\n",
        "353": "  public static void copy(File from, Charset charset, Appendable to) throws IOException {\n",
        "370": "     * Some operating systems may return zero as the length for files denoting system-dependent\n",
        "371": "     * entities such as devices or pipes, in which case we must fall back on comparing the bytes\n",
        "372": "     * directly.\n",
        "383": "   * Atomically creates a new directory somewhere beneath the system's temporary directory (as\n",
        "384": "   * defined by the {@code java.io.tmpdir} system property), and returns its name.\n",
        "386": "   * <p>Use this method instead of {@link File#createTempFile(String, String)} when you wish to\n",
        "387": "   * create a directory, not a regular file. A common pitfall is to call {@code createTempFile},\n",
        "388": "   * delete the file and create a directory in its place, but this leads a race condition which can\n",
        "389": "   * be exploited to create security vulnerabilities, especially when executable files are to be\n",
        "390": "   * written into the directory.\n",
        "392": "   * <p>This method assumes that the temporary volume is writable, has free inodes and free blocks,\n",
        "393": "   * and that it will not be called thousands of times per second.\n",
        "408": "    throw new IllegalStateException(\n",
        "409": "        \"Failed to create directory within \"\n",
        "410": "            + TEMP_DIR_ATTEMPTS\n",
        "411": "            + \" attempts (tried \"\n",
        "412": "            + baseName\n",
        "413": "            + \"0 to \"\n",
        "414": "            + baseName\n",
        "415": "            + (TEMP_DIR_ATTEMPTS - 1)\n",
        "416": "            + ')');\n",
        "420": "   * Creates an empty file or updates the last updated timestamp on the same as the unix command of\n",
        "421": "   * the same name.\n",
        "428": "    if (!file.createNewFile() && !file.setLastModified(System.currentTimeMillis())) {\n",
        "434": "   * Creates any necessary but nonexistent parent directories of the specified file. Note that if\n",
        "435": "   * this operation fails it may have succeeded in creating some (but not all) of the necessary\n",
        "436": "   * parent directories.\n",
        "438": "   * @throws IOException if an I/O error occurs, or if any necessary but nonexistent parent\n",
        "439": "   *     directories of the specified file could not be created.\n",
        "447": "       * The given directory is a filesystem root. All zero of its ancestors exist. This doesn't\n",
        "448": "       * mean that the root itself exists -- consider x:\\ on a Windows machine without such a drive\n",
        "449": "       * -- or even that the caller can create it, but this method makes no such guarantees even for\n",
        "450": "       * non-root files.\n",
        "461": "   * Moves a file from one path to another. This method can rename a file and/or move it to a\n",
        "462": "   * different directory. In either case {@code to} must be the target path for the file itself; not\n",
        "463": "   * just the new name for the file or the path to the new parent directory.\n",
        "473": "    checkArgument(!from.equals(to), \"Source %s and destination %s must be different\", from, to);\n",
        "487": "   * Reads the first line from a file. The line does not include line-termination characters, but\n",
        "488": "   * does include other leading and trailing whitespace.\n",
        "491": "   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n",
        "492": "   *     helpful predefined constants\n",
        "496": "  public static String readFirstLine(File file, Charset charset) throws IOException {\n",
        "501": "   * Reads all of the lines from a file. The lines do not include line-termination characters, but\n",
        "502": "   * do include other leading and trailing whitespace.\n",
        "504": "   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use\n",
        "508": "   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n",
        "509": "   *     helpful predefined constants\n",
        "513": "  public static List<String> readLines(File file, Charset charset) throws IOException {\n",
        "516": "    return readLines(\n",
        "517": "        file,\n",
        "518": "        charset,\n",
        "519": "        new LineProcessor<List<String>>() {\n",
        "520": "          final List<String> result = Lists.newArrayList();\n",
        "522": "          @Override\n",
        "523": "          public boolean processLine(String line) {\n",
        "524": "            result.add(line);\n",
        "525": "            return true;\n",
        "526": "          }\n",
        "528": "          @Override\n",
        "529": "          public List<String> getResult() {\n",
        "530": "            return result;\n",
        "531": "          }\n",
        "532": "        });\n",
        "536": "   * Streams lines from a {@link File}, stopping when our callback returns false, or we have read\n",
        "537": "   * all of the lines.\n",
        "540": "   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for\n",
        "541": "   *     helpful predefined constants\n",
        "546": "  public static <T> T readLines(File file, Charset charset, LineProcessor<T> callback)\n",
        "547": "      throws IOException {\n",
        "554": "   * <p>(If this seems too complicated, maybe you're looking for {@link #toByteArray}.)\n",
        "561": "  public static <T> T readBytes(File file, ByteProcessor<T> processor) throws IOException {\n",
        "574": "  public static HashCode hash(File file, HashFunction hashFunction) throws IOException {\n",
        "601": "   * {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested\n",
        "602": "   * {@link MapMode}.\n",
        "617": "  public static MappedByteBuffer map(File file, MapMode mode) throws IOException {\n",
        "628": "   * {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested\n",
        "629": "   * {@link MapMode}.\n",
        "633": "   * <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist, it will be created\n",
        "634": "   * with the requested {@code size}. Thus this method is useful for creating memory mapped files\n",
        "635": "   * which do not yet exist.\n",
        "654": "      RandomAccessFile raf =\n",
        "655": "          closer.register(new RandomAccessFile(file, mode == MapMode.READ_ONLY ? \"r\" : \"rw\"));\n",
        "664": "  private static MappedByteBuffer map(RandomAccessFile raf, MapMode mode, long size)\n",
        "665": "      throws IOException {\n",
        "678": "   * Returns the lexically cleaned form of the path name, <i>usually</i> (but not always) equivalent\n",
        "679": "   * to the original. The following heuristics are used:\n",
        "690": "   * <p>These heuristics do not always match the behavior of the filesystem. In particular, consider\n",
        "691": "   * the path {@code a/../b}, which {@code simplifyPath} will change to {@code b}. If {@code a} is a\n",
        "692": "   * symlink to {@code x}, {@code a/../b} may refer to a sibling of {@code x}, rather than the\n",
        "693": "   * sibling of {@code a} referred to by {@code b}.\n",
        "704": "    Iterable<String> components = Splitter.on('/').omitEmptyStrings().split(pathname);\n",
        "741": "   * Returns the <a href=\"http://en.wikipedia.org/wiki/Filename_extension\">file extension</a> for\n",
        "742": "   * the given file name, or the empty string if the file has no extension. The result does not\n",
        "743": "   * include the '{@code .}'.\n",
        "775": "   * way to ensure that a symbolic link to a directory is not followed when traversing the tree. In\n",
        "776": "   * this case, iterables created by this traverser could contain files that are outside of the\n",
        "785": "  private static final TreeTraverser<File> FILE_TREE_TRAVERSER =\n",
        "786": "      new TreeTraverser<File>() {\n",
        "787": "        @Override\n",
        "788": "        public Iterable<File> children(File file) {\n",
        "789": "          // check isDirectory() just because it may be faster than listFiles() on a non-directory\n",
        "790": "          if (file.isDirectory()) {\n",
        "791": "            File[] files = file.listFiles();\n",
        "792": "            if (files != null) {\n",
        "793": "              return Collections.unmodifiableList(Arrays.asList(files));\n",
        "794": "            }\n",
        "795": "          }\n",
        "797": "          return Collections.emptyList();\n",
        "798": "        }\n",
        "800": "        @Override\n",
        "801": "        public String toString() {\n",
        "802": "          return \"Files.fileTreeTraverser()\";\n",
        "803": "        }\n",
        "804": "      };\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "25": "import com.google.common.base.Charsets;\n",
        "76": "   * Returns a buffered reader that reads from a file using the given\n",
        "77": "   * character set.\n",
        "80": "   * @param charset the charset used to decode the input stream; see {@link\n",
        "81": "   *     Charsets} for helpful predefined constants\n",
        "84": "  public static BufferedReader newReader(File file, Charset charset)\n",
        "85": "      throws FileNotFoundException {\n",
        "88": "    return new BufferedReader(\n",
        "89": "        new InputStreamReader(new FileInputStream(file), charset));\n",
        "93": "   * Returns a buffered writer that writes to a file using the given\n",
        "94": "   * character set.\n",
        "97": "   * @param charset the charset used to encode the output stream; see {@link\n",
        "98": "   *     Charsets} for helpful predefined constants\n",
        "101": "  public static BufferedWriter newWriter(File file, Charset charset)\n",
        "102": "      throws FileNotFoundException {\n",
        "105": "    return new BufferedWriter(\n",
        "106": "        new OutputStreamWriter(new FileOutputStream(file), charset));\n",
        "168": "   * Reads a file of the given expected size from the given input stream, if\n",
        "169": "   * it will fit into a byte array. This method handles the case where the file\n",
        "170": "   * size changes between when the size is read and when the contents are read\n",
        "171": "   * from the stream.\n",
        "173": "  static byte[] readFile(\n",
        "174": "      InputStream in, long expectedSize) throws IOException {\n",
        "176": "      throw new OutOfMemoryError(\"file is too large to fit in a byte array: \"\n",
        "177": "          + expectedSize + \" bytes\");\n",
        "188": "   * Returns a new {@link ByteSink} for writing bytes to the given file. The\n",
        "189": "   * given {@code modes} control how the file is opened for writing. When no\n",
        "190": "   * mode is provided, the file will be truncated before writing. When the\n",
        "191": "   * {@link FileWriteMode#APPEND APPEND} mode is provided, writes will\n",
        "192": "   * append to the end of the file without truncating it.\n",
        "222": "   * Returns a new {@link CharSource} for reading character data from the given\n",
        "223": "   * file using the given character set.\n",
        "232": "   * Returns a new {@link CharSink} for writing character data to the given\n",
        "233": "   * file using the given character set. The given {@code modes} control how\n",
        "234": "   * the file is opened for writing. When no mode is provided, the file\n",
        "235": "   * will be truncated before writing. When the\n",
        "236": "   * {@link FileWriteMode#APPEND APPEND} mode is provided, writes will\n",
        "237": "   * append to the end of the file without truncating it.\n",
        "241": "  public static CharSink asCharSink(File file, Charset charset,\n",
        "242": "      FileWriteMode... modes) {\n",
        "257": "   * @throws IllegalArgumentException if the file is bigger than the largest\n",
        "258": "   *     possible byte array (2^31 - 1)\n",
        "266": "   * Reads all characters from a file into a {@link String}, using the given\n",
        "267": "   * character set.\n",
        "270": "   * @param charset the charset used to decode the input stream; see {@link\n",
        "271": "   *     Charsets} for helpful predefined constants\n",
        "304": "   * <p><b>Warning:</b> If {@code to} represents an existing file, that file\n",
        "305": "   * will be overwritten with the contents of {@code from}. If {@code to} and\n",
        "306": "   * {@code from} refer to the <i>same</i> file, the contents of that file\n",
        "307": "   * will be deleted.\n",
        "315": "    checkArgument(!from.equals(to),\n",
        "316": "        \"Source %s and destination %s must be different\", from, to);\n",
        "321": "   * Writes a character sequence (such as a string) to a file using the given\n",
        "322": "   * character set.\n",
        "326": "   * @param charset the charset used to encode the output stream; see {@link\n",
        "327": "   *     Charsets} for helpful predefined constants\n",
        "330": "  public static void write(CharSequence from, File to, Charset charset)\n",
        "331": "      throws IOException {\n",
        "336": "   * Appends a character sequence (such as a string) to a file using the given\n",
        "337": "   * character set.\n",
        "341": "   * @param charset the charset used to encode the output stream; see {@link\n",
        "342": "   *     Charsets} for helpful predefined constants\n",
        "345": "  public static void append(CharSequence from, File to, Charset charset)\n",
        "346": "      throws IOException {\n",
        "351": "   * Private helper method. Writes a character sequence to a file,\n",
        "352": "   * optionally appending.\n",
        "356": "   * @param charset the charset used to encode the output stream; see {@link\n",
        "357": "   *     Charsets} for helpful predefined constants\n",
        "361": "  private static void write(CharSequence from, File to, Charset charset,\n",
        "362": "      boolean append) throws IOException {\n",
        "367": "   * Copies all characters from a file to an appendable object,\n",
        "368": "   * using the given character set.\n",
        "371": "   * @param charset the charset used to decode the input stream; see {@link\n",
        "372": "   *     Charsets} for helpful predefined constants\n",
        "376": "  public static void copy(File from, Charset charset, Appendable to)\n",
        "377": "      throws IOException {\n",
        "394": "     * Some operating systems may return zero as the length for files\n",
        "395": "     * denoting system-dependent entities such as devices or pipes, in\n",
        "396": "     * which case we must fall back on comparing the bytes directly.\n",
        "407": "   * Atomically creates a new directory somewhere beneath the system's\n",
        "408": "   * temporary directory (as defined by the {@code java.io.tmpdir} system\n",
        "409": "   * property), and returns its name.\n",
        "411": "   * <p>Use this method instead of {@link File#createTempFile(String, String)}\n",
        "412": "   * when you wish to create a directory, not a regular file.  A common pitfall\n",
        "413": "   * is to call {@code createTempFile}, delete the file and create a\n",
        "414": "   * directory in its place, but this leads a race condition which can be\n",
        "415": "   * exploited to create security vulnerabilities, especially when executable\n",
        "416": "   * files are to be written into the directory.\n",
        "418": "   * <p>This method assumes that the temporary volume is writable, has free\n",
        "419": "   * inodes and free blocks, and that it will not be called thousands of times\n",
        "420": "   * per second.\n",
        "435": "    throw new IllegalStateException(\"Failed to create directory within \"\n",
        "436": "        + TEMP_DIR_ATTEMPTS + \" attempts (tried \"\n",
        "437": "        + baseName + \"0 to \" + baseName + (TEMP_DIR_ATTEMPTS - 1) + ')');\n",
        "441": "   * Creates an empty file or updates the last updated timestamp on the\n",
        "442": "   * same as the unix command of the same name.\n",
        "449": "    if (!file.createNewFile()\n",
        "450": "        && !file.setLastModified(System.currentTimeMillis())) {\n",
        "456": "   * Creates any necessary but nonexistent parent directories of the specified\n",
        "457": "   * file. Note that if this operation fails it may have succeeded in creating\n",
        "458": "   * some (but not all) of the necessary parent directories.\n",
        "460": "   * @throws IOException if an I/O error occurs, or if any necessary but\n",
        "461": "   *     nonexistent parent directories of the specified file could not be\n",
        "462": "   *     created.\n",
        "470": "       * The given directory is a filesystem root. All zero of its ancestors\n",
        "471": "       * exist. This doesn't mean that the root itself exists -- consider x:\\ on\n",
        "472": "       * a Windows machine without such a drive -- or even that the caller can\n",
        "473": "       * create it, but this method makes no such guarantees even for non-root\n",
        "474": "       * files.\n",
        "485": "   * Moves a file from one path to another. This method can rename a file\n",
        "486": "   * and/or move it to a different directory. In either case {@code to} must\n",
        "487": "   * be the target path for the file itself; not just the new name for the\n",
        "488": "   * file or the path to the new parent directory.\n",
        "498": "    checkArgument(!from.equals(to),\n",
        "499": "        \"Source %s and destination %s must be different\", from, to);\n",
        "513": "   * Reads the first line from a file. The line does not include\n",
        "514": "   * line-termination characters, but does include other leading and\n",
        "515": "   * trailing whitespace.\n",
        "518": "   * @param charset the charset used to decode the input stream; see {@link\n",
        "519": "   *     Charsets} for helpful predefined constants\n",
        "523": "  public static String readFirstLine(File file, Charset charset)\n",
        "524": "      throws IOException {\n",
        "529": "   * Reads all of the lines from a file. The lines do not include\n",
        "530": "   * line-termination characters, but do include other leading and\n",
        "531": "   * trailing whitespace.\n",
        "533": "   * <p>This method returns a mutable {@code List}. For an\n",
        "534": "   * {@code ImmutableList}, use\n",
        "538": "   * @param charset the charset used to decode the input stream; see {@link\n",
        "539": "   *     Charsets} for helpful predefined constants\n",
        "543": "  public static List<String> readLines(File file, Charset charset)\n",
        "544": "      throws IOException {\n",
        "547": "    return readLines(file, charset, new LineProcessor<List<String>>() {\n",
        "548": "      final List<String> result = Lists.newArrayList();\n",
        "550": "      @Override\n",
        "551": "      public boolean processLine(String line) {\n",
        "552": "        result.add(line);\n",
        "553": "        return true;\n",
        "554": "      }\n",
        "556": "      @Override\n",
        "557": "      public List<String> getResult() {\n",
        "558": "        return result;\n",
        "559": "      }\n",
        "560": "    });\n",
        "564": "   * Streams lines from a {@link File}, stopping when our callback returns\n",
        "565": "   * false, or we have read all of the lines.\n",
        "568": "   * @param charset the charset used to decode the input stream; see {@link\n",
        "569": "   *     Charsets} for helpful predefined constants\n",
        "574": "  public static <T> T readLines(File file, Charset charset,\n",
        "575": "      LineProcessor<T> callback) throws IOException {\n",
        "582": "   * <p>(If this seems too complicated, maybe you're looking for\n",
        "583": "   * {@link #toByteArray}.)\n",
        "590": "  public static <T> T readBytes(File file, ByteProcessor<T> processor)\n",
        "591": "      throws IOException {\n",
        "604": "  public static HashCode hash(File file, HashFunction hashFunction)\n",
        "605": "      throws IOException {\n",
        "632": "   * {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)}\n",
        "633": "   * using the requested {@link MapMode}.\n",
        "648": "  public static MappedByteBuffer map(File file, MapMode mode)\n",
        "649": "      throws IOException {\n",
        "660": "   * {@link FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)}\n",
        "661": "   * using the requested {@link MapMode}.\n",
        "665": "   * <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist,\n",
        "666": "   * it will be created with the requested {@code size}. Thus this method is\n",
        "667": "   * useful for creating memory mapped files which do not yet exist.\n",
        "686": "      RandomAccessFile raf = closer.register(\n",
        "687": "          new RandomAccessFile(file, mode == MapMode.READ_ONLY ? \"r\" : \"rw\"));\n",
        "696": "  private static MappedByteBuffer map(RandomAccessFile raf, MapMode mode,\n",
        "697": "      long size) throws IOException {\n",
        "710": "   * Returns the lexically cleaned form of the path name, <i>usually</i> (but\n",
        "711": "   * not always) equivalent to the original. The following heuristics are used:\n",
        "722": "   * <p>These heuristics do not always match the behavior of the filesystem. In\n",
        "723": "   * particular, consider the path {@code a/../b}, which {@code simplifyPath}\n",
        "724": "   * will change to {@code b}. If {@code a} is a symlink to {@code x}, {@code\n",
        "725": "   * a/../b} may refer to a sibling of {@code x}, rather than the sibling of\n",
        "726": "   * {@code a} referred to by {@code b}.\n",
        "737": "    Iterable<String> components =\n",
        "738": "        Splitter.on('/').omitEmptyStrings().split(pathname);\n",
        "775": "   * Returns the <a href=\"http://en.wikipedia.org/wiki/Filename_extension\">file\n",
        "776": "   * extension</a> for the given file name, or the empty string if the file has\n",
        "777": "   * no extension.  The result does not include the '{@code .}'.\n",
        "809": "   * way to ensure that a symbolic link to a directory is not followed when traversing the tree.\n",
        "810": "   * In this case, iterables created by this traverser could contain files that are outside of the\n",
        "819": "  private static final TreeTraverser<File> FILE_TREE_TRAVERSER = new TreeTraverser<File>() {\n",
        "820": "    @Override\n",
        "821": "    public Iterable<File> children(File file) {\n",
        "822": "      // check isDirectory() just because it may be faster than listFiles() on a non-directory\n",
        "823": "      if (file.isDirectory()) {\n",
        "824": "        File[] files = file.listFiles();\n",
        "825": "        if (files != null) {\n",
        "826": "          return Collections.unmodifiableList(Arrays.asList(files));\n",
        "827": "        }\n",
        "828": "      }\n",
        "830": "      return Collections.emptyList();\n",
        "831": "    }\n",
        "833": "    @Override\n",
        "834": "    public String toString() {\n",
        "835": "      return \"Files.fileTreeTraverser()\";\n",
        "836": "    }\n",
        "837": "  };\n"
    }
}