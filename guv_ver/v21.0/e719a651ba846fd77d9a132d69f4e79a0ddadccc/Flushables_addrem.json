{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "34": "  private static final Logger logger = Logger.getLogger(Flushables.class.getName());\n",
        "39": "   * Flush a {@link Flushable}, with control over whether an {@code IOException} may be thrown.\n",
        "41": "   * <p>If {@code swallowIOException} is true, then we don't rethrow {@code IOException}, but merely\n",
        "42": "   * log it.\n",
        "45": "   * @param swallowIOException if true, don't propagate IO exceptions thrown by the {@code flush}\n",
        "46": "   *     method\n",
        "47": "   * @throws IOException if {@code swallowIOException} is false and {@link Flushable#flush} throws\n",
        "48": "   *     an {@code IOException}.\n",
        "51": "  public static void flush(Flushable flushable, boolean swallowIOException) throws IOException {\n",
        "56": "        logger.log(Level.WARNING, \"IOException thrown while flushing Flushable.\", e);\n",
        "64": "   * Equivalent to calling {@code flush(flushable, true)}, but with no {@code IOException} in the\n",
        "65": "   * signature.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "36": "  private static final Logger logger\n",
        "37": "      = Logger.getLogger(Flushables.class.getName());\n",
        "42": "   * Flush a {@link Flushable}, with control over whether an\n",
        "43": "   * {@code IOException} may be thrown.\n",
        "45": "   * <p>If {@code swallowIOException} is true, then we don't rethrow\n",
        "46": "   * {@code IOException}, but merely log it.\n",
        "49": "   * @param swallowIOException if true, don't propagate IO exceptions\n",
        "50": "   *     thrown by the {@code flush} method\n",
        "51": "   * @throws IOException if {@code swallowIOException} is false and\n",
        "52": "   *     {@link Flushable#flush} throws an {@code IOException}.\n",
        "55": "  public static void flush(Flushable flushable, boolean swallowIOException)\n",
        "56": "      throws IOException {\n",
        "61": "        logger.log(Level.WARNING,\n",
        "62": "            \"IOException thrown while flushing Flushable.\", e);\n",
        "70": "   * Equivalent to calling {@code flush(flushable, true)}, but with no\n",
        "71": "   * {@code IOException} in the signature.\n"
    }
}