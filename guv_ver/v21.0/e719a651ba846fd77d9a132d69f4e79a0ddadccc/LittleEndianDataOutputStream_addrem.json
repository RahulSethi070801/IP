{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "29": " * An implementation of {@link DataOutput} that uses little-endian byte ordering for writing\n",
        "30": " * {@code char}, {@code short}, {@code int}, {@code float}, {@code double}, and {@code long} values.\n",
        "31": " *\n",
        "32": " * <p><b>Note:</b> This class intentionally violates the specification of its supertype\n",
        "33": " * {@code DataOutput}, which explicitly requires big-endian byte order.\n",
        "52": "  @Override\n",
        "53": "  public void write(byte[] b, int off, int len) throws IOException {\n",
        "58": "  @Override\n",
        "59": "  public void writeBoolean(boolean v) throws IOException {\n",
        "63": "  @Override\n",
        "64": "  public void writeByte(int v) throws IOException {\n",
        "69": "   * @deprecated The semantics of {@code writeBytes(String s)} are considered dangerous. Please use\n",
        "70": "   *     {@link #writeUTF(String s)}, {@link #writeChars(String s)} or another write method instead.\n",
        "73": "  @Override\n",
        "74": "  public void writeBytes(String s) throws IOException {\n",
        "79": "   * Writes a char as specified by {@link DataOutputStream#writeChar(int)}, except using\n",
        "80": "   * little-endian byte order.\n",
        "84": "  @Override\n",
        "85": "  public void writeChar(int v) throws IOException {\n",
        "90": "   * Writes a {@code String} as specified by {@link DataOutputStream#writeChars(String)}, except\n",
        "91": "   * each character is written using little-endian byte order.\n",
        "95": "  @Override\n",
        "96": "  public void writeChars(String s) throws IOException {\n",
        "103": "   * Writes a {@code double} as specified by {@link DataOutputStream#writeDouble(double)}, except\n",
        "104": "   * using little-endian byte order.\n",
        "108": "  @Override\n",
        "109": "  public void writeDouble(double v) throws IOException {\n",
        "114": "   * Writes a {@code float} as specified by {@link DataOutputStream#writeFloat(float)}, except using\n",
        "115": "   * little-endian byte order.\n",
        "119": "  @Override\n",
        "120": "  public void writeFloat(float v) throws IOException {\n",
        "125": "   * Writes an {@code int} as specified by {@link DataOutputStream#writeInt(int)}, except using\n",
        "126": "   * little-endian byte order.\n",
        "130": "  @Override\n",
        "131": "  public void writeInt(int v) throws IOException {\n",
        "139": "   * Writes a {@code long} as specified by {@link DataOutputStream#writeLong(long)}, except using\n",
        "140": "   * little-endian byte order.\n",
        "144": "  @Override\n",
        "145": "  public void writeLong(long v) throws IOException {\n",
        "151": "   * Writes a {@code short} as specified by {@link DataOutputStream#writeShort(int)}, except using\n",
        "152": "   * little-endian byte order.\n",
        "156": "  @Override\n",
        "157": "  public void writeShort(int v) throws IOException {\n",
        "162": "  @Override\n",
        "163": "  public void writeUTF(String str) throws IOException {\n",
        "170": "  @Override\n",
        "171": "  public void close() throws IOException {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "31": " * An implementation of {@link DataOutput} that uses little-endian byte ordering\n",
        "32": " * for writing {@code char}, {@code short}, {@code int}, {@code float}, {@code\n",
        "33": " * double}, and {@code long} values.\n",
        "34": " * <p>\n",
        "35": " * <b>Note:</b> This class intentionally violates the specification of its\n",
        "36": " * supertype {@code DataOutput}, which explicitly requires big-endian byte\n",
        "37": " * order.\n",
        "56": "  @Override public void write(byte[] b, int off, int len) throws IOException {\n",
        "61": "  @Override public void writeBoolean(boolean v) throws IOException {\n",
        "65": "  @Override public void writeByte(int v) throws IOException {\n",
        "70": "   * @deprecated The semantics of {@code writeBytes(String s)} are considered\n",
        "71": "   *             dangerous. Please use {@link #writeUTF(String s)},\n",
        "72": "   *             {@link #writeChars(String s)} or another write method instead.\n",
        "75": "  @Override public void writeBytes(String s) throws IOException {\n",
        "80": "   * Writes a char as specified by {@link DataOutputStream#writeChar(int)},\n",
        "81": "   * except using little-endian byte order.\n",
        "85": "  @Override public void writeChar(int v) throws IOException {\n",
        "90": "   * Writes a {@code String} as specified by\n",
        "91": "   * {@link DataOutputStream#writeChars(String)}, except each character is\n",
        "92": "   * written using little-endian byte order.\n",
        "96": "  @Override public void writeChars(String s) throws IOException {\n",
        "103": "   * Writes a {@code double} as specified by\n",
        "104": "   * {@link DataOutputStream#writeDouble(double)}, except using little-endian\n",
        "105": "   * byte order.\n",
        "109": "  @Override public void writeDouble(double v) throws IOException {\n",
        "114": "   * Writes a {@code float} as specified by\n",
        "115": "   * {@link DataOutputStream#writeFloat(float)}, except using little-endian byte\n",
        "116": "   * order.\n",
        "120": "  @Override public void writeFloat(float v) throws IOException {\n",
        "125": "   * Writes an {@code int} as specified by\n",
        "126": "   * {@link DataOutputStream#writeInt(int)}, except using little-endian byte\n",
        "127": "   * order.\n",
        "131": "  @Override public void writeInt(int v) throws IOException {\n",
        "139": "   * Writes a {@code long} as specified by\n",
        "140": "   * {@link DataOutputStream#writeLong(long)}, except using little-endian byte\n",
        "141": "   * order.\n",
        "145": "  @Override public void writeLong(long v) throws IOException {\n",
        "151": "   * Writes a {@code short} as specified by\n",
        "152": "   * {@link DataOutputStream#writeShort(int)}, except using little-endian byte\n",
        "153": "   * order.\n",
        "157": "  @Override public void writeShort(int v) throws IOException {\n",
        "162": "  @Override public void writeUTF(String str) throws IOException {\n",
        "169": "  @Override public void close() throws IOException {\n"
    }
}