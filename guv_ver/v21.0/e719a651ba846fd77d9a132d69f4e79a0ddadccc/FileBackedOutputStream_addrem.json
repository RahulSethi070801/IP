{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "31": " * An {@link OutputStream} that starts buffering to a byte array, but switches to file buffering\n",
        "32": " * once the data reaches a configurable size.\n",
        "63": "  @VisibleForTesting\n",
        "64": "  synchronized File getFile() {\n",
        "69": "   * Creates a new instance that uses the given file threshold, and does not reset the data when the\n",
        "70": "   * {@link ByteSource} returned by {@link #asByteSource} is finalized.\n",
        "72": "   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file\n",
        "79": "   * Creates a new instance that uses the given file threshold, and optionally resets the data when\n",
        "80": "   * the {@link ByteSource} returned by {@link #asByteSource} is finalized.\n",
        "82": "   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file\n",
        "83": "   * @param resetOnFinalize if true, the {@link #reset} method will be called when the\n",
        "84": "   *     {@link ByteSource} returned by {@link #asByteSource} is finalized\n",
        "93": "      source =\n",
        "94": "          new ByteSource() {\n",
        "95": "            @Override\n",
        "96": "            public InputStream openStream() throws IOException {\n",
        "97": "              return openInputStream();\n",
        "98": "            }\n",
        "99": "\n",
        "100": "            @Override\n",
        "101": "            protected void finalize() {\n",
        "102": "              try {\n",
        "103": "                reset();\n",
        "104": "              } catch (Throwable t) {\n",
        "105": "                t.printStackTrace(System.err);\n",
        "106": "              }\n",
        "107": "            }\n",
        "108": "          };\n",
        "110": "      source =\n",
        "111": "          new ByteSource() {\n",
        "112": "            @Override\n",
        "113": "            public InputStream openStream() throws IOException {\n",
        "114": "              return openInputStream();\n",
        "115": "            }\n",
        "116": "          };\n",
        "121": "   * Returns a readable {@link ByteSource} view of the data that has been written to this stream.\n",
        "133": "      return new ByteArrayInputStream(memory.getBuffer(), 0, memory.getCount());\n",
        "138": "   * Calls {@link #close} if not already closed, and then resets this object back to its initial\n",
        "139": "   * state, for reuse. If data was buffered to a file, it will be deleted.\n",
        "163": "  @Override\n",
        "164": "  public synchronized void write(int b) throws IOException {\n",
        "169": "  @Override\n",
        "170": "  public synchronized void write(byte[] b) throws IOException {\n",
        "174": "  @Override\n",
        "175": "  public synchronized void write(byte[] b, int off, int len) throws IOException {\n",
        "180": "  @Override\n",
        "181": "  public synchronized void close() throws IOException {\n",
        "185": "  @Override\n",
        "186": "  public synchronized void flush() throws IOException {\n",
        "191": "   * Checks if writing {@code len} bytes would go over threshold, and switches to file buffering if\n",
        "192": "   * so.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "33": " * An {@link OutputStream} that starts buffering to a byte array, but\n",
        "34": " * switches to file buffering once the data reaches a configurable size.\n",
        "65": "  @VisibleForTesting synchronized File getFile() {\n",
        "70": "   * Creates a new instance that uses the given file threshold, and does\n",
        "71": "   * not reset the data when the {@link ByteSource} returned by\n",
        "72": "   * {@link #asByteSource} is finalized.\n",
        "74": "   * @param fileThreshold the number of bytes before the stream should\n",
        "75": "   *     switch to buffering to a file\n",
        "82": "   * Creates a new instance that uses the given file threshold, and\n",
        "83": "   * optionally resets the data when the {@link ByteSource} returned\n",
        "84": "   * by {@link #asByteSource} is finalized.\n",
        "86": "   * @param fileThreshold the number of bytes before the stream should\n",
        "87": "   *     switch to buffering to a file\n",
        "88": "   * @param resetOnFinalize if true, the {@link #reset} method will\n",
        "89": "   *     be called when the {@link ByteSource} returned by {@link\n",
        "90": "   *     #asByteSource} is finalized\n",
        "99": "      source = new ByteSource() {\n",
        "100": "        @Override\n",
        "101": "        public InputStream openStream() throws IOException {\n",
        "102": "          return openInputStream();\n",
        "103": "        }\n",
        "104": "\n",
        "105": "        @Override protected void finalize() {\n",
        "106": "          try {\n",
        "107": "            reset();\n",
        "108": "          } catch (Throwable t) {\n",
        "109": "            t.printStackTrace(System.err);\n",
        "110": "          }\n",
        "111": "        }\n",
        "112": "      };\n",
        "114": "      source = new ByteSource() {\n",
        "115": "        @Override\n",
        "116": "        public InputStream openStream() throws IOException {\n",
        "117": "          return openInputStream();\n",
        "118": "        }\n",
        "119": "      };\n",
        "124": "   * Returns a readable {@link ByteSource} view of the data that has been\n",
        "125": "   * written to this stream.\n",
        "137": "      return new ByteArrayInputStream(\n",
        "138": "          memory.getBuffer(), 0, memory.getCount());\n",
        "143": "   * Calls {@link #close} if not already closed, and then resets this\n",
        "144": "   * object back to its initial state, for reuse. If data was buffered\n",
        "145": "   * to a file, it will be deleted.\n",
        "169": "  @Override public synchronized void write(int b) throws IOException {\n",
        "174": "  @Override public synchronized void write(byte[] b) throws IOException {\n",
        "178": "  @Override public synchronized void write(byte[] b, int off, int len)\n",
        "179": "      throws IOException {\n",
        "184": "  @Override public synchronized void close() throws IOException {\n",
        "188": "  @Override public synchronized void flush() throws IOException {\n",
        "193": "   * Checks if writing {@code len} bytes would go over threshold, and\n",
        "194": "   * switches to file buffering if so.\n"
    }
}