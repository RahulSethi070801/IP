{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "23": " * An extension of {@code DataOutput} for writing to in-memory byte arrays; its methods offer\n",
        "24": " * identical functionality but do not throw {@link IOException}.\n",
        "31": "  @Override\n",
        "32": "  void write(int b);\n",
        "33": "\n",
        "34": "  @Override\n",
        "35": "  void write(byte b[]);\n",
        "36": "\n",
        "37": "  @Override\n",
        "38": "  void write(byte b[], int off, int len);\n",
        "39": "\n",
        "40": "  @Override\n",
        "41": "  void writeBoolean(boolean v);\n",
        "42": "\n",
        "43": "  @Override\n",
        "44": "  void writeByte(int v);\n",
        "45": "\n",
        "46": "  @Override\n",
        "47": "  void writeShort(int v);\n",
        "48": "\n",
        "49": "  @Override\n",
        "50": "  void writeChar(int v);\n",
        "51": "\n",
        "52": "  @Override\n",
        "53": "  void writeInt(int v);\n",
        "54": "\n",
        "55": "  @Override\n",
        "56": "  void writeLong(long v);\n",
        "57": "\n",
        "58": "  @Override\n",
        "59": "  void writeFloat(float v);\n",
        "60": "\n",
        "61": "  @Override\n",
        "62": "  void writeDouble(double v);\n",
        "63": "\n",
        "64": "  @Override\n",
        "65": "  void writeChars(String s);\n",
        "66": "\n",
        "67": "  @Override\n",
        "68": "  void writeUTF(String s);\n",
        "71": "   * @deprecated This method is dangerous as it discards the high byte of every character. For\n",
        "72": "   *     UTF-8, use {@code write(s.getBytes(StandardCharsets.UTF_8))}.\n",
        "74": "  @Deprecated\n",
        "75": "  @Override\n",
        "76": "  void writeBytes(String s);\n",
        "79": "   * Returns the contents that have been written to this instance, as a byte array.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "25": " * An extension of {@code DataOutput} for writing to in-memory byte arrays; its\n",
        "26": " * methods offer identical functionality but do not throw {@link IOException}.\n",
        "33": "  @Override void write(int b);\n",
        "34": "  @Override void write(byte b[]);\n",
        "35": "  @Override void write(byte b[], int off, int len);\n",
        "36": "  @Override void writeBoolean(boolean v);\n",
        "37": "  @Override void writeByte(int v);\n",
        "38": "  @Override void writeShort(int v);\n",
        "39": "  @Override void writeChar(int v);\n",
        "40": "  @Override void writeInt(int v);\n",
        "41": "  @Override void writeLong(long v);\n",
        "42": "  @Override void writeFloat(float v);\n",
        "43": "  @Override void writeDouble(double v);\n",
        "44": "  @Override void writeChars(String s);\n",
        "45": "  @Override void writeUTF(String s);\n",
        "48": "   * @deprecated This method is dangerous as it discards the high byte of\n",
        "49": "   * every character. For UTF-8, use {@code write(s.getBytes(Charsets.UTF_8))}.\n",
        "51": "  @Deprecated @Override void writeBytes(String s);\n",
        "54": "   * Returns the contents that have been written to this instance,\n",
        "55": "   * as a byte array.\n"
    }
}