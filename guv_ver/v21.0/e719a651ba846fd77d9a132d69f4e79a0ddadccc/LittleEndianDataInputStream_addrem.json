{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "31": " * An implementation of {@link DataInput} that uses little-endian byte ordering for reading\n",
        "32": " * {@code short}, {@code int}, {@code float}, {@code double}, and {@code long} values. \n",
        "33": " *\n",
        "34": " * <p><b>Note:</b> This class intentionally violates the specification of its supertype\n",
        "35": " * {@code DataInput}, which explicitly requires big-endian byte order.\n",
        "88": "   * Reads an unsigned {@code short} as specified by {@link DataInputStream#readUnsignedShort()},\n",
        "89": "   * except using little-endian byte order.\n",
        "91": "   * @return the next two bytes of the input stream, interpreted as an unsigned 16-bit integer in\n",
        "92": "   *     little-endian byte order\n",
        "104": "   * Reads an integer as specified by {@link DataInputStream#readInt()}, except using little-endian\n",
        "105": "   * byte order.\n",
        "107": "   * @return the next four bytes of the input stream, interpreted as an {@code int} in little-endian\n",
        "108": "   *     byte order\n",
        "118": "    return Ints.fromBytes(b4, b3, b2, b1);\n",
        "122": "   * Reads a {@code long} as specified by {@link DataInputStream#readLong()}, except using\n",
        "123": "   * little-endian byte order.\n",
        "125": "   * @return the next eight bytes of the input stream, interpreted as a {@code long} in\n",
        "126": "   *     little-endian byte order\n",
        "144": "   * Reads a {@code float} as specified by {@link DataInputStream#readFloat()}, except using\n",
        "145": "   * little-endian byte order.\n",
        "147": "   * @return the next four bytes of the input stream, interpreted as a {@code float} in\n",
        "148": "   *     little-endian byte order\n",
        "157": "   * Reads a {@code double} as specified by {@link DataInputStream#readDouble()}, except using\n",
        "158": "   * little-endian byte order.\n",
        "160": "   * @return the next eight bytes of the input stream, interpreted as a {@code double} in\n",
        "161": "   *     little-endian byte order\n",
        "175": "   * Reads a {@code short} as specified by {@link DataInputStream#readShort()}, except using\n",
        "176": "   * little-endian byte order.\n",
        "178": "   * @return the next two bytes of the input stream, interpreted as a {@code short} in little-endian\n",
        "179": "   *     byte order.\n",
        "188": "   * Reads a char as specified by {@link DataInputStream#readChar()}, except using little-endian\n",
        "189": "   * byte order.\n",
        "191": "   * @return the next two bytes of the input stream, interpreted as a {@code char} in little-endian\n",
        "192": "   *     byte order\n",
        "211": "   * Reads a byte from the input stream checking that the end of file (EOF) has not been\n",
        "212": "   * encountered.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "33": " * An implementation of {@link DataInput} that uses little-endian byte ordering\n",
        "34": " * for reading {@code short}, {@code int}, {@code float}, {@code double}, and\n",
        "35": " * {@code long} values.\n",
        "36": " * <p>\n",
        "37": " * <b>Note:</b> This class intentionally violates the specification of its\n",
        "38": " * supertype {@code DataInput}, which explicitly requires big-endian byte order.\n",
        "91": "   * Reads an unsigned {@code short} as specified by\n",
        "92": "   * {@link DataInputStream#readUnsignedShort()}, except using little-endian\n",
        "93": "   * byte order.\n",
        "95": "   * @return the next two bytes of the input stream, interpreted as an \n",
        "96": "   *         unsigned 16-bit integer in little-endian byte order\n",
        "108": "   * Reads an integer as specified by {@link DataInputStream#readInt()}, except\n",
        "109": "   * using little-endian byte order.\n",
        "111": "   * @return the next four bytes of the input stream, interpreted as an \n",
        "112": "   *         {@code int} in little-endian byte order\n",
        "122": "    return Ints.fromBytes( b4, b3, b2, b1);\n",
        "126": "   * Reads a {@code long} as specified by {@link DataInputStream#readLong()},\n",
        "127": "   * except using little-endian byte order.\n",
        "129": "   * @return the next eight bytes of the input stream, interpreted as a \n",
        "130": "   *         {@code long} in little-endian byte order\n",
        "148": "   * Reads a {@code float} as specified by {@link DataInputStream#readFloat()},\n",
        "149": "   * except using little-endian byte order.\n",
        "151": "   * @return the next four bytes of the input stream, interpreted as a\n",
        "152": "   *         {@code float} in little-endian byte order\n",
        "161": "   * Reads a {@code double} as specified by\n",
        "162": "   * {@link DataInputStream#readDouble()}, except using little-endian byte\n",
        "163": "   * order.\n",
        "165": "   * @return the next eight bytes of the input stream, interpreted as a\n",
        "166": "   *         {@code double} in little-endian byte order\n",
        "180": "   * Reads a {@code short} as specified by {@link DataInputStream#readShort()},\n",
        "181": "   * except using little-endian byte order.\n",
        "183": "   * @return the next two bytes of the input stream, interpreted as a\n",
        "184": "   *         {@code short} in little-endian byte order.\n",
        "193": "   * Reads a char as specified by {@link DataInputStream#readChar()}, except\n",
        "194": "   * using little-endian byte order.\n",
        "196": "   * @return the next two bytes of the input stream, interpreted as a \n",
        "197": "   *         {@code char} in little-endian byte order\n",
        "216": "   * Reads a byte from the input stream checking that the end of file (EOF)\n",
        "217": "   * has not been encountered.\n"
    }
}