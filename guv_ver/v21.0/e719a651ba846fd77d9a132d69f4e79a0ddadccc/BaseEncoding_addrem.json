{
    "addition": {
        "46": " * strings. This class includes several constants for encoding schemes specified by\n",
        "47": " * <a href=\"http://tools.ietf.org/html/rfc4648\">RFC 4648</a>. For example, the expression:\n",
        "57": " * <p>By default, {@code BaseEncoding}'s behavior is relatively strict and in accordance with RFC\n",
        "58": " * 4648. Decoding rejects characters in the wrong case, though padding is optional. To modify\n",
        "59": " * encoding and decoding behavior, use configuration methods to obtain a new encoding with modified\n",
        "60": " * behavior:\n",
        "65": " * <p>Warning: BaseEncoding instances are immutable. Invoking a configuration method has no effect\n",
        "90": " * <td>Traditional hexadecimal. Defaults to upper case.\n",
        "96": " * <td>Human-readable; no possibility of mixing up 0/O or 1/I. Defaults to upper case.\n",
        "102": " * <td>\"Numerical\" base 32; extended from the traditional hex alphabet. Defaults to upper case.\n",
        "117": " * <p>All instances of this class are immutable, so they may be stored safely as static constants.\n",
        "171": "   * {@code Writer}. When the returned {@code OutputStream} is closed, so is the backing\n",
        "213": "   * Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the\n",
        "214": "   * inverse operation to {@link #encode(byte[])}.\n",
        "217": "   *     encoding.\n",
        "229": "   * Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the\n",
        "230": "   * inverse operation to {@link #encode(byte[])}.\n",
        "233": "   *     encoding.\n",
        "245": "   * {@code Reader}. The returned stream throws a {@link DecodingException} upon decoding-specific\n",
        "295": "   *     separator\n",
        "306": "   *     string, or if {@code n <= 0}\n",
        "317": "   *     lower-case characters\n",
        "327": "   *     lower-case characters\n",
        "332": "  private static final BaseEncoding BASE64 =\n",
        "333": "      new Base64Encoding(\n",
        "334": "          \"base64()\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", '=');\n",
        "337": "   * The \"base64\" base encoding specified by\n",
        "338": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-4\">RFC 4648 section 4</a>, Base 64\n",
        "339": "   * Encoding. (This is the same as the base 64 encoding from\n",
        "340": "   * <a href=\"http://tools.ietf.org/html/rfc3548#section-3\">RFC 3548</a>.)\n",
        "345": "   * <p>No line feeds are added by default, as per\n",
        "346": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds\n",
        "347": "   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "354": "  private static final BaseEncoding BASE64_URL =\n",
        "355": "      new Base64Encoding(\n",
        "356": "          \"base64Url()\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\", '=');\n",
        "359": "   * The \"base64url\" encoding specified by\n",
        "360": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-5\">RFC 4648 section 5</a>, Base 64 Encoding\n",
        "361": "   * with URL and Filename Safe Alphabet, also sometimes referred to as the \"web safe Base64.\" (This\n",
        "362": "   * is the same as the base 64 encoding with URL and filename safe alphabet from\n",
        "363": "   * <a href=\"http://tools.ietf.org/html/rfc3548#section-4\">RFC 3548</a>.)\n",
        "368": "   * <p>No line feeds are added by default, as per\n",
        "369": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds\n",
        "370": "   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "381": "   * The \"base32\" encoding specified by <a href=\"http://tools.ietf.org/html/rfc4648#section-6\">RFC\n",
        "382": "   * 4648 section 6</a>, Base 32 Encoding. (This is the same as the base 32 encoding from\n",
        "383": "   * <a href=\"http://tools.ietf.org/html/rfc3548#section-5\">RFC 3548</a>.)\n",
        "388": "   * <p>No line feeds are added by default, as per\n",
        "389": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds\n",
        "390": "   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "401": "   * The \"base32hex\" encoding specified by\n",
        "402": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-7\">RFC 4648 section 7</a>, Base 32 Encoding\n",
        "403": "   * with Extended Hex Alphabet. There is no corresponding encoding in RFC 3548.\n",
        "408": "   * <p>No line feeds are added by default, as per\n",
        "409": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds\n",
        "410": "   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "420": "   * The \"base16\" encoding specified by <a href=\"http://tools.ietf.org/html/rfc4648#section-8\">RFC\n",
        "421": "   * 4648 section 8</a>, Base 16 Encoding. (This is the same as the base 16 encoding from\n",
        "422": "   * <a href=\"http://tools.ietf.org/html/rfc3548#section-6\">RFC 3548</a>.) This is commonly known as\n",
        "425": "   * <p>No padding is necessary in base 16, so {@link #withPadChar(char)} and {@link #omitPadding()}\n",
        "426": "   * have no effect.\n",
        "428": "   * <p>No line feeds are added by default, as per\n",
        "429": "   * <a href=\"http://tools.ietf.org/html/rfc4648#section-3.1\">RFC 4648 section 3.1</a>, Line Feeds\n",
        "430": "   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "502": "        throw new DecodingException(\n",
        "503": "            \"Unrecognized character: \"\n",
        "504": "                + (CharMatcher.INVISIBLE.matches(ch) ? \"0x\" + Integer.toHexString(ch) : ch));\n",
        "582": "    @Nullable final Character paddingChar;\n",
        "590": "      checkArgument(\n",
        "591": "          paddingChar == null || !alphabet.matches(paddingChar),\n",
        "592": "          \"Padding character %s was already in alphabet\",\n",
        "593": "          paddingChar);\n",
        "622": "            int charIndex = (bitBuffer >> (bitBufferLength - alphabet.bitsPerChar)) & alphabet.mask;\n",
        "637": "            int charIndex = (bitBuffer << (alphabet.bitsPerChar - bitBufferLength)) & alphabet.mask;\n",
        "661": "    void encodeChunkTo(Appendable target, byte[] bytes, int off, int len) throws IOException {\n",
        "789": "      if (8 % alphabet.bitsPerChar == 0\n",
        "790": "          || (paddingChar != null && paddingChar.charValue() == padChar)) {\n",
        "799": "      checkArgument(\n",
        "800": "          padding().or(alphabet).matchesNoneOf(separator),\n",
        "801": "          \"Separator (%s) cannot contain alphabet or padding characters\",\n",
        "802": "          separator);\n",
        "947": "      for (int i = 0; i < chars.length(); ) {\n",
        "1077": "      return unseparatedSize\n",
        "1078": "          + separator.length() * divide(Math.max(0, unseparatedSize - 1), afterEveryChars, FLOOR);\n",
        "1140": "      return delegate + \".withSeparator(\\\"\" + separator + \"\\\", \" + afterEveryChars + \")\";\n"
    },
    "removed": {
        "46": " * strings. This class includes several constants for encoding schemes specified by <a\n",
        "47": " * href=\"http://tools.ietf.org/html/rfc4648\">RFC 4648</a>. For example, the expression:\n",
        "57": " * <p>By default, {@code BaseEncoding}'s behavior is relatively strict and in accordance with\n",
        "58": " * RFC 4648.  Decoding rejects characters in the wrong case, though padding is optional.\n",
        "59": " * To modify encoding and decoding behavior, use configuration methods to obtain a new encoding\n",
        "60": " * with modified behavior:\n",
        "65": " * <p>Warning: BaseEncoding instances are immutable.  Invoking a configuration method has no effect\n",
        "90": " * <td>Traditional hexadecimal.  Defaults to upper case.\n",
        "96": " * <td>Human-readable; no possibility of mixing up 0/O or 1/I.  Defaults to upper case.\n",
        "102": " * <td>\"Numerical\" base 32; extended from the traditional hex alphabet.  Defaults to upper case.\n",
        "117": " * <p>\n",
        "118": " * All instances of this class are immutable, so they may be stored safely as static constants.\n",
        "172": "   * {@code Writer}.  When the returned {@code OutputStream} is closed, so is the backing\n",
        "214": "   * Decodes the specified character sequence, and returns the resulting {@code byte[]}.\n",
        "215": "   * This is the inverse operation to {@link #encode(byte[])}.\n",
        "218": "   *         encoding.\n",
        "230": "   * Decodes the specified character sequence, and returns the resulting {@code byte[]}.\n",
        "231": "   * This is the inverse operation to {@link #encode(byte[])}.\n",
        "234": "   *         encoding.\n",
        "246": "   * {@code Reader}.  The returned stream throws a {@link DecodingException} upon decoding-specific\n",
        "296": "   *         separator\n",
        "307": "   *         string, or if {@code n <= 0}\n",
        "318": "   *         lower-case characters\n",
        "328": "   *         lower-case characters\n",
        "333": "  private static final BaseEncoding BASE64 = new Base64Encoding(\n",
        "334": "      \"base64()\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", '=');\n",
        "337": "   * The \"base64\" base encoding specified by <a\n",
        "338": "   * href=\"http://tools.ietf.org/html/rfc4648#section-4\">RFC 4648 section 4</a>, Base 64 Encoding.\n",
        "339": "   * (This is the same as the base 64 encoding from <a\n",
        "340": "   * href=\"http://tools.ietf.org/html/rfc3548#section-3\">RFC 3548</a>.)\n",
        "345": "   * <p>No line feeds are added by default, as per <a\n",
        "346": "   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\"> RFC 4648 section 3.1</a>, Line Feeds in\n",
        "347": "   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "354": "  private static final BaseEncoding BASE64_URL = new Base64Encoding(\n",
        "355": "      \"base64Url()\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\", '=');\n",
        "358": "   * The \"base64url\" encoding specified by <a\n",
        "359": "   * href=\"http://tools.ietf.org/html/rfc4648#section-5\">RFC 4648 section 5</a>, Base 64 Encoding\n",
        "360": "   * with URL and Filename Safe Alphabet, also sometimes referred to as the \"web safe Base64.\"\n",
        "361": "   * (This is the same as the base 64 encoding with URL and filename safe alphabet from <a\n",
        "362": "   * href=\"http://tools.ietf.org/html/rfc3548#section-4\">RFC 3548</a>.)\n",
        "367": "   * <p>No line feeds are added by default, as per <a\n",
        "368": "   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\"> RFC 4648 section 3.1</a>, Line Feeds in\n",
        "369": "   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "380": "   * The \"base32\" encoding specified by <a\n",
        "381": "   * href=\"http://tools.ietf.org/html/rfc4648#section-6\">RFC 4648 section 6</a>, Base 32 Encoding.\n",
        "382": "   * (This is the same as the base 32 encoding from <a\n",
        "383": "   * href=\"http://tools.ietf.org/html/rfc3548#section-5\">RFC 3548</a>.)\n",
        "388": "   * <p>No line feeds are added by default, as per <a\n",
        "389": "   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\"> RFC 4648 section 3.1</a>, Line Feeds in\n",
        "390": "   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "401": "   * The \"base32hex\" encoding specified by <a\n",
        "402": "   * href=\"http://tools.ietf.org/html/rfc4648#section-7\">RFC 4648 section 7</a>, Base 32 Encoding\n",
        "403": "   * with Extended Hex Alphabet.  There is no corresponding encoding in RFC 3548.\n",
        "408": "   * <p>No line feeds are added by default, as per <a\n",
        "409": "   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\"> RFC 4648 section 3.1</a>, Line Feeds in\n",
        "410": "   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "420": "   * The \"base16\" encoding specified by <a\n",
        "421": "   * href=\"http://tools.ietf.org/html/rfc4648#section-8\">RFC 4648 section 8</a>, Base 16 Encoding.\n",
        "422": "   * (This is the same as the base 16 encoding from <a\n",
        "423": "   * href=\"http://tools.ietf.org/html/rfc3548#section-6\">RFC 3548</a>.) This is commonly known as\n",
        "426": "   * <p>No padding is necessary in base 16, so {@link #withPadChar(char)} and\n",
        "427": "   * {@link #omitPadding()} have no effect.\n",
        "429": "   * <p>No line feeds are added by default, as per <a\n",
        "430": "   * href=\"http://tools.ietf.org/html/rfc4648#section-3.1\"> RFC 4648 section 3.1</a>, Line Feeds in\n",
        "431": "   * Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}.\n",
        "503": "        throw new DecodingException(\"Unrecognized character: \"\n",
        "504": "            + (CharMatcher.INVISIBLE.matches(ch) ? \"0x\" + Integer.toHexString(ch) : ch));\n",
        "582": "    @Nullable\n",
        "583": "    final Character paddingChar;\n",
        "591": "      checkArgument(paddingChar == null || !alphabet.matches(paddingChar),\n",
        "592": "          \"Padding character %s was already in alphabet\", paddingChar);\n",
        "621": "            int charIndex = (bitBuffer >> (bitBufferLength - alphabet.bitsPerChar))\n",
        "622": "                & alphabet.mask;\n",
        "637": "            int charIndex = (bitBuffer << (alphabet.bitsPerChar - bitBufferLength))\n",
        "638": "                & alphabet.mask;\n",
        "662": "    void encodeChunkTo(Appendable target, byte[] bytes, int off, int len)\n",
        "663": "        throws IOException {\n",
        "791": "      if (8 % alphabet.bitsPerChar == 0 ||\n",
        "792": "          (paddingChar != null && paddingChar.charValue() == padChar)) {\n",
        "801": "      checkArgument(padding().or(alphabet).matchesNoneOf(separator),\n",
        "802": "          \"Separator (%s) cannot contain alphabet or padding characters\", separator);\n",
        "947": "      for (int i = 0; i < chars.length();) {\n",
        "1077": "      return unseparatedSize + separator.length()\n",
        "1078": "          * divide(Math.max(0, unseparatedSize - 1), afterEveryChars, FLOOR);\n",
        "1140": "      return delegate.toString() +\n",
        "1141": "          \".withSeparator(\\\"\" + separator + \"\\\", \" + afterEveryChars + \")\";\n"
    }
}