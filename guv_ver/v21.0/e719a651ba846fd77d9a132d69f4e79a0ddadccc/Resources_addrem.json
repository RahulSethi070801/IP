{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "34": " * Provides utility methods for working with resources in the classpath. Note that even though these\n",
        "35": " * methods use {@link URL} parameters, they are usually not appropriate for HTTP or other\n",
        "36": " * non-classpath resources.\n",
        "82": "   * Returns a {@link CharSource} that reads from the given URL using the given character set.\n",
        "102": "   * Reads all characters from a URL into a {@link String}, using the given character set.\n",
        "105": "   * @param charset the charset used to decode the input stream; see {@link Charsets} for helpful\n",
        "106": "   *     predefined constants\n",
        "115": "   * Streams lines from a URL, stopping when our callback returns false, or we have read all of the\n",
        "116": "   * lines.\n",
        "119": "   * @param charset the charset used to decode the input stream; see {@link Charsets} for helpful\n",
        "120": "   *     predefined constants\n",
        "125": "  public static <T> T readLines(URL url, Charset charset, LineProcessor<T> callback)\n",
        "126": "      throws IOException {\n",
        "131": "   * Reads all of the lines from a URL. The lines do not include line-termination characters, but do\n",
        "132": "   * include other leading and trailing whitespace.\n",
        "134": "   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use\n",
        "138": "   * @param charset the charset used to decode the input stream; see {@link Charsets} for helpful\n",
        "139": "   *     predefined constants\n",
        "143": "  public static List<String> readLines(URL url, Charset charset) throws IOException {\n",
        "146": "    return readLines(\n",
        "147": "        url,\n",
        "148": "        charset,\n",
        "149": "        new LineProcessor<List<String>>() {\n",
        "150": "          final List<String> result = Lists.newArrayList();\n",
        "151": "\n",
        "152": "          @Override\n",
        "153": "          public boolean processLine(String line) {\n",
        "154": "            result.add(line);\n",
        "155": "            return true;\n",
        "156": "          }\n",
        "157": "\n",
        "158": "          @Override\n",
        "159": "          public List<String> getResult() {\n",
        "160": "            return result;\n",
        "161": "          }\n",
        "162": "        });\n",
        "177": "   * Returns a {@code URL} pointing to {@code resourceName} if the resource is found using the\n",
        "178": "   * {@linkplain Thread#getContextClassLoader() context class loader}. In simple environments, the\n",
        "179": "   * context class loader will find resources from the class path. In environments where different\n",
        "180": "   * threads can have different class loaders, for example app servers, the context class loader\n",
        "181": "   * will typically have been set to an appropriate loader for the current thread.\n",
        "183": "   * <p>In the unusual case where the context class loader is null, the class loader that loaded\n",
        "184": "   * this class ({@code Resources}) will be used instead.\n",
        "189": "    ClassLoader loader =\n",
        "190": "        MoreObjects.firstNonNull(\n",
        "191": "            Thread.currentThread().getContextClassLoader(), Resources.class.getClassLoader());\n",
        "198": "   * Given a {@code resourceName} that is relative to {@code contextClass}, returns a {@code URL}\n",
        "199": "   * pointing to the named resource.\n",
        "205": "    checkArgument(\n",
        "206": "        url != null, \"resource %s relative to %s not found.\", resourceName, contextClass.getName());\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "36": " * Provides utility methods for working with resources in the classpath.\n",
        "37": " * Note that even though these methods use {@link URL} parameters, they\n",
        "38": " * are usually not appropriate for HTTP or other non-classpath resources.\n",
        "84": "   * Returns a {@link CharSource} that reads from the given URL using the given\n",
        "85": "   * character set.\n",
        "105": "   * Reads all characters from a URL into a {@link String}, using the given\n",
        "106": "   * character set.\n",
        "109": "   * @param charset the charset used to decode the input stream; see {@link\n",
        "110": "   *     Charsets} for helpful predefined constants\n",
        "119": "   * Streams lines from a URL, stopping when our callback returns false, or we\n",
        "120": "   * have read all of the lines.\n",
        "123": "   * @param charset the charset used to decode the input stream; see {@link\n",
        "124": "   *     Charsets} for helpful predefined constants\n",
        "129": "  public static <T> T readLines(URL url, Charset charset,\n",
        "130": "      LineProcessor<T> callback) throws IOException {\n",
        "135": "   * Reads all of the lines from a URL. The lines do not include\n",
        "136": "   * line-termination characters, but do include other leading and trailing\n",
        "137": "   * whitespace.\n",
        "139": "   * <p>This method returns a mutable {@code List}. For an\n",
        "140": "   * {@code ImmutableList}, use\n",
        "144": "   * @param charset the charset used to decode the input stream; see {@link\n",
        "145": "   *     Charsets} for helpful predefined constants\n",
        "149": "  public static List<String> readLines(URL url, Charset charset)\n",
        "150": "      throws IOException {\n",
        "153": "    return readLines(url, charset, new LineProcessor<List<String>>() {\n",
        "154": "      final List<String> result = Lists.newArrayList();\n",
        "155": "\n",
        "156": "      @Override\n",
        "157": "      public boolean processLine(String line) {\n",
        "158": "        result.add(line);\n",
        "159": "        return true;\n",
        "160": "      }\n",
        "161": "\n",
        "162": "      @Override\n",
        "163": "      public List<String> getResult() {\n",
        "164": "        return result;\n",
        "165": "      }\n",
        "166": "    });\n",
        "181": "   * Returns a {@code URL} pointing to {@code resourceName} if the resource is\n",
        "182": "   * found using the {@linkplain Thread#getContextClassLoader() context class\n",
        "183": "   * loader}. In simple environments, the context class loader will find\n",
        "184": "   * resources from the class path. In environments where different threads can\n",
        "185": "   * have different class loaders, for example app servers, the context class\n",
        "186": "   * loader will typically have been set to an appropriate loader for the\n",
        "187": "   * current thread.\n",
        "189": "   * <p>In the unusual case where the context class loader is null, the class\n",
        "190": "   * loader that loaded this class ({@code Resources}) will be used instead.\n",
        "195": "    ClassLoader loader = MoreObjects.firstNonNull(\n",
        "196": "        Thread.currentThread().getContextClassLoader(),\n",
        "197": "        Resources.class.getClassLoader());\n",
        "204": "   * Given a {@code resourceName} that is relative to {@code contextClass},\n",
        "205": "   * returns a {@code URL} pointing to the named resource.\n",
        "211": "    checkArgument(url != null, \"resource %s relative to %s not found.\",\n",
        "212": "        resourceName, contextClass.getName());\n"
    }
}