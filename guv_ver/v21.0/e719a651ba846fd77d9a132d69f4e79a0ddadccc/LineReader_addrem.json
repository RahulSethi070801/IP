{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "29": " * A class for reading lines of text. Provides the same functionality as\n",
        "30": " * {@link java.io.BufferedReader#readLine()} but for all {@link Readable} objects, not just\n",
        "31": " * instances of {@link Reader}.\n",
        "45": "  private final LineBuffer lineBuf =\n",
        "46": "      new LineBuffer() {\n",
        "47": "        @Override\n",
        "48": "        protected void handleLine(String line, String end) {\n",
        "49": "          lines.add(line);\n",
        "50": "        }\n",
        "51": "      };\n",
        "54": "   * Creates a new instance that will read lines from the given {@code Readable} object.\n",
        "62": "   * Reads a line of text. A line is considered to be terminated by any one of a line feed\n",
        "63": "   * ({@code '\\n'}), a carriage return ({@code '\\r'}), or a carriage return followed immediately by\n",
        "64": "   * a linefeed ({@code \"\\r\\n\"}).\n",
        "66": "   * @return a {@code String} containing the contents of the line, not including any\n",
        "67": "   *     line-termination characters, or {@code null} if the end of the stream has been reached.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "31": " * A class for reading lines of text. Provides the same functionality\n",
        "32": " * as {@link java.io.BufferedReader#readLine()} but for all {@link Readable}\n",
        "33": " * objects, not just instances of {@link Reader}.\n",
        "47": "  private final LineBuffer lineBuf = new LineBuffer() {\n",
        "48": "    @Override protected void handleLine(String line, String end) {\n",
        "49": "      lines.add(line);\n",
        "50": "    }\n",
        "51": "  };\n",
        "54": "   * Creates a new instance that will read lines from the given\n",
        "55": "   * {@code Readable} object.\n",
        "63": "   * Reads a line of text. A line is considered to be terminated by any\n",
        "64": "   * one of a line feed ({@code '\\n'}), a carriage return\n",
        "65": "   * ({@code '\\r'}), or a carriage return followed immediately by a linefeed\n",
        "66": "   * ({@code \"\\r\\n\"}).\n",
        "68": "   * @return a {@code String} containing the contents of the line, not\n",
        "69": "   *     including any line-termination characters, or {@code null} if the\n",
        "70": "   *     end of the stream has been reached.\n"
    }
}