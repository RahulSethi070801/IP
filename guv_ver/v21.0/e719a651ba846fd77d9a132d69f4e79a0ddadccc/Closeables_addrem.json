{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "39": "  @VisibleForTesting static final Logger logger = Logger.getLogger(Closeables.class.getName());\n",
        "72": "  public static void close(@Nullable Closeable closeable, boolean swallowIOException)\n",
        "73": "      throws IOException {\n",
        "81": "        logger.log(Level.WARNING, \"IOException thrown while closing Closeable.\", e);\n",
        "89": "   * Closes the given {@link InputStream}, logging any {@code IOException} that's thrown rather than\n",
        "90": "   * propagating it.\n",
        "92": "   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an\n",
        "93": "   * I/O resource, it should generally be safe in the case of a resource that's being used only for\n",
        "94": "   * reading, such as an {@code InputStream}. Unlike with writable resources, there's no chance that\n",
        "95": "   * a failure that occurs when closing the stream indicates a meaningful problem such as a failure\n",
        "96": "   * to flush all bytes to the underlying resource.\n",
        "114": "   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an\n",
        "115": "   * I/O resource, it should generally be safe in the case of a resource that's being used only for\n",
        "116": "   * reading, such as a {@code Reader}. Unlike with writable resources, there's no chance that a\n",
        "117": "   * failure that occurs when closing the reader indicates a meaningful problem such as a failure to\n",
        "118": "   * flush all bytes to the underlying resource.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "41": "  @VisibleForTesting static final Logger logger\n",
        "42": "      = Logger.getLogger(Closeables.class.getName());\n",
        "75": "  public static void close(@Nullable Closeable closeable,\n",
        "76": "      boolean swallowIOException) throws IOException {\n",
        "84": "        logger.log(Level.WARNING,\n",
        "85": "            \"IOException thrown while closing Closeable.\", e);\n",
        "93": "   * Closes the given {@link InputStream}, logging any {@code IOException} that's thrown rather\n",
        "94": "   * than propagating it.\n",
        "96": "   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing\n",
        "97": "   * an I/O resource, it should generally be safe in the case of a resource that's being used only\n",
        "98": "   * for reading, such as an {@code InputStream}. Unlike with writable resources, there's no\n",
        "99": "   * chance that a failure that occurs when closing the stream indicates a meaningful problem such\n",
        "100": "   * as a failure to flush all bytes to the underlying resource.\n",
        "118": "   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing\n",
        "119": "   * an I/O resource, it should generally be safe in the case of a resource that's being used only\n",
        "120": "   * for reading, such as a {@code Reader}. Unlike with writable resources, there's no chance that\n",
        "121": "   * a failure that occurs when closing the reader indicates a meaningful problem such as a failure\n",
        "122": "   * to flush all bytes to the underlying resource.\n"
    }
}