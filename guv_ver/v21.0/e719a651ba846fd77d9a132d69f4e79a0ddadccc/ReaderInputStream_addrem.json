{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "83": "    this(\n",
        "84": "        reader,\n",
        "85": "        charset\n",
        "86": "            .newEncoder()\n",
        "113": "  @Override\n",
        "114": "  public void close() throws IOException {\n",
        "118": "  @Override\n",
        "119": "  public int read() throws IOException {\n",
        "125": "  @Override\n",
        "126": "  public int read(byte[] b, int off, int len) throws IOException {\n",
        "137": "    DRAINING:\n",
        "138": "    while (true) {\n",
        "139": "      // We stay in draining mode until there are no bytes left in the output buffer. Then we go\n",
        "234": "   * Flips the buffer output buffer so we can start reading bytes from it. If we are starting to\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "85": "    this(reader,\n",
        "86": "        charset.newEncoder()\n",
        "113": "  @Override public void close() throws IOException {\n",
        "117": "  @Override public int read() throws IOException {\n",
        "123": "  @Override public int read(byte[] b, int off, int len) throws IOException {\n",
        "134": "    DRAINING: while (true) {\n",
        "135": "      // We stay in draining mode until there are no bytes left in the output buffer.  Then we go\n",
        "230": "   * Flips the buffer output buffer so we can start reading bytes from it.  If we are starting to\n"
    }
}