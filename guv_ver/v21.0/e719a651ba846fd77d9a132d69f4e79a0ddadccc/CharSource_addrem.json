{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "46": " * <li><b>Methods that return a reader:</b> These methods should return a <i>new</i>, independent\n",
        "47": " *     instance each time they are called. The caller is responsible for ensuring that the returned\n",
        "48": " *     reader is closed.\n",
        "49": " * <li><b>Convenience methods:</b> These are implementations of common operations that are typically\n",
        "50": " *     implemented by opening a reader using one of the methods in the first category, doing\n",
        "51": " *     something and finally closing the reader that was opened.\n",
        "54": " * <p>Several methods in this class, such as {@link #readLines()}, break the contents of the source\n",
        "55": " * into lines. Like {@link BufferedReader}, these methods break lines on any of {@code \\n},\n",
        "115": "   * Returns the size of this source in chars, if the size can be easily determined without actually\n",
        "116": "   * opening the data stream.\n",
        "120": "   * <i>possible</i> that this method will return a different number of chars than would be returned\n",
        "121": "   * by reading all of the chars.\n",
        "123": "   * <p>Additionally, for mutable sources such as {@code StringBuilder}s, a subsequent read may\n",
        "124": "   * return a different number of chars if the contents are changed.\n",
        "134": "   * Returns the length of this source in chars, even if doing so requires opening and traversing an\n",
        "135": "   * entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}.\n",
        "137": "   * <p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If\n",
        "138": "   * absent, it will fall back to a heavyweight operation that will open a stream,\n",
        "247": "  @Nullable\n",
        "248": "  public String readFirstLine() throws IOException {\n",
        "318": "   * {@link #lengthIfKnown} returns zero, falling back to opening a stream and checking for EOF if\n",
        "319": "   * the length is not known.\n",
        "348": "   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will\n",
        "366": "   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method\n",
        "367": "   * is called. This will fail if the iterator is infinite and may cause problems if the iterator\n",
        "368": "   * eagerly fetches data for each source when iterated (rather than producing sources that only\n",
        "369": "   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if\n",
        "370": "   * possible.\n",
        "449": "    private static final Splitter LINE_SPLITTER = Splitter.onPattern(\"\\r\\n|\\n|\\r\");\n",
        "483": "     * Returns an iterable over the lines in the string. If the string ends in a newline, a final\n",
        "484": "     * empty string is not included to match the behavior of BufferedReader/LineReader.readLine().\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "38": "import java.util.regex.Pattern;\n",
        "49": " *   <li><b>Methods that return a reader:</b> These methods should return a <i>new</i>, independent\n",
        "50": " *   instance each time they are called. The caller is responsible for ensuring that the returned\n",
        "51": " *   reader is closed.\n",
        "52": " *   <li><b>Convenience methods:</b> These are implementations of common operations that are\n",
        "53": " *   typically implemented by opening a reader using one of the methods in the first category,\n",
        "54": " *   doing something and finally closing the reader that was opened.\n",
        "57": " * <p>Several methods in this class, such as {@link #readLines()}, break the contents of the\n",
        "58": " * source into lines. Like {@link BufferedReader}, these methods break lines on any of {@code \\n},\n",
        "118": "   * Returns the size of this source in chars, if the size can be easily determined without\n",
        "119": "   * actually opening the data stream.\n",
        "123": "   * <i>possible</i> that this method will return a different number of chars than would be\n",
        "124": "   * returned by reading all of the chars.\n",
        "126": "   * <p>Additionally, for mutable sources such as {@code StringBuilder}s, a subsequent read\n",
        "127": "   * may return a different number of chars if the contents are changed.\n",
        "137": "   * Returns the length of this source in chars, even if doing so requires opening and traversing\n",
        "138": "   * an entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}.\n",
        "140": "   * <p>The default implementation calls {@link #lengthIfKnown} and returns the value if present.\n",
        "141": "   * If absent, it will fall back to a heavyweight operation that will open a stream,\n",
        "250": "  @Nullable public String readFirstLine() throws IOException {\n",
        "320": "   * {@link #lengthIfKnown} returns zero, falling back to opening a stream and checking\n",
        "321": "   * for EOF if the length is not known.\n",
        "350": "   * <p>Only one underlying stream will be open at a time. Closing the  concatenated stream will\n",
        "368": "   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this\n",
        "369": "   * method is called. This will fail if the iterator is infinite and may cause problems if the\n",
        "370": "   * iterator eagerly fetches data for each source when iterated (rather than producing sources\n",
        "371": "   * that only load data through their streams). Prefer using the {@link #concat(Iterable)}\n",
        "372": "   * overload if possible.\n",
        "451": "    private static final Splitter LINE_SPLITTER\n",
        "452": "        = Splitter.on(Pattern.compile(\"\\r\\n|\\n|\\r\"));\n",
        "486": "     * Returns an iterable over the lines in the string. If the string ends in\n",
        "487": "     * a newline, a final empty string is not included to match the behavior of\n",
        "488": "     * BufferedReader/LineReader.readLine().\n"
    }
}