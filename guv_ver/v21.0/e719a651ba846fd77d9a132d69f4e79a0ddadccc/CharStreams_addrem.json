{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "38": " * {@code Readable & Closeable}. A {@link java.io.Reader} implements both of those interfaces.\n",
        "39": " * Similarly for {@code Appendable & Closeable} and {@link java.io.Writer}.\n",
        "54": "   * Copies all characters between the {@link Readable} and {@link Appendable} objects. Does not\n",
        "55": "   * close or flush either object.\n",
        "77": "   * Reads all characters from a {@link Readable} object into a {@link String}. Does not close the\n",
        "78": "   * {@code Readable}.\n",
        "89": "   * Reads all characters from a {@link Readable} object into a new {@link StringBuilder} instance.\n",
        "90": "   * Does not close the {@code Readable}.\n",
        "103": "   * Reads all of the lines from a {@link Readable} object. The lines do not include\n",
        "104": "   * line-termination characters, but do include other leading and trailing whitespace.\n",
        "106": "   * <p>Does not close the {@code Readable}. If reading files or resources you should use the\n",
        "107": "   * {@link Files#readLines} and {@link Resources#readLines} methods.\n",
        "124": "   * Streams lines from a {@link Readable} object, stopping when the processor returns {@code false}\n",
        "125": "   * or all lines have been read and returning the result produced by the processor. Does not close\n",
        "126": "   * {@code readable}. Note that this method may not fully consume the contents of {@code readable}\n",
        "127": "   * if the processor stops processing early.\n",
        "132": "  public static <T> T readLines(Readable readable, LineProcessor<T> processor) throws IOException {\n",
        "147": "   * Discards {@code n} characters of data from the reader. This method will block until the full\n",
        "148": "   * amount has been skipped. Does not close the reader.\n",
        "152": "   * @throws EOFException if this stream reaches the end before skipping all the characters\n",
        "180": "    public void write(int c) {}\n",
        "220": "    public void flush() {}\n",
        "223": "    public void close() {}\n",
        "232": "   * Returns a Writer that sends all output to the given {@link Appendable} target. Closing the\n",
        "233": "   * writer will close the target if it is {@link Closeable}, and flushing the writer will flush the\n",
        "234": "   * target if it is {@link java.io.Flushable}.\n",
        "237": "   * @return a new Writer object, unless target is a Writer, in which case the target is returned\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "40": " * {@code Readable & Closeable}. A {@link java.io.Reader} implements both of\n",
        "41": " * those interfaces. Similarly for {@code Appendable & Closeable} and\n",
        "42": " * {@link java.io.Writer}.\n",
        "57": "   * Copies all characters between the {@link Readable} and {@link Appendable}\n",
        "58": "   * objects. Does not close or flush either object.\n",
        "80": "   * Reads all characters from a {@link Readable} object into a {@link String}.\n",
        "81": "   * Does not close the {@code Readable}.\n",
        "92": "   * Reads all characters from a {@link Readable} object into a new\n",
        "93": "   * {@link StringBuilder} instance. Does not close the {@code Readable}.\n",
        "106": "   * Reads all of the lines from a {@link Readable} object. The lines do\n",
        "107": "   * not include line-termination characters, but do include other\n",
        "108": "   * leading and trailing whitespace.\n",
        "110": "   * <p>Does not close the {@code Readable}. If reading files or resources you\n",
        "111": "   * should use the {@link Files#readLines} and {@link Resources#readLines}\n",
        "112": "   * methods.\n",
        "129": "   * Streams lines from a {@link Readable} object, stopping when the processor\n",
        "130": "   * returns {@code false} or all lines have been read and returning the result\n",
        "131": "   * produced by the processor. Does not close {@code readable}. Note that this\n",
        "132": "   * method may not fully consume the contents of {@code readable} if the\n",
        "133": "   * processor stops processing early.\n",
        "138": "  public static <T> T readLines(\n",
        "139": "      Readable readable, LineProcessor<T> processor) throws IOException {\n",
        "154": "   * Discards {@code n} characters of data from the reader. This method\n",
        "155": "   * will block until the full amount has been skipped. Does not close the\n",
        "156": "   * reader.\n",
        "160": "   * @throws EOFException if this stream reaches the end before skipping all\n",
        "161": "   *     the characters\n",
        "189": "    public void write(int c) {\n",
        "190": "    }\n",
        "230": "    public void flush() {\n",
        "231": "    }\n",
        "234": "    public void close() {\n",
        "235": "    }\n",
        "244": "   * Returns a Writer that sends all output to the given {@link Appendable}\n",
        "245": "   * target. Closing the writer will close the target if it is {@link\n",
        "246": "   * Closeable}, and flushing the writer will flush the target if it is {@link\n",
        "247": "   * java.io.Flushable}.\n",
        "250": "   * @return a new Writer object, unless target is a Writer, in which case the\n",
        "251": "   *     target is returned\n"
    }
}