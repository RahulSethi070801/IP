{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "22": " * Package-protected abstract class that implements the line reading algorithm used by\n",
        "23": " * {@link LineReader}. Line separators are per {@link java.io.BufferedReader}: line feed, carriage\n",
        "24": " * return, or carriage return followed immediately by a linefeed.\n",
        "26": " * <p>Subclasses must implement {@link #handleLine}, call {@link #add} to pass character data, and\n",
        "27": " * call {@link #finish} at the end of stream.\n",
        "40": "   * Process additional characters from the stream. When a line separator is found the contents of\n",
        "41": "   * the line and the line separator itself are passed to the abstract {@link #handleLine} method.\n",
        "87": "    String separator = sawReturn\n",
        "89": "        : (sawNewline ? \"\\n\" : \"\");\n",
        "90": "    handleLine(line.toString(), separator);\n",
        "97": "   * Subclasses must call this method after finishing character processing, in order to ensure that\n",
        "98": "   * any unterminated line in the buffer is passed to {@link #handleLine}.\n",
        "109": "   * Called for each line found in the character data passed to {@link #add}.\n",
        "112": "   * @param end the line separator; one of {@code \"\\r\"}, {@code \"\\n\"}, {@code \"\\r\\n\"}, or {@code \"\"}\n",
        "115": "  protected abstract void handleLine(String line, String end) throws IOException;\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "24": " * Package-protected abstract class that implements the line reading\n",
        "25": " * algorithm used by {@link LineReader}. Line separators are per {@link\n",
        "26": " * java.io.BufferedReader}: line feed, carriage return, or carriage\n",
        "27": " * return followed immediately by a linefeed.\n",
        "29": " * <p>Subclasses must implement {@link #handleLine}, call {@link #add}\n",
        "30": " * to pass character data, and call {@link #finish} at the end of stream.\n",
        "43": "   * Process additional characters from the stream. When a line separator\n",
        "44": "   * is found the contents of the line and the line separator itself\n",
        "45": "   * are passed to the abstract {@link #handleLine} method.\n",
        "91": "    handleLine(line.toString(), sawReturn\n",
        "93": "        : (sawNewline ? \"\\n\" : \"\"));\n",
        "100": "   * Subclasses must call this method after finishing character processing,\n",
        "101": "   * in order to ensure that any unterminated line in the buffer is\n",
        "102": "   * passed to {@link #handleLine}.\n",
        "113": "   * Called for each line found in the character data passed to\n",
        "114": "   * {@link #add}.\n",
        "117": "   * @param end the line separator; one of {@code \"\\r\"}, {@code \"\\n\"},\n",
        "118": "   *     {@code \"\\r\\n\"}, or {@code \"\"}\n",
        "121": "  protected abstract void handleLine(String line, String end)\n",
        "122": "      throws IOException;\n"
    }
}