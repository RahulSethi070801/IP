{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "44": " * A readable source of bytes, such as a file. Unlike an {@link InputStream}, a {@code ByteSource}\n",
        "45": " * is not an open, stateful stream for input that can be read and closed. Instead, it is an\n",
        "46": " * immutable <i>supplier</i> of {@code InputStream} instances.\n",
        "50": " * <li><b>Methods that return a stream:</b> These methods should return a <i>new</i>, independent\n",
        "51": " *     instance each time they are called. The caller is responsible for ensuring that the returned\n",
        "52": " *     stream is closed.\n",
        "53": " * <li><b>Convenience methods:</b> These are implementations of common operations that are typically\n",
        "54": " *     implemented by opening a stream using one of the methods in the first category, doing\n",
        "55": " *     something and finally closing the stream that was opened.\n",
        "95": "   * delegate to {@link #openStream()} when the stream returned by that method does not benefit from\n",
        "96": "   * additional buffering (for example, a {@code ByteArrayInputStream}). This method should return a\n",
        "97": "   * new, independent stream each time it is called.\n",
        "126": "   * {@link #sizeIfKnown} returns zero, falling back to opening a stream and checking for EOF if the\n",
        "127": "   * size is not known.\n",
        "154": "   * Returns the size of this source in bytes, if the size can be easily determined without actually\n",
        "155": "   * opening the data stream.\n",
        "173": "   * Returns the size of this source in bytes, even if doing so requires opening and traversing an\n",
        "174": "   * entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}.\n",
        "176": "   * <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present. If\n",
        "177": "   * absent, it will fall back to a heavyweight operation that will open a stream, read (or\n",
        "389": "   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method\n",
        "390": "   * is called. This will fail if the iterator is infinite and may cause problems if the iterator\n",
        "391": "   * eagerly fetches data for each source when iterated (rather than producing sources that only\n",
        "392": "   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if\n",
        "393": "   * possible.\n",
        "440": "   * A char source that reads bytes from this source and decodes them as characters using a charset.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "46": " * A readable source of bytes, such as a file. Unlike an {@link InputStream}, a\n",
        "47": " * {@code ByteSource} is not an open, stateful stream for input that can be read and closed.\n",
        "48": " * Instead, it is an immutable <i>supplier</i> of {@code InputStream} instances.\n",
        "52": " *   <li><b>Methods that return a stream:</b> These methods should return a <i>new</i>, independent\n",
        "53": " *   instance each time they are called. The caller is responsible for ensuring that the returned\n",
        "54": " *   stream is closed.\n",
        "55": " *   <li><b>Convenience methods:</b> These are implementations of common operations that are\n",
        "56": " *   typically implemented by opening a stream using one of the methods in the first category, doing\n",
        "57": " *   something and finally closing the stream that was opened.\n",
        "97": "   * delegate to {@link #openStream()} when the stream returned by that method does not benefit\n",
        "98": "   * from additional buffering (for example, a {@code ByteArrayInputStream}). This method should\n",
        "99": "   * return a new, independent stream each time it is called.\n",
        "128": "   * {@link #sizeIfKnown} returns zero, falling back to opening a stream and checking for\n",
        "129": "   * EOF if the size is not known.\n",
        "156": "   * Returns the size of this source in bytes, if the size can be easily determined without\n",
        "157": "   * actually opening the data stream.\n",
        "175": "   * Returns the size of this source in bytes, even if doing so requires opening and traversing\n",
        "176": "   * an entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}.\n",
        "178": "   * <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present.\n",
        "179": "   * If absent, it will fall back to a heavyweight operation that will open a stream, read (or\n",
        "391": "   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this\n",
        "392": "   * method is called. This will fail if the iterator is infinite and may cause problems if the\n",
        "393": "   * iterator eagerly fetches data for each source when iterated (rather than producing sources\n",
        "394": "   * that only load data through their streams). Prefer using the {@link #concat(Iterable)}\n",
        "395": "   * overload if possible.\n",
        "442": "   * A char source that reads bytes from this source and decodes them as characters using a\n",
        "443": "   * charset.\n"
    }
}