{
    "addition": {
        "41": "        boolean connected = graph.successors(node).contains(otherNode);\n",
        "42": "        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(connected);\n",
        "166": "  public void edgeValueOrDefault() {\n",
        "169": "    assertThat(graph.edgeValueOrDefault(1, 2, \"default\")).isEqualTo(\"default\");\n",
        "170": "    assertThat(graph.edgeValueOrDefault(2, 1, \"default\")).isEqualTo(\"default\");\n",
        "174": "    assertThat(graph.edgeValueOrDefault(1, 2, \"default\")).isEqualTo(\"valueA\");\n",
        "175": "    assertThat(graph.edgeValueOrDefault(2, 1, \"default\")).isEqualTo(\"valueB\");\n",
        "179": "    assertThat(graph.edgeValueOrDefault(1, 2, \"default\")).isEqualTo(\"default\");\n",
        "180": "    assertThat(graph.edgeValueOrDefault(2, 1, \"default\")).isEqualTo(\"valueC\");\n"
    },
    "removed": {
        "23": "import java.util.Map;\n",
        "40": "    assertThat(graph.edgeValues().keySet()).isEqualTo(graph.edges());\n",
        "41": "\n",
        "44": "        EndpointPair<Integer> endpointPair = EndpointPair.of(graph, node, otherNode);\n",
        "45": "        if (graph.successors(node).contains(otherNode)) {\n",
        "46": "          String value = graph.edgeValue(node, otherNode);\n",
        "47": "          assertThat(value).isNotNull();\n",
        "48": "          assertThat(value).isEqualTo(graph.edgeValues().get(endpointPair));\n",
        "49": "        } else {\n",
        "50": "          assertThat(graph.edgeValues()).doesNotContainKey(endpointPair);\n",
        "51": "        }\n",
        "175": "  public void edgeValues() {\n",
        "177": "    Map<EndpointPair<Integer>, String> edgeValues = graph.edgeValues();\n",
        "178": "    EndpointPair<Integer> pair12 = EndpointPair.ordered(1, 2);\n",
        "179": "    EndpointPair<Integer> pair21 = EndpointPair.ordered(2, 1);\n",
        "181": "    graph.addNode(1);\n",
        "182": "    graph.addNode(2);\n",
        "183": "    assertThat(edgeValues).doesNotContainKey(pair12);\n",
        "184": "    assertThat(edgeValues).doesNotContainKey(pair21);\n",
        "188": "    assertThat(edgeValues.get(pair12)).isEqualTo(\"valueA\");\n",
        "189": "    assertThat(edgeValues.get(pair21)).isEqualTo(\"valueB\");\n",
        "193": "    assertThat(edgeValues).doesNotContainKey(pair12);\n",
        "194": "    assertThat(edgeValues.get(pair21)).isEqualTo(\"valueC\");\n",
        "195": "\n",
        "196": "    try {\n",
        "197": "      edgeValues.put(pair12, \"valueA\");\n",
        "198": "      fail(\"Map returned by edgeValues() should be unmodifiable\");\n",
        "199": "    } catch (UnsupportedOperationException expected) {\n",
        "200": "    }\n"
    }
}