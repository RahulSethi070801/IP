{"id": "572fec480544f11385dc8462d88621776fae2ec8", "code": [{"0": "guava/src/com/google/common/collect/Ordering.java", "added": {"1": [" * A comparator, with additional methods to support common operations. This is an \"enriched\" version\n", " * of {@code Comparator} for pre-Java-8 users, in the same sense that {@link FluentIterable} is an\n", " * enriched {@link Iterable} for pre-Java-8 users.\n"], "2": [" * any of its special operations, such as:\n"], "3": [" * <pre>{@code\n", " * Ordering<Foo> ordering =\n", " *     Ordering.natural()\n", " *         .nullsFirst()\n", " *         .onResultOf(getBarFunction)\n", " *         .nullsLast();\n", " * }</pre>\n", " * instance, but has the chance to act on values <i>before</i> handing off to that backing instance.\n", " * As a result, it usually helps to read chained ordering expressions <i>backwards</i>. For example,\n", " * when {@code compare} is called on the above ordering:\n", " * <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be comparing\n", " *     {@code Bar} values from now on)\n", " * <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is returned)\n", " * encounter a call to {@code reverse}, continue working backwards until a result is determined, and\n", " * then reverse that result.\n", " * <p>Except as noted, the orderings returned by the factory methods of this class are serializable\n", " * if and only if the provided instances that back them are. For example, if {@code ordering} and\n", " * {@code function} can themselves be serialized, then {@code ordering.onResultOf(function)} can as\n", " * well.\n", " *\n", " * <h3>For Java 8 users</h3>\n", " *\n", " * <p>If you are using Java 8, this class is now obsolete <i>(pending a few August 2016\n", " * updates)</i>. Most of its functionality is now provided by {@link Stream} and by {@link\n", " * Comparator} itself, and the rest can now be found as static methods in our new {@link\n", " * Comparators} class. See each method below for further instructions. Whenever possible, you should\n", " * change any references of type {@code Ordering} to be of type {@code Comparator} instead. However,\n", " * at this time we have no plan to <i>deprecate</i> this class.\n", " *\n", " * <p>Many replacements involve adopting {@code Stream}, and these changes can sometimes make your\n", " * code verbose. Whenever following this advice, you should check whether {@code Stream} could be\n", " * adopted more comprehensively in your code; the end result may be quite a bit simpler.\n", " *\n", " * <h3>See also</h3>\n", " * \"https://github.com/google/guava/wiki/OrderingExplained\">{@code Ordering}</a>.\n"], "4": ["   * Returns a serializable ordering that uses the natural order of the values. The ordering throws\n", "   * a {@link NullPointerException} when passed a null parameter.\n", "   * <p>The type specification is {@code <C extends Comparable>}, instead of the technically correct\n", "   * {@code <C extends Comparable<? super C>>}, to support legacy types from before Java 5.\n", "   *\n", "   * <p><b>Java 8 users:</b> use {@link Comparator#naturalOrder} instead.\n"], "5": ["   * Returns an ordering based on an <i>existing</i> comparator instance. Note that it is\n", "   * unnecessary to create a <i>new</i> anonymous inner class implementing {@code Comparator} just\n", "   * to pass it in here. Instead, simply subclass {@code Ordering} and implement its {@code compare}\n", "   * method directly.\n", "   *\n", "   * <p><b>Java 8 users:</b> this class is now obsolete as explained in the class documentation, so\n", "   * there is no need to use this method.\n", "   * @return comparator itself if it is already an {@code Ordering}; otherwise an ordering that\n", "   *     wraps that comparator\n"], "6": ["   * Returns an ordering that compares objects according to the order in which they appear in the\n", "   * given list. Only objects present in the list (according to {@link Object#equals}) may be\n", "   * compared. This comparator imposes a \"partial ordering\" over the type {@code T}. Subsequent\n", "   * changes to the {@code valuesInOrder} list will have no effect on the returned comparator. Null\n", "   * values in the list are not supported.\n", "   * <p>The returned comparator throws a {@link ClassCastException} when it receives an input\n", "   * parameter that isn't among the provided values.\n", "   * <p>The generated comparator is serializable if all the provided values are serializable.\n", "   * @param valuesInOrder the values that the returned comparator will be able to compare, in the\n", "   *     order the comparator should induce\n", "   * @throws IllegalArgumentException if {@code valuesInOrder} contains any duplicate values\n", "   *     (according to {@link Object#equals})\n", "  // TODO(kevinb): provide replacement\n", "   * Returns an ordering that compares objects according to the order in which they are given to\n", "   * this method. Only objects present in the argument list (according to {@link Object#equals}) may\n", "   * be compared. This comparator imposes a \"partial ordering\" over the type {@code T}. Null values\n", "   * in the argument list are not supported.\n", "   * <p>The returned comparator throws a {@link ClassCastException} when it receives an input\n", "   * parameter that isn't among the provided values.\n", "   * <p>The generated comparator is serializable if all the provided values are serializable.\n", "   * @param leastValue the value which the returned comparator should consider the \"least\" of all\n", "   *     values\n", "   * @param remainingValuesInOrder the rest of the values that the returned comparator will be able\n", "   *     to compare, in the order the comparator should follow\n", "   * @throws IllegalArgumentException if any duplicate values (according to {@link\n", "   *     Object#equals(Object)}) are present among the method arguments\n", "  // TODO(kevinb): provide replacement\n"], "7": ["   * Returns an ordering which treats all values as equal, indicating \"no ordering.\" Passing this\n", "   * ordering to any <i>stable</i> sort algorithm results in no change to the order of elements.\n", "   * Note especially that {@link #sortedCopy} and {@link #immutableSortedCopy} are stable, and in\n", "   * the returned instance these are implemented by simply copying the source list.\n", "   * <p>Example:\n", "   * <pre>{@code\n", "   * Ordering.allEqual().nullsLast().sortedCopy(\n", "   *     asList(t, null, e, s, null, t, null))\n", "   * }</pre>\n", "   * <p>Assuming {@code t}, {@code e} and {@code s} are non-null, this returns {@code [t, e, s, t,\n", "   * null, null, null]} regardlesss of the true comparison order of those three values (which might\n", "   * not even implement {@link Comparable} at all).\n", "   * <p><b>Warning:</b> by definition, this comparator is not <i>consistent with equals</i> (as\n", "   * defined {@linkplain Comparator here}). Avoid its use in APIs, such as {@link\n", "   * TreeSet#TreeSet(Comparator)}, where such consistency is expected.\n", "   * <p><b>Java 8 users:</b> Use the lambda expression {@code (a, b) -> 0} instead (in certain cases\n", "   * you may need to cast that to {@code Comparator<YourType>}).\n", "   *\n"], "8": ["   * Returns an ordering that compares objects by the natural ordering of their string\n", "   * representations as returned by {@code toString()}. It does not support null values.\n", "   *\n", "   * <p><b>Java 8 users:</b> Use {@code Comparator.comparing(Object::toString)} instead.\n"], "9": ["   * Returns an arbitrary ordering over all objects, for which {@code compare(a, b) == 0} implies\n", "   * {@code a == b} (identity equality). There is no meaning whatsoever to the order imposed, but it\n", "   * is constant for the life of the VM.\n", "   * <p>Because the ordering is identity-based, it is not \"consistent with {@link\n", "   * Object#equals(Object)}\" as defined by {@link Comparator}. Use caution when building a {@link\n", "   * SortedSet} or {@link SortedMap} from it, as the resulting collection will not behave exactly\n", "   * according to spec.\n", "   * <p>This ordering is not serializable, as its implementation relies on {@link\n", "   * System#identityHashCode(Object)}, so its behavior cannot be preserved across serialization.\n", "  // TODO(kevinb): copy to Comparators, etc.\n"], "10": ["   * Returns the reverse of this ordering; the {@code Ordering} equivalent to {@link\n", "   * Collections#reverseOrder(Comparator)}.\n", "   *\n", "   * <p><b>Java 8 users:</b> Use {@code thisComparator.reversed()} instead.\n"], "11": ["   * Returns an ordering that treats {@code null} as less than all other values and uses {@code\n", "   * this} to compare non-null values.\n", "   *\n", "   * <p><b>Java 8 users:</b> Use {@code Comparator.nullsFirst(thisComparator)} instead.\n"], "12": ["   * Returns an ordering that treats {@code null} as greater than all other values and uses this\n", "   * ordering to compare non-null values.\n", "   *\n", "   * <p><b>Java 8 users:</b> Use {@code Comparator.nullsLast(thisComparator)} instead.\n"], "13": ["   * Returns a new ordering on {@code F} which orders elements by first applying a function to them,\n", "   * then comparing those results using {@code this}. For example, to compare objects by their\n", "   * string forms, in a case-insensitive manner, use:\n", "   *\n", "   * <pre>{@code\n", "   * Ordering.from(String.CASE_INSENSITIVE_ORDER)\n", "   *     .onResultOf(Functions.toStringFunction())\n", "   * }</pre>\n", "   * <p><b>Java 8 users:</b> Use {@code Comparator.comparing(function, thisComparator)} instead (you\n", "   * can omit the comparator if it is the natural order).\n"], "14": ["   * Returns an ordering which first uses the ordering {@code this}, but which in the event of a\n", "   * \"tie\", then delegates to {@code secondaryComparator}. For example, to sort a bug list first by\n", "   * status and second by priority, you might use {@code byStatus.compound(byPriority)}. For a\n", "   * compound ordering with three or more components, simply chain multiple calls to this method.\n", "   *\n", "   * <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to\n", "   * one created using {@link Ordering#compound(Iterable)} on the same component comparators.\n", "   * <p><b>Java 8 users:</b> Use {@code thisComparator.thenComparing(secondaryComparator)} instead.\n", "   * Depending on what {@code secondaryComparator} is, one of the other overloads of {@code\n", "   * thenComparing} may be even more useful.\n"], "15": ["   * Returns an ordering which tries each given comparator in order until a non-zero result is\n", "   * found, returning that result, and returning zero only if all comparators return zero. The\n", "   * returned ordering is based on the state of the {@code comparators} iterable at the time it was\n", "   * provided to this method.\n", "   * <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a {@link\n", "   * HashSet}, will produce non-deterministic results.\n", "   *\n", "   * <p><b>Java 8 users:</b> Use a chain of calls to {@link Comparator#thenComparing(Comparator)},\n", "   * or {@code comparatorCollection.stream().reduce(Comparator::thenComparing).get()} (if the\n", "   * collection might be empty, also provide a default comparator as the {@code identity} parameter\n", "   * to {@code reduce}).\n"], "16": ["   * Returns a new ordering which sorts iterables by comparing corresponding elements pairwise until\n", "   * a nonzero result is found; imposes \"dictionary order\". If the end of one iterable is reached,\n", "   * but not the other, the shorter iterable is considered to be less than the longer one. For\n", "   * example, a lexicographical natural ordering over integers considers {@code [] < [1] < [1, 1] <\n", "   * [1, 2] < [2]}.\n", "   *\n", "   * <p>Note that {@code ordering.lexicographical().reverse()} is not equivalent to {@code\n", "   * ordering.reverse().lexicographical()} (consider how each would order {@code [1]} and {@code [1,\n", "   * 1]}).\n", "   * <p><b>Java 8 users:</b> Use {@link Comparators#lexicographical(Comparator)} instead.\n"], "17": ["   * Returns the least of the specified values according to this ordering. If there are multiple\n", "   * least values, the first of those is returned. The iterator will be left exhausted: its {@code\n", "   * hasNext()} method will return {@code false}.\n", "   *\n", "   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n", "   * use {@code Streams.stream(iterator).min(thisComparator).get()} instead (but note that it does\n", "   * not guarantee which tied minimum element is returned).\n", "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n", "   *     ordering.\n"], "18": ["   * Returns the least of the specified values according to this ordering. If there are multiple\n", "   * least values, the first of those is returned.\n", "   *\n", "   * <p><b>Java 8 users:</b> If {@code iterable} is a {@link Collection}, use {@code\n", "   * Collections.min(collection, thisComparator)} instead. Otherwise, continue to use this method\n", "   * for now. After the next release of Guava, use {@code\n", "   * Streams.stream(iterable).min(thisComparator).get()} instead. Note that these alternatives do\n", "   * not guarantee which tied minimum element is returned)\n", "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n", "   *     ordering.\n"], "19": ["   * Returns the lesser of the two values according to this ordering. If the values compare as 0,\n", "   * the first is returned.\n", "   * <p><b>Implementation note:</b> this method is invoked by the default implementations of the\n", "   * other {@code min} overloads, so overriding it will affect their behavior.\n", "   *\n", "   * <p><b>Java 8 users:</b> Use {@code Stream.of(a, b).min(thisComparator).get()} instead (but note\n", "   * that it does not guarantee which tied minimum element is returned).\n", "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n", "   *     ordering.\n"], "20": ["   * Returns the least of the specified values according to this ordering. If there are multiple\n", "   * least values, the first of those is returned.\n", "   *\n", "   * <p><b>Java 8 users:</b> Use {@code Stream.of(a, b, c...).min(thisComparator).get()} instead\n", "   * (but note that it does not guarantee which tied minimum element is returned).\n", "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n", "   *     ordering.\n"], "21": ["   * Returns the greatest of the specified values according to this ordering. If there are multiple\n", "   * greatest values, the first of those is returned. The iterator will be left exhausted: its\n", "   * {@code hasNext()} method will return {@code false}.\n", "   *\n", "   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n", "   * use {@code Streams.stream(iterator).max(thisComparator).get()} instead (but note that it does\n", "   * not guarantee which tied maximum element is returned).\n", "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n", "   *     ordering.\n"], "22": ["   * <p><b>Java 8 users:</b> If {@code iterable} is a {@link Collection}, use {@code\n", "   * Collections.max(collection, thisComparator)} instead. Otherwise, continue to use this method\n", "   * for now. After the next release of Guava, use {@code\n", "   * Streams.stream(iterable).max(thisComparator).get()} instead. Note that these alternatives do\n", "   * not guarantee which tied maximum element is returned)\n", "   *\n"], "23": ["   * <p><b>Java 8 users:</b> Use {@code Stream.of(a, b).max(thisComparator).get()} instead (but note\n", "   * that it does not guarantee which tied maximum element is returned).\n", "   *\n"], "24": ["   * <p><b>Java 8 users:</b> Use {@code Stream.of(a, b, c...).max(thisComparator).get()} instead\n", "   * (but note that it does not guarantee which tied maximum element is returned).\n", "   *\n"], "25": ["   * Returns the {@code k} least elements of the given iterable according to this ordering, in order\n", "   * from least to greatest. If there are fewer than {@code k} elements present, all will be\n", "   * included.\n", "   *\n", "   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n", "   * elements are equivalent, it is undefined which will come first.\n", "   * <p><b>Java 8 users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k,\n", "   * thisComparator))} instead.\n", "   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending\n", "   *     order\n"], "26": ["   * Returns the {@code k} least elements from the given iterator according to this ordering, in\n", "   * order from least to greatest. If there are fewer than {@code k} elements present, all will be\n", "   * included.\n", "   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n", "   * elements are equivalent, it is undefined which will come first.\n", "   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n", "   * use {@code Streams.stream(iterator).collect(Comparators.least(k, thisComparator))} instead.\n", "   *\n", "   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending\n", "   *     order\n", "  public <E extends T> List<E> leastOf(Iterator<E> iterator, int k) {\n", "    checkNotNull(iterator);\n", "    if (k == 0 || !iterator.hasNext()) {\n", "      ArrayList<E> list = Lists.newArrayList(iterator);\n"], "27": ["      selector.offerAll(iterator);\n", "   * Returns the {@code k} greatest elements of the given iterable according to this ordering, in\n", "   * order from greatest to least. If there are fewer than {@code k} elements present, all will be\n", "   * included.\n", "   *\n", "   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n", "   * elements are equivalent, it is undefined which will come first.\n", "   * <p><b>Java 8 users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k,\n", "   * thisComparator))} instead.\n", "   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in\n", "   *     <i>descending order</i>\n"], "28": ["   * Returns the {@code k} greatest elements from the given iterator according to this ordering, in\n", "   * order from greatest to least. If there are fewer than {@code k} elements present, all will be\n", "   * included.\n", "   *\n", "   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n", "   * elements are equivalent, it is undefined which will come first.\n", "   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n", "   * use {@code Streams.stream(iterator).collect(Comparators.greatest(k, thisComparator))} instead.\n", "   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in\n", "   *     <i>descending order</i>\n"], "29": ["   * Returns a <b>mutable</b> list containing {@code elements} sorted by this ordering; use this\n", "   * only when the resulting list may need further modification, or may contain {@code null}. The\n", "   * input is not modified. The returned list is serializable and has random access.\n", "   * <p>Unlike {@link Sets#newTreeSet(Iterable)}, this method does not discard elements that are\n", "   * duplicates according to the comparator. The sort performed is <i>stable</i>, meaning that such\n", "   * elements will appear in the returned list in the same order they appeared in {@code elements}.\n", "   * on Open JDK 7, {@link #immutableSortedCopy} generally performs better (in both time and space)\n", "   * than this method, and this method in turn generally performs better than copying the list and\n", "   * calling {@link Collections#sort(List)}.\n", "  // TODO(kevinb): rerun benchmarks including new options\n"], "30": ["   * Returns an <b>immutable</b> list containing {@code elements} sorted by this ordering. The input\n", "   * is not modified.\n", "   * <p>Unlike {@link Sets#newTreeSet(Iterable)}, this method does not discard elements that are\n", "   * duplicates according to the comparator. The sort performed is <i>stable</i>, meaning that such\n", "   * elements will appear in the returned list in the same order they appeared in {@code elements}.\n", "   * on Open JDK 7, this method is the most efficient way to make a sorted copy of a collection.\n", "   * @throws NullPointerException if any of {@code elements} (or {@code elements} itself) is null\n", "  // TODO(kevinb): rerun benchmarks including new options\n"], "31": ["   * Returns {@code true} if each element in {@code iterable} after the first is greater than or\n", "   * equal to the element that preceded it, according to this ordering. Note that this is always\n", "   * true when the iterable has fewer than two elements.\n", "   *\n", "   * <p><b>Java 8 users:</b> Use the equivalent {@link Comparators#isInOrder(Iterable)} instead,\n", "   * since the rest of {@code Ordering} is mostly obsolete (as explained in the class\n", "   * documentation).\n"], "32": ["   * Returns {@code true} if each element in {@code iterable} after the first is <i>strictly</i>\n", "   * greater than the element that preceded it, according to this ordering. Note that this is always\n", "   * true when the iterable has fewer than two elements.\n", "   *\n", "   * <p><b>Java 8 users:</b> Use the equivalent {@link Comparators#isInStrictOrder(Iterable)}\n", "   * instead, since the rest of {@code Ordering} is mostly obsolete (as explained in the class\n", "   * documentation).\n"]}, "removed": {"1": [" * A comparator, with additional methods to support common operations. This is an \"enriched\"\n", " * version of {@code Comparator}, in the same sense that {@link FluentIterable} is an enriched\n", " * {@link Iterable}.\n"], "2": [" * any of its special operations, such as:</p>\n"], "3": [" * <pre>   {@code\n", " *   Ordering<Foo> ordering =\n", " *       Ordering.natural()\n", " *           .nullsFirst()\n", " *           .onResultOf(getBarFunction)\n", " *           .nullsLast();}</pre>\n", " * instance, but has the chance to act on values <i>before</i> handing off to that backing\n", " * instance. As a result, it usually helps to read chained ordering expressions <i>backwards</i>.\n", " * For example, when {@code compare} is called on the above ordering:\n", " * <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be\n", " *     comparing {@code Bar} values from now on)\n", " * <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is\n", " *     returned)\n", " * encounter a call to {@code reverse}, continue working backwards until a result is determined,\n", " * and then reverse that result.\n", " * <p>Except as noted, the orderings returned by the factory methods of this\n", " * class are serializable if and only if the provided instances that back them\n", " * are. For example, if {@code ordering} and {@code function} can themselves be\n", " * serialized, then {@code ordering.onResultOf(function)} can as well.\n", " * \"https://github.com/google/guava/wiki/OrderingExplained\">\n", " * {@code Ordering}</a>.\n"], "4": ["   * Returns a serializable ordering that uses the natural order of the values.\n", "   * The ordering throws a {@link NullPointerException} when passed a null\n", "   * parameter.\n", "   * <p>The type specification is {@code <C extends Comparable>}, instead of\n", "   * the technically correct {@code <C extends Comparable<? super C>>}, to\n", "   * support legacy types from before Java 5.\n"], "5": ["   * Returns an ordering based on an <i>existing</i> comparator instance. Note\n", "   * that it is unnecessary to create a <i>new</i> anonymous inner class\n", "   * implementing {@code Comparator} just to pass it in here. Instead, simply\n", "   * subclass {@code Ordering} and implement its {@code compare} method\n", "   * directly.\n", "   * @return comparator itself if it is already an {@code Ordering}; otherwise\n", "   *     an ordering that wraps that comparator\n"], "6": ["   * Returns an ordering that compares objects according to the order in\n", "   * which they appear in the given list. Only objects present in the list\n", "   * (according to {@link Object#equals}) may be compared. This comparator\n", "   * imposes a \"partial ordering\" over the type {@code T}. Subsequent changes\n", "   * to the {@code valuesInOrder} list will have no effect on the returned\n", "   * comparator. Null values in the list are not supported.\n", "   * <p>The returned comparator throws a {@link ClassCastException} when it\n", "   * receives an input parameter that isn't among the provided values.\n", "   * <p>The generated comparator is serializable if all the provided values are\n", "   * serializable.\n", "   * @param valuesInOrder the values that the returned comparator will be able\n", "   *     to compare, in the order the comparator should induce\n", "   * @throws IllegalArgumentException if {@code valuesInOrder} contains any\n", "   *     duplicate values (according to {@link Object#equals})\n", "   * Returns an ordering that compares objects according to the order in\n", "   * which they are given to this method. Only objects present in the argument\n", "   * list (according to {@link Object#equals}) may be compared. This comparator\n", "   * imposes a \"partial ordering\" over the type {@code T}. Null values in the\n", "   * argument list are not supported.\n", "   * <p>The returned comparator throws a {@link ClassCastException} when it\n", "   * receives an input parameter that isn't among the provided values.\n", "   * <p>The generated comparator is serializable if all the provided values are\n", "   * serializable.\n", "   * @param leastValue the value which the returned comparator should consider\n", "   *     the \"least\" of all values\n", "   * @param remainingValuesInOrder the rest of the values that the returned\n", "   *     comparator will be able to compare, in the order the comparator should\n", "   *     follow\n", "   * @throws IllegalArgumentException if any duplicate values (according to\n", "   *     {@link Object#equals(Object)}) are present among the method arguments\n"], "7": ["   * Returns an ordering which treats all values as equal, indicating \"no\n", "   * ordering.\" Passing this ordering to any <i>stable</i> sort algorithm\n", "   * results in no change to the order of elements. Note especially that {@link\n", "   * #sortedCopy} and {@link #immutableSortedCopy} are stable, and in the\n", "   * returned instance these are implemented by simply copying the source list.\n", "   * <p>Example: <pre>   {@code\n", "   *   Ordering.allEqual().nullsLast().sortedCopy(\n", "   *       asList(t, null, e, s, null, t, null))}</pre>\n", "   * <p>Assuming {@code t}, {@code e} and {@code s} are non-null, this returns\n", "   * {@code [t, e, s, t, null, null, null]} regardlesss of the true comparison\n", "   * order of those three values (which might not even implement {@link\n", "   * Comparable} at all).\n", "   * <p><b>Warning:</b> by definition, this comparator is not <i>consistent with\n", "   * equals</i> (as defined {@linkplain Comparator here}). Avoid its use in\n", "   * APIs, such as {@link TreeSet#TreeSet(Comparator)}, where such consistency\n", "   * is expected.\n"], "8": ["   * Returns an ordering that compares objects by the natural ordering of their\n", "   * string representations as returned by {@code toString()}. It does not\n", "   * support null values.\n"], "9": ["   * Returns an arbitrary ordering over all objects, for which {@code compare(a,\n", "   * b) == 0} implies {@code a == b} (identity equality). There is no meaning\n", "   * whatsoever to the order imposed, but it is constant for the life of the VM.\n", "   * <p>Because the ordering is identity-based, it is not \"consistent with\n", "   * {@link Object#equals(Object)}\" as defined by {@link Comparator}. Use\n", "   * caution when building a {@link SortedSet} or {@link SortedMap} from it, as\n", "   * the resulting collection will not behave exactly according to spec.\n", "   * <p>This ordering is not serializable, as its implementation relies on\n", "   * {@link System#identityHashCode(Object)}, so its behavior cannot be\n", "   * preserved across serialization.\n"], "10": ["   * Returns the reverse of this ordering; the {@code Ordering} equivalent to\n", "   * {@link Collections#reverseOrder(Comparator)}.\n"], "11": ["   * Returns an ordering that treats {@code null} as less than all other values\n", "   * and uses {@code this} to compare non-null values.\n"], "12": ["   * Returns an ordering that treats {@code null} as greater than all other\n", "   * values and uses this ordering to compare non-null values.\n"], "13": ["   * Returns a new ordering on {@code F} which orders elements by first applying\n", "   * a function to them, then comparing those results using {@code this}. For\n", "   * example, to compare objects by their string forms, in a case-insensitive\n", "   * manner, use: <pre>   {@code\n", "   *   Ordering.from(String.CASE_INSENSITIVE_ORDER)\n", "   *       .onResultOf(Functions.toStringFunction())}</pre>\n"], "14": ["   * Returns an ordering which first uses the ordering {@code this}, but which\n", "   * in the event of a \"tie\", then delegates to {@code secondaryComparator}.\n", "   * For example, to sort a bug list first by status and second by priority, you\n", "   * might use {@code byStatus.compound(byPriority)}. For a compound ordering\n", "   * with three or more components, simply chain multiple calls to this method.\n", "   * <p>An ordering produced by this method, or a chain of calls to this method,\n", "   * is equivalent to one created using {@link Ordering#compound(Iterable)} on\n", "   * the same component comparators.\n"], "15": ["   * Returns an ordering which tries each given comparator in order until a\n", "   * non-zero result is found, returning that result, and returning zero only if\n", "   * all comparators return zero. The returned ordering is based on the state of\n", "   * the {@code comparators} iterable at the time it was provided to this\n", "   * method.\n", "   * <p><b>Warning:</b> Supplying an argument with undefined iteration order,\n", "   * such as a {@link HashSet}, will produce non-deterministic results.\n"], "16": ["   * Returns a new ordering which sorts iterables by comparing corresponding\n", "   * elements pairwise until a nonzero result is found; imposes \"dictionary\n", "   * order\". If the end of one iterable is reached, but not the other, the\n", "   * shorter iterable is considered to be less than the longer one. For example,\n", "   * a lexicographical natural ordering over integers considers {@code\n", "   * [] < [1] < [1, 1] < [1, 2] < [2]}.\n", "   * <p>Note that {@code ordering.lexicographical().reverse()} is not\n", "   * equivalent to {@code ordering.reverse().lexicographical()} (consider how\n", "   * each would order {@code [1]} and {@code [1, 1]}).\n"], "17": ["   * Returns the least of the specified values according to this ordering. If\n", "   * there are multiple least values, the first of those is returned. The\n", "   * iterator will be left exhausted: its {@code hasNext()} method will return\n", "   * {@code false}.\n", "   * @throws ClassCastException if the parameters are not <i>mutually\n", "   *     comparable</i> under this ordering.\n", "   *\n"], "18": ["   * Returns the least of the specified values according to this ordering. If\n", "   * there are multiple least values, the first of those is returned.\n", "   * @throws ClassCastException if the parameters are not <i>mutually\n", "   *     comparable</i> under this ordering.\n"], "19": ["   * Returns the lesser of the two values according to this ordering. If the\n", "   * values compare as 0, the first is returned.\n", "   * <p><b>Implementation note:</b> this method is invoked by the default\n", "   * implementations of the other {@code min} overloads, so overriding it will\n", "   * affect their behavior.\n", "   * @throws ClassCastException if the parameters are not <i>mutually\n", "   *     comparable</i> under this ordering.\n"], "20": ["   * Returns the least of the specified values according to this ordering. If\n", "   * there are multiple least values, the first of those is returned.\n", "   * @throws ClassCastException if the parameters are not <i>mutually\n", "   *     comparable</i> under this ordering.\n"], "21": ["   * Returns the greatest of the specified values according to this ordering. If\n", "   * there are multiple greatest values, the first of those is returned. The\n", "   * iterator will be left exhausted: its {@code hasNext()} method will return\n", "   * {@code false}.\n", "   * @throws ClassCastException if the parameters are not <i>mutually\n", "   *     comparable</i> under this ordering.\n", "   *\n"], "25": ["   * Returns the {@code k} least elements of the given iterable according to\n", "   * this ordering, in order from least to greatest.  If there are fewer than\n", "   * {@code k} elements present, all will be included.\n", "   * <p>The implementation does not necessarily use a <i>stable</i> sorting\n", "   * algorithm; when multiple elements are equivalent, it is undefined which\n", "   * will come first.\n", "   * @return an immutable {@code RandomAccess} list of the {@code k} least\n", "   *     elements in ascending order\n"], "26": ["   * Returns the {@code k} least elements from the given iterator according to\n", "   * this ordering, in order from least to greatest.  If there are fewer than\n", "   * {@code k} elements present, all will be included.\n", "   * <p>The implementation does not necessarily use a <i>stable</i> sorting\n", "   * algorithm; when multiple elements are equivalent, it is undefined which\n", "   * will come first.\n", "   * @return an immutable {@code RandomAccess} list of the {@code k} least\n", "   *     elements in ascending order\n", "  public <E extends T> List<E> leastOf(Iterator<E> elements, int k) {\n", "    checkNotNull(elements);\n", "    if (k == 0 || !elements.hasNext()) {\n", "      ArrayList<E> list = Lists.newArrayList(elements);\n"], "27": ["      selector.offerAll(elements);\n", "   * Returns the {@code k} greatest elements of the given iterable according to\n", "   * this ordering, in order from greatest to least. If there are fewer than\n", "   * {@code k} elements present, all will be included.\n", "   * <p>The implementation does not necessarily use a <i>stable</i> sorting\n", "   * algorithm; when multiple elements are equivalent, it is undefined which\n", "   * will come first.\n", "   * @return an immutable {@code RandomAccess} list of the {@code k} greatest\n", "   *     elements in <i>descending order</i>\n"], "28": ["   * Returns the {@code k} greatest elements from the given iterator according to\n", "   * this ordering, in order from greatest to least. If there are fewer than\n", "   * {@code k} elements present, all will be included.\n", "   * <p>The implementation does not necessarily use a <i>stable</i> sorting\n", "   * algorithm; when multiple elements are equivalent, it is undefined which\n", "   * will come first.\n", "   * @return an immutable {@code RandomAccess} list of the {@code k} greatest\n", "   *     elements in <i>descending order</i>\n"], "29": ["   * Returns a <b>mutable</b> list containing {@code elements} sorted by this\n", "   * ordering; use this only when the resulting list may need further\n", "   * modification, or may contain {@code null}. The input is not modified. The\n", "   * returned list is serializable and has random access.\n", "   * <p>Unlike {@link Sets#newTreeSet(Iterable)}, this method does not discard\n", "   * elements that are duplicates according to the comparator. The sort\n", "   * performed is <i>stable</i>, meaning that such elements will appear in the\n", "   * returned list in the same order they appeared in {@code elements}.\n", "   * on Open JDK 7, {@link #immutableSortedCopy} generally performs better (in\n", "   * both time and space) than this method, and this method in turn generally\n", "   * performs better than copying the list and calling {@link\n", "   * Collections#sort(List)}.\n"], "30": ["   * Returns an <b>immutable</b> list containing {@code elements} sorted by this\n", "   * ordering. The input is not modified.\n", "   * <p>Unlike {@link Sets#newTreeSet(Iterable)}, this method does not discard\n", "   * elements that are duplicates according to the comparator. The sort\n", "   * performed is <i>stable</i>, meaning that such elements will appear in the\n", "   * returned list in the same order they appeared in {@code elements}.\n", "   * on Open JDK 7, this method is the most efficient way to make a sorted copy\n", "   * of a collection.\n", "   * @throws NullPointerException if any of {@code elements} (or {@code\n", "   *     elements} itself) is null\n"], "31": ["   * Returns {@code true} if each element in {@code iterable} after the first is\n", "   * greater than or equal to the element that preceded it, according to this\n", "   * ordering. Note that this is always true when the iterable has fewer than\n", "   * two elements.\n"], "32": ["   * Returns {@code true} if each element in {@code iterable} after the first is\n", "   * <i>strictly</i> greater than the element that preceded it, according to\n", "   * this ordering. Note that this is always true when the iterable has fewer\n", "   * than two elements.\n"], "33": ["  // TODO(kevinb): make this public, document it right\n"]}, "added_lines": {"1": [44, 45, 46], "2": [79], "3": [91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 106, 107, 109, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139], "4": [150, 151, 153, 154, 155, 156], "5": [167, 168, 169, 170, 171, 172, 173, 176, 177], "6": [198, 199, 200, 201, 202, 204, 205, 207, 209, 210, 213, 214, 216, 223, 224, 225, 226, 228, 229, 231, 233, 234, 235, 236, 239, 240, 242], "7": [251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 273, 274, 275], "8": [285, 286, 289, 290], "9": [298, 299, 300, 302, 303, 304, 305, 307, 308, 312], "10": [395, 396, 397, 398], "11": [408, 409, 410, 411], "12": [421, 422, 423, 424], "13": [434, 435, 436, 437, 438, 439, 440, 441, 443, 444], "14": [456, 457, 458, 459, 460, 461, 462, 464, 465, 466], "15": [474, 475, 476, 477, 482, 483, 484, 485, 486, 487, 488], "16": [498, 499, 500, 501, 502, 503, 504, 505, 506, 508], "17": [535, 536, 537, 538, 539, 540, 541, 545, 546], "18": [562, 563, 564, 565, 566, 567, 568, 569, 573, 574], "19": [582, 583, 585, 586, 587, 588, 589, 593, 594], "20": [602, 603, 604, 605, 606, 612, 613], "21": [627, 628, 629, 630, 631, 632, 633, 637, 638], "22": [657, 658, 659, 660, 661, 662], "23": [681, 682, 683], "24": [698, 699, 700], "25": [720, 721, 722, 723, 724, 725, 727, 728, 730, 731], "26": [756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 771, 772, 775, 779], "27": [788, 794, 795, 796, 797, 798, 799, 801, 802, 804, 805], "28": [816, 817, 818, 819, 820, 821, 823, 824, 826, 827], "29": [836, 837, 838, 840, 841, 842, 846, 847, 848, 850], "30": [860, 861, 863, 864, 865, 869, 871, 874], "31": [887, 888, 889, 890, 891, 892, 893], "32": [911, 912, 913, 914, 915, 916, 917]}, "removed_lines": {"1": [46, 47, 48], "2": [81], "3": [92, 94, 95, 96, 97, 98, 101, 102, 103, 107, 108, 110, 111, 115, 116, 120, 121, 122, 123, 126, 127], "4": [138, 139, 140, 142, 143, 144], "5": [155, 156, 157, 158, 159, 162, 163], "6": [184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 197, 198, 201, 202, 210, 211, 212, 213, 214, 216, 217, 219, 220, 222, 223, 224, 225, 226, 229, 230], "7": [240, 241, 242, 243, 244, 246, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259], "8": [272, 273, 274], "9": [284, 285, 286, 288, 289, 290, 291, 293, 294, 295], "10": [381, 382], "11": [392, 393], "12": [403, 404], "13": [414, 415, 416, 417, 419, 420], "14": [432, 433, 434, 435, 436, 438, 439, 440], "15": [448, 449, 450, 451, 452, 457, 458], "16": [468, 469, 470, 471, 472, 473, 475, 476, 477], "17": [504, 505, 506, 507, 511, 512, 513], "18": [529, 530, 534, 535], "19": [543, 544, 546, 547, 548, 552, 553], "20": [561, 562, 568, 569], "21": [583, 584, 585, 586, 590, 591, 592], "25": [662, 663, 664, 666, 667, 668, 670, 671], "26": [696, 697, 698, 700, 701, 702, 704, 705, 709, 710, 713, 717], "27": [726, 732, 733, 734, 736, 737, 738, 740, 741], "28": [752, 753, 754, 756, 757, 758, 760, 761], "29": [770, 771, 772, 773, 775, 776, 777, 778, 782, 783, 784, 785], "30": [796, 797, 799, 800, 801, 802, 806, 807, 809, 810], "31": [825, 826, 827, 828], "32": [846, 847, 848, 849], "33": [887]}}]}
