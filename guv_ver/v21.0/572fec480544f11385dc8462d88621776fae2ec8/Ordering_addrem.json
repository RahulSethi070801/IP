{
    "addition": {
        "44": " * A comparator, with additional methods to support common operations. This is an \"enriched\" version\n",
        "45": " * of {@code Comparator} for pre-Java-8 users, in the same sense that {@link FluentIterable} is an\n",
        "46": " * enriched {@link Iterable} for pre-Java-8 users.\n",
        "79": " * any of its special operations, such as:\n",
        "91": " * <pre>{@code\n",
        "92": " * Ordering<Foo> ordering =\n",
        "93": " *     Ordering.natural()\n",
        "94": " *         .nullsFirst()\n",
        "95": " *         .onResultOf(getBarFunction)\n",
        "96": " *         .nullsLast();\n",
        "97": " * }</pre>\n",
        "100": " * instance, but has the chance to act on values <i>before</i> handing off to that backing instance.\n",
        "101": " * As a result, it usually helps to read chained ordering expressions <i>backwards</i>. For example,\n",
        "102": " * when {@code compare} is called on the above ordering:\n",
        "106": " * <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be comparing\n",
        "107": " *     {@code Bar} values from now on)\n",
        "109": " * <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is returned)\n",
        "113": " * encounter a call to {@code reverse}, continue working backwards until a result is determined, and\n",
        "114": " * then reverse that result.\n",
        "118": " * <p>Except as noted, the orderings returned by the factory methods of this class are serializable\n",
        "119": " * if and only if the provided instances that back them are. For example, if {@code ordering} and\n",
        "120": " * {@code function} can themselves be serialized, then {@code ordering.onResultOf(function)} can as\n",
        "121": " * well.\n",
        "122": " *\n",
        "123": " * <h3>For Java 8 users</h3>\n",
        "124": " *\n",
        "125": " * <p>If you are using Java 8, this class is now obsolete <i>(pending a few August 2016\n",
        "126": " * updates)</i>. Most of its functionality is now provided by {@link Stream} and by {@link\n",
        "127": " * Comparator} itself, and the rest can now be found as static methods in our new {@link\n",
        "128": " * Comparators} class. See each method below for further instructions. Whenever possible, you should\n",
        "129": " * change any references of type {@code Ordering} to be of type {@code Comparator} instead. However,\n",
        "130": " * at this time we have no plan to <i>deprecate</i> this class.\n",
        "131": " *\n",
        "132": " * <p>Many replacements involve adopting {@code Stream}, and these changes can sometimes make your\n",
        "133": " * code verbose. Whenever following this advice, you should check whether {@code Stream} could be\n",
        "134": " * adopted more comprehensively in your code; the end result may be quite a bit simpler.\n",
        "135": " *\n",
        "136": " * <h3>See also</h3>\n",
        "139": " * \"https://github.com/google/guava/wiki/OrderingExplained\">{@code Ordering}</a>.\n",
        "150": "   * Returns a serializable ordering that uses the natural order of the values. The ordering throws\n",
        "151": "   * a {@link NullPointerException} when passed a null parameter.\n",
        "153": "   * <p>The type specification is {@code <C extends Comparable>}, instead of the technically correct\n",
        "154": "   * {@code <C extends Comparable<? super C>>}, to support legacy types from before Java 5.\n",
        "155": "   *\n",
        "156": "   * <p><b>Java 8 users:</b> use {@link Comparator#naturalOrder} instead.\n",
        "167": "   * Returns an ordering based on an <i>existing</i> comparator instance. Note that it is\n",
        "168": "   * unnecessary to create a <i>new</i> anonymous inner class implementing {@code Comparator} just\n",
        "169": "   * to pass it in here. Instead, simply subclass {@code Ordering} and implement its {@code compare}\n",
        "170": "   * method directly.\n",
        "171": "   *\n",
        "172": "   * <p><b>Java 8 users:</b> this class is now obsolete as explained in the class documentation, so\n",
        "173": "   * there is no need to use this method.\n",
        "176": "   * @return comparator itself if it is already an {@code Ordering}; otherwise an ordering that\n",
        "177": "   *     wraps that comparator\n",
        "198": "   * Returns an ordering that compares objects according to the order in which they appear in the\n",
        "199": "   * given list. Only objects present in the list (according to {@link Object#equals}) may be\n",
        "200": "   * compared. This comparator imposes a \"partial ordering\" over the type {@code T}. Subsequent\n",
        "201": "   * changes to the {@code valuesInOrder} list will have no effect on the returned comparator. Null\n",
        "202": "   * values in the list are not supported.\n",
        "204": "   * <p>The returned comparator throws a {@link ClassCastException} when it receives an input\n",
        "205": "   * parameter that isn't among the provided values.\n",
        "207": "   * <p>The generated comparator is serializable if all the provided values are serializable.\n",
        "209": "   * @param valuesInOrder the values that the returned comparator will be able to compare, in the\n",
        "210": "   *     order the comparator should induce\n",
        "213": "   * @throws IllegalArgumentException if {@code valuesInOrder} contains any duplicate values\n",
        "214": "   *     (according to {@link Object#equals})\n",
        "216": "  // TODO(kevinb): provide replacement\n",
        "223": "   * Returns an ordering that compares objects according to the order in which they are given to\n",
        "224": "   * this method. Only objects present in the argument list (according to {@link Object#equals}) may\n",
        "225": "   * be compared. This comparator imposes a \"partial ordering\" over the type {@code T}. Null values\n",
        "226": "   * in the argument list are not supported.\n",
        "228": "   * <p>The returned comparator throws a {@link ClassCastException} when it receives an input\n",
        "229": "   * parameter that isn't among the provided values.\n",
        "231": "   * <p>The generated comparator is serializable if all the provided values are serializable.\n",
        "233": "   * @param leastValue the value which the returned comparator should consider the \"least\" of all\n",
        "234": "   *     values\n",
        "235": "   * @param remainingValuesInOrder the rest of the values that the returned comparator will be able\n",
        "236": "   *     to compare, in the order the comparator should follow\n",
        "239": "   * @throws IllegalArgumentException if any duplicate values (according to {@link\n",
        "240": "   *     Object#equals(Object)}) are present among the method arguments\n",
        "242": "  // TODO(kevinb): provide replacement\n",
        "251": "   * Returns an ordering which treats all values as equal, indicating \"no ordering.\" Passing this\n",
        "252": "   * ordering to any <i>stable</i> sort algorithm results in no change to the order of elements.\n",
        "253": "   * Note especially that {@link #sortedCopy} and {@link #immutableSortedCopy} are stable, and in\n",
        "254": "   * the returned instance these are implemented by simply copying the source list.\n",
        "256": "   * <p>Example:\n",
        "258": "   * <pre>{@code\n",
        "259": "   * Ordering.allEqual().nullsLast().sortedCopy(\n",
        "260": "   *     asList(t, null, e, s, null, t, null))\n",
        "261": "   * }</pre>\n",
        "263": "   * <p>Assuming {@code t}, {@code e} and {@code s} are non-null, this returns {@code [t, e, s, t,\n",
        "264": "   * null, null, null]} regardlesss of the true comparison order of those three values (which might\n",
        "265": "   * not even implement {@link Comparable} at all).\n",
        "267": "   * <p><b>Warning:</b> by definition, this comparator is not <i>consistent with equals</i> (as\n",
        "268": "   * defined {@linkplain Comparator here}). Avoid its use in APIs, such as {@link\n",
        "269": "   * TreeSet#TreeSet(Comparator)}, where such consistency is expected.\n",
        "273": "   * <p><b>Java 8 users:</b> Use the lambda expression {@code (a, b) -> 0} instead (in certain cases\n",
        "274": "   * you may need to cast that to {@code Comparator<YourType>}).\n",
        "275": "   *\n",
        "285": "   * Returns an ordering that compares objects by the natural ordering of their string\n",
        "286": "   * representations as returned by {@code toString()}. It does not support null values.\n",
        "289": "   *\n",
        "290": "   * <p><b>Java 8 users:</b> Use {@code Comparator.comparing(Object::toString)} instead.\n",
        "298": "   * Returns an arbitrary ordering over all objects, for which {@code compare(a, b) == 0} implies\n",
        "299": "   * {@code a == b} (identity equality). There is no meaning whatsoever to the order imposed, but it\n",
        "300": "   * is constant for the life of the VM.\n",
        "302": "   * <p>Because the ordering is identity-based, it is not \"consistent with {@link\n",
        "303": "   * Object#equals(Object)}\" as defined by {@link Comparator}. Use caution when building a {@link\n",
        "304": "   * SortedSet} or {@link SortedMap} from it, as the resulting collection will not behave exactly\n",
        "305": "   * according to spec.\n",
        "307": "   * <p>This ordering is not serializable, as its implementation relies on {@link\n",
        "308": "   * System#identityHashCode(Object)}, so its behavior cannot be preserved across serialization.\n",
        "312": "  // TODO(kevinb): copy to Comparators, etc.\n",
        "395": "   * Returns the reverse of this ordering; the {@code Ordering} equivalent to {@link\n",
        "396": "   * Collections#reverseOrder(Comparator)}.\n",
        "397": "   *\n",
        "398": "   * <p><b>Java 8 users:</b> Use {@code thisComparator.reversed()} instead.\n",
        "408": "   * Returns an ordering that treats {@code null} as less than all other values and uses {@code\n",
        "409": "   * this} to compare non-null values.\n",
        "410": "   *\n",
        "411": "   * <p><b>Java 8 users:</b> Use {@code Comparator.nullsFirst(thisComparator)} instead.\n",
        "421": "   * Returns an ordering that treats {@code null} as greater than all other values and uses this\n",
        "422": "   * ordering to compare non-null values.\n",
        "423": "   *\n",
        "424": "   * <p><b>Java 8 users:</b> Use {@code Comparator.nullsLast(thisComparator)} instead.\n",
        "434": "   * Returns a new ordering on {@code F} which orders elements by first applying a function to them,\n",
        "435": "   * then comparing those results using {@code this}. For example, to compare objects by their\n",
        "436": "   * string forms, in a case-insensitive manner, use:\n",
        "437": "   *\n",
        "438": "   * <pre>{@code\n",
        "439": "   * Ordering.from(String.CASE_INSENSITIVE_ORDER)\n",
        "440": "   *     .onResultOf(Functions.toStringFunction())\n",
        "441": "   * }</pre>\n",
        "443": "   * <p><b>Java 8 users:</b> Use {@code Comparator.comparing(function, thisComparator)} instead (you\n",
        "444": "   * can omit the comparator if it is the natural order).\n",
        "456": "   * Returns an ordering which first uses the ordering {@code this}, but which in the event of a\n",
        "457": "   * \"tie\", then delegates to {@code secondaryComparator}. For example, to sort a bug list first by\n",
        "458": "   * status and second by priority, you might use {@code byStatus.compound(byPriority)}. For a\n",
        "459": "   * compound ordering with three or more components, simply chain multiple calls to this method.\n",
        "460": "   *\n",
        "461": "   * <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to\n",
        "462": "   * one created using {@link Ordering#compound(Iterable)} on the same component comparators.\n",
        "464": "   * <p><b>Java 8 users:</b> Use {@code thisComparator.thenComparing(secondaryComparator)} instead.\n",
        "465": "   * Depending on what {@code secondaryComparator} is, one of the other overloads of {@code\n",
        "466": "   * thenComparing} may be even more useful.\n",
        "474": "   * Returns an ordering which tries each given comparator in order until a non-zero result is\n",
        "475": "   * found, returning that result, and returning zero only if all comparators return zero. The\n",
        "476": "   * returned ordering is based on the state of the {@code comparators} iterable at the time it was\n",
        "477": "   * provided to this method.\n",
        "482": "   * <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a {@link\n",
        "483": "   * HashSet}, will produce non-deterministic results.\n",
        "484": "   *\n",
        "485": "   * <p><b>Java 8 users:</b> Use a chain of calls to {@link Comparator#thenComparing(Comparator)},\n",
        "486": "   * or {@code comparatorCollection.stream().reduce(Comparator::thenComparing).get()} (if the\n",
        "487": "   * collection might be empty, also provide a default comparator as the {@code identity} parameter\n",
        "488": "   * to {@code reduce}).\n",
        "498": "   * Returns a new ordering which sorts iterables by comparing corresponding elements pairwise until\n",
        "499": "   * a nonzero result is found; imposes \"dictionary order\". If the end of one iterable is reached,\n",
        "500": "   * but not the other, the shorter iterable is considered to be less than the longer one. For\n",
        "501": "   * example, a lexicographical natural ordering over integers considers {@code [] < [1] < [1, 1] <\n",
        "502": "   * [1, 2] < [2]}.\n",
        "503": "   *\n",
        "504": "   * <p>Note that {@code ordering.lexicographical().reverse()} is not equivalent to {@code\n",
        "505": "   * ordering.reverse().lexicographical()} (consider how each would order {@code [1]} and {@code [1,\n",
        "506": "   * 1]}).\n",
        "508": "   * <p><b>Java 8 users:</b> Use {@link Comparators#lexicographical(Comparator)} instead.\n",
        "535": "   * Returns the least of the specified values according to this ordering. If there are multiple\n",
        "536": "   * least values, the first of those is returned. The iterator will be left exhausted: its {@code\n",
        "537": "   * hasNext()} method will return {@code false}.\n",
        "538": "   *\n",
        "539": "   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n",
        "540": "   * use {@code Streams.stream(iterator).min(thisComparator).get()} instead (but note that it does\n",
        "541": "   * not guarantee which tied minimum element is returned).\n",
        "545": "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n",
        "546": "   *     ordering.\n",
        "562": "   * Returns the least of the specified values according to this ordering. If there are multiple\n",
        "563": "   * least values, the first of those is returned.\n",
        "564": "   *\n",
        "565": "   * <p><b>Java 8 users:</b> If {@code iterable} is a {@link Collection}, use {@code\n",
        "566": "   * Collections.min(collection, thisComparator)} instead. Otherwise, continue to use this method\n",
        "567": "   * for now. After the next release of Guava, use {@code\n",
        "568": "   * Streams.stream(iterable).min(thisComparator).get()} instead. Note that these alternatives do\n",
        "569": "   * not guarantee which tied minimum element is returned)\n",
        "573": "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n",
        "574": "   *     ordering.\n",
        "582": "   * Returns the lesser of the two values according to this ordering. If the values compare as 0,\n",
        "583": "   * the first is returned.\n",
        "585": "   * <p><b>Implementation note:</b> this method is invoked by the default implementations of the\n",
        "586": "   * other {@code min} overloads, so overriding it will affect their behavior.\n",
        "587": "   *\n",
        "588": "   * <p><b>Java 8 users:</b> Use {@code Stream.of(a, b).min(thisComparator).get()} instead (but note\n",
        "589": "   * that it does not guarantee which tied minimum element is returned).\n",
        "593": "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n",
        "594": "   *     ordering.\n",
        "602": "   * Returns the least of the specified values according to this ordering. If there are multiple\n",
        "603": "   * least values, the first of those is returned.\n",
        "604": "   *\n",
        "605": "   * <p><b>Java 8 users:</b> Use {@code Stream.of(a, b, c...).min(thisComparator).get()} instead\n",
        "606": "   * (but note that it does not guarantee which tied minimum element is returned).\n",
        "612": "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n",
        "613": "   *     ordering.\n",
        "627": "   * Returns the greatest of the specified values according to this ordering. If there are multiple\n",
        "628": "   * greatest values, the first of those is returned. The iterator will be left exhausted: its\n",
        "629": "   * {@code hasNext()} method will return {@code false}.\n",
        "630": "   *\n",
        "631": "   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n",
        "632": "   * use {@code Streams.stream(iterator).max(thisComparator).get()} instead (but note that it does\n",
        "633": "   * not guarantee which tied maximum element is returned).\n",
        "637": "   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this\n",
        "638": "   *     ordering.\n",
        "657": "   * <p><b>Java 8 users:</b> If {@code iterable} is a {@link Collection}, use {@code\n",
        "658": "   * Collections.max(collection, thisComparator)} instead. Otherwise, continue to use this method\n",
        "659": "   * for now. After the next release of Guava, use {@code\n",
        "660": "   * Streams.stream(iterable).max(thisComparator).get()} instead. Note that these alternatives do\n",
        "661": "   * not guarantee which tied maximum element is returned)\n",
        "662": "   *\n",
        "681": "   * <p><b>Java 8 users:</b> Use {@code Stream.of(a, b).max(thisComparator).get()} instead (but note\n",
        "682": "   * that it does not guarantee which tied maximum element is returned).\n",
        "683": "   *\n",
        "698": "   * <p><b>Java 8 users:</b> Use {@code Stream.of(a, b, c...).max(thisComparator).get()} instead\n",
        "699": "   * (but note that it does not guarantee which tied maximum element is returned).\n",
        "700": "   *\n",
        "720": "   * Returns the {@code k} least elements of the given iterable according to this ordering, in order\n",
        "721": "   * from least to greatest. If there are fewer than {@code k} elements present, all will be\n",
        "722": "   * included.\n",
        "723": "   *\n",
        "724": "   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n",
        "725": "   * elements are equivalent, it is undefined which will come first.\n",
        "727": "   * <p><b>Java 8 users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k,\n",
        "728": "   * thisComparator))} instead.\n",
        "730": "   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending\n",
        "731": "   *     order\n",
        "756": "   * Returns the {@code k} least elements from the given iterator according to this ordering, in\n",
        "757": "   * order from least to greatest. If there are fewer than {@code k} elements present, all will be\n",
        "758": "   * included.\n",
        "760": "   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n",
        "761": "   * elements are equivalent, it is undefined which will come first.\n",
        "763": "   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n",
        "764": "   * use {@code Streams.stream(iterator).collect(Comparators.least(k, thisComparator))} instead.\n",
        "765": "   *\n",
        "766": "   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending\n",
        "767": "   *     order\n",
        "771": "  public <E extends T> List<E> leastOf(Iterator<E> iterator, int k) {\n",
        "772": "    checkNotNull(iterator);\n",
        "775": "    if (k == 0 || !iterator.hasNext()) {\n",
        "779": "      ArrayList<E> list = Lists.newArrayList(iterator);\n",
        "788": "      selector.offerAll(iterator);\n",
        "794": "   * Returns the {@code k} greatest elements of the given iterable according to this ordering, in\n",
        "795": "   * order from greatest to least. If there are fewer than {@code k} elements present, all will be\n",
        "796": "   * included.\n",
        "797": "   *\n",
        "798": "   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n",
        "799": "   * elements are equivalent, it is undefined which will come first.\n",
        "801": "   * <p><b>Java 8 users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k,\n",
        "802": "   * thisComparator))} instead.\n",
        "804": "   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in\n",
        "805": "   *     <i>descending order</i>\n",
        "816": "   * Returns the {@code k} greatest elements from the given iterator according to this ordering, in\n",
        "817": "   * order from greatest to least. If there are fewer than {@code k} elements present, all will be\n",
        "818": "   * included.\n",
        "819": "   *\n",
        "820": "   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple\n",
        "821": "   * elements are equivalent, it is undefined which will come first.\n",
        "823": "   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n",
        "824": "   * use {@code Streams.stream(iterator).collect(Comparators.greatest(k, thisComparator))} instead.\n",
        "826": "   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in\n",
        "827": "   *     <i>descending order</i>\n",
        "836": "   * Returns a <b>mutable</b> list containing {@code elements} sorted by this ordering; use this\n",
        "837": "   * only when the resulting list may need further modification, or may contain {@code null}. The\n",
        "838": "   * input is not modified. The returned list is serializable and has random access.\n",
        "840": "   * <p>Unlike {@link Sets#newTreeSet(Iterable)}, this method does not discard elements that are\n",
        "841": "   * duplicates according to the comparator. The sort performed is <i>stable</i>, meaning that such\n",
        "842": "   * elements will appear in the returned list in the same order they appeared in {@code elements}.\n",
        "846": "   * on Open JDK 7, {@link #immutableSortedCopy} generally performs better (in both time and space)\n",
        "847": "   * than this method, and this method in turn generally performs better than copying the list and\n",
        "848": "   * calling {@link Collections#sort(List)}.\n",
        "850": "  // TODO(kevinb): rerun benchmarks including new options\n",
        "860": "   * Returns an <b>immutable</b> list containing {@code elements} sorted by this ordering. The input\n",
        "861": "   * is not modified.\n",
        "863": "   * <p>Unlike {@link Sets#newTreeSet(Iterable)}, this method does not discard elements that are\n",
        "864": "   * duplicates according to the comparator. The sort performed is <i>stable</i>, meaning that such\n",
        "865": "   * elements will appear in the returned list in the same order they appeared in {@code elements}.\n",
        "869": "   * on Open JDK 7, this method is the most efficient way to make a sorted copy of a collection.\n",
        "871": "   * @throws NullPointerException if any of {@code elements} (or {@code elements} itself) is null\n",
        "874": "  // TODO(kevinb): rerun benchmarks including new options\n",
        "887": "   * Returns {@code true} if each element in {@code iterable} after the first is greater than or\n",
        "888": "   * equal to the element that preceded it, according to this ordering. Note that this is always\n",
        "889": "   * true when the iterable has fewer than two elements.\n",
        "890": "   *\n",
        "891": "   * <p><b>Java 8 users:</b> Use the equivalent {@link Comparators#isInOrder(Iterable)} instead,\n",
        "892": "   * since the rest of {@code Ordering} is mostly obsolete (as explained in the class\n",
        "893": "   * documentation).\n",
        "911": "   * Returns {@code true} if each element in {@code iterable} after the first is <i>strictly</i>\n",
        "912": "   * greater than the element that preceded it, according to this ordering. Note that this is always\n",
        "913": "   * true when the iterable has fewer than two elements.\n",
        "914": "   *\n",
        "915": "   * <p><b>Java 8 users:</b> Use the equivalent {@link Comparators#isInStrictOrder(Iterable)}\n",
        "916": "   * instead, since the rest of {@code Ordering} is mostly obsolete (as explained in the class\n",
        "917": "   * documentation).\n"
    },
    "removed": {
        "46": " * A comparator, with additional methods to support common operations. This is an \"enriched\"\n",
        "47": " * version of {@code Comparator}, in the same sense that {@link FluentIterable} is an enriched\n",
        "48": " * {@link Iterable}.\n",
        "81": " * any of its special operations, such as:</p>\n",
        "92": " * <pre>   {@code\n",
        "94": " *   Ordering<Foo> ordering =\n",
        "95": " *       Ordering.natural()\n",
        "96": " *           .nullsFirst()\n",
        "97": " *           .onResultOf(getBarFunction)\n",
        "98": " *           .nullsLast();}</pre>\n",
        "101": " * instance, but has the chance to act on values <i>before</i> handing off to that backing\n",
        "102": " * instance. As a result, it usually helps to read chained ordering expressions <i>backwards</i>.\n",
        "103": " * For example, when {@code compare} is called on the above ordering:\n",
        "107": " * <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be\n",
        "108": " *     comparing {@code Bar} values from now on)\n",
        "110": " * <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is\n",
        "111": " *     returned)\n",
        "115": " * encounter a call to {@code reverse}, continue working backwards until a result is determined,\n",
        "116": " * and then reverse that result.\n",
        "120": " * <p>Except as noted, the orderings returned by the factory methods of this\n",
        "121": " * class are serializable if and only if the provided instances that back them\n",
        "122": " * are. For example, if {@code ordering} and {@code function} can themselves be\n",
        "123": " * serialized, then {@code ordering.onResultOf(function)} can as well.\n",
        "126": " * \"https://github.com/google/guava/wiki/OrderingExplained\">\n",
        "127": " * {@code Ordering}</a>.\n",
        "138": "   * Returns a serializable ordering that uses the natural order of the values.\n",
        "139": "   * The ordering throws a {@link NullPointerException} when passed a null\n",
        "140": "   * parameter.\n",
        "142": "   * <p>The type specification is {@code <C extends Comparable>}, instead of\n",
        "143": "   * the technically correct {@code <C extends Comparable<? super C>>}, to\n",
        "144": "   * support legacy types from before Java 5.\n",
        "155": "   * Returns an ordering based on an <i>existing</i> comparator instance. Note\n",
        "156": "   * that it is unnecessary to create a <i>new</i> anonymous inner class\n",
        "157": "   * implementing {@code Comparator} just to pass it in here. Instead, simply\n",
        "158": "   * subclass {@code Ordering} and implement its {@code compare} method\n",
        "159": "   * directly.\n",
        "162": "   * @return comparator itself if it is already an {@code Ordering}; otherwise\n",
        "163": "   *     an ordering that wraps that comparator\n",
        "184": "   * Returns an ordering that compares objects according to the order in\n",
        "185": "   * which they appear in the given list. Only objects present in the list\n",
        "186": "   * (according to {@link Object#equals}) may be compared. This comparator\n",
        "187": "   * imposes a \"partial ordering\" over the type {@code T}. Subsequent changes\n",
        "188": "   * to the {@code valuesInOrder} list will have no effect on the returned\n",
        "189": "   * comparator. Null values in the list are not supported.\n",
        "191": "   * <p>The returned comparator throws a {@link ClassCastException} when it\n",
        "192": "   * receives an input parameter that isn't among the provided values.\n",
        "194": "   * <p>The generated comparator is serializable if all the provided values are\n",
        "195": "   * serializable.\n",
        "197": "   * @param valuesInOrder the values that the returned comparator will be able\n",
        "198": "   *     to compare, in the order the comparator should induce\n",
        "201": "   * @throws IllegalArgumentException if {@code valuesInOrder} contains any\n",
        "202": "   *     duplicate values (according to {@link Object#equals})\n",
        "210": "   * Returns an ordering that compares objects according to the order in\n",
        "211": "   * which they are given to this method. Only objects present in the argument\n",
        "212": "   * list (according to {@link Object#equals}) may be compared. This comparator\n",
        "213": "   * imposes a \"partial ordering\" over the type {@code T}. Null values in the\n",
        "214": "   * argument list are not supported.\n",
        "216": "   * <p>The returned comparator throws a {@link ClassCastException} when it\n",
        "217": "   * receives an input parameter that isn't among the provided values.\n",
        "219": "   * <p>The generated comparator is serializable if all the provided values are\n",
        "220": "   * serializable.\n",
        "222": "   * @param leastValue the value which the returned comparator should consider\n",
        "223": "   *     the \"least\" of all values\n",
        "224": "   * @param remainingValuesInOrder the rest of the values that the returned\n",
        "225": "   *     comparator will be able to compare, in the order the comparator should\n",
        "226": "   *     follow\n",
        "229": "   * @throws IllegalArgumentException if any duplicate values (according to\n",
        "230": "   *     {@link Object#equals(Object)}) are present among the method arguments\n",
        "240": "   * Returns an ordering which treats all values as equal, indicating \"no\n",
        "241": "   * ordering.\" Passing this ordering to any <i>stable</i> sort algorithm\n",
        "242": "   * results in no change to the order of elements. Note especially that {@link\n",
        "243": "   * #sortedCopy} and {@link #immutableSortedCopy} are stable, and in the\n",
        "244": "   * returned instance these are implemented by simply copying the source list.\n",
        "246": "   * <p>Example: <pre>   {@code\n",
        "248": "   *   Ordering.allEqual().nullsLast().sortedCopy(\n",
        "249": "   *       asList(t, null, e, s, null, t, null))}</pre>\n",
        "251": "   * <p>Assuming {@code t}, {@code e} and {@code s} are non-null, this returns\n",
        "252": "   * {@code [t, e, s, t, null, null, null]} regardlesss of the true comparison\n",
        "253": "   * order of those three values (which might not even implement {@link\n",
        "254": "   * Comparable} at all).\n",
        "256": "   * <p><b>Warning:</b> by definition, this comparator is not <i>consistent with\n",
        "257": "   * equals</i> (as defined {@linkplain Comparator here}). Avoid its use in\n",
        "258": "   * APIs, such as {@link TreeSet#TreeSet(Comparator)}, where such consistency\n",
        "259": "   * is expected.\n",
        "272": "   * Returns an ordering that compares objects by the natural ordering of their\n",
        "273": "   * string representations as returned by {@code toString()}. It does not\n",
        "274": "   * support null values.\n",
        "284": "   * Returns an arbitrary ordering over all objects, for which {@code compare(a,\n",
        "285": "   * b) == 0} implies {@code a == b} (identity equality). There is no meaning\n",
        "286": "   * whatsoever to the order imposed, but it is constant for the life of the VM.\n",
        "288": "   * <p>Because the ordering is identity-based, it is not \"consistent with\n",
        "289": "   * {@link Object#equals(Object)}\" as defined by {@link Comparator}. Use\n",
        "290": "   * caution when building a {@link SortedSet} or {@link SortedMap} from it, as\n",
        "291": "   * the resulting collection will not behave exactly according to spec.\n",
        "293": "   * <p>This ordering is not serializable, as its implementation relies on\n",
        "294": "   * {@link System#identityHashCode(Object)}, so its behavior cannot be\n",
        "295": "   * preserved across serialization.\n",
        "381": "   * Returns the reverse of this ordering; the {@code Ordering} equivalent to\n",
        "382": "   * {@link Collections#reverseOrder(Comparator)}.\n",
        "392": "   * Returns an ordering that treats {@code null} as less than all other values\n",
        "393": "   * and uses {@code this} to compare non-null values.\n",
        "403": "   * Returns an ordering that treats {@code null} as greater than all other\n",
        "404": "   * values and uses this ordering to compare non-null values.\n",
        "414": "   * Returns a new ordering on {@code F} which orders elements by first applying\n",
        "415": "   * a function to them, then comparing those results using {@code this}. For\n",
        "416": "   * example, to compare objects by their string forms, in a case-insensitive\n",
        "417": "   * manner, use: <pre>   {@code\n",
        "419": "   *   Ordering.from(String.CASE_INSENSITIVE_ORDER)\n",
        "420": "   *       .onResultOf(Functions.toStringFunction())}</pre>\n",
        "432": "   * Returns an ordering which first uses the ordering {@code this}, but which\n",
        "433": "   * in the event of a \"tie\", then delegates to {@code secondaryComparator}.\n",
        "434": "   * For example, to sort a bug list first by status and second by priority, you\n",
        "435": "   * might use {@code byStatus.compound(byPriority)}. For a compound ordering\n",
        "436": "   * with three or more components, simply chain multiple calls to this method.\n",
        "438": "   * <p>An ordering produced by this method, or a chain of calls to this method,\n",
        "439": "   * is equivalent to one created using {@link Ordering#compound(Iterable)} on\n",
        "440": "   * the same component comparators.\n",
        "448": "   * Returns an ordering which tries each given comparator in order until a\n",
        "449": "   * non-zero result is found, returning that result, and returning zero only if\n",
        "450": "   * all comparators return zero. The returned ordering is based on the state of\n",
        "451": "   * the {@code comparators} iterable at the time it was provided to this\n",
        "452": "   * method.\n",
        "457": "   * <p><b>Warning:</b> Supplying an argument with undefined iteration order,\n",
        "458": "   * such as a {@link HashSet}, will produce non-deterministic results.\n",
        "468": "   * Returns a new ordering which sorts iterables by comparing corresponding\n",
        "469": "   * elements pairwise until a nonzero result is found; imposes \"dictionary\n",
        "470": "   * order\". If the end of one iterable is reached, but not the other, the\n",
        "471": "   * shorter iterable is considered to be less than the longer one. For example,\n",
        "472": "   * a lexicographical natural ordering over integers considers {@code\n",
        "473": "   * [] < [1] < [1, 1] < [1, 2] < [2]}.\n",
        "475": "   * <p>Note that {@code ordering.lexicographical().reverse()} is not\n",
        "476": "   * equivalent to {@code ordering.reverse().lexicographical()} (consider how\n",
        "477": "   * each would order {@code [1]} and {@code [1, 1]}).\n",
        "504": "   * Returns the least of the specified values according to this ordering. If\n",
        "505": "   * there are multiple least values, the first of those is returned. The\n",
        "506": "   * iterator will be left exhausted: its {@code hasNext()} method will return\n",
        "507": "   * {@code false}.\n",
        "511": "   * @throws ClassCastException if the parameters are not <i>mutually\n",
        "512": "   *     comparable</i> under this ordering.\n",
        "513": "   *\n",
        "529": "   * Returns the least of the specified values according to this ordering. If\n",
        "530": "   * there are multiple least values, the first of those is returned.\n",
        "534": "   * @throws ClassCastException if the parameters are not <i>mutually\n",
        "535": "   *     comparable</i> under this ordering.\n",
        "543": "   * Returns the lesser of the two values according to this ordering. If the\n",
        "544": "   * values compare as 0, the first is returned.\n",
        "546": "   * <p><b>Implementation note:</b> this method is invoked by the default\n",
        "547": "   * implementations of the other {@code min} overloads, so overriding it will\n",
        "548": "   * affect their behavior.\n",
        "552": "   * @throws ClassCastException if the parameters are not <i>mutually\n",
        "553": "   *     comparable</i> under this ordering.\n",
        "561": "   * Returns the least of the specified values according to this ordering. If\n",
        "562": "   * there are multiple least values, the first of those is returned.\n",
        "568": "   * @throws ClassCastException if the parameters are not <i>mutually\n",
        "569": "   *     comparable</i> under this ordering.\n",
        "583": "   * Returns the greatest of the specified values according to this ordering. If\n",
        "584": "   * there are multiple greatest values, the first of those is returned. The\n",
        "585": "   * iterator will be left exhausted: its {@code hasNext()} method will return\n",
        "586": "   * {@code false}.\n",
        "590": "   * @throws ClassCastException if the parameters are not <i>mutually\n",
        "591": "   *     comparable</i> under this ordering.\n",
        "592": "   *\n",
        "662": "   * Returns the {@code k} least elements of the given iterable according to\n",
        "663": "   * this ordering, in order from least to greatest.  If there are fewer than\n",
        "664": "   * {@code k} elements present, all will be included.\n",
        "666": "   * <p>The implementation does not necessarily use a <i>stable</i> sorting\n",
        "667": "   * algorithm; when multiple elements are equivalent, it is undefined which\n",
        "668": "   * will come first.\n",
        "670": "   * @return an immutable {@code RandomAccess} list of the {@code k} least\n",
        "671": "   *     elements in ascending order\n",
        "696": "   * Returns the {@code k} least elements from the given iterator according to\n",
        "697": "   * this ordering, in order from least to greatest.  If there are fewer than\n",
        "698": "   * {@code k} elements present, all will be included.\n",
        "700": "   * <p>The implementation does not necessarily use a <i>stable</i> sorting\n",
        "701": "   * algorithm; when multiple elements are equivalent, it is undefined which\n",
        "702": "   * will come first.\n",
        "704": "   * @return an immutable {@code RandomAccess} list of the {@code k} least\n",
        "705": "   *     elements in ascending order\n",
        "709": "  public <E extends T> List<E> leastOf(Iterator<E> elements, int k) {\n",
        "710": "    checkNotNull(elements);\n",
        "713": "    if (k == 0 || !elements.hasNext()) {\n",
        "717": "      ArrayList<E> list = Lists.newArrayList(elements);\n",
        "726": "      selector.offerAll(elements);\n",
        "732": "   * Returns the {@code k} greatest elements of the given iterable according to\n",
        "733": "   * this ordering, in order from greatest to least. If there are fewer than\n",
        "734": "   * {@code k} elements present, all will be included.\n",
        "736": "   * <p>The implementation does not necessarily use a <i>stable</i> sorting\n",
        "737": "   * algorithm; when multiple elements are equivalent, it is undefined which\n",
        "738": "   * will come first.\n",
        "740": "   * @return an immutable {@code RandomAccess} list of the {@code k} greatest\n",
        "741": "   *     elements in <i>descending order</i>\n",
        "752": "   * Returns the {@code k} greatest elements from the given iterator according to\n",
        "753": "   * this ordering, in order from greatest to least. If there are fewer than\n",
        "754": "   * {@code k} elements present, all will be included.\n",
        "756": "   * <p>The implementation does not necessarily use a <i>stable</i> sorting\n",
        "757": "   * algorithm; when multiple elements are equivalent, it is undefined which\n",
        "758": "   * will come first.\n",
        "760": "   * @return an immutable {@code RandomAccess} list of the {@code k} greatest\n",
        "761": "   *     elements in <i>descending order</i>\n",
        "770": "   * Returns a <b>mutable</b> list containing {@code elements} sorted by this\n",
        "771": "   * ordering; use this only when the resulting list may need further\n",
        "772": "   * modification, or may contain {@code null}. The input is not modified. The\n",
        "773": "   * returned list is serializable and has random access.\n",
        "775": "   * <p>Unlike {@link Sets#newTreeSet(Iterable)}, this method does not discard\n",
        "776": "   * elements that are duplicates according to the comparator. The sort\n",
        "777": "   * performed is <i>stable</i>, meaning that such elements will appear in the\n",
        "778": "   * returned list in the same order they appeared in {@code elements}.\n",
        "782": "   * on Open JDK 7, {@link #immutableSortedCopy} generally performs better (in\n",
        "783": "   * both time and space) than this method, and this method in turn generally\n",
        "784": "   * performs better than copying the list and calling {@link\n",
        "785": "   * Collections#sort(List)}.\n",
        "796": "   * Returns an <b>immutable</b> list containing {@code elements} sorted by this\n",
        "797": "   * ordering. The input is not modified.\n",
        "799": "   * <p>Unlike {@link Sets#newTreeSet(Iterable)}, this method does not discard\n",
        "800": "   * elements that are duplicates according to the comparator. The sort\n",
        "801": "   * performed is <i>stable</i>, meaning that such elements will appear in the\n",
        "802": "   * returned list in the same order they appeared in {@code elements}.\n",
        "806": "   * on Open JDK 7, this method is the most efficient way to make a sorted copy\n",
        "807": "   * of a collection.\n",
        "809": "   * @throws NullPointerException if any of {@code elements} (or {@code\n",
        "810": "   *     elements} itself) is null\n",
        "825": "   * Returns {@code true} if each element in {@code iterable} after the first is\n",
        "826": "   * greater than or equal to the element that preceded it, according to this\n",
        "827": "   * ordering. Note that this is always true when the iterable has fewer than\n",
        "828": "   * two elements.\n",
        "846": "   * Returns {@code true} if each element in {@code iterable} after the first is\n",
        "847": "   * <i>strictly</i> greater than the element that preceded it, according to\n",
        "848": "   * this ordering. Note that this is always true when the iterable has fewer\n",
        "849": "   * than two elements.\n",
        "887": "  // TODO(kevinb): make this public, document it right\n"
    }
}