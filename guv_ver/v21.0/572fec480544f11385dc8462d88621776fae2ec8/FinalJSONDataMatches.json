[{"func":{"oldfunccode":"","newfunccode":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_newfunccode_572fec480544f11385dc8462d88621776fae2ec8_1.txt","newdoc":" k is really large; just do a straightforward sorted-copy-and-sublist\n","newJdoc":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_newfuncnewJdoc_572fec480544f11385dc8462d88621776fae2ec8_1.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/572fec480544f11385dc8462d88621776fae2ec8/Ordering","pathinproj":"guava/src/com/google/common/collect/Ordering.java","addlines":[771,772,788,775,779],"dellines":[],"addcode":["  public <E extends T> List<E> leastOf(Iterator<E> iterator, int k) {\n","    checkNotNull(iterator);\n","    if (k == 0 || !iterator.hasNext()) {\n","      ArrayList<E> list = Lists.newArrayList(iterator);\n","      selector.offerAll(iterator);\n"],"delcode":[],"methodSig":"public List<E> leastOf(Iterator<E> iterator, int k)"},"doc":{"oldfunccode":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_olddocfunccode_572fec480544f11385dc8462d88621776fae2ec8_1.txt","newfunccode":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_newdocfunccode_572fec480544f11385dc8462d88621776fae2ec8_1.txt","newdoc":" TODO(kevinb): right way to explain this??\n","newJdoc":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_newdocnewJdoc_572fec480544f11385dc8462d88621776fae2ec8_1.txt","olddoc":" TODO(kevinb): right way to explain this??\n","oldJdoc":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_olddocJdoc_572fec480544f11385dc8462d88621776fae2ec8_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/572fec480544f11385dc8462d88621776fae2ec8/Ordering","pathinproj":"guava/src/com/google/common/collect/Ordering.java","addlines":[150,151,153,154,155,156],"dellines":[144,138,139,140,142,143],"addcode":["   * Returns a serializable ordering that uses the natural order of the values. The ordering throws\n","   * a {@link NullPointerException} when passed a null parameter.\n","   * <p>The type specification is {@code <C extends Comparable>}, instead of the technically correct\n","   * {@code <C extends Comparable<? super C>>}, to support legacy types from before Java 5.\n","   *\n","   * <p><b>Java 8 users:</b> use {@link Comparator#naturalOrder} instead.\n"],"delcode":["   * Returns a serializable ordering that uses the natural order of the values.\n","   * The ordering throws a {@link NullPointerException} when passed a null\n","   * parameter.\n","   * <p>The type specification is {@code <C extends Comparable>}, instead of\n","   * the technically correct {@code <C extends Comparable<? super C>>}, to\n","   * support legacy types from before Java 5.\n"],"methodSig":"public static Ordering<C> natural()"},"id":3,"flag":1,"commit":"572fec480544f11385dc8462d88621776fae2ec8"},{"func":{"oldfunccode":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_oldfunccode_572fec480544f11385dc8462d88621776fae2ec8_2.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" k is really large; just do a straightforward sorted-copy-and-sublist\n","oldJdoc":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_oldfuncoldJdoc_572fec480544f11385dc8462d88621776fae2ec8_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/572fec480544f11385dc8462d88621776fae2ec8/Ordering","pathinproj":"guava/src/com/google/common/collect/Ordering.java","addlines":[],"dellines":[709,710,726,713,717],"addcode":[],"delcode":["  public <E extends T> List<E> leastOf(Iterator<E> elements, int k) {\n","    checkNotNull(elements);\n","    if (k == 0 || !elements.hasNext()) {\n","      ArrayList<E> list = Lists.newArrayList(elements);\n","      selector.offerAll(elements);\n"],"methodSig":"public List<E> leastOf(Iterator<E> elements, int k)"},"doc":{"oldfunccode":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_olddocfunccode_572fec480544f11385dc8462d88621776fae2ec8_2.txt","newfunccode":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_newdocfunccode_572fec480544f11385dc8462d88621776fae2ec8_2.txt","newdoc":" TODO(kevinb): right way to explain this??\n TODO(kevinb): right way to explain this??\n","newJdoc":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_newdocnewJdoc_572fec480544f11385dc8462d88621776fae2ec8_2.txt","olddoc":" TODO(kevinb): right way to explain this??\n TODO(kevinb): right way to explain this??\n","oldJdoc":"572fec480544f11385dc8462d88621776fae2ec8/Codes/Match_olddocJdoc_572fec480544f11385dc8462d88621776fae2ec8_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/572fec480544f11385dc8462d88621776fae2ec8/Ordering","pathinproj":"guava/src/com/google/common/collect/Ordering.java","addlines":[150,151,153,154,155,156],"dellines":[144,138,139,140,142,143],"addcode":["   * Returns a serializable ordering that uses the natural order of the values. The ordering throws\n","   * a {@link NullPointerException} when passed a null parameter.\n","   * <p>The type specification is {@code <C extends Comparable>}, instead of the technically correct\n","   * {@code <C extends Comparable<? super C>>}, to support legacy types from before Java 5.\n","   *\n","   * <p><b>Java 8 users:</b> use {@link Comparator#naturalOrder} instead.\n"],"delcode":["   * Returns a serializable ordering that uses the natural order of the values.\n","   * The ordering throws a {@link NullPointerException} when passed a null\n","   * parameter.\n","   * <p>The type specification is {@code <C extends Comparable>}, instead of\n","   * the technically correct {@code <C extends Comparable<? super C>>}, to\n","   * support legacy types from before Java 5.\n"],"methodSig":"public static Ordering<C> natural()"},"id":3,"flag":1,"commit":"572fec480544f11385dc8462d88621776fae2ec8"}]