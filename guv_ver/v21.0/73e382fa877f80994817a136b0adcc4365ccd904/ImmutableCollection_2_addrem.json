{
    "addition": {
        "32": "import java.util.Spliterator;\n",
        "33": "import java.util.Spliterators;\n",
        "34": "import java.util.function.Predicate;\n",
        "158": "  /*\n",
        "159": "   * We expect SIZED (and SUBSIZED, if applicable) to be added by the spliterator factory methods.\n",
        "160": "   * These are properties of the collection as a whole; SIZED and SUBSIZED are more properties of\n",
        "161": "   * the spliterator implementation.\n",
        "162": "   */\n",
        "163": "  static final int SPLITERATOR_CHARACTERISTICS =\n",
        "164": "      Spliterator.IMMUTABLE | Spliterator.NONNULL | Spliterator.ORDERED;\n",
        "174": "  @Override\n",
        "175": "  public Spliterator<E> spliterator() {\n",
        "176": "    return Spliterators.spliterator(this, SPLITERATOR_CHARACTERISTICS);\n",
        "177": "  }\n",
        "178": "\n",
        "268": "  public final boolean removeIf(Predicate<? super E> filter) {\n",
        "269": "    throw new UnsupportedOperationException();\n",
        "270": "  }\n",
        "271": "\n",
        "272": "  /**\n",
        "273": "   * Guaranteed to throw an exception and leave the collection unmodified.\n",
        "274": "   *\n",
        "275": "   * @throws UnsupportedOperationException always\n",
        "276": "   * @deprecated Unsupported operation.\n",
        "277": "   */\n",
        "278": "  @Deprecated\n",
        "279": "  @Override\n",
        "502": "\n",
        "503": "    @CanIgnoreReturnValue\n",
        "504": "    ArrayBasedBuilder<E> combine(ArrayBasedBuilder<E> builder) {\n",
        "505": "      checkNotNull(builder);\n",
        "506": "      ensureCapacity(size + builder.size);\n",
        "507": "      System.arraycopy(builder.contents, 0, this.contents, size, builder.size);\n",
        "508": "      size += builder.size;\n",
        "509": "      return this;\n",
        "510": "    }\n"
    },
    "removed": {}
}