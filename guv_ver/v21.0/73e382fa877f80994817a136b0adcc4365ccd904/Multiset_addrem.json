{
    "addition": {
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.Beta;\n",
        "29": "import java.util.Spliterator;\n",
        "30": "import java.util.function.Consumer;\n",
        "31": "import java.util.function.ObjIntConsumer;\n",
        "302": "  /**\n",
        "303": "   * Runs the specified action for each distinct element in this multiset, and the number of\n",
        "304": "   * occurrences of that element. For some {@code Multiset} implementations, this may be more\n",
        "305": "   * efficient than iterating over the {@link #entrySet()} either explicitly or with {@code\n",
        "306": "   * entrySet().forEach(action)}.\n",
        "307": "   *\n",
        "308": "   * @since 21.0\n",
        "309": "   */\n",
        "310": "  @Beta\n",
        "311": "  default void forEachEntry(ObjIntConsumer<? super E> action) {\n",
        "312": "    checkNotNull(action);\n",
        "313": "    entrySet().forEach(entry -> action.accept(entry.getElement(), entry.getCount()));\n",
        "314": "  }\n",
        "315": "\n",
        "319": "   * Compares the specified object with this multiset for equality. Returns {@code true} if the\n",
        "320": "   * given object is also a multiset and contains equal elements with equal counts, regardless of\n",
        "321": "   * order.\n",
        "473": "\n",
        "474": "  /**\n",
        "475": "   * {@inheritDoc}\n",
        "476": "   *\n",
        "477": "   * <p>Elements that occur multiple times in the multiset will be passed to the {@code Consumer}\n",
        "478": "   * correspondingly many times, though not necessarily sequentially.\n",
        "479": "   */\n",
        "480": "  @Override\n",
        "481": "  default void forEach(Consumer<? super E> action) {\n",
        "482": "    checkNotNull(action);\n",
        "483": "    entrySet()\n",
        "484": "        .forEach(\n",
        "485": "            entry -> {\n",
        "486": "              E elem = entry.getElement();\n",
        "487": "              int count = entry.getCount();\n",
        "488": "              for (int i = 0; i < count; i++) {\n",
        "489": "                action.accept(elem);\n",
        "490": "              }\n",
        "491": "            });\n",
        "492": "  }\n",
        "493": "\n",
        "494": "  @Override\n",
        "495": "  default Spliterator<E> spliterator() {\n",
        "496": "    return Multisets.spliteratorImpl(this);\n",
        "497": "  }\n"
    },
    "removed": {
        "299": "   * Compares the specified object with this multiset for equality. Returns\n",
        "300": "   * {@code true} if the given object is also a multiset and contains equal\n",
        "301": "   * elements with equal counts, regardless of order.\n"
    }
}