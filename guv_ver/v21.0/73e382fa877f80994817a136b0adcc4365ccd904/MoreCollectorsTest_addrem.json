{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "import static com.google.common.truth.Truth8.assertThat;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import java.util.NoSuchElementException;\n",
        "24": "import java.util.stream.Stream;\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * Tests for {@code MoreCollectors}.\n",
        "29": " *\n",
        "30": " * @author Louis Wasserman\n",
        "31": " */\n",
        "32": "@GwtCompatible\n",
        "33": "public class MoreCollectorsTest extends TestCase {\n",
        "34": "  public void testToOptionalEmpty() {\n",
        "35": "    assertThat(Stream.empty().collect(MoreCollectors.toOptional())).isEmpty();\n",
        "36": "  }\n",
        "37": "\n",
        "38": "  public void testToOptionalSingleton() {\n",
        "39": "    assertThat(Stream.of(1).collect(MoreCollectors.toOptional())).hasValue(1);\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  public void testToOptionalNull() {\n",
        "43": "    Stream<Object> stream = Stream.of((Object) null);\n",
        "44": "    try {\n",
        "45": "      stream.collect(MoreCollectors.toOptional());\n",
        "46": "      fail(\"Expected NullPointerException\");\n",
        "47": "    } catch (NullPointerException expected) {\n",
        "48": "    }\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  public void testToOptionalMultiple() {\n",
        "52": "    try {\n",
        "53": "      Stream.of(1, 2).collect(MoreCollectors.toOptional());\n",
        "54": "      fail(\"Expected IllegalArgumentException\");\n",
        "55": "    } catch (IllegalArgumentException expected) {\n",
        "56": "      assertThat(expected.getMessage()).contains(\"1, 2\");\n",
        "57": "    }\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  public void testToOptionalMany() {\n",
        "61": "    try {\n",
        "62": "      Stream.of(1, 2, 3, 4, 5, 6).collect(MoreCollectors.toOptional());\n",
        "63": "      fail(\"Expected IllegalArgumentException\");\n",
        "64": "    } catch (IllegalArgumentException expected) {\n",
        "65": "      assertThat(expected.getMessage()).contains(\"1, 2, 3, 4, 5, ...\");\n",
        "66": "    }\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  public void testOnlyElement() {\n",
        "70": "    try {\n",
        "71": "      Stream.empty().collect(MoreCollectors.onlyElement());\n",
        "72": "      fail(\"Expected NoSuchElementException\");\n",
        "73": "    } catch (NoSuchElementException expected) {\n",
        "74": "    }\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  public void testOnlyElementSingleton() {\n",
        "78": "    assertThat(Stream.of(1).collect(MoreCollectors.onlyElement())).isEqualTo(1);\n",
        "79": "  }\n",
        "80": "\n",
        "81": "  public void testOnlyElementNull() {\n",
        "82": "    assertThat(Stream.of((Object) null).collect(MoreCollectors.onlyElement())).isNull();\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  public void testOnlyElementMultiple() {\n",
        "86": "    try {\n",
        "87": "      Stream.of(1, 2).collect(MoreCollectors.onlyElement());\n",
        "88": "      fail(\"Expected IllegalArgumentException\");\n",
        "89": "    } catch (IllegalArgumentException expected) {\n",
        "90": "      assertThat(expected.getMessage()).contains(\"1, 2\");\n",
        "91": "    }\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  public void testOnlyElementMany() {\n",
        "95": "    try {\n",
        "96": "      Stream.of(1, 2, 3, 4, 5, 6).collect(MoreCollectors.onlyElement());\n",
        "97": "      fail(\"Expected IllegalArgumentException\");\n",
        "98": "    } catch (IllegalArgumentException expected) {\n",
        "99": "      assertThat(expected.getMessage()).contains(\"1, 2, 3, 4, 5, ...\");\n",
        "100": "    }\n",
        "101": "  }\n",
        "102": "}\n"
    },
    "removed": {}
}