{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "20": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n",
        "22": "import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "26": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "27": "import com.google.common.collect.testing.features.MapFeature;\n",
        "28": "import java.util.Map;\n",
        "29": "import java.util.Map.Entry;\n",
        "30": "import junit.framework.AssertionFailedError;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * A generic JUnit test which tests {@link Map#computeIfPresent}. Can't be\n",
        "34": " * invoked directly; please see\n",
        "35": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "36": " *\n",
        "37": " * @author Louis Wasserman\n",
        "38": " */\n",
        "39": "@GwtCompatible\n",
        "40": "public class MapComputeIfPresentTester<K, V> extends AbstractMapTester<K, V> {\n",
        "41": "\n",
        "42": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "43": "  public void testComputeIfPresent_supportedAbsent() {\n",
        "44": "    assertNull(\n",
        "45": "        \"computeIfPresent(notPresent, function) should return null\",\n",
        "46": "        getMap()\n",
        "47": "            .computeIfPresent(\n",
        "48": "                k3(),\n",
        "49": "                (k, v) -> {\n",
        "50": "                  throw new AssertionFailedError();\n",
        "51": "                }));\n",
        "52": "    expectUnchanged();\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "56": "  @CollectionSize.Require(absent = ZERO)\n",
        "57": "  public void testComputeIfPresent_supportedPresent() {\n",
        "58": "    assertEquals(\n",
        "59": "        \"computeIfPresent(present, function) should return new value\",\n",
        "60": "        v3(),\n",
        "61": "        getMap()\n",
        "62": "            .computeIfPresent(\n",
        "63": "                k0(),\n",
        "64": "                (k, v) -> {\n",
        "65": "                  assertEquals(k0(), k);\n",
        "66": "                  assertEquals(v0(), v);\n",
        "67": "                  return v3();\n",
        "68": "                }));\n",
        "69": "    expectReplacement(entry(k0(), v3()));\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "73": "  @CollectionSize.Require(absent = ZERO)\n",
        "74": "  public void testComputeIfPresent_functionReturnsNull() {\n",
        "75": "    assertNull(\n",
        "76": "        \"computeIfPresent(present, returnsNull) should return null\",\n",
        "77": "        getMap()\n",
        "78": "            .computeIfPresent(\n",
        "79": "                k0(),\n",
        "80": "                (k, v) -> {\n",
        "81": "                  assertEquals(k0(), k);\n",
        "82": "                  assertEquals(v0(), v);\n",
        "83": "                  return null;\n",
        "84": "                }));\n",
        "85": "    expectMissing(e0());\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})\n",
        "89": "  @CollectionSize.Require(absent = ZERO)\n",
        "90": "  public void testComputeIfPresent_nullTreatedAsAbsent() {\n",
        "91": "    initMapWithNullValue();\n",
        "92": "    assertNull(\n",
        "93": "        \"computeIfPresent(presentAssignedToNull, function) should return null\",\n",
        "94": "        getMap()\n",
        "95": "            .computeIfPresent(\n",
        "96": "                getKeyForNullValue(),\n",
        "97": "                (k, v) -> {\n",
        "98": "                  throw new AssertionFailedError();\n",
        "99": "                }));\n",
        "100": "    expectReplacement(entry(getKeyForNullValue(), null));\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  static class ExpectedException extends RuntimeException {}\n",
        "104": "\n",
        "105": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "106": "  @CollectionSize.Require(absent = ZERO)\n",
        "107": "  public void testComputeIfPresent_functionThrows() {\n",
        "108": "    try {\n",
        "109": "      getMap()\n",
        "110": "          .computeIfPresent(\n",
        "111": "              k0(),\n",
        "112": "              (k, v) -> {\n",
        "113": "                assertEquals(k0(), k);\n",
        "114": "                assertEquals(v0(), v);\n",
        "115": "                throw new ExpectedException();\n",
        "116": "              });\n",
        "117": "      fail(\"Expected ExpectedException\");\n",
        "118": "    } catch (ExpectedException expected) {\n",
        "119": "    }\n",
        "120": "    expectUnchanged();\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_KEYS})\n",
        "124": "  @CollectionSize.Require(absent = ZERO)\n",
        "125": "  public void testComputeIfPresent_nullKeySupportedPresent() {\n",
        "126": "    initMapWithNullKey();\n",
        "127": "    assertEquals(\n",
        "128": "        \"computeIfPresent(null, function) should return new value\",\n",
        "129": "        v3(),\n",
        "130": "        getMap()\n",
        "131": "            .computeIfPresent(\n",
        "132": "                null,\n",
        "133": "                (k, v) -> {\n",
        "134": "                  assertNull(k);\n",
        "135": "                  assertEquals(getValueForNullKey(), v);\n",
        "136": "                  return v3();\n",
        "137": "                }));\n",
        "138": "\n",
        "139": "    Entry<K, V>[] expected = createArrayWithNullKey();\n",
        "140": "    expected[getNullLocation()] = entry(null, v3());\n",
        "141": "    expectContents(expected);\n",
        "142": "  }\n",
        "143": "\n",
        "144": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_KEYS})\n",
        "145": "  public void testComputeIfPresent_nullKeySupportedAbsent() {\n",
        "146": "    assertNull(\n",
        "147": "        \"computeIfPresent(null, function) should return null\",\n",
        "148": "        getMap()\n",
        "149": "            .computeIfPresent(\n",
        "150": "                null,\n",
        "151": "                (k, v) -> {\n",
        "152": "                  throw new AssertionFailedError();\n",
        "153": "                }));\n",
        "154": "    expectUnchanged();\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "158": "  public void testComputeIfPresent_unsupportedAbsent() {\n",
        "159": "    try {\n",
        "160": "      getMap()\n",
        "161": "          .computeIfPresent(\n",
        "162": "              k3(),\n",
        "163": "              (k, v) -> {\n",
        "164": "                throw new AssertionFailedError();\n",
        "165": "              });\n",
        "166": "    } catch (UnsupportedOperationException tolerated) {\n",
        "167": "    }\n",
        "168": "    expectUnchanged();\n",
        "169": "  }\n",
        "170": "\n",
        "171": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "172": "  @CollectionSize.Require(absent = ZERO)\n",
        "173": "  public void testComputeIfPresent_unsupportedPresent() {\n",
        "174": "    try {\n",
        "175": "      getMap().computeIfPresent(k0(), (k, v) -> v3());\n",
        "176": "      fail(\"Expected UnsupportedOperationException\");\n",
        "177": "    } catch (UnsupportedOperationException expected) {\n",
        "178": "    }\n",
        "179": "    expectUnchanged();\n",
        "180": "  }\n",
        "181": "}\n"
    },
    "removed": {}
}