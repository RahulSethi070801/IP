{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.Beta;\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import java.util.ArrayList;\n",
        "24": "import java.util.List;\n",
        "25": "import java.util.NoSuchElementException;\n",
        "26": "import java.util.Optional;\n",
        "27": "import java.util.stream.Collector;\n",
        "28": "import javax.annotation.Nullable;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Collectors not present in {@code java.util.stream.Collectors} that are not otherwise associated\n",
        "32": " * with a {@code com.google.common} type.\n",
        "33": " *\n",
        "34": " * @author Louis Wasserman\n",
        "35": " * @since 21.0\n",
        "36": " */\n",
        "37": "@Beta\n",
        "38": "@GwtCompatible\n",
        "39": "public final class MoreCollectors {\n",
        "40": "\n",
        "41": "  /*\n",
        "42": "   * TODO(lowasser): figure out if we can convert this to a concurrent AtomicReference-based\n",
        "43": "   * collector without breaking j2cl?\n",
        "44": "   */\n",
        "45": "  private static final Collector<Object, ?, Optional<Object>> TO_OPTIONAL =\n",
        "46": "      Collector.of(\n",
        "47": "          ToOptionalState::new,\n",
        "48": "          ToOptionalState::add,\n",
        "49": "          ToOptionalState::combine,\n",
        "50": "          ToOptionalState::getOptional,\n",
        "51": "          Collector.Characteristics.UNORDERED);\n",
        "52": "\n",
        "53": "  /**\n",
        "54": "   * A collector that converts a stream of zero or one elements to an {@code Optional}. The returned\n",
        "55": "   * collector throws an {@code IllegalArgumentException} if the stream consists of two or more\n",
        "56": "   * elements, and a {@code NullPointerException} if the stream consists of exactly one element,\n",
        "57": "   * which is null.\n",
        "58": "   */\n",
        "59": "  @SuppressWarnings(\"unchecked\")\n",
        "60": "  public static <T> Collector<T, ?, Optional<T>> toOptional() {\n",
        "61": "    return (Collector) TO_OPTIONAL;\n",
        "62": "  }\n",
        "63": "  \n",
        "64": "  private static final Object NULL_PLACEHOLDER = new Object();\n",
        "65": "\n",
        "66": "  private static final Collector<Object, ?, Object> ONLY_ELEMENT =\n",
        "67": "      Collector.of(\n",
        "68": "          ToOptionalState::new,\n",
        "69": "          (state, o) -> state.add((o == null) ? NULL_PLACEHOLDER : o),\n",
        "70": "          ToOptionalState::combine,\n",
        "71": "          state -> {\n",
        "72": "            Object result = state.getElement();\n",
        "73": "            return (result == NULL_PLACEHOLDER) ? null : result;\n",
        "74": "          },\n",
        "75": "          Collector.Characteristics.UNORDERED);\n",
        "76": "\n",
        "77": "  /**\n",
        "78": "   * A collector that takes a stream containing exactly one element and returns that element. The\n",
        "79": "   * returned collector throws an {@code IllegalArgumentException} if the stream consists of two or\n",
        "80": "   * more elements, and a {@code NoSuchElementException} if the stream is empty.\n",
        "81": "   */\n",
        "82": "  @SuppressWarnings(\"unchecked\")\n",
        "83": "  public static <T> Collector<T, ?, T> onlyElement() {\n",
        "84": "    return (Collector) ONLY_ELEMENT;\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  /**\n",
        "88": "   * This atrocity is here to let us report several of the elements in the stream if there were more\n",
        "89": "   * than one, not just two.\n",
        "90": "   */\n",
        "91": "  private static final class ToOptionalState {\n",
        "92": "    static final int MAX_EXTRAS = 4;\n",
        "93": "\n",
        "94": "    @Nullable Object element;\n",
        "95": "    @Nullable List<Object> extras;\n",
        "96": "\n",
        "97": "    ToOptionalState() {\n",
        "98": "      element = null;\n",
        "99": "      extras = null;\n",
        "100": "    }\n",
        "101": "\n",
        "102": "    IllegalArgumentException multiples(boolean overflow) {\n",
        "103": "      StringBuilder sb =\n",
        "104": "          new StringBuilder().append(\"expected one element but was: <\").append(element);\n",
        "105": "      for (Object o : extras) {\n",
        "106": "        sb.append(\", \").append(o);\n",
        "107": "      }\n",
        "108": "      if (overflow) {\n",
        "109": "        sb.append(\", ...\");\n",
        "110": "      }\n",
        "111": "      sb.append('>');\n",
        "112": "      throw new IllegalArgumentException(sb.toString());\n",
        "113": "    }\n",
        "114": "\n",
        "115": "    void add(Object o) {\n",
        "116": "      checkNotNull(o);\n",
        "117": "      if (element == null) {\n",
        "118": "        this.element = o;\n",
        "119": "      } else if (extras == null) {\n",
        "120": "        extras = new ArrayList<>(MAX_EXTRAS);\n",
        "121": "        extras.add(o);\n",
        "122": "      } else if (extras.size() < MAX_EXTRAS) {\n",
        "123": "        extras.add(o);\n",
        "124": "      } else {\n",
        "125": "        throw multiples(true);\n",
        "126": "      }\n",
        "127": "    }\n",
        "128": "\n",
        "129": "    ToOptionalState combine(ToOptionalState other) {\n",
        "130": "      if (element == null) {\n",
        "131": "        return other;\n",
        "132": "      } else if (other.element == null) {\n",
        "133": "        return this;\n",
        "134": "      } else {\n",
        "135": "        if (extras == null) {\n",
        "136": "          extras = new ArrayList<>();\n",
        "137": "        }\n",
        "138": "        extras.add(other.element);\n",
        "139": "        if (other.extras != null) {\n",
        "140": "          this.extras.addAll(other.extras);\n",
        "141": "        }\n",
        "142": "        if (extras.size() > MAX_EXTRAS) {\n",
        "143": "          extras.subList(MAX_EXTRAS, extras.size()).clear();\n",
        "144": "          throw multiples(true);\n",
        "145": "        }\n",
        "146": "        return this;\n",
        "147": "      }\n",
        "148": "    }\n",
        "149": "\n",
        "150": "    Optional<Object> getOptional() {\n",
        "151": "      if (extras == null) {\n",
        "152": "        return Optional.ofNullable(element);\n",
        "153": "      } else {\n",
        "154": "        throw multiples(false);\n",
        "155": "      }\n",
        "156": "    }\n",
        "157": "\n",
        "158": "    Object getElement() {\n",
        "159": "      if (element == null) {\n",
        "160": "        throw new NoSuchElementException();\n",
        "161": "      } else if (extras == null) {\n",
        "162": "        return element;\n",
        "163": "      } else {\n",
        "164": "        throw multiples(false);\n",
        "165": "      }\n",
        "166": "    }\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  private MoreCollectors() {}\n",
        "170": "}\n"
    },
    "removed": {}
}