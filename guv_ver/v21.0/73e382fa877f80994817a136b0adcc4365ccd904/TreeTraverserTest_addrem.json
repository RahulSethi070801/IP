{
    "addition": {
        "36": "  private static class Node {\n",
        "38": "\n",
        "39": "    Node(char value) {\n",
        "40": "      this.value = value;\n",
        "41": "    }\n",
        "42": "  }\n",
        "43": "\n",
        "44": "  private static final class Tree extends Node {\n",
        "48": "      super(value);\n",
        "53": "  private static final class BinaryTree extends Node {\n",
        "54": "    @Nullable final BinaryTree left;\n",
        "59": "      super(value);\n",
        "126": "  static String iterationOrder(Iterable<? extends Node> iterable) {\n",
        "128": "    for (Node t : iterable) {\n",
        "131": "    StringBuilder forEachBuilder = new StringBuilder();\n",
        "132": "    iterable.forEach(t -> forEachBuilder.append(t.value));\n",
        "133": "    assertTrue(\n",
        "134": "        \"Iterator content was \" + builder + \" but forEach content was \" + forEachBuilder,\n",
        "135": "        builder.toString().contentEquals(forEachBuilder));\n",
        "141": "    assertThat(iterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo(\"dbacefg\");\n",
        "146": "    assertThat(iterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo(\"acbgfed\");\n",
        "151": "    assertThat(iterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo(\"dbeacfg\");\n",
        "155": "    assertThat(iterationOrder(BIN_ADAPTER.inOrderTraversal(bd))).isEqualTo(\"abcdegf\");\n"
    },
    "removed": {
        "36": "  private static final class Tree {\n",
        "41": "      this.value = value;\n",
        "46": "  private static final class BinaryTree {\n",
        "47": "    final char value;\n",
        "48": "    @Nullable\n",
        "49": "    final BinaryTree left;\n",
        "54": "      this.value = value;\n",
        "121": "  static String iterationOrder(Iterable<Tree> iterable) {\n",
        "122": "    StringBuilder builder = new StringBuilder();\n",
        "123": "    for (Tree t : iterable) {\n",
        "124": "      builder.append(t.value);\n",
        "125": "    }\n",
        "126": "    return builder.toString();\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  static String binaryIterationOrder(Iterable<BinaryTree> iterable) {\n",
        "131": "    for (BinaryTree t : iterable) {\n",
        "139": "    assertThat(binaryIterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo(\"dbacefg\");\n",
        "144": "    assertThat(binaryIterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo(\"acbgfed\");\n",
        "149": "    assertThat(binaryIterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo(\"dbeacfg\");\n",
        "153": "    assertThat(binaryIterationOrder(BIN_ADAPTER.inOrderTraversal(bd))).isEqualTo(\"abcdegf\");\n"
    }
}