{
    "addition": {
        "25": "import com.google.common.collect.Maps.EntrySet;\n",
        "26": "import com.google.common.collect.Maps.KeySet;\n",
        "46": "import java.util.Spliterator;\n",
        "47": "import java.util.function.BiConsumer;\n",
        "973": "    @Override\n",
        "974": "    public Spliterator<K> spliterator() {\n",
        "975": "      return map().keySet().spliterator();\n",
        "976": "    }\n",
        "977": "\n",
        "1213": "  @Override\n",
        "1214": "  Spliterator<V> valueSpliterator() {\n",
        "1215": "    return CollectSpliterators.flatMap(\n",
        "1216": "        map.values().spliterator(), Collection::spliterator, Spliterator.SIZED, size());\n",
        "1217": "  }\n",
        "1218": "\n",
        "1258": "  @Override\n",
        "1259": "  Spliterator<Entry<K, V>> entrySpliterator() {\n",
        "1260": "    return CollectSpliterators.flatMap(\n",
        "1261": "        map.entrySet().spliterator(),\n",
        "1262": "        keyToValueCollectionEntry -> {\n",
        "1263": "          K key = keyToValueCollectionEntry.getKey();\n",
        "1264": "          Collection<V> valueCollection = keyToValueCollectionEntry.getValue();\n",
        "1265": "          return CollectSpliterators.map(\n",
        "1266": "              valueCollection.spliterator(), (V value) -> Maps.immutableEntry(key, value));\n",
        "1267": "        },\n",
        "1268": "        Spliterator.SIZED,\n",
        "1269": "        size());\n",
        "1270": "  }\n",
        "1271": "\n",
        "1272": "  @Override\n",
        "1273": "  public void forEach(BiConsumer<? super K, ? super V> action) {\n",
        "1274": "    checkNotNull(action);\n",
        "1275": "    map.forEach(\n",
        "1276": "        (key, valueCollection) -> valueCollection.forEach(value -> action.accept(key, value)));\n",
        "1277": "  }\n",
        "1278": "\n",
        "1388": "      @Override\n",
        "1389": "      public Spliterator<Entry<K, Collection<V>>> spliterator() {\n",
        "1390": "        return CollectSpliterators.map(submap.entrySet().spliterator(), AsMap.this::wrapEntry);\n",
        "1391": "      }\n",
        "1392": "\n"
    },
    "removed": {}
}