{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.testing;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "import static junit.framework.Assert.assertTrue;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.Beta;\n",
        "23": "import com.google.common.annotations.GwtCompatible;\n",
        "24": "import java.util.ArrayList;\n",
        "25": "import java.util.Arrays;\n",
        "26": "import java.util.Collections;\n",
        "27": "import java.util.EnumSet;\n",
        "28": "import java.util.List;\n",
        "29": "import java.util.Objects;\n",
        "30": "import java.util.function.BiPredicate;\n",
        "31": "import java.util.stream.Collector;\n",
        "32": "import javax.annotation.Nullable;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * Tester for {@code Collector} implementations.\n",
        "36": " *\n",
        "37": " * <p>Example usage:\n",
        "38": " * <pre>\n",
        "39": " * CollectorTester.of(Collectors.summingInt(Integer::parseInt))\n",
        "40": " *     .expectCollects(3, \"1\", \"2\")\n",
        "41": " *     .expectCollects(10, \"1\", \"4\", \"3\", \"2\")\n",
        "42": " *     .expectCollects(5, \"-3\", \"0\", \"8\");\n",
        "43": " * </pre>\n",
        "44": " *\n",
        "45": " * @author Louis Wasserman\n",
        "46": " * @since 21.0\n",
        "47": " */\n",
        "48": "@Beta\n",
        "49": "@GwtCompatible\n",
        "50": "public final class CollectorTester<T, A, R> {\n",
        "51": "  /**\n",
        "52": "   * Creates a {@code CollectorTester} for the specified {@code Collector}. The result of the {@code\n",
        "53": "   * Collector} will be compared to the expected value using {@link Object.equals}.\n",
        "54": "   */\n",
        "55": "  public static <T, A, R> CollectorTester<T, A, R> of(Collector<T, A, R> collector) {\n",
        "56": "    return of(collector, Objects::equals);\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  /**\n",
        "60": "   * Creates a {@code CollectorTester} for the specified {@code Collector}. The result of the {@code\n",
        "61": "   * Collector} will be compared to the expected value using the specified {@code equivalence}.\n",
        "62": "   */\n",
        "63": "  public static <T, A, R> CollectorTester<T, A, R> of(Collector<T, A, R> collector,\n",
        "64": "      BiPredicate<? super R, ? super R> equivalence) {\n",
        "65": "    return new CollectorTester<>(collector, equivalence);\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  private final Collector<T, A, R> collector;\n",
        "69": "  private final BiPredicate<? super R, ? super R> equivalence;\n",
        "70": "\n",
        "71": "  private CollectorTester(\n",
        "72": "      Collector<T, A, R> collector, BiPredicate<? super R, ? super R> equivalence) {\n",
        "73": "    this.collector = checkNotNull(collector);\n",
        "74": "    this.equivalence = checkNotNull(equivalence);\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  /**\n",
        "78": "   * Different orderings for combining the elements of an input array, which must\n",
        "79": "   * all produce the same result.\n",
        "80": "   */\n",
        "81": "  enum CollectStrategy {\n",
        "82": "    /**\n",
        "83": "     * Get one accumulator and accumulate the elements into it sequentially.\n",
        "84": "     */\n",
        "85": "    SEQUENTIAL {\n",
        "86": "      @Override\n",
        "87": "      final <T, A, R> A result(Collector<T, A, R> collector, Iterable<T> inputs) {\n",
        "88": "        A accum = collector.supplier().get();\n",
        "89": "        for (T input : inputs) {\n",
        "90": "          collector.accumulator().accept(accum, input);\n",
        "91": "        }\n",
        "92": "        return accum;\n",
        "93": "      }\n",
        "94": "    },\n",
        "95": "    /**\n",
        "96": "     * Get one accumulator for each element and merge the accumulators\n",
        "97": "     * left-to-right.\n",
        "98": "     */\n",
        "99": "    MERGE_LEFT_ASSOCIATIVE {\n",
        "100": "      @Override\n",
        "101": "      final <T, A, R> A result(Collector<T, A, R> collector, Iterable<T> inputs) {\n",
        "102": "        A accum = collector.supplier().get();\n",
        "103": "        for (T input : inputs) {\n",
        "104": "          A newAccum = collector.supplier().get();\n",
        "105": "          collector.accumulator().accept(newAccum, input);\n",
        "106": "          accum = collector.combiner().apply(accum, newAccum);\n",
        "107": "        }\n",
        "108": "        return accum;\n",
        "109": "      }\n",
        "110": "    },\n",
        "111": "    /**\n",
        "112": "     * Get one accumulator for each element and merge the accumulators\n",
        "113": "     * right-to-left.\n",
        "114": "     */\n",
        "115": "    MERGE_RIGHT_ASSOCIATIVE {\n",
        "116": "      @Override\n",
        "117": "      final <T, A, R> A result(Collector<T, A, R> collector, Iterable<T> inputs) {\n",
        "118": "        List<A> stack = new ArrayList<>();\n",
        "119": "        for (T input : inputs) {\n",
        "120": "          A newAccum = collector.supplier().get();\n",
        "121": "          collector.accumulator().accept(newAccum, input);\n",
        "122": "          push(stack, newAccum);\n",
        "123": "        }\n",
        "124": "        push(stack, collector.supplier().get());\n",
        "125": "        while (stack.size() > 1) {\n",
        "126": "          A right = pop(stack);\n",
        "127": "          A left = pop(stack);\n",
        "128": "          push(stack, collector.combiner().apply(left, right));\n",
        "129": "        }\n",
        "130": "        return pop(stack);\n",
        "131": "      }\n",
        "132": "\n",
        "133": "      <E> void push(List<E> stack, E value) {\n",
        "134": "        stack.add(value);\n",
        "135": "      }\n",
        "136": "\n",
        "137": "      <E> E pop(List<E> stack) {\n",
        "138": "        return stack.remove(stack.size() - 1);\n",
        "139": "      }\n",
        "140": "    };\n",
        "141": "\n",
        "142": "    abstract <T, A, R> A result(Collector<T, A, R> collector, Iterable<T> inputs);\n",
        "143": "  }\n",
        "144": "\n",
        "145": "  /**\n",
        "146": "   * Verifies that the specified expected result is always produced by collecting the\n",
        "147": "   * specified inputs, regardless of how the elements are divided.\n",
        "148": "   */\n",
        "149": "  @SafeVarargs\n",
        "150": "  public final CollectorTester<T, A, R> expectCollects(@Nullable R expectedResult, T... inputs) {\n",
        "151": "    List<T> list = Arrays.asList(inputs);\n",
        "152": "    doExpectCollects(expectedResult, list);\n",
        "153": "    if (collector.characteristics().contains(Collector.Characteristics.UNORDERED)) {\n",
        "154": "      Collections.reverse(list);\n",
        "155": "      doExpectCollects(expectedResult, list);\n",
        "156": "    }\n",
        "157": "    return this;\n",
        "158": "  }\n",
        "159": "\n",
        "160": "  private void doExpectCollects(@Nullable R expectedResult, List<T> inputs) {\n",
        "161": "    for (CollectStrategy scheme : EnumSet.allOf(CollectStrategy.class)) {\n",
        "162": "      A finalAccum = scheme.result(collector, inputs);\n",
        "163": "      if (collector.characteristics().contains(Collector.Characteristics.IDENTITY_FINISH)) {\n",
        "164": "        assertEquivalent(expectedResult, (R) finalAccum);\n",
        "165": "      }\n",
        "166": "      assertEquivalent(expectedResult, collector.finisher().apply(finalAccum));\n",
        "167": "    }\n",
        "168": "  }\n",
        "169": "\n",
        "170": "  private void assertEquivalent(@Nullable R expected, @Nullable R actual) {\n",
        "171": "    assertTrue(\n",
        "172": "        \"Expected \" + expected + \" got \" + actual + \" modulo equivalence \" + equivalence,\n",
        "173": "        equivalence.test(expected, actual));\n",
        "174": "  }\n",
        "175": "}\n",
        "176": "\n"
    },
    "removed": {}
}