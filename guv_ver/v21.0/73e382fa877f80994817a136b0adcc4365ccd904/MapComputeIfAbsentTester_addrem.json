{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "20": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n",
        "22": "import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "26": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "27": "import com.google.common.collect.testing.features.MapFeature;\n",
        "28": "import java.util.Map;\n",
        "29": "import junit.framework.AssertionFailedError;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * A generic JUnit test which tests {@link Map#computeIfAbsent}. Can't be\n",
        "33": " * invoked directly; please see\n",
        "34": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "35": " * \n",
        "36": " * @author Louis Wasserman\n",
        "37": " */\n",
        "38": "@GwtCompatible\n",
        "39": "public class MapComputeIfAbsentTester<K, V> extends AbstractMapTester<K, V> {\n",
        "40": "\n",
        "41": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "42": "  public void testComputeIfAbsent_supportedAbsent() {\n",
        "43": "    assertEquals(\"computeIfAbsent(notPresent, function) should return new value\",\n",
        "44": "        v3(),\n",
        "45": "        getMap().computeIfAbsent(k3(), k -> {\n",
        "46": "          assertEquals(k3(), k);\n",
        "47": "          return v3();\n",
        "48": "        }));\n",
        "49": "    expectAdded(e3());\n",
        "50": "  }\n",
        "51": "  \n",
        "52": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "53": "  @CollectionSize.Require(absent = ZERO)\n",
        "54": "  public void testComputeIfAbsent_supportedPresent() {\n",
        "55": "    assertEquals(\"computeIfAbsent(present, function) should return existing value\", \n",
        "56": "        v0(), getMap().computeIfAbsent(k0(), k -> { throw new AssertionFailedError(); }));\n",
        "57": "    expectUnchanged();\n",
        "58": "  }\n",
        "59": "  \n",
        "60": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "61": "  public void testComputeIfAbsent_functionReturnsNullNotInserted() {\n",
        "62": "    assertNull(\"computeIfAbsent(absent, returnsNull) should return null\", \n",
        "63": "        getMap().computeIfAbsent(k3(), k -> { \n",
        "64": "          assertEquals(k3(), k);\n",
        "65": "          return null;\n",
        "66": "        }));\n",
        "67": "    expectUnchanged();\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})\n",
        "71": "  @CollectionSize.Require(absent = ZERO)\n",
        "72": "  public void testComputeIfAbsent_nullTreatedAsAbsent() {\n",
        "73": "    initMapWithNullValue();\n",
        "74": "    assertEquals(\"computeIfAbsent(presentAssignedToNull, function) should return newValue\",\n",
        "75": "        getValueForNullKey(),\n",
        "76": "        getMap().computeIfAbsent(getKeyForNullValue(), k -> {\n",
        "77": "          assertEquals(getKeyForNullValue(), k);\n",
        "78": "          return getValueForNullKey();\n",
        "79": "        }));\n",
        "80": "    expectReplacement(entry(getKeyForNullValue(), getValueForNullKey()));\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_KEYS})\n",
        "84": "  public void testComputeIfAbsent_nullKeySupported() {\n",
        "85": "    getMap().computeIfAbsent(null, k -> {\n",
        "86": "      assertNull(k);\n",
        "87": "      return v3();\n",
        "88": "    });\n",
        "89": "    expectAdded(entry(null, v3()));\n",
        "90": "  }\n",
        "91": "\n",
        "92": "  static class ExpectedException extends RuntimeException {}\n",
        "93": "\n",
        "94": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "95": "  public void testComputeIfAbsent_functionThrows() {\n",
        "96": "    try {\n",
        "97": "      getMap()\n",
        "98": "          .computeIfAbsent(\n",
        "99": "              k3(),\n",
        "100": "              k -> {\n",
        "101": "                assertEquals(k3(), k);\n",
        "102": "                throw new ExpectedException();\n",
        "103": "              });\n",
        "104": "      fail(\"Expected ExpectedException\");\n",
        "105": "    } catch (ExpectedException expected) {\n",
        "106": "    }\n",
        "107": "    expectUnchanged();\n",
        "108": "  }\n",
        "109": "\n",
        "110": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "111": "  public void testComputeIfAbsent_unsupportedAbsent() {\n",
        "112": "    try {\n",
        "113": "      getMap().computeIfAbsent(k3(), k -> {\n",
        "114": "        // allowed to be called\n",
        "115": "        assertEquals(k3(), k);\n",
        "116": "        return v3();\n",
        "117": "      });\n",
        "118": "      fail(\"computeIfAbsent(notPresent, function) should throw\");\n",
        "119": "    } catch (UnsupportedOperationException expected) {}\n",
        "120": "    expectUnchanged();\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "124": "  @CollectionSize.Require(absent = ZERO)\n",
        "125": "  public void testComputeIfAbsent_unsupportedPresentExistingValue() {\n",
        "126": "    try {\n",
        "127": "      assertEquals(\n",
        "128": "          \"computeIfAbsent(present, returnsCurrentValue) should return present or throw\",\n",
        "129": "          v0(), \n",
        "130": "          getMap().computeIfAbsent(k0(), k -> {\n",
        "131": "            assertEquals(k0(), k);\n",
        "132": "            return v0();\n",
        "133": "          }));\n",
        "134": "    } catch (UnsupportedOperationException tolerated) {}\n",
        "135": "    expectUnchanged();\n",
        "136": "  }\n",
        "137": "\n",
        "138": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "139": "  @CollectionSize.Require(absent = ZERO)\n",
        "140": "  public void testComputeIfAbsent_unsupportedPresentDifferentValue() {\n",
        "141": "    try {\n",
        "142": "      assertEquals(\n",
        "143": "          \"computeIfAbsent(present, returnsDifferentValue) should return present or throw\",\n",
        "144": "          v0(), getMap().computeIfAbsent(k0(), k -> {\n",
        "145": "            assertEquals(k0(), k);\n",
        "146": "            return v3();\n",
        "147": "          }));\n",
        "148": "    } catch (UnsupportedOperationException tolerated) {}\n",
        "149": "    expectUnchanged();\n",
        "150": "  }\n",
        "151": "\n",
        "152": "  @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_KEYS)\n",
        "153": "  public void testComputeIfAbsent_nullKeyUnsupported() {\n",
        "154": "    try {\n",
        "155": "      getMap().computeIfAbsent(null, k -> {\n",
        "156": "        assertNull(k);\n",
        "157": "        return v3();\n",
        "158": "      });\n",
        "159": "      fail(\"computeIfAbsent(null, function) should throw\");\n",
        "160": "    } catch (NullPointerException expected) {}\n",
        "161": "    expectUnchanged();\n",
        "162": "    expectNullKeyMissingWhenNullKeysUnsupported(\n",
        "163": "        \"Should not contain null key after unsupported computeIfAbsent(null, function)\");\n",
        "164": "  }\n",
        "165": "}\n"
    },
    "removed": {}
}