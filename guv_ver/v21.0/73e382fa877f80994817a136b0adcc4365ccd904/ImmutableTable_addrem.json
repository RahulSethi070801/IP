{
    "addition": {
        "23": "import com.google.common.collect.Table.Cell;\n",
        "30": "import java.util.Spliterator;\n",
        "31": "import java.util.function.Function;\n",
        "32": "import java.util.stream.Collector;\n",
        "49": "\n",
        "50": "  /**\n",
        "51": "   * Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each\n",
        "52": "   * input element is mapped to one cell in the returned table, with the rows, columns, and values\n",
        "53": "   * generated by applying the specified functions.\n",
        "54": "   *\n",
        "55": "   * @since 21.0\n",
        "56": "   */\n",
        "57": "  public static <T, R, C, V> Collector<T, ?, ImmutableTable<R, C, V>> toImmutableTable(\n",
        "58": "      Function<? super T, ? extends R> rowFunction,\n",
        "59": "      Function<? super T, ? extends C> columnFunction,\n",
        "60": "      Function<? super T, ? extends V> valueFunction) {\n",
        "61": "    checkNotNull(rowFunction);\n",
        "62": "    checkNotNull(columnFunction);\n",
        "63": "    checkNotNull(valueFunction);\n",
        "64": "    return Collector.of(\n",
        "65": "        Builder<R, C, V>::new,\n",
        "66": "        (builder, t) ->\n",
        "67": "            builder.put(rowFunction.apply(t), columnFunction.apply(t), valueFunction.apply(t)),\n",
        "68": "        Builder::combine,\n",
        "69": "        Builder::build);\n",
        "70": "  }\n",
        "71": "\n",
        "246": "    Builder<R, C, V> combine(Builder<R, C, V> other) {\n",
        "247": "      this.cells.addAll(other.cells);\n",
        "248": "      return this;\n",
        "249": "    }\n",
        "250": "\n",
        "284": "  @Override\n",
        "285": "  final Spliterator<Cell<R, C, V>> cellSpliterator() {\n",
        "286": "    throw new AssertionError(\"should never be called\");\n",
        "287": "  }\n",
        "288": "\n"
    },
    "removed": {}
}