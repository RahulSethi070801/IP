{
    "addition": {
        "19": "import static com.google.common.collect.testing.Helpers.mapEntry;\n",
        "24": "import com.google.common.base.Equivalence;\n",
        "39": "import com.google.common.testing.CollectorTester;\n",
        "49": "import java.util.function.BiPredicate;\n",
        "50": "import java.util.stream.Collector;\n",
        "51": "import java.util.stream.Stream;\n",
        "662": "\n",
        "663": "    public void testToImmutableSortedMap() {\n",
        "664": "      Collector<Entry<String, Integer>, ?, ImmutableSortedMap<String, Integer>> collector =\n",
        "665": "          ImmutableSortedMap.toImmutableSortedMap(\n",
        "666": "              String.CASE_INSENSITIVE_ORDER, Entry::getKey, Entry::getValue);\n",
        "667": "      BiPredicate<ImmutableSortedMap<String, Integer>, ImmutableSortedMap<String, Integer>>\n",
        "668": "          equivalence =\n",
        "669": "              Equivalence.equals().onResultOf(ImmutableSortedMap<String, Integer>::comparator)\n",
        "670": "                  .and(Equivalence.equals().onResultOf(map -> map.entrySet().asList()))\n",
        "671": "                  .and(Equivalence.equals());\n",
        "672": "      ImmutableSortedMap<String, Integer> expected =\n",
        "673": "          ImmutableSortedMap.<String, Integer>orderedBy(String.CASE_INSENSITIVE_ORDER)\n",
        "674": "              .put(\"one\", 1)\n",
        "675": "              .put(\"three\", 3)\n",
        "676": "              .put(\"two\", 2)\n",
        "677": "              .build();\n",
        "678": "      CollectorTester.of(collector, equivalence)\n",
        "679": "          .expectCollects(expected, mapEntry(\"one\", 1), mapEntry(\"two\", 2), mapEntry(\"three\", 3));\n",
        "680": "    }\n",
        "681": "\n",
        "682": "    public void testToImmutableSortedMap_exceptionOnDuplicateKey() {\n",
        "683": "      Collector<Entry<String, Integer>, ?, ImmutableSortedMap<String, Integer>> collector =\n",
        "684": "          ImmutableSortedMap.toImmutableSortedMap(\n",
        "685": "              Ordering.natural(), Entry::getKey, Entry::getValue);\n",
        "686": "      try {\n",
        "687": "        Stream.of(mapEntry(\"one\", 1), mapEntry(\"one\", 11)).collect(collector);\n",
        "688": "        fail(\"Expected IllegalArgumentException\");\n",
        "689": "      } catch (IllegalArgumentException expected) {\n",
        "690": "      }\n",
        "691": "    }\n",
        "692": "\n",
        "693": "    public void testToImmutableSortedMapMerging() {\n",
        "694": "      Collector<Entry<String, Integer>, ?, ImmutableSortedMap<String, Integer>> collector =\n",
        "695": "          ImmutableSortedMap.toImmutableSortedMap(\n",
        "696": "              Comparator.naturalOrder(), Entry::getKey, Entry::getValue, Integer::sum);\n",
        "697": "      Equivalence<ImmutableMap<String, Integer>> equivalence =\n",
        "698": "          Equivalence.equals()\n",
        "699": "              .<Entry<String, Integer>>pairwise()\n",
        "700": "              .onResultOf(ImmutableMap::entrySet);\n",
        "701": "      CollectorTester.of(collector, equivalence)\n",
        "702": "          .expectCollects(\n",
        "703": "              ImmutableSortedMap.of(\"one\", 1, \"three\", 3, \"two\", 4),\n",
        "704": "              mapEntry(\"one\", 1),\n",
        "705": "              mapEntry(\"two\", 2),\n",
        "706": "              mapEntry(\"three\", 3),\n",
        "707": "              mapEntry(\"two\", 2));\n",
        "708": "    }\n"
    },
    "removed": {}
}