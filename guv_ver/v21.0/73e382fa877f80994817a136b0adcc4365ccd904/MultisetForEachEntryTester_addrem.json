{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.google;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.KNOWN_ORDER;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import com.google.common.collect.Multiset.Entry;\n",
        "23": "import com.google.common.collect.Multisets;\n",
        "24": "import com.google.common.collect.testing.Helpers;\n",
        "25": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "26": "import java.util.ArrayList;\n",
        "27": "import java.util.List;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tests for {@code Multiset#forEachEntry}.\n",
        "31": " *\n",
        "32": " * @author Louis Wasserman\n",
        "33": " */\n",
        "34": "@GwtCompatible\n",
        "35": "public class MultisetForEachEntryTester<E> extends AbstractMultisetTester<E> {\n",
        "36": "  public void testForEachEntry() {\n",
        "37": "    List<Entry<E>> expected = new ArrayList<>(getMultiset().entrySet());\n",
        "38": "    List<Entry<E>> actual = new ArrayList<>();\n",
        "39": "    getMultiset()\n",
        "40": "        .forEachEntry((element, count) -> actual.add(Multisets.immutableEntry(element, count)));\n",
        "41": "    Helpers.assertEqualIgnoringOrder(expected, actual);\n",
        "42": "  }\n",
        "43": "\n",
        "44": "  @CollectionFeature.Require(KNOWN_ORDER)\n",
        "45": "  public void testForEachEntryOrdered() {\n",
        "46": "    List<Entry<E>> expected = new ArrayList<>(getMultiset().entrySet());\n",
        "47": "    List<Entry<E>> actual = new ArrayList<>();\n",
        "48": "    getMultiset()\n",
        "49": "        .forEachEntry((element, count) -> actual.add(Multisets.immutableEntry(element, count)));\n",
        "50": "    assertEquals(expected, actual);\n",
        "51": "  }\n",
        "52": "}\n"
    },
    "removed": {}
}