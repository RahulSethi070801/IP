{
    "addition": {
        "31": "import java.util.function.Function;\n",
        "32": "import java.util.function.ToIntFunction;\n",
        "33": "import java.util.stream.Collector;\n",
        "57": "  /**\n",
        "58": "   * Returns a {@code Collector} that accumulates the input elements into a new\n",
        "59": "   * {@code ImmutableMultiset}.  Elements are sorted by the specified comparator.\n",
        "60": "   *\n",
        "61": "   * <p><b>Warning:</b> {@code comparator} should be <i>consistent with {@code\n",
        "62": "   * equals}</i> as explained in the {@link Comparator} documentation.\n",
        "63": "   *\n",
        "64": "   * @since 21.0\n",
        "65": "   */\n",
        "66": "  @Beta\n",
        "67": "  public static <E> Collector<E, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(\n",
        "68": "      Comparator<? super E> comparator) {\n",
        "69": "    return toImmutableSortedMultiset(comparator, Function.identity(), e -> 1);\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  /**\n",
        "73": "   * Returns a {@code Collector} that accumulates elements into an {@code ImmutableSortedMultiset}\n",
        "74": "   * whose elements are the result of applying {@code elementFunction} to the inputs,\n",
        "75": "   * with counts equal to the result of applying {@code countFunction} to the inputs.\n",
        "76": "   *\n",
        "77": "   * <p>If the mapped elements contain duplicates (according to {@code comparator}),\n",
        "78": "   * the first occurrence in encounter order appears in the resulting multiset, with count\n",
        "79": "   * equal to the sum of the outputs of {@code countFunction.applyAsInt(t)} for each {@code t}\n",
        "80": "   * mapped to that element.\n",
        "81": "   */\n",
        "82": "  private static <T, E> Collector<T, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(\n",
        "83": "      Comparator<? super E> comparator,\n",
        "84": "      Function<? super T, ? extends E> elementFunction,\n",
        "85": "      ToIntFunction<? super T> countFunction) {\n",
        "86": "    // TODO(lowasser): consider exposing this\n",
        "87": "    checkNotNull(comparator);\n",
        "88": "    checkNotNull(elementFunction);\n",
        "89": "    checkNotNull(countFunction);\n",
        "90": "    return Collector.of(\n",
        "91": "        () -> TreeMultiset.create(comparator),\n",
        "92": "        (multiset, t) -> multiset.add(elementFunction.apply(t), countFunction.applyAsInt(t)),\n",
        "93": "        (multiset1, multiset2) -> {\n",
        "94": "          multiset1.addAll(multiset2);\n",
        "95": "          return multiset1;\n",
        "96": "        },\n",
        "97": "        (Multiset<E> multiset) -> copyOfSortedEntries(comparator, multiset.entrySet()));\n",
        "98": "  }\n",
        "99": "\n"
    },
    "removed": {}
}