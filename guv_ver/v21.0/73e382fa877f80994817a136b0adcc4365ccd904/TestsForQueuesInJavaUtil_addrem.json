{
    "addition": {
        "30": "import java.util.concurrent.ConcurrentLinkedDeque;\n",
        "56": "    suite.addTest(testsForCheckedQueue());\n",
        "57": "    suite.addTest(testsForConcurrentLinkedDeque());\n",
        "66": "  protected Collection<Method> suppressForCheckedQueue() {\n",
        "67": "    return Collections.emptySet();\n",
        "68": "  }\n",
        "69": "\n",
        "82": "  protected Collection<Method> suppressForConcurrentLinkedDeque() {\n",
        "83": "    return Collections.emptySet();\n",
        "84": "  }\n",
        "85": "\n",
        "106": "  public Test testsForCheckedQueue() {\n",
        "107": "    return QueueTestSuiteBuilder.using(\n",
        "108": "        new TestStringQueueGenerator() {\n",
        "109": "          @Override\n",
        "110": "          public Queue<String> create(String[] elements) {\n",
        "111": "            Queue<String> queue = new LinkedList<>(MinimalCollection.of(elements));\n",
        "112": "            return Collections.checkedQueue(queue, String.class);\n",
        "113": "          }\n",
        "114": "        })\n",
        "115": "        .named(\"checkedQueue/LinkedList\")\n",
        "116": "        .withFeatures(\n",
        "117": "            CollectionFeature.GENERAL_PURPOSE,\n",
        "118": "            CollectionFeature.ALLOWS_NULL_VALUES,\n",
        "119": "            CollectionFeature.KNOWN_ORDER,\n",
        "120": "            CollectionFeature.RESTRICTS_ELEMENTS,\n",
        "121": "            CollectionSize.ANY)\n",
        "122": "        // don't skip collection tests since checkedQueue() is not tested by TestsForListsInJavaUtil\n",
        "123": "        .suppressing(suppressForCheckedQueue())\n",
        "124": "        .createTestSuite();\n",
        "125": "  }\n",
        "126": "\n",
        "178": "  public Test testsForConcurrentLinkedDeque() {\n",
        "179": "    return QueueTestSuiteBuilder.using(\n",
        "180": "            new TestStringQueueGenerator() {\n",
        "181": "              @Override\n",
        "182": "              public Queue<String> create(String[] elements) {\n",
        "183": "                return new ConcurrentLinkedDeque<String>(MinimalCollection.of(elements));\n",
        "184": "              }\n",
        "185": "            })\n",
        "186": "        .named(\"ConcurrentLinkedDeque\")\n",
        "187": "        .withFeatures(\n",
        "188": "            CollectionFeature.GENERAL_PURPOSE, CollectionFeature.KNOWN_ORDER, CollectionSize.ANY)\n",
        "189": "        .suppressing(suppressForConcurrentLinkedDeque())\n",
        "190": "        .createTestSuite();\n",
        "191": "  }\n",
        "192": "\n"
    },
    "removed": {}
}