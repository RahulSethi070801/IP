{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "import static com.google.common.collect.testing.Helpers.assertEqualIgnoringOrder;\n",
        "21": "import static com.google.common.collect.testing.Helpers.assertEqualInOrder;\n",
        "22": "import static com.google.common.collect.testing.Platform.format;\n",
        "23": "import static junit.framework.Assert.assertEquals;\n",
        "24": "import static junit.framework.Assert.assertFalse;\n",
        "25": "import static junit.framework.Assert.assertTrue;\n",
        "26": "import static junit.framework.Assert.fail;\n",
        "27": "\n",
        "28": "import com.google.common.annotations.GwtCompatible;\n",
        "29": "import com.google.common.collect.Ordering;\n",
        "30": "import com.google.common.primitives.Ints;\n",
        "31": "import java.util.ArrayList;\n",
        "32": "import java.util.Arrays;\n",
        "33": "import java.util.Comparator;\n",
        "34": "import java.util.EnumSet;\n",
        "35": "import java.util.List;\n",
        "36": "import java.util.Spliterator;\n",
        "37": "import java.util.function.Consumer;\n",
        "38": "import java.util.function.Supplier;\n",
        "39": "import javax.annotation.Nullable;\n",
        "40": "\n",
        "41": "/**\n",
        "42": " * Tester for {@code Spliterator} implementations.\n",
        "43": " */\n",
        "44": "@GwtCompatible\n",
        "45": "public final class SpliteratorTester<E> {\n",
        "46": "  /**\n",
        "47": "   * Return type from \"contains the following elements\" assertions.\n",
        "48": "   */\n",
        "49": "  public interface Ordered {\n",
        "50": "    /**\n",
        "51": "     * Attests that the expected values must not just be present but must be present in the order\n",
        "52": "     * they were given.\n",
        "53": "     */\n",
        "54": "    void inOrder();\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  /**\n",
        "58": "   * Different ways of decomposing a Spliterator, all of which must produce the same\n",
        "59": "   * elements (up to ordering, if Spliterator.ORDERED is not present).\n",
        "60": "   */\n",
        "61": "  enum SpliteratorDecompositionStrategy {\n",
        "62": "    NO_SPLIT_FOR_EACH_REMAINING {\n",
        "63": "      @Override\n",
        "64": "      <E> void forEach(Spliterator<E> spliterator, Consumer<? super E> consumer) {\n",
        "65": "        spliterator.forEachRemaining(consumer);\n",
        "66": "      }\n",
        "67": "    },\n",
        "68": "    NO_SPLIT_TRY_ADVANCE {\n",
        "69": "      @Override\n",
        "70": "      <E> void forEach(Spliterator<E> spliterator, Consumer<? super E> consumer) {\n",
        "71": "        while (spliterator.tryAdvance(consumer)) {\n",
        "72": "          // do nothing\n",
        "73": "        }\n",
        "74": "      }\n",
        "75": "    },\n",
        "76": "    MAXIMUM_SPLIT {\n",
        "77": "      @Override\n",
        "78": "      <E> void forEach(Spliterator<E> spliterator, Consumer<? super E> consumer) {\n",
        "79": "        for (Spliterator<E> prefix = trySplitTestingSize(spliterator);\n",
        "80": "            prefix != null;\n",
        "81": "            prefix = trySplitTestingSize(spliterator)) {\n",
        "82": "          forEach(prefix, consumer);\n",
        "83": "        }\n",
        "84": "        spliterator.forEachRemaining(consumer);\n",
        "85": "      }\n",
        "86": "    },\n",
        "87": "    ALTERNATE_ADVANCE_AND_SPLIT {\n",
        "88": "      @Override\n",
        "89": "      <E> void forEach(Spliterator<E> spliterator, Consumer<? super E> consumer) {\n",
        "90": "        while (spliterator.tryAdvance(consumer)) {\n",
        "91": "          Spliterator<E> prefix = trySplitTestingSize(spliterator);\n",
        "92": "          if (prefix != null) {\n",
        "93": "            forEach(prefix, consumer);\n",
        "94": "          }\n",
        "95": "        }\n",
        "96": "      }\n",
        "97": "    };\n",
        "98": "\n",
        "99": "    abstract <E> void forEach(Spliterator<E> spliterator, Consumer<? super E> consumer);\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  @Nullable\n",
        "103": "  private static <E> Spliterator<E> trySplitTestingSize(Spliterator<E> spliterator) {\n",
        "104": "    boolean subsized = spliterator.hasCharacteristics(Spliterator.SUBSIZED);\n",
        "105": "    long originalSize = spliterator.estimateSize();\n",
        "106": "    Spliterator<E> trySplit = spliterator.trySplit();\n",
        "107": "    if (spliterator.estimateSize() > originalSize) {\n",
        "108": "      fail(\n",
        "109": "          format(\n",
        "110": "              \"estimated size of spliterator after trySplit (%s) is larger than original size (%s)\",\n",
        "111": "              spliterator.estimateSize(),\n",
        "112": "              originalSize));\n",
        "113": "    }\n",
        "114": "    if (trySplit != null) {\n",
        "115": "      if (trySplit.estimateSize() > originalSize) {\n",
        "116": "        fail(\n",
        "117": "            format(\n",
        "118": "                \"estimated size of trySplit result (%s) is larger than original size (%s)\",\n",
        "119": "                trySplit.estimateSize(),\n",
        "120": "                originalSize));\n",
        "121": "      }\n",
        "122": "    }\n",
        "123": "    if (subsized) {\n",
        "124": "      if (trySplit != null) {\n",
        "125": "        assertEquals(\n",
        "126": "            \"sum of estimated sizes of trySplit and original spliterator after trySplit\",\n",
        "127": "            originalSize,\n",
        "128": "            trySplit.estimateSize() + spliterator.estimateSize());\n",
        "129": "      } else {\n",
        "130": "        assertEquals(\n",
        "131": "            \"estimated size of spliterator after failed trySplit\",\n",
        "132": "            originalSize,\n",
        "133": "            spliterator.estimateSize());\n",
        "134": "      }\n",
        "135": "    }\n",
        "136": "    return trySplit;\n",
        "137": "  }\n",
        "138": "\n",
        "139": "  public static <E> SpliteratorTester<E> of(Supplier<Spliterator<E>> spliteratorSupplier) {\n",
        "140": "    return new SpliteratorTester<E>(spliteratorSupplier);\n",
        "141": "  }\n",
        "142": "\n",
        "143": "  private final Supplier<Spliterator<E>> spliteratorSupplier;\n",
        "144": "\n",
        "145": "  private SpliteratorTester(Supplier<Spliterator<E>> spliteratorSupplier) {\n",
        "146": "    this.spliteratorSupplier = checkNotNull(spliteratorSupplier);\n",
        "147": "  }\n",
        "148": "\n",
        "149": "  @SafeVarargs\n",
        "150": "  public final Ordered expect(Object... elements) {\n",
        "151": "    return expect(Arrays.asList(elements));\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  public final Ordered expect(Iterable<?> elements) {\n",
        "155": "    List<List<E>> resultsForAllStrategies = new ArrayList<>();\n",
        "156": "    Spliterator<E> spliterator = spliteratorSupplier.get();\n",
        "157": "    int characteristics = spliterator.characteristics();\n",
        "158": "    long estimatedSize = spliterator.estimateSize();\n",
        "159": "    for (SpliteratorDecompositionStrategy strategy :\n",
        "160": "        EnumSet.allOf(SpliteratorDecompositionStrategy.class)) {\n",
        "161": "      List<E> resultsForStrategy = new ArrayList<E>();\n",
        "162": "      strategy.forEach(spliteratorSupplier.get(), resultsForStrategy::add);\n",
        "163": "\n",
        "164": "      // TODO(cpovirk): better failure messages\n",
        "165": "      if ((characteristics & Spliterator.NONNULL) != 0) {\n",
        "166": "        assertFalse(resultsForStrategy.contains(null));\n",
        "167": "      }\n",
        "168": "      if ((characteristics & Spliterator.SORTED) != 0) {\n",
        "169": "        Comparator<? super E> comparator = spliterator.getComparator();\n",
        "170": "        if (comparator == null) {\n",
        "171": "          comparator = (Comparator) Comparator.naturalOrder();\n",
        "172": "        }\n",
        "173": "        assertTrue(Ordering.from(comparator).isOrdered(resultsForStrategy));\n",
        "174": "      }\n",
        "175": "      if ((characteristics & Spliterator.SIZED) != 0) {\n",
        "176": "        assertEquals(Ints.checkedCast(estimatedSize), resultsForStrategy.size());\n",
        "177": "      }\n",
        "178": "\n",
        "179": "      assertEqualIgnoringOrder(elements, resultsForStrategy);\n",
        "180": "      resultsForAllStrategies.add(resultsForStrategy);\n",
        "181": "    }\n",
        "182": "    return new Ordered() {\n",
        "183": "      @Override\n",
        "184": "      public void inOrder() {\n",
        "185": "        resultsForAllStrategies.forEach(\n",
        "186": "            resultsForStrategy -> assertEqualInOrder(elements, resultsForStrategy));\n",
        "187": "      }\n",
        "188": "    };\n",
        "189": "  }\n",
        "190": "}\n"
    },
    "removed": {}
}