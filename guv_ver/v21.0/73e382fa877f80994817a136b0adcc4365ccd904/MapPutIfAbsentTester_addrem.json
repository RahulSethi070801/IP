{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "20": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n",
        "22": "import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "26": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "27": "import com.google.common.collect.testing.features.MapFeature;\n",
        "28": "import java.util.Map;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * A generic JUnit test which tests {@link Map#putIfAbsent}. Can't be\n",
        "32": " * invoked directly; please see\n",
        "33": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "34": " * \n",
        "35": " * @author Louis Wasserman\n",
        "36": " */\n",
        "37": "@GwtCompatible\n",
        "38": "public class MapPutIfAbsentTester<K, V> extends AbstractMapTester<K, V> {\n",
        "39": "\n",
        "40": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "41": "  public void testPutIfAbsent_supportedAbsent() {\n",
        "42": "    assertNull(\"putIfAbsent(notPresent, value) should return null\", \n",
        "43": "        getMap().putIfAbsent(k3(), v3()));\n",
        "44": "    expectAdded(e3());\n",
        "45": "  }\n",
        "46": "  \n",
        "47": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "48": "  @CollectionSize.Require(absent = ZERO)\n",
        "49": "  public void testPutIfAbsent_supportedPresent() {\n",
        "50": "    assertEquals(\"putIfAbsent(present, value) should return existing value\", \n",
        "51": "        v0(), getMap().putIfAbsent(k0(), v3()));\n",
        "52": "    expectUnchanged();\n",
        "53": "  }\n",
        "54": "\n",
        "55": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "56": "  public void testPutIfAbsent_unsupportedAbsent() {\n",
        "57": "    try {\n",
        "58": "      getMap().putIfAbsent(k3(), v3());\n",
        "59": "      fail(\"putIfAbsent(notPresent, value) should throw\");\n",
        "60": "    } catch (UnsupportedOperationException expected) {\n",
        "61": "    }\n",
        "62": "    expectUnchanged();\n",
        "63": "    expectMissing(e3());\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "67": "  @CollectionSize.Require(absent = ZERO)\n",
        "68": "  public void testPutIfAbsent_unsupportedPresentExistingValue() {\n",
        "69": "    try {\n",
        "70": "      assertEquals(\"putIfAbsent(present, existingValue) should return present or throw\",\n",
        "71": "          v0(), getMap().putIfAbsent(k0(), v0()));\n",
        "72": "    } catch (UnsupportedOperationException tolerated) {\n",
        "73": "    }\n",
        "74": "    expectUnchanged();\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "78": "  @CollectionSize.Require(absent = ZERO)\n",
        "79": "  public void testPutIfAbsent_unsupportedPresentDifferentValue() {\n",
        "80": "    try {\n",
        "81": "      getMap().putIfAbsent(k0(), v3());\n",
        "82": "    } catch (UnsupportedOperationException tolerated) {\n",
        "83": "    }\n",
        "84": "    expectUnchanged();\n",
        "85": "  }\n",
        "86": "\n",
        "87": "  @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_KEYS)\n",
        "88": "  public void testPutIfAbsent_nullKeyUnsupported() {\n",
        "89": "    try {\n",
        "90": "      getMap().putIfAbsent(null, v3());\n",
        "91": "      fail(\"putIfAbsent(null, value) should throw\");\n",
        "92": "    } catch (NullPointerException expected) {\n",
        "93": "    }\n",
        "94": "    expectUnchanged();\n",
        "95": "    expectNullKeyMissingWhenNullKeysUnsupported(\n",
        "96": "        \"Should not contain null key after unsupported putIfAbsent(null, value)\");\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_VALUES)\n",
        "100": "  public void testPutIfAbsent_nullValueUnsupported() {\n",
        "101": "    try {\n",
        "102": "      getMap().putIfAbsent(k3(), null);\n",
        "103": "      fail(\"putIfAbsent(key, null) should throw\");\n",
        "104": "    } catch (NullPointerException expected) {\n",
        "105": "    }\n",
        "106": "    expectUnchanged();\n",
        "107": "    expectNullValueMissingWhenNullValuesUnsupported(\n",
        "108": "        \"Should not contain null value after unsupported put(key, null)\");\n",
        "109": "  }\n",
        "110": "\n",
        "111": "  @MapFeature.Require(value = SUPPORTS_PUT, absent = ALLOWS_NULL_VALUES)\n",
        "112": "  @CollectionSize.Require(absent = ZERO)\n",
        "113": "  public void testPutIfAbsent_putWithNullValueUnsupported() {\n",
        "114": "    try {\n",
        "115": "      getMap().putIfAbsent(k0(), null);\n",
        "116": "    } catch (NullPointerException tolerated) {\n",
        "117": "    }\n",
        "118": "    expectUnchanged();\n",
        "119": "    expectNullValueMissingWhenNullValuesUnsupported(\n",
        "120": "        \"Should not contain null after unsupported putIfAbsent(present, null)\");\n",
        "121": "  }\n",
        "122": "}\n"
    },
    "removed": {}
}