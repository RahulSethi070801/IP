{
    "addition": {
        "35": "import com.google.common.testing.CollectorTester;\n",
        "45": "import java.util.function.BiPredicate;\n",
        "46": "import java.util.stream.Collector;\n",
        "287": "  public void testToImmutableMultiset() {\n",
        "288": "    BiPredicate<ImmutableMultiset<String>, ImmutableMultiset<String>> equivalence =\n",
        "289": "        (ms1, ms2) -> ms1.equals(ms2) && ms1.entrySet().asList().equals(ms2.entrySet().asList());\n",
        "290": "    CollectorTester.of(ImmutableMultiset.<String>toImmutableMultiset(), equivalence)\n",
        "291": "        .expectCollects(ImmutableMultiset.of())\n",
        "292": "        .expectCollects(\n",
        "293": "            ImmutableMultiset.of(\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"), \"a\", \"a\", \"b\", \"c\", \"c\", \"c\");\n",
        "294": "  }\n",
        "295": "\n",
        "296": "  public void testToImmutableMultiset_duplicates() {\n",
        "297": "    class TypeWithDuplicates {\n",
        "298": "      final int a;\n",
        "299": "      final int b;\n",
        "300": "\n",
        "301": "      TypeWithDuplicates(int a, int b) {\n",
        "302": "        this.a = a;\n",
        "303": "        this.b = b;\n",
        "304": "      }\n",
        "305": "\n",
        "306": "      @Override\n",
        "307": "      public int hashCode() {\n",
        "308": "        return a;\n",
        "309": "      }\n",
        "310": "\n",
        "311": "      @Override\n",
        "312": "      public boolean equals(Object obj) {\n",
        "313": "        return obj instanceof TypeWithDuplicates && ((TypeWithDuplicates) obj).a == a;\n",
        "314": "      }\n",
        "315": "\n",
        "316": "      public boolean fullEquals(TypeWithDuplicates other) {\n",
        "317": "        return other != null && a == other.a && b == other.b;\n",
        "318": "      }\n",
        "319": "    }\n",
        "320": "\n",
        "321": "    Collector<TypeWithDuplicates, ?, ImmutableMultiset<TypeWithDuplicates>> collector =\n",
        "322": "        ImmutableMultiset.toImmutableMultiset();\n",
        "323": "    BiPredicate<ImmutableMultiset<TypeWithDuplicates>, ImmutableMultiset<TypeWithDuplicates>>\n",
        "324": "        equivalence =\n",
        "325": "            (ms1, ms2)\n",
        "326": "                -> {\n",
        "327": "                  if (!ms1.equals(ms2)) {\n",
        "328": "                    return false;\n",
        "329": "                  }\n",
        "330": "                  List<TypeWithDuplicates> elements1 = ImmutableList.copyOf(ms1.elementSet());\n",
        "331": "                  List<TypeWithDuplicates> elements2 = ImmutableList.copyOf(ms2.elementSet());\n",
        "332": "                  for (int i = 0; i < ms1.elementSet().size(); i++) {\n",
        "333": "                    if (!elements1.get(i).fullEquals(elements2.get(i))) {\n",
        "334": "                      return false;\n",
        "335": "                    }\n",
        "336": "                  }\n",
        "337": "                  return true;\n",
        "338": "                };\n",
        "339": "    TypeWithDuplicates a = new TypeWithDuplicates(1, 1);\n",
        "340": "    TypeWithDuplicates b1 = new TypeWithDuplicates(2, 1);\n",
        "341": "    TypeWithDuplicates b2 = new TypeWithDuplicates(2, 2);\n",
        "342": "    TypeWithDuplicates c = new TypeWithDuplicates(3, 1);\n",
        "343": "    CollectorTester.of(collector, equivalence)\n",
        "344": "        .expectCollects(\n",
        "345": "            ImmutableMultiset.<TypeWithDuplicates>builder()\n",
        "346": "                .add(a)\n",
        "347": "                .addCopies(b1, 2)\n",
        "348": "                .add(c)\n",
        "349": "                .build(),\n",
        "350": "            a,\n",
        "351": "            b1,\n",
        "352": "            c,\n",
        "353": "            b2);\n",
        "354": "  }\n",
        "355": "\n"
    },
    "removed": {}
}