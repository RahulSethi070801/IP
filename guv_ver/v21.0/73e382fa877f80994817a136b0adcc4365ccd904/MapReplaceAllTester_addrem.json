{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.KNOWN_ORDER;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;\n",
        "22": "\n",
        "23": "import com.google.common.annotations.GwtCompatible;\n",
        "24": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "25": "import com.google.common.collect.testing.Helpers;\n",
        "26": "import com.google.common.collect.testing.SampleElements;\n",
        "27": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "28": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "29": "import com.google.common.collect.testing.features.MapFeature;\n",
        "30": "import java.util.ArrayList;\n",
        "31": "import java.util.List;\n",
        "32": "import java.util.Map.Entry;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * A generic JUnit test which tests {@code replaceAll()} operations on a map.\n",
        "36": " * Can't be invoked directly; please see\n",
        "37": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "38": " *\n",
        "39": " * @author Louis Wasserman\n",
        "40": " */\n",
        "41": "@GwtCompatible\n",
        "42": "public class MapReplaceAllTester<K, V> extends AbstractMapTester<K, V> {\n",
        "43": "  private SampleElements<K> keys() {\n",
        "44": "    return new SampleElements<K>(k0(), k1(), k2(), k3(), k4());\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  private SampleElements<V> values() {\n",
        "48": "    return new SampleElements<V>(v0(), v1(), v2(), v3(), v4());\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "52": "  public void testReplaceAllRotate() {\n",
        "53": "    getMap()\n",
        "54": "        .replaceAll(\n",
        "55": "            (K k, V v) -> {\n",
        "56": "              int index = keys().asList().indexOf(k);\n",
        "57": "              return values().asList().get(index + 1);\n",
        "58": "            });\n",
        "59": "    List<Entry<K, V>> expectedEntries = new ArrayList<Entry<K, V>>();\n",
        "60": "    for (Entry<K, V> entry : getSampleEntries()) {\n",
        "61": "      int index = keys().asList().indexOf(entry.getKey());\n",
        "62": "      expectedEntries.add(Helpers.mapEntry(entry.getKey(), values().asList().get(index + 1)));\n",
        "63": "    }\n",
        "64": "    expectContents(expectedEntries);\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "68": "  @CollectionFeature.Require(KNOWN_ORDER)\n",
        "69": "  public void testReplaceAllPreservesOrder() {\n",
        "70": "    getMap()\n",
        "71": "        .replaceAll(\n",
        "72": "            (K k, V v) -> {\n",
        "73": "              int index = keys().asList().indexOf(k);\n",
        "74": "              return values().asList().get(index + 1);\n",
        "75": "            });\n",
        "76": "    List<Entry<K, V>> orderedEntries = getOrderedElements();\n",
        "77": "    int index = 0;\n",
        "78": "    for (K key : getMap().keySet()) {\n",
        "79": "      assertEquals(orderedEntries.get(index).getKey(), key);\n",
        "80": "      index++;\n",
        "81": "    }\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "85": "  @CollectionSize.Require(absent = ZERO)\n",
        "86": "  public void testReplaceAll_unsupported() {\n",
        "87": "    try {\n",
        "88": "      getMap()\n",
        "89": "          .replaceAll(\n",
        "90": "              (K k, V v) -> {\n",
        "91": "                int index = keys().asList().indexOf(k);\n",
        "92": "                return values().asList().get(index + 1);\n",
        "93": "              });\n",
        "94": "      fail(\n",
        "95": "          \"replaceAll() should throw UnsupportedOperation if a map does \"\n",
        "96": "              + \"not support it and is not empty.\");\n",
        "97": "    } catch (UnsupportedOperationException expected) {\n",
        "98": "    }\n",
        "99": "    expectUnchanged();\n",
        "100": "  }\n",
        "101": "\n",
        "102": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "103": "  @CollectionSize.Require(ZERO)\n",
        "104": "  public void testReplaceAll_unsupportedByEmptyCollection() {\n",
        "105": "    try {\n",
        "106": "      getMap()\n",
        "107": "          .replaceAll(\n",
        "108": "              (K k, V v) -> {\n",
        "109": "                int index = keys().asList().indexOf(k);\n",
        "110": "                return values().asList().get(index + 1);\n",
        "111": "              });\n",
        "112": "    } catch (UnsupportedOperationException tolerated) {\n",
        "113": "    }\n",
        "114": "    expectUnchanged();\n",
        "115": "  }\n",
        "116": "\n",
        "117": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "118": "  public void testReplaceAll_unsupportedNoOpFunction() {\n",
        "119": "    try {\n",
        "120": "      getMap().replaceAll((K k, V v) -> v);\n",
        "121": "    } catch (UnsupportedOperationException tolerated) {\n",
        "122": "    }\n",
        "123": "    expectUnchanged();\n",
        "124": "  }\n",
        "125": "}\n"
    },
    "removed": {}
}