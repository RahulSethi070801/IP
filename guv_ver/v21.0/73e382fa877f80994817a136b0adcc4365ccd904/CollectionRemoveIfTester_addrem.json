{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_ITERATOR_REMOVE;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_REMOVE;\n",
        "22": "import static com.google.common.collect.testing.features.CollectionSize.SEVERAL;\n",
        "23": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "24": "\n",
        "25": "import com.google.common.annotations.GwtCompatible;\n",
        "26": "import com.google.common.collect.testing.AbstractCollectionTester;\n",
        "27": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "28": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "29": "import java.util.Collection;\n",
        "30": "import java.util.ConcurrentModificationException;\n",
        "31": "import java.util.Iterator;\n",
        "32": "import java.util.function.Predicate;\n",
        "33": "\n",
        "34": "/**\n",
        "35": " * A generic JUnit test which tests {@link Collection#removeIf}. Can't be invoked directly;\n",
        "36": " * please see {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.\n",
        "37": " *\n",
        "38": " * @author Louis Wasserman\n",
        "39": " */\n",
        "40": "@GwtCompatible\n",
        "41": "@SuppressWarnings(\"unchecked\") // too many \"unchecked generic array creations\"\n",
        "42": "public class CollectionRemoveIfTester<E> extends AbstractCollectionTester<E> {\n",
        "43": "  @CollectionFeature.Require(SUPPORTS_ITERATOR_REMOVE)\n",
        "44": "  public void testRemoveIf_alwaysFalse() {\n",
        "45": "    assertFalse(\"removeIf(x -> false) should return false\", collection.removeIf(x -> false));\n",
        "46": "    expectUnchanged();\n",
        "47": "  }\n",
        "48": "\n",
        "49": "  @CollectionFeature.Require(SUPPORTS_ITERATOR_REMOVE)\n",
        "50": "  @CollectionSize.Require(absent = ZERO)\n",
        "51": "  public void testRemoveIf_sometimesTrue() {\n",
        "52": "    assertTrue(\"removeIf(isEqual(present)) should return true\",\n",
        "53": "        collection.removeIf(Predicate.isEqual(samples.e0())));\n",
        "54": "    expectMissing(samples.e0());\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  @CollectionFeature.Require(SUPPORTS_ITERATOR_REMOVE)\n",
        "58": "  @CollectionSize.Require(absent = ZERO)\n",
        "59": "  public void testRemoveIf_allPresent() {\n",
        "60": "    assertTrue(\"removeIf(x -> true) should return true\", collection.removeIf(x -> true));\n",
        "61": "    expectContents();\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  @CollectionFeature.Require({SUPPORTS_ITERATOR_REMOVE, FAILS_FAST_ON_CONCURRENT_MODIFICATION})\n",
        "65": "  @CollectionSize.Require(SEVERAL)\n",
        "66": "  public void testRemoveIfSomeMatchesConcurrentWithIteration() {\n",
        "67": "    try {\n",
        "68": "      Iterator<E> iterator = collection.iterator();\n",
        "69": "      assertTrue(collection.removeIf(Predicate.isEqual(samples.e0())));\n",
        "70": "      iterator.next();\n",
        "71": "      fail(\"Expected ConcurrentModificationException\");\n",
        "72": "    } catch (ConcurrentModificationException expected) {\n",
        "73": "      // success\n",
        "74": "    }\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  @CollectionFeature.Require(absent = SUPPORTS_REMOVE)\n",
        "78": "  @CollectionSize.Require(ZERO)\n",
        "79": "  public void testRemoveIf_unsupportedEmptyCollection() {\n",
        "80": "    try {\n",
        "81": "      assertFalse(\"removeIf(Predicate) should return false or throw \"\n",
        "82": "          + \"UnsupportedOperationException\",\n",
        "83": "        collection.removeIf(x -> {\n",
        "84": "          throw new AssertionError(\"predicate should never be called\");\n",
        "85": "        }));\n",
        "86": "    } catch (UnsupportedOperationException tolerated) {\n",
        "87": "    }\n",
        "88": "    expectUnchanged();\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  @CollectionFeature.Require(absent = SUPPORTS_REMOVE)\n",
        "92": "  @CollectionSize.Require(absent = ZERO)\n",
        "93": "  public void testRemoveIf_alwaysTrueUnsupported() {\n",
        "94": "    try {\n",
        "95": "      collection.removeIf(x -> true);\n",
        "96": "      fail(\"removeIf(x -> true) should throw \"\n",
        "97": "          + \"UnsupportedOperationException\");\n",
        "98": "    } catch (UnsupportedOperationException expected) {\n",
        "99": "    }\n",
        "100": "    expectUnchanged();\n",
        "101": "    assertTrue(collection.contains(samples.e0()));\n",
        "102": "  }\n",
        "103": "}\n"
    },
    "removed": {}
}