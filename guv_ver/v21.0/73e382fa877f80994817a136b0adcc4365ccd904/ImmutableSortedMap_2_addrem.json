{
    "addition": {
        "31": "import java.util.Map.Entry;\n",
        "34": "import java.util.Spliterator;\n",
        "36": "import java.util.function.BiConsumer;\n",
        "37": "import java.util.function.BinaryOperator;\n",
        "38": "import java.util.function.Consumer;\n",
        "39": "import java.util.function.Function;\n",
        "40": "import java.util.stream.Collector;\n",
        "41": "import java.util.stream.Collectors;\n",
        "65": "  /**\n",
        "66": "   * Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap}\n",
        "67": "   * whose keys and values are the result of applying the provided mapping functions to the input\n",
        "68": "   * elements.  The generated map is sorted by the specified comparator.\n",
        "69": "   *\n",
        "70": "   * <p>If the mapped keys contain duplicates (according to the specified comparator), an\n",
        "71": "   * {@code IllegalArgumentException} is thrown when the collection operation is performed.\n",
        "72": "   * (This differs from the {@code Collector} returned by\n",
        "73": "   * {@link Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.)\n",
        "74": "   *\n",
        "75": "   * @since 21.0\n",
        "76": "   */\n",
        "77": "  @Beta\n",
        "78": "  public static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n",
        "79": "      Comparator<? super K> comparator,\n",
        "80": "      Function<? super T, ? extends K> keyFunction,\n",
        "81": "      Function<? super T, ? extends V> valueFunction) {\n",
        "82": "    return CollectCollectors.toImmutableSortedMap(comparator, keyFunction, valueFunction);\n",
        "83": "  }\n",
        "84": "  \n",
        "85": "  /**\n",
        "86": "   * Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose\n",
        "87": "   * keys and values are the result of applying the provided mapping functions to the input\n",
        "88": "   * elements.\n",
        "89": "   *\n",
        "90": "   * <p>If the mapped keys contain duplicates (according to the comparator), the the values are\n",
        "91": "   * merged using the specified merging function. Entries will appear in the encounter order of the\n",
        "92": "   * first occurrence of the key.\n",
        "93": "   *\n",
        "94": "   * @since 21.0\n",
        "95": "   */\n",
        "96": "  @Beta\n",
        "97": "  public static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n",
        "98": "      Comparator<? super K> comparator,\n",
        "99": "      Function<? super T, ? extends K> keyFunction,\n",
        "100": "      Function<? super T, ? extends V> valueFunction,\n",
        "101": "      BinaryOperator<V> mergeFunction) {\n",
        "102": "    checkNotNull(comparator);\n",
        "103": "    checkNotNull(keyFunction);\n",
        "104": "    checkNotNull(valueFunction);\n",
        "105": "    checkNotNull(mergeFunction);\n",
        "106": "    return Collectors.collectingAndThen(\n",
        "107": "        Collectors.toMap(\n",
        "108": "            keyFunction, valueFunction, mergeFunction, () -> new TreeMap<K, V>(comparator)),\n",
        "109": "        ImmutableSortedMap::copyOfSorted);\n",
        "110": "  }\n",
        "543": "    @Override\n",
        "544": "    Builder<K, V> combine(ImmutableMap.Builder<K, V> other) {\n",
        "545": "      super.combine(other);\n",
        "546": "      return this;\n",
        "547": "    }\n",
        "548": "\n",
        "590": "  @Override\n",
        "591": "  public void forEach(BiConsumer<? super K, ? super V> action) {\n",
        "592": "    checkNotNull(action);\n",
        "593": "    ImmutableList<K> keyList = keySet.asList();\n",
        "594": "    for (int i = 0; i < size(); i++) {\n",
        "595": "      action.accept(keyList.get(i), valueList.get(i));\n",
        "596": "    }\n",
        "597": "  }\n",
        "598": "\n",
        "628": "      @Override\n",
        "629": "      public Spliterator<Entry<K, V>> spliterator() {\n",
        "630": "        return asList().spliterator();\n",
        "631": "      }\n",
        "632": "\n",
        "633": "      @Override\n",
        "634": "      public void forEach(Consumer<? super Entry<K, V>> action) {\n",
        "635": "        asList().forEach(action);\n",
        "636": "      }\n",
        "637": "\n",
        "646": "          @Override\n",
        "647": "          public Spliterator<Entry<K, V>> spliterator() {\n",
        "648": "            return CollectSpliterators.indexed(\n",
        "649": "                size(), ImmutableSet.SPLITERATOR_CHARACTERISTICS, this::get);\n",
        "650": "          }\n",
        "651": "\n"
    },
    "removed": {}
}