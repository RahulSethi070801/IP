{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "20": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n",
        "22": "import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;\n",
        "23": "import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_REMOVE;\n",
        "24": "\n",
        "25": "import com.google.common.annotations.GwtCompatible;\n",
        "26": "import com.google.common.annotations.GwtIncompatible;\n",
        "27": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "28": "import com.google.common.collect.testing.Helpers;\n",
        "29": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "30": "import com.google.common.collect.testing.features.MapFeature;\n",
        "31": "import java.lang.reflect.Method;\n",
        "32": "import java.util.Map;\n",
        "33": "import junit.framework.AssertionFailedError;\n",
        "34": "\n",
        "35": "/**\n",
        "36": " * A generic JUnit test which tests {@link Map#merge}. Can't be\n",
        "37": " * invoked directly; please see\n",
        "38": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "39": " *\n",
        "40": " * @author Louis Wasserman\n",
        "41": " */\n",
        "42": "@GwtCompatible(emulated = true)\n",
        "43": "public class MapMergeTester<K, V> extends AbstractMapTester<K, V> {\n",
        "44": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "45": "  public void testAbsent() {\n",
        "46": "    assertEquals(\n",
        "47": "        \"Map.merge(absent, value, function) should return value\",\n",
        "48": "        v3(),\n",
        "49": "        getMap()\n",
        "50": "            .merge(\n",
        "51": "                k3(),\n",
        "52": "                v3(),\n",
        "53": "                (oldV, newV) -> {\n",
        "54": "                  throw new AssertionFailedError(\n",
        "55": "                      \"Should not call merge function if key was absent\");\n",
        "56": "                }));\n",
        "57": "    expectAdded(e3());\n",
        "58": "  }\n",
        "59": "\n",
        "60": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_VALUES})\n",
        "61": "  @CollectionSize.Require(absent = ZERO)\n",
        "62": "  public void testMappedToNull() {\n",
        "63": "    initMapWithNullValue();\n",
        "64": "    assertEquals(\n",
        "65": "        \"Map.merge(keyMappedToNull, value, function) should return value\",\n",
        "66": "        v3(),\n",
        "67": "        getMap()\n",
        "68": "            .merge(\n",
        "69": "                getKeyForNullValue(),\n",
        "70": "                v3(),\n",
        "71": "                (oldV, newV) -> {\n",
        "72": "                  throw new AssertionFailedError(\n",
        "73": "                      \"Should not call merge function if key was mapped to null\");\n",
        "74": "                }));\n",
        "75": "    expectReplacement(entry(getKeyForNullValue(), v3()));\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  @MapFeature.Require({SUPPORTS_PUT, ALLOWS_NULL_KEYS})\n",
        "79": "  public void testMergeAbsentNullKey() {\n",
        "80": "    assertEquals(\n",
        "81": "        \"Map.merge(null, value, function) should return value\",\n",
        "82": "        v3(),\n",
        "83": "        getMap()\n",
        "84": "            .merge(\n",
        "85": "                null,\n",
        "86": "                v3(),\n",
        "87": "                (oldV, newV) -> {\n",
        "88": "                  throw new AssertionFailedError(\n",
        "89": "                      \"Should not call merge function if key was absent\");\n",
        "90": "                }));\n",
        "91": "    expectAdded(entry(null, v3()));\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "95": "  @CollectionSize.Require(absent = ZERO)\n",
        "96": "  public void testMergePresent() {\n",
        "97": "    assertEquals(\n",
        "98": "        \"Map.merge(present, value, function) should return function result\",\n",
        "99": "        v4(),\n",
        "100": "        getMap()\n",
        "101": "            .merge(\n",
        "102": "                k0(),\n",
        "103": "                v3(),\n",
        "104": "                (oldV, newV) -> {\n",
        "105": "                  assertEquals(v0(), oldV);\n",
        "106": "                  assertEquals(v3(), newV);\n",
        "107": "                  return v4();\n",
        "108": "                }));\n",
        "109": "    expectReplacement(entry(k0(), v4()));\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  private static class ExpectedException extends RuntimeException {}\n",
        "113": "\n",
        "114": "  @MapFeature.Require(SUPPORTS_PUT)\n",
        "115": "  @CollectionSize.Require(absent = ZERO)\n",
        "116": "  public void testMergeFunctionThrows() {\n",
        "117": "    try {\n",
        "118": "      getMap()\n",
        "119": "          .merge(\n",
        "120": "              k0(),\n",
        "121": "              v3(),\n",
        "122": "              (oldV, newV) -> {\n",
        "123": "                assertEquals(v0(), oldV);\n",
        "124": "                assertEquals(v3(), newV);\n",
        "125": "                throw new ExpectedException();\n",
        "126": "              });\n",
        "127": "      fail(\"Expected ExpectedException\");\n",
        "128": "    } catch (ExpectedException expected) {\n",
        "129": "    }\n",
        "130": "    expectUnchanged();\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  @MapFeature.Require(SUPPORTS_REMOVE)\n",
        "134": "  @CollectionSize.Require(absent = ZERO)\n",
        "135": "  public void testMergePresentToNull() {\n",
        "136": "    assertNull(\n",
        "137": "        \"Map.merge(present, value, functionReturningNull) should return null\",\n",
        "138": "        getMap()\n",
        "139": "            .merge(\n",
        "140": "                k0(),\n",
        "141": "                v3(),\n",
        "142": "                (oldV, newV) -> {\n",
        "143": "                  assertEquals(v0(), oldV);\n",
        "144": "                  assertEquals(v3(), newV);\n",
        "145": "                  return null;\n",
        "146": "                }));\n",
        "147": "    expectMissing(e0());\n",
        "148": "  }\n",
        "149": "\n",
        "150": "  public void testMergeNullValue() {\n",
        "151": "    try {\n",
        "152": "      getMap()\n",
        "153": "          .merge(\n",
        "154": "              k0(),\n",
        "155": "              null,\n",
        "156": "              (oldV, newV) -> {\n",
        "157": "                throw new AssertionFailedError(\"Should not call merge function if value was null\");\n",
        "158": "              });\n",
        "159": "      fail(\"Expected NullPointerException or UnsupportedOperationException\");\n",
        "160": "    } catch (NullPointerException expected) {\n",
        "161": "    } catch (UnsupportedOperationException expected) {\n",
        "162": "    }\n",
        "163": "  }\n",
        "164": "\n",
        "165": "  public void testMergeNullFunction() {\n",
        "166": "    try {\n",
        "167": "      getMap().merge(k0(), v3(), null);\n",
        "168": "      fail(\"Expected NullPointerException or UnsupportedOperationException\");\n",
        "169": "    } catch (NullPointerException expected) {\n",
        "170": "    } catch (UnsupportedOperationException expected) {\n",
        "171": "    }\n",
        "172": "  }\n",
        "173": "\n",
        "174": "  @MapFeature.Require(absent = SUPPORTS_PUT)\n",
        "175": "  public void testMergeUnsupported() {\n",
        "176": "    try {\n",
        "177": "      getMap()\n",
        "178": "          .merge(\n",
        "179": "              k3(),\n",
        "180": "              v3(),\n",
        "181": "              (oldV, newV) -> {\n",
        "182": "                throw new AssertionFailedError();\n",
        "183": "              });\n",
        "184": "      fail(\"Expected UnsupportedOperationException\");\n",
        "185": "    } catch (UnsupportedOperationException expected) {\n",
        "186": "    }\n",
        "187": "  }\n",
        "188": "\n",
        "189": "  /**\n",
        "190": "   * Returns the {@link Method} instance for {@link #testMergeNullValue()} so that tests of {@link\n",
        "191": "   * Hashtable} can suppress it with {@code FeatureSpecificTestSuiteBuilder.suppressing()}.\n",
        "192": "   */\n",
        "193": "  @GwtIncompatible // reflection\n",
        "194": "  public static Method getMergeNullValueMethod() {\n",
        "195": "    return Helpers.getMethod(MapMergeTester.class, \"testMergeNullValue\");\n",
        "196": "  }\n",
        "197": "}\n"
    },
    "removed": {}
}