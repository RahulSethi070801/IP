{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.annotations.GwtCompatible;\n",
        "22": "import java.util.Comparator;\n",
        "23": "import java.util.function.Function;\n",
        "24": "import java.util.stream.Collector;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * Collectors utilities for {@code common.collect} internals.\n",
        "28": " */\n",
        "29": "@GwtCompatible\n",
        "30": "final class CollectCollectors {\n",
        "31": "  static <T, K, V> Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(\n",
        "32": "      Function<? super T, ? extends K> keyFunction,\n",
        "33": "      Function<? super T, ? extends V> valueFunction) {\n",
        "34": "    checkNotNull(keyFunction);\n",
        "35": "    checkNotNull(valueFunction);\n",
        "36": "    return Collector.of(\n",
        "37": "        ImmutableBiMap.Builder<K, V>::new,\n",
        "38": "        (builder, input) -> builder.put(keyFunction.apply(input), valueFunction.apply(input)),\n",
        "39": "        ImmutableBiMap.Builder::combine,\n",
        "40": "        ImmutableBiMap.Builder::build,\n",
        "41": "        new Collector.Characteristics[0]);\n",
        "42": "  }\n",
        "43": "\n",
        "44": "  static <E> Collector<E, ?, ImmutableList<E>> toImmutableList() {\n",
        "45": "    return Collector.of(\n",
        "46": "        ImmutableList::<E>builder,\n",
        "47": "        ImmutableList.Builder::add,\n",
        "48": "        ImmutableList.Builder::combine,\n",
        "49": "        ImmutableList.Builder::build);\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  static <T, K, V> Collector<T, ?, ImmutableMap<K, V>> toImmutableMap(\n",
        "53": "      Function<? super T, ? extends K> keyFunction,\n",
        "54": "      Function<? super T, ? extends V> valueFunction) {\n",
        "55": "    checkNotNull(keyFunction);\n",
        "56": "    checkNotNull(valueFunction);\n",
        "57": "    return Collector.of(\n",
        "58": "        ImmutableMap.Builder<K, V>::new,\n",
        "59": "        (builder, input) -> builder.put(keyFunction.apply(input), valueFunction.apply(input)),\n",
        "60": "        ImmutableMap.Builder::combine,\n",
        "61": "        ImmutableMap.Builder::build);\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  static <E> Collector<E, ?, ImmutableSet<E>> toImmutableSet() {\n",
        "65": "    return Collector.of(\n",
        "66": "        ImmutableSet::<E>builder,\n",
        "67": "        ImmutableSet.Builder::add,\n",
        "68": "        ImmutableSet.Builder::combine,\n",
        "69": "        ImmutableSet.Builder::build);\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n",
        "73": "      Comparator<? super K> comparator,\n",
        "74": "      Function<? super T, ? extends K> keyFunction,\n",
        "75": "      Function<? super T, ? extends V> valueFunction) {\n",
        "76": "    checkNotNull(comparator);\n",
        "77": "    checkNotNull(keyFunction);\n",
        "78": "    checkNotNull(valueFunction);\n",
        "79": "    /*\n",
        "80": "     * We will always fail if there are duplicate keys, and the keys are always sorted by\n",
        "81": "     * the Comparator, so the entries can come in in arbitrary order -- so we report UNORDERED.\n",
        "82": "     */\n",
        "83": "    return Collector.of(\n",
        "84": "        () -> new ImmutableSortedMap.Builder<K, V>(comparator),\n",
        "85": "        (builder, input) -> builder.put(keyFunction.apply(input), valueFunction.apply(input)),\n",
        "86": "        ImmutableSortedMap.Builder::combine,\n",
        "87": "        ImmutableSortedMap.Builder::build,\n",
        "88": "        Collector.Characteristics.UNORDERED);\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  static <E> Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(\n",
        "92": "      Comparator<? super E> comparator) {\n",
        "93": "    checkNotNull(comparator);\n",
        "94": "    return Collector.of(\n",
        "95": "        () -> new ImmutableSortedSet.Builder<E>(comparator),\n",
        "96": "        ImmutableSortedSet.Builder::add,\n",
        "97": "        ImmutableSortedSet.Builder::combine,\n",
        "98": "        ImmutableSortedSet.Builder::build);\n",
        "99": "  }\n",
        "100": "}\n",
        "101": "\n"
    },
    "removed": {}
}