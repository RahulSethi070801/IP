{
    "addition": {
        "24": "import com.google.common.base.Equivalence;\n",
        "39": "import com.google.common.testing.CollectorTester;\n",
        "51": "import java.util.function.BiPredicate;\n",
        "52": "import java.util.stream.Collector;\n",
        "670": "  public void testToImmutableSortedSet() {\n",
        "671": "    Collector<String, ?, ImmutableSortedSet<String>> collector =\n",
        "672": "        ImmutableSortedSet.toImmutableSortedSet(Ordering.natural());\n",
        "673": "    BiPredicate<ImmutableSortedSet<String>, ImmutableSortedSet<String>> equivalence =\n",
        "674": "        Equivalence.equals().onResultOf(ImmutableSortedSet<String>::comparator)\n",
        "675": "            .and(Equivalence.equals().onResultOf(ImmutableSortedSet::asList))\n",
        "676": "            .and(Equivalence.equals());\n",
        "677": "    CollectorTester.of(collector, equivalence)\n",
        "678": "        .expectCollects(\n",
        "679": "            ImmutableSortedSet.of(\"a\", \"b\", \"c\", \"d\"), \"a\", \"b\", \"a\", \"c\", \"b\", \"b\", \"d\");\n",
        "680": "  }\n",
        "681": "\n",
        "682": "  public void testToImmutableSortedSet_customComparator() {\n",
        "683": "    Collector<String, ?, ImmutableSortedSet<String>> collector =\n",
        "684": "        ImmutableSortedSet.toImmutableSortedSet(String.CASE_INSENSITIVE_ORDER);\n",
        "685": "    BiPredicate<ImmutableSortedSet<String>, ImmutableSortedSet<String>> equivalence =\n",
        "686": "        (set1, set2) ->\n",
        "687": "            set1.equals(set2) && set1.asList().equals(set2.asList())\n",
        "688": "                && set1.comparator().equals(set2.comparator());\n",
        "689": "    ImmutableSortedSet<String> expected =\n",
        "690": "        ImmutableSortedSet.orderedBy(String.CASE_INSENSITIVE_ORDER)\n",
        "691": "            .add(\"a\", \"B\", \"c\", \"d\")\n",
        "692": "            .build();\n",
        "693": "    CollectorTester.of(collector, equivalence)\n",
        "694": "        .expectCollects(expected, \"a\", \"B\", \"a\", \"c\", \"b\", \"b\", \"d\");\n",
        "695": "  }\n",
        "696": "\n",
        "697": "  public void testToImmutableSortedSet_duplicates() {\n",
        "698": "    class TypeWithDuplicates implements Comparable<TypeWithDuplicates> {\n",
        "699": "      final int a;\n",
        "700": "      final int b;\n",
        "701": "\n",
        "702": "      TypeWithDuplicates(int a, int b) {\n",
        "703": "        this.a = a;\n",
        "704": "        this.b = b;\n",
        "705": "      }\n",
        "706": "\n",
        "707": "      @Override\n",
        "708": "      public int compareTo(TypeWithDuplicates o) {\n",
        "709": "        return Integer.compare(a, o.a);\n",
        "710": "      }\n",
        "711": "\n",
        "712": "      public boolean fullEquals(TypeWithDuplicates other) {\n",
        "713": "        return other != null && a == other.a && b == other.b;\n",
        "714": "      }\n",
        "715": "    }\n",
        "716": "\n",
        "717": "    Collector<TypeWithDuplicates, ?, ImmutableSortedSet<TypeWithDuplicates>> collector =\n",
        "718": "        ImmutableSortedSet.toImmutableSortedSet(Ordering.natural());\n",
        "719": "    BiPredicate<ImmutableSortedSet<TypeWithDuplicates>, ImmutableSortedSet<TypeWithDuplicates>>\n",
        "720": "        equivalence = (set1, set2) -> {\n",
        "721": "            if (!set1.equals(set2)) {\n",
        "722": "              return false;\n",
        "723": "            }\n",
        "724": "            for (int i = 0; i < set1.size(); i++) {\n",
        "725": "              if (!set1.asList().get(i).fullEquals(set2.asList().get(i))) {\n",
        "726": "                return false;\n",
        "727": "              }\n",
        "728": "            }\n",
        "729": "            return true;\n",
        "730": "          };\n",
        "731": "    TypeWithDuplicates a = new TypeWithDuplicates(1, 1);\n",
        "732": "    TypeWithDuplicates b1 = new TypeWithDuplicates(2, 1);\n",
        "733": "    TypeWithDuplicates b2 = new TypeWithDuplicates(2, 2);\n",
        "734": "    TypeWithDuplicates c = new TypeWithDuplicates(3, 1);\n",
        "735": "    CollectorTester.of(collector, equivalence)\n",
        "736": "        .expectCollects(ImmutableSortedSet.of(a, b1, c), a, b1, c, b2);\n",
        "737": "  }\n",
        "738": "\n"
    },
    "removed": {}
}