{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.GwtCompatible;\n",
        "23": "import java.util.Comparator;\n",
        "24": "import java.util.Spliterator;\n",
        "25": "import java.util.function.Consumer;\n",
        "26": "import java.util.function.Function;\n",
        "27": "import java.util.function.IntFunction;\n",
        "28": "import java.util.function.Predicate;\n",
        "29": "import java.util.stream.IntStream;\n",
        "30": "import javax.annotation.Nullable;\n",
        "31": "\n",
        "32": "/**\n",
        "33": " * Spliterator utilities for {@code common.collect} internals.\n",
        "34": " */\n",
        "35": "@GwtCompatible\n",
        "36": "final class CollectSpliterators {\n",
        "37": "  private CollectSpliterators() {}\n",
        "38": "\n",
        "39": "  static <T> Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function) {\n",
        "40": "    return indexed(size, extraCharacteristics, function, null);\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  static <T> Spliterator<T> indexed(\n",
        "44": "      int size,\n",
        "45": "      int extraCharacteristics,\n",
        "46": "      IntFunction<T> function,\n",
        "47": "      Comparator<? super T> comparator) {\n",
        "48": "    if (comparator != null) {\n",
        "49": "      checkArgument((extraCharacteristics & (Spliterator.SORTED)) != 0);\n",
        "50": "    }\n",
        "51": "    class WithCharacteristics implements Spliterator<T> {\n",
        "52": "      private final Spliterator<T> delegate;\n",
        "53": "\n",
        "54": "      WithCharacteristics(Spliterator<T> delegate) {\n",
        "55": "        this.delegate = delegate;\n",
        "56": "      }\n",
        "57": "\n",
        "58": "      @Override\n",
        "59": "      public boolean tryAdvance(Consumer<? super T> action) {\n",
        "60": "        return delegate.tryAdvance(action);\n",
        "61": "      }\n",
        "62": "\n",
        "63": "      @Override\n",
        "64": "      public void forEachRemaining(Consumer<? super T> action) {\n",
        "65": "        delegate.forEachRemaining(action);\n",
        "66": "      }\n",
        "67": "\n",
        "68": "      @Override\n",
        "69": "      @Nullable\n",
        "70": "      public Spliterator<T> trySplit() {\n",
        "71": "        Spliterator<T> split = delegate.trySplit();\n",
        "72": "        return (split == null) ? null : new WithCharacteristics(split);\n",
        "73": "      }\n",
        "74": "\n",
        "75": "      @Override\n",
        "76": "      public long estimateSize() {\n",
        "77": "        return delegate.estimateSize();\n",
        "78": "      }\n",
        "79": "\n",
        "80": "      @Override\n",
        "81": "      public int characteristics() {\n",
        "82": "        return delegate.characteristics() | extraCharacteristics;\n",
        "83": "      }\n",
        "84": "\n",
        "85": "      @Override\n",
        "86": "      public Comparator<? super T> getComparator() {\n",
        "87": "        if (hasCharacteristics(Spliterator.SORTED)) {\n",
        "88": "          return comparator;\n",
        "89": "        } else {\n",
        "90": "          throw new IllegalStateException();\n",
        "91": "        }\n",
        "92": "      }\n",
        "93": "    }\n",
        "94": "    return new WithCharacteristics(IntStream.range(0, size).mapToObj(function).spliterator());\n",
        "95": "  }\n",
        "96": "  \n",
        "97": "  /**\n",
        "98": "   * Returns a {@code Spliterator} over the elements of {@code fromSpliterator} mapped by {@code\n",
        "99": "   * function}.\n",
        "100": "   */\n",
        "101": "  static <F, T> Spliterator<T> map(\n",
        "102": "      Spliterator<F> fromSpliterator, Function<? super F, ? extends T> function) {\n",
        "103": "    checkNotNull(fromSpliterator);\n",
        "104": "    checkNotNull(function);\n",
        "105": "    return new Spliterator<T>() {\n",
        "106": "\n",
        "107": "      @Override\n",
        "108": "      public boolean tryAdvance(Consumer<? super T> action) {\n",
        "109": "        return fromSpliterator.tryAdvance(\n",
        "110": "            fromElement -> action.accept(function.apply(fromElement)));\n",
        "111": "      }\n",
        "112": "\n",
        "113": "      @Override\n",
        "114": "      public void forEachRemaining(Consumer<? super T> action) {\n",
        "115": "        fromSpliterator.forEachRemaining(fromElement -> action.accept(function.apply(fromElement)));\n",
        "116": "      }\n",
        "117": "\n",
        "118": "      @Override\n",
        "119": "      public Spliterator<T> trySplit() {\n",
        "120": "        Spliterator<F> fromSplit = fromSpliterator.trySplit();\n",
        "121": "        return (fromSplit != null) ? map(fromSplit, function) : null;\n",
        "122": "      }\n",
        "123": "\n",
        "124": "      @Override\n",
        "125": "      public long estimateSize() {\n",
        "126": "        return fromSpliterator.estimateSize();\n",
        "127": "      }\n",
        "128": "\n",
        "129": "      @Override\n",
        "130": "      public int characteristics() {\n",
        "131": "        return fromSpliterator.characteristics()\n",
        "132": "            & ~(Spliterator.DISTINCT | Spliterator.NONNULL | Spliterator.SORTED);\n",
        "133": "      }\n",
        "134": "    };\n",
        "135": "  }\n",
        "136": "  \n",
        "137": "  /** Returns a {@code Spliterator} filtered by the specified predicate. */\n",
        "138": "  static <T> Spliterator<T> filter(Spliterator<T> fromSpliterator, Predicate<? super T> predicate) {\n",
        "139": "    checkNotNull(fromSpliterator);\n",
        "140": "    checkNotNull(predicate);\n",
        "141": "    class Splitr implements Spliterator<T>, Consumer<T> {\n",
        "142": "      T holder = null;\n",
        "143": "\n",
        "144": "      @Override\n",
        "145": "      public void accept(T t) {\n",
        "146": "        this.holder = t;\n",
        "147": "      }\n",
        "148": "\n",
        "149": "      @Override\n",
        "150": "      public boolean tryAdvance(Consumer<? super T> action) {\n",
        "151": "        while (fromSpliterator.tryAdvance(this)) {\n",
        "152": "          try {\n",
        "153": "            if (predicate.test(holder)) {\n",
        "154": "              action.accept(holder);\n",
        "155": "              return true;\n",
        "156": "            }\n",
        "157": "          } finally {\n",
        "158": "            holder = null;\n",
        "159": "          }\n",
        "160": "        }\n",
        "161": "        return false;\n",
        "162": "      }\n",
        "163": "\n",
        "164": "      @Override\n",
        "165": "      public Spliterator<T> trySplit() {\n",
        "166": "        Spliterator<T> fromSplit = fromSpliterator.trySplit();\n",
        "167": "        return (fromSplit == null) ? null : filter(fromSplit, predicate);\n",
        "168": "      }\n",
        "169": "\n",
        "170": "      @Override\n",
        "171": "      public long estimateSize() {\n",
        "172": "        return fromSpliterator.estimateSize() / 2;\n",
        "173": "      }\n",
        "174": "\n",
        "175": "      @Override\n",
        "176": "      public Comparator<? super T> getComparator() {\n",
        "177": "        return fromSpliterator.getComparator();\n",
        "178": "      }\n",
        "179": "\n",
        "180": "      @Override\n",
        "181": "      public int characteristics() {\n",
        "182": "        return fromSpliterator.characteristics()\n",
        "183": "            & (Spliterator.DISTINCT\n",
        "184": "                | Spliterator.NONNULL\n",
        "185": "                | Spliterator.ORDERED\n",
        "186": "                | Spliterator.SORTED);\n",
        "187": "      }\n",
        "188": "    }\n",
        "189": "    return new Splitr();\n",
        "190": "  }\n",
        "191": "\n",
        "192": "  /**\n",
        "193": "   * Returns a {@code Spliterator} that iterates over the elements of the spliterators generated by\n",
        "194": "   * applying {@code function} to the elements of {@code fromSpliterator}.\n",
        "195": "   */\n",
        "196": "  static <F, T> Spliterator<T> flatMap(\n",
        "197": "      Spliterator<F> fromSpliterator,\n",
        "198": "      Function<? super F, Spliterator<T>> function,\n",
        "199": "      int topCharacteristics,\n",
        "200": "      long topSize) {\n",
        "201": "    checkArgument(\n",
        "202": "        (topCharacteristics & Spliterator.SUBSIZED) == 0,\n",
        "203": "        \"flatMap does not support SUBSIZED characteristic\");\n",
        "204": "    checkArgument(\n",
        "205": "        (topCharacteristics & Spliterator.SORTED) == 0,\n",
        "206": "        \"flatMap does not support SORTED characteristic\");\n",
        "207": "    checkNotNull(fromSpliterator);\n",
        "208": "    checkNotNull(function);\n",
        "209": "    class FlatMapSpliterator implements Spliterator<T> {\n",
        "210": "      @Nullable Spliterator<T> prefix;\n",
        "211": "      final Spliterator<F> from;\n",
        "212": "      final int characteristics;\n",
        "213": "      long estimatedSize;\n",
        "214": "\n",
        "215": "      FlatMapSpliterator(\n",
        "216": "          Spliterator<T> prefix, Spliterator<F> from, int characteristics, long estimatedSize) {\n",
        "217": "        this.prefix = prefix;\n",
        "218": "        this.from = from;\n",
        "219": "        this.characteristics = characteristics;\n",
        "220": "        this.estimatedSize = estimatedSize;\n",
        "221": "      }\n",
        "222": "\n",
        "223": "      @Override\n",
        "224": "      public boolean tryAdvance(Consumer<? super T> action) {\n",
        "225": "        while (true) {\n",
        "226": "          if (prefix != null && prefix.tryAdvance(action)) {\n",
        "227": "            if (estimatedSize != Long.MAX_VALUE) {\n",
        "228": "              estimatedSize--;\n",
        "229": "            }\n",
        "230": "            return true;\n",
        "231": "          } else {\n",
        "232": "            prefix = null;\n",
        "233": "          }\n",
        "234": "          if (!from.tryAdvance(fromElement -> prefix = function.apply(fromElement))) {\n",
        "235": "            return false;\n",
        "236": "          }\n",
        "237": "        }\n",
        "238": "      }\n",
        "239": "\n",
        "240": "      @Override\n",
        "241": "      public void forEachRemaining(Consumer<? super T> action) {\n",
        "242": "        if (prefix != null) {\n",
        "243": "          prefix.forEachRemaining(action);\n",
        "244": "          prefix = null;\n",
        "245": "        }\n",
        "246": "        from.forEachRemaining(fromElement -> function.apply(fromElement).forEachRemaining(action));\n",
        "247": "        estimatedSize = 0;\n",
        "248": "      }\n",
        "249": "\n",
        "250": "      @Override\n",
        "251": "      public Spliterator<T> trySplit() {\n",
        "252": "        Spliterator<F> fromSplit = from.trySplit();\n",
        "253": "        if (fromSplit != null) {\n",
        "254": "          int splitCharacteristics = characteristics & ~Spliterator.SIZED;\n",
        "255": "          long estSplitSize = estimateSize();\n",
        "256": "          if (estSplitSize < Long.MAX_VALUE) {\n",
        "257": "            estSplitSize /= 2;\n",
        "258": "            this.estimatedSize -= estSplitSize;\n",
        "259": "          }\n",
        "260": "          Spliterator<T> result =\n",
        "261": "              new FlatMapSpliterator(this.prefix, fromSplit, splitCharacteristics, estSplitSize);\n",
        "262": "          this.prefix = null;\n",
        "263": "          return result;\n",
        "264": "        } else if (prefix != null) {\n",
        "265": "          Spliterator<T> result = prefix;\n",
        "266": "          this.prefix = null;\n",
        "267": "          return result;\n",
        "268": "        } else {\n",
        "269": "          return null;\n",
        "270": "        }\n",
        "271": "      }\n",
        "272": "\n",
        "273": "      @Override\n",
        "274": "      public long estimateSize() {\n",
        "275": "        if (prefix != null) {\n",
        "276": "          estimatedSize = Math.max(estimatedSize, prefix.estimateSize());\n",
        "277": "        }\n",
        "278": "        return Math.max(estimatedSize, 0);\n",
        "279": "      }\n",
        "280": "\n",
        "281": "      @Override\n",
        "282": "      public int characteristics() {\n",
        "283": "        return characteristics;\n",
        "284": "      }\n",
        "285": "    }\n",
        "286": "    return new FlatMapSpliterator(null, fromSpliterator, topCharacteristics, topSize);\n",
        "287": "  }\n",
        "288": "}\n"
    },
    "removed": {}
}