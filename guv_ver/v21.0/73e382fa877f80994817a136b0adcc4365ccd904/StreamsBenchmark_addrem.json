{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect;\n",
        "18": "\n",
        "19": "import com.google.caliper.BeforeExperiment;\n",
        "20": "import com.google.caliper.Benchmark;\n",
        "21": "import com.google.caliper.Param;\n",
        "22": "import com.google.caliper.api.SkipThisScenarioException;\n",
        "23": "import java.util.ArrayList;\n",
        "24": "import java.util.Collection;\n",
        "25": "import java.util.LinkedList;\n",
        "26": "import java.util.NoSuchElementException;\n",
        "27": "import java.util.function.Supplier;\n",
        "28": "import java.util.stream.Stream;\n",
        "29": "\n",
        "30": "/**\n",
        "31": " * Test stream operation speed.\n",
        "32": " *\n",
        "33": " * @author Louis Wasserman\n",
        "34": " */\n",
        "35": "public class StreamsBenchmark {\n",
        "36": "  @Param({\"1\", \"10\", \"100\", \"1000\", \"10000\"})\n",
        "37": "  private int size;\n",
        "38": "\n",
        "39": "  enum CollectionType {\n",
        "40": "    ARRAY_LIST(ArrayList::new),\n",
        "41": "    LINKED_LIST(LinkedList::new);\n",
        "42": "\n",
        "43": "    final Supplier<Collection<Object>> supplier;\n",
        "44": "\n",
        "45": "    private CollectionType(Supplier<Collection<Object>> supplier) {\n",
        "46": "      this.supplier = supplier;\n",
        "47": "    }\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  @Param private CollectionType source;\n",
        "51": "\n",
        "52": "  enum Operation {\n",
        "53": "    FIND_FIRST {\n",
        "54": "      @Override\n",
        "55": "      Object operate(Stream<?> stream) {\n",
        "56": "        return stream.findFirst();\n",
        "57": "      }\n",
        "58": "    },\n",
        "59": "    STREAMS_ONLY_ELEMENT {\n",
        "60": "      @Override\n",
        "61": "      Object operate(Stream<?> stream) {\n",
        "62": "        try {\n",
        "63": "          return stream.collect(MoreCollectors.onlyElement());\n",
        "64": "        } catch (IllegalArgumentException | NoSuchElementException e) {\n",
        "65": "          throw new SkipThisScenarioException();\n",
        "66": "        }\n",
        "67": "      }\n",
        "68": "    },\n",
        "69": "    STREAMS_FIND_LAST {\n",
        "70": "      @Override\n",
        "71": "      Object operate(Stream<?> stream) {\n",
        "72": "        return Streams.findLast(stream);\n",
        "73": "      }\n",
        "74": "    },\n",
        "75": "    REDUCE_LAST {\n",
        "76": "      @Override\n",
        "77": "      Object operate(Stream<?> stream) {\n",
        "78": "        return stream.reduce((a, b) -> b);\n",
        "79": "      }\n",
        "80": "    },\n",
        "81": "    REDUCE_LAST_PARALLEL {\n",
        "82": "      @Override\n",
        "83": "      Object operate(Stream<?> stream) {\n",
        "84": "        return stream.parallel().reduce((a, b) -> b);\n",
        "85": "      }\n",
        "86": "    };\n",
        "87": "\n",
        "88": "    abstract Object operate(Stream<?> stream);\n",
        "89": "  }\n",
        "90": "\n",
        "91": "  @Param private Operation operation;\n",
        "92": "\n",
        "93": "  Collection<Object> collection;\n",
        "94": "\n",
        "95": "  @BeforeExperiment\n",
        "96": "  void setUp() {\n",
        "97": "    collection = source.supplier.get();\n",
        "98": "    for (int i = 0; i < size; i++) {\n",
        "99": "      collection.add(new Object());\n",
        "100": "    }\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  @Benchmark\n",
        "104": "  int runOperation(int reps) {\n",
        "105": "    int result = 0;\n",
        "106": "    for (int i = 0; i < reps; i++) {\n",
        "107": "      result += System.identityHashCode(operation.operate(collection.stream()));\n",
        "108": "    }\n",
        "109": "    return result;\n",
        "110": "  }\n",
        "111": "}\n"
    },
    "removed": {}
}