{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "20": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n",
        "22": "import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;\n",
        "23": "import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_REMOVE;\n",
        "24": "\n",
        "25": "import com.google.common.annotations.GwtCompatible;\n",
        "26": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "27": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "28": "import com.google.common.collect.testing.features.MapFeature;\n",
        "29": "import java.util.Map;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * A generic JUnit test which tests {@link Map#compute}. Can't be\n",
        "33": " * invoked directly; please see\n",
        "34": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "35": " *\n",
        "36": " * @author Louis Wasserman\n",
        "37": " */\n",
        "38": "@GwtCompatible\n",
        "39": "public class MapComputeTester<K, V> extends AbstractMapTester<K, V> {\n",
        "40": "  @MapFeature.Require({SUPPORTS_PUT, SUPPORTS_REMOVE})\n",
        "41": "  public void testCompute_absentToPresent() {\n",
        "42": "    assertEquals(\n",
        "43": "        \"Map.compute(absent, functionReturningValue) should return value\",\n",
        "44": "        v3(),\n",
        "45": "        getMap()\n",
        "46": "            .compute(\n",
        "47": "                k3(),\n",
        "48": "                (k, v)\n",
        "49": "                    -> {\n",
        "50": "                      assertEquals(k3(), k);\n",
        "51": "                      assertNull(v);\n",
        "52": "                      return v3();\n",
        "53": "                    }));\n",
        "54": "    expectAdded(e3());\n",
        "55": "    assertEquals(getNumElements() + 1, getMap().size());\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  @MapFeature.Require({SUPPORTS_PUT, SUPPORTS_REMOVE})\n",
        "59": "  public void testCompute_absentToAbsent() {\n",
        "60": "    assertNull(\n",
        "61": "        \"Map.compute(absent, functionReturningNull) should return null\",\n",
        "62": "        getMap()\n",
        "63": "            .compute(\n",
        "64": "                k3(),\n",
        "65": "                (k, v)\n",
        "66": "                    -> {\n",
        "67": "                      assertEquals(k3(), k);\n",
        "68": "                      assertNull(v);\n",
        "69": "                      return null;\n",
        "70": "                    }));\n",
        "71": "    expectUnchanged();\n",
        "72": "    assertEquals(getNumElements(), getMap().size());\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  @MapFeature.Require({SUPPORTS_PUT, SUPPORTS_REMOVE})\n",
        "76": "  @CollectionSize.Require(absent = ZERO)\n",
        "77": "  public void testCompute_presentToPresent() {\n",
        "78": "    assertEquals(\n",
        "79": "        \"Map.compute(present, functionReturningValue) should return new value\",\n",
        "80": "        v3(),\n",
        "81": "        getMap()\n",
        "82": "            .compute(\n",
        "83": "                k0(),\n",
        "84": "                (k, v)\n",
        "85": "                    -> {\n",
        "86": "                      assertEquals(k0(), k);\n",
        "87": "                      assertEquals(v0(), v);\n",
        "88": "                      return v3();\n",
        "89": "                    }));\n",
        "90": "    expectReplacement(entry(k0(), v3()));\n",
        "91": "    assertEquals(getNumElements(), getMap().size());\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  @MapFeature.Require({SUPPORTS_PUT, SUPPORTS_REMOVE})\n",
        "95": "  @CollectionSize.Require(absent = ZERO)\n",
        "96": "  public void testCompute_presentToAbsent() {\n",
        "97": "    assertNull(\n",
        "98": "        \"Map.compute(present, functionReturningNull) should return null\",\n",
        "99": "        getMap()\n",
        "100": "            .compute(\n",
        "101": "                k0(),\n",
        "102": "                (k, v)\n",
        "103": "                    -> {\n",
        "104": "                      assertEquals(k0(), k);\n",
        "105": "                      assertEquals(v0(), v);\n",
        "106": "                      return null;\n",
        "107": "                    }));\n",
        "108": "    expectMissing(e0());\n",
        "109": "    expectMissingKeys(k0());\n",
        "110": "    assertEquals(getNumElements() - 1, getMap().size());\n",
        "111": "  }\n",
        "112": "\n",
        "113": "  @MapFeature.Require({SUPPORTS_PUT, SUPPORTS_REMOVE, ALLOWS_NULL_VALUES})\n",
        "114": "  @CollectionSize.Require(absent = ZERO)\n",
        "115": "  public void testCompute_presentNullToPresentNonnull() {\n",
        "116": "    initMapWithNullValue();\n",
        "117": "    V value = getValueForNullKey();\n",
        "118": "    assertEquals(\n",
        "119": "        \"Map.compute(presentMappedToNull, functionReturningValue) should return new value\",\n",
        "120": "        value,\n",
        "121": "        getMap()\n",
        "122": "            .compute(\n",
        "123": "                getKeyForNullValue(),\n",
        "124": "                (k, v)\n",
        "125": "                    -> {\n",
        "126": "                      assertEquals(getKeyForNullValue(), k);\n",
        "127": "                      assertNull(v);\n",
        "128": "                      return value;\n",
        "129": "                    }));\n",
        "130": "    expectReplacement(entry(getKeyForNullValue(), value));\n",
        "131": "    assertEquals(getNumElements(), getMap().size());\n",
        "132": "  }\n",
        "133": "\n",
        "134": "  @MapFeature.Require({SUPPORTS_PUT, SUPPORTS_REMOVE, ALLOWS_NULL_VALUES})\n",
        "135": "  @CollectionSize.Require(absent = ZERO)\n",
        "136": "  public void testCompute_presentNullToNull() {\n",
        "137": "    // The spec is somewhat ambiguous about this case, but the actual default implementation\n",
        "138": "    // in Map will remove a present null.\n",
        "139": "    initMapWithNullValue();\n",
        "140": "    assertNull(\n",
        "141": "        \"Map.compute(presentMappedToNull, functionReturningNull) should return null\",\n",
        "142": "        getMap()\n",
        "143": "            .compute(\n",
        "144": "                getKeyForNullValue(),\n",
        "145": "                (k, v)\n",
        "146": "                    -> {\n",
        "147": "                      assertEquals(getKeyForNullValue(), k);\n",
        "148": "                      assertNull(v);\n",
        "149": "                      return null;\n",
        "150": "                    }));\n",
        "151": "    expectMissingKeys(getKeyForNullValue());\n",
        "152": "    assertEquals(getNumElements() - 1, getMap().size());\n",
        "153": "  }\n",
        "154": "\n",
        "155": "  @MapFeature.Require({SUPPORTS_PUT, SUPPORTS_REMOVE, ALLOWS_NULL_KEYS})\n",
        "156": "  @CollectionSize.Require(absent = ZERO)\n",
        "157": "  public void testCompute_nullKeyPresentToPresent() {\n",
        "158": "    initMapWithNullKey();\n",
        "159": "    assertEquals(\n",
        "160": "        \"Map.compute(present, functionReturningValue) should return new value\",\n",
        "161": "        v3(),\n",
        "162": "        getMap()\n",
        "163": "            .compute(\n",
        "164": "                null,\n",
        "165": "                (k, v)\n",
        "166": "                    -> {\n",
        "167": "                      assertNull(k);\n",
        "168": "                      assertEquals(getValueForNullKey(), v);\n",
        "169": "                      return v3();\n",
        "170": "                    }));\n",
        "171": "    assertEquals(getNumElements(), getMap().size());\n",
        "172": "  }\n",
        "173": "\n",
        "174": "  static class ExpectedException extends RuntimeException {}\n",
        "175": "\n",
        "176": "  @MapFeature.Require({SUPPORTS_PUT, SUPPORTS_REMOVE})\n",
        "177": "  @CollectionSize.Require(absent = ZERO)\n",
        "178": "  public void testCompute_presentFunctionThrows() {\n",
        "179": "    try {\n",
        "180": "      getMap()\n",
        "181": "          .compute(\n",
        "182": "              k0(),\n",
        "183": "              (k, v) -> {\n",
        "184": "                assertEquals(k0(), k);\n",
        "185": "                assertEquals(v0(), v);\n",
        "186": "                throw new ExpectedException();\n",
        "187": "              });\n",
        "188": "      fail(\"Expected ExpectedException\");\n",
        "189": "    } catch (ExpectedException expected) {\n",
        "190": "    }\n",
        "191": "    expectUnchanged();\n",
        "192": "  }\n",
        "193": "\n",
        "194": "  @MapFeature.Require({SUPPORTS_PUT, SUPPORTS_REMOVE})\n",
        "195": "  public void testCompute_absentFunctionThrows() {\n",
        "196": "    try {\n",
        "197": "      getMap()\n",
        "198": "          .compute(\n",
        "199": "              k3(),\n",
        "200": "              (k, v) -> {\n",
        "201": "                assertEquals(k3(), k);\n",
        "202": "                assertNull(v);\n",
        "203": "                throw new ExpectedException();\n",
        "204": "              });\n",
        "205": "      fail(\"Expected ExpectedException\");\n",
        "206": "    } catch (ExpectedException expected) {\n",
        "207": "    }\n",
        "208": "    expectUnchanged();\n",
        "209": "  }\n",
        "210": "}\n"
    },
    "removed": {}
}