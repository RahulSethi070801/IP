{
    "addition": {
        "19": "import static com.google.common.collect.testing.Helpers.mapEntry;\n",
        "24": "import com.google.common.base.Equivalence;\n",
        "47": "import com.google.common.testing.CollectorTester;\n",
        "58": "import java.util.stream.Collector;\n",
        "59": "import java.util.stream.Stream;\n",
        "608": "\n",
        "609": "    public void testToImmutableMap() {\n",
        "610": "      Collector<Entry<String, Integer>, ?, ImmutableMap<String, Integer>> collector =\n",
        "611": "          ImmutableMap.toImmutableMap(Entry::getKey, Entry::getValue);\n",
        "612": "      Equivalence<ImmutableMap<String, Integer>> equivalence =\n",
        "613": "          Equivalence.equals()\n",
        "614": "              .<Entry<String, Integer>>pairwise()\n",
        "615": "              .onResultOf(ImmutableMap::entrySet);\n",
        "616": "      CollectorTester.of(collector, equivalence)\n",
        "617": "          .expectCollects(\n",
        "618": "              ImmutableMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "619": "              mapEntry(\"one\", 1),\n",
        "620": "              mapEntry(\"two\", 2),\n",
        "621": "              mapEntry(\"three\", 3));\n",
        "622": "    }\n",
        "623": "\n",
        "624": "    public void testToImmutableMap_exceptionOnDuplicateKey() {\n",
        "625": "      Collector<Entry<String, Integer>, ?, ImmutableMap<String, Integer>> collector =\n",
        "626": "          ImmutableMap.toImmutableMap(Entry::getKey, Entry::getValue);\n",
        "627": "      try {\n",
        "628": "        Stream.of(mapEntry(\"one\", 1), mapEntry(\"one\", 11)).collect(collector);\n",
        "629": "        fail(\"Expected IllegalArgumentException\");\n",
        "630": "      } catch (IllegalArgumentException expected) {\n",
        "631": "      }\n",
        "632": "    }\n",
        "633": "\n",
        "634": "    public void testToImmutableMapMerging() {\n",
        "635": "      Collector<Entry<String, Integer>, ?, ImmutableMap<String, Integer>> collector =\n",
        "636": "          ImmutableMap.toImmutableMap(Entry::getKey, Entry::getValue, Integer::sum);\n",
        "637": "      Equivalence<ImmutableMap<String, Integer>> equivalence =\n",
        "638": "          Equivalence.equals()\n",
        "639": "              .<Entry<String, Integer>>pairwise()\n",
        "640": "              .onResultOf(ImmutableMap::entrySet);\n",
        "641": "      CollectorTester.of(collector, equivalence)\n",
        "642": "          .expectCollects(\n",
        "643": "              ImmutableMap.of(\"one\", 1, \"two\", 4, \"three\", 3),\n",
        "644": "              mapEntry(\"one\", 1),\n",
        "645": "              mapEntry(\"two\", 2),\n",
        "646": "              mapEntry(\"three\", 3),\n",
        "647": "              mapEntry(\"two\", 2));\n",
        "648": "    }\n"
    },
    "removed": {}
}