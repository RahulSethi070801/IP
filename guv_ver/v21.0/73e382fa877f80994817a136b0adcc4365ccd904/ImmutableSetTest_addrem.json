{
    "addition": {
        "23": "import com.google.common.base.Equivalence;\n",
        "33": "import com.google.common.testing.CollectorTester;\n",
        "39": "import java.util.function.BiPredicate;\n",
        "40": "import java.util.stream.Collector;\n",
        "215": "  public void testToImmutableSet() {\n",
        "216": "    Collector<String, ?, ImmutableSet<String>> collector = ImmutableSet.toImmutableSet();\n",
        "217": "    Equivalence<ImmutableSet<String>> equivalence =\n",
        "218": "        Equivalence.equals().onResultOf(ImmutableSet::asList);\n",
        "219": "    CollectorTester.of(collector, equivalence)\n",
        "220": "        .expectCollects(ImmutableSet.of(\"a\", \"b\", \"c\", \"d\"), \"a\", \"b\", \"a\", \"c\", \"b\", \"b\", \"d\");\n",
        "221": "  }\n",
        "222": "\n",
        "223": "  public void testToImmutableSet_duplicates() {\n",
        "224": "    class TypeWithDuplicates {\n",
        "225": "      final int a;\n",
        "226": "      final int b;\n",
        "227": "\n",
        "228": "      TypeWithDuplicates(int a, int b) {\n",
        "229": "        this.a = a;\n",
        "230": "        this.b = b;\n",
        "231": "      }\n",
        "232": "\n",
        "233": "      @Override\n",
        "234": "      public int hashCode() {\n",
        "235": "        return a;\n",
        "236": "      }\n",
        "237": "\n",
        "238": "      @Override\n",
        "239": "      public boolean equals(Object obj) {\n",
        "240": "        return obj instanceof TypeWithDuplicates && ((TypeWithDuplicates) obj).a == a;\n",
        "241": "      }\n",
        "242": "\n",
        "243": "      public boolean fullEquals(TypeWithDuplicates other) {\n",
        "244": "        return other != null && a == other.a && b == other.b;\n",
        "245": "      }\n",
        "246": "    }\n",
        "247": "\n",
        "248": "    Collector<TypeWithDuplicates, ?, ImmutableSet<TypeWithDuplicates>> collector =\n",
        "249": "        ImmutableSet.toImmutableSet();\n",
        "250": "    BiPredicate<ImmutableSet<TypeWithDuplicates>, ImmutableSet<TypeWithDuplicates>> equivalence =\n",
        "251": "        (set1, set2) -> {\n",
        "252": "          if (!set1.equals(set2)) {\n",
        "253": "            return false;\n",
        "254": "          }\n",
        "255": "          for (int i = 0; i < set1.size(); i++) {\n",
        "256": "            if (!set1.asList().get(i).fullEquals(set2.asList().get(i))) {\n",
        "257": "              return false;\n",
        "258": "            }\n",
        "259": "          }\n",
        "260": "          return true;\n",
        "261": "        };\n",
        "262": "    TypeWithDuplicates a = new TypeWithDuplicates(1, 1);\n",
        "263": "    TypeWithDuplicates b1 = new TypeWithDuplicates(2, 1);\n",
        "264": "    TypeWithDuplicates b2 = new TypeWithDuplicates(2, 2);\n",
        "265": "    TypeWithDuplicates c = new TypeWithDuplicates(3, 1);\n",
        "266": "    CollectorTester.of(collector, equivalence)\n",
        "267": "        .expectCollects(ImmutableSet.of(a, b1, c), a, b1, c, b2);\n",
        "268": "  }\n",
        "269": "\n"
    },
    "removed": {}
}