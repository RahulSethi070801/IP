{
    "addition": {
        "24": "import com.google.common.annotations.Beta;\n",
        "25": "\n",
        "32": "import java.util.LinkedHashMap;\n",
        "36": "import java.util.Spliterator;\n",
        "37": "import java.util.function.BinaryOperator;\n",
        "38": "import java.util.function.Function;\n",
        "39": "import java.util.stream.Collector;\n",
        "40": "import java.util.stream.Collectors;\n",
        "41": "\n",
        "76": "  @Beta\n",
        "77": "  public static <T, K, V> Collector<T, ?, ImmutableMap<K, V>> toImmutableMap(\n",
        "78": "      Function<? super T, ? extends K> keyFunction,\n",
        "79": "      Function<? super T, ? extends V> valueFunction) {\n",
        "80": "    return CollectCollectors.toImmutableMap(keyFunction, valueFunction);\n",
        "81": "  }\n",
        "82": "  \n",
        "83": "  @Beta\n",
        "84": "  public static <T, K, V> Collector<T, ?, ImmutableMap<K, V>> toImmutableMap(\n",
        "85": "      Function<? super T, ? extends K> keyFunction,\n",
        "86": "      Function<? super T, ? extends V> valueFunction,\n",
        "87": "      BinaryOperator<V> mergeFunction) {\n",
        "88": "    checkNotNull(keyFunction);\n",
        "89": "    checkNotNull(valueFunction);\n",
        "90": "    checkNotNull(mergeFunction);\n",
        "91": "    return Collectors.collectingAndThen(\n",
        "92": "        Collectors.toMap(keyFunction, valueFunction, mergeFunction, LinkedHashMap::new),\n",
        "93": "        ImmutableMap::copyOf);\n",
        "94": "  }\n",
        "95": "\n",
        "184": "    Builder<K, V> combine(Builder<K, V> other) {\n",
        "185": "      checkNotNull(other);\n",
        "186": "      entries.addAll(other.entries);\n",
        "187": "      return this;\n",
        "188": "    }\n",
        "189": "\n",
        "333": "  Spliterator<K> keySpliterator() {\n",
        "334": "    return CollectSpliterators.map(entrySet().spliterator(), Entry::getKey);\n",
        "335": "  }\n",
        "336": "\n"
    },
    "removed": {}
}