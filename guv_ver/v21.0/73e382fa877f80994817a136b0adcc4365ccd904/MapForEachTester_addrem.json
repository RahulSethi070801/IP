{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.KNOWN_ORDER;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\n",
        "22": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "26": "import com.google.common.collect.testing.Helpers;\n",
        "27": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "28": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "29": "import com.google.common.collect.testing.features.MapFeature;\n",
        "30": "import java.util.ArrayList;\n",
        "31": "import java.util.Arrays;\n",
        "32": "import java.util.List;\n",
        "33": "import java.util.Map;\n",
        "34": "import java.util.Map.Entry;\n",
        "35": "\n",
        "36": "/**\n",
        "37": " * A generic JUnit test which tests {@link Map#forEach}. Can't be\n",
        "38": " * invoked directly; please see\n",
        "39": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "40": " *\n",
        "41": " * @author Louis Wasserman\n",
        "42": " */\n",
        "43": "@GwtCompatible\n",
        "44": "public class MapForEachTester<K, V> extends AbstractMapTester<K, V> {\n",
        "45": "  @CollectionFeature.Require(KNOWN_ORDER)\n",
        "46": "  public void testForEachKnownOrder() {\n",
        "47": "    List<Entry<K, V>> entries = new ArrayList<>();\n",
        "48": "    getMap().forEach((k, v) -> entries.add(entry(k, v)));\n",
        "49": "    assertEquals(getOrderedElements(), entries);\n",
        "50": "  }\n",
        "51": "  \n",
        "52": "  @CollectionFeature.Require(absent = KNOWN_ORDER)\n",
        "53": "  public void testForEachUnknownOrder() {\n",
        "54": "    List<Entry<K, V>> entries = new ArrayList<>();\n",
        "55": "    getMap().forEach((k, v) -> entries.add(entry(k, v)));\n",
        "56": "    Helpers.assertEqualIgnoringOrder(getSampleEntries(), entries);\n",
        "57": "  }\n",
        "58": "  \n",
        "59": "  @MapFeature.Require(ALLOWS_NULL_KEYS)\n",
        "60": "  @CollectionSize.Require(absent = ZERO)\n",
        "61": "  public void testForEach_nullKeys() {\n",
        "62": "    initMapWithNullKey();\n",
        "63": "    List<Entry<K, V>> expectedEntries = Arrays.asList(createArrayWithNullKey());\n",
        "64": "    List<Entry<K, V>> entries = new ArrayList<>();\n",
        "65": "    getMap().forEach((k, v) -> entries.add(entry(k, v)));\n",
        "66": "    Helpers.assertEqualIgnoringOrder(expectedEntries, entries);\n",
        "67": "  }\n",
        "68": "  \n",
        "69": "  @MapFeature.Require(ALLOWS_NULL_VALUES)\n",
        "70": "  @CollectionSize.Require(absent = ZERO)\n",
        "71": "  public void testForEach_nullValues() {\n",
        "72": "    initMapWithNullValue();\n",
        "73": "    List<Entry<K, V>> expectedEntries = Arrays.asList(createArrayWithNullValue());\n",
        "74": "    List<Entry<K, V>> entries = new ArrayList<>();\n",
        "75": "    getMap().forEach((k, v) -> entries.add(entry(k, v)));\n",
        "76": "    Helpers.assertEqualIgnoringOrder(expectedEntries, entries);\n",
        "77": "  }\n",
        "78": "}\n",
        "79": "\n"
    },
    "removed": {}
}