{
    "addition": {
        "38": "import java.nio.file.Path;\n",
        "39": "import java.nio.file.StandardOpenOption;\n",
        "41": "import java.util.logging.Level;\n",
        "104": "  @AndroidIncompatible\n",
        "105": "  public static ByteSourceFactory pathByteSourceFactory() {\n",
        "106": "    return new PathByteSourceFactory();\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  @AndroidIncompatible\n",
        "110": "  public static ByteSinkFactory pathByteSinkFactory() {\n",
        "111": "    return new PathByteSinkFactory(null);\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  @AndroidIncompatible\n",
        "115": "  public static ByteSinkFactory appendingPathByteSinkFactory() {\n",
        "116": "    String initialString = IoTestCase.ASCII + IoTestCase.I18N;\n",
        "117": "    return new PathByteSinkFactory(initialString.getBytes(Charsets.UTF_8));\n",
        "118": "  }\n",
        "119": "\n",
        "120": "  @AndroidIncompatible\n",
        "121": "  public static CharSourceFactory pathCharSourceFactory() {\n",
        "122": "    return new PathCharSourceFactory();\n",
        "123": "  }\n",
        "124": "\n",
        "125": "  @AndroidIncompatible\n",
        "126": "  public static CharSinkFactory pathCharSinkFactory() {\n",
        "127": "    return new PathCharSinkFactory(null);\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  @AndroidIncompatible\n",
        "131": "  public static CharSinkFactory appendingPathCharSinkFactory() {\n",
        "132": "    String initialString = IoTestCase.ASCII + IoTestCase.I18N;\n",
        "133": "    return new PathCharSinkFactory(initialString);\n",
        "134": "  }\n",
        "135": "\n",
        "480": "\n",
        "481": "  @AndroidIncompatible\n",
        "482": "  private abstract static class Jdk7FileFactory {\n",
        "483": "\n",
        "484": "    private static final Logger logger = Logger.getLogger(Jdk7FileFactory.class.getName());\n",
        "485": "\n",
        "486": "    private final ThreadLocal<Path> fileThreadLocal = new ThreadLocal<>();\n",
        "487": "\n",
        "488": "    protected Path createFile() throws IOException {\n",
        "489": "      Path file = java.nio.file.Files.createTempFile(\"SinkSourceFile\", \"txt\");\n",
        "490": "      fileThreadLocal.set(file);\n",
        "491": "      return file;\n",
        "492": "    }\n",
        "493": "\n",
        "494": "    protected Path getPath() {\n",
        "495": "      return fileThreadLocal.get();\n",
        "496": "    }\n",
        "497": "\n",
        "498": "    public final void tearDown() throws IOException {\n",
        "499": "      try {\n",
        "500": "        java.nio.file.Files.delete(fileThreadLocal.get());\n",
        "501": "      } catch (IOException e) {\n",
        "502": "        logger.log(Level.WARNING, \"Unable to delete file: \" + fileThreadLocal.get(), e);\n",
        "503": "      }\n",
        "504": "      fileThreadLocal.remove();\n",
        "505": "    }\n",
        "506": "  }\n",
        "507": "\n",
        "508": "  @AndroidIncompatible\n",
        "509": "  private static class PathByteSourceFactory extends Jdk7FileFactory implements ByteSourceFactory {\n",
        "510": "\n",
        "511": "    @Override\n",
        "512": "    public ByteSource createSource(byte[] bytes) throws IOException {\n",
        "513": "      checkNotNull(bytes);\n",
        "514": "      Path file = createFile();\n",
        "515": "\n",
        "516": "      java.nio.file.Files.write(file, bytes);\n",
        "517": "      return MoreFiles.asByteSource(file);\n",
        "518": "    }\n",
        "519": "\n",
        "520": "    @Override\n",
        "521": "    public byte[] getExpected(byte[] bytes) {\n",
        "522": "      return checkNotNull(bytes);\n",
        "523": "    }\n",
        "524": "  }\n",
        "525": "\n",
        "526": "  @AndroidIncompatible\n",
        "527": "  private static class PathByteSinkFactory extends Jdk7FileFactory implements ByteSinkFactory {\n",
        "528": "\n",
        "529": "    private final byte[] initialBytes;\n",
        "530": "\n",
        "531": "    private PathByteSinkFactory(@Nullable byte[] initialBytes) {\n",
        "532": "      this.initialBytes = initialBytes;\n",
        "533": "    }\n",
        "534": "\n",
        "535": "    @Override\n",
        "536": "    public ByteSink createSink() throws IOException {\n",
        "537": "      Path file = createFile();\n",
        "538": "      if (initialBytes != null) {\n",
        "539": "        java.nio.file.Files.write(file, initialBytes);\n",
        "540": "        return MoreFiles.asByteSink(file, StandardOpenOption.APPEND);\n",
        "541": "      }\n",
        "542": "      return MoreFiles.asByteSink(file);\n",
        "543": "    }\n",
        "544": "\n",
        "545": "    @Override\n",
        "546": "    public byte[] getExpected(byte[] bytes) {\n",
        "547": "      if (initialBytes == null) {\n",
        "548": "        return checkNotNull(bytes);\n",
        "549": "      } else {\n",
        "550": "        byte[] result = new byte[initialBytes.length + bytes.length];\n",
        "551": "        System.arraycopy(initialBytes, 0, result, 0, initialBytes.length);\n",
        "552": "        System.arraycopy(bytes, 0, result, initialBytes.length, bytes.length);\n",
        "553": "        return result;\n",
        "554": "      }\n",
        "555": "    }\n",
        "556": "\n",
        "557": "    @Override\n",
        "558": "    public byte[] getSinkContents() throws IOException {\n",
        "559": "      Path file = getPath();\n",
        "560": "      return java.nio.file.Files.readAllBytes(file);\n",
        "561": "    }\n",
        "562": "  }\n",
        "563": "\n",
        "564": "  @AndroidIncompatible\n",
        "565": "  private static class PathCharSourceFactory extends Jdk7FileFactory implements CharSourceFactory {\n",
        "566": "\n",
        "567": "    @Override\n",
        "568": "    public CharSource createSource(String string) throws IOException {\n",
        "569": "      checkNotNull(string);\n",
        "570": "      Path file = createFile();\n",
        "571": "      try (Writer writer = java.nio.file.Files.newBufferedWriter(file, Charsets.UTF_8)) {\n",
        "572": "        writer.write(string);\n",
        "573": "      }\n",
        "574": "      return MoreFiles.asCharSource(file, Charsets.UTF_8);\n",
        "575": "    }\n",
        "576": "\n",
        "577": "    @Override\n",
        "578": "    public String getExpected(String string) {\n",
        "579": "      return checkNotNull(string);\n",
        "580": "    }\n",
        "581": "  }\n",
        "582": "\n",
        "583": "  @AndroidIncompatible\n",
        "584": "  private static class PathCharSinkFactory extends Jdk7FileFactory implements CharSinkFactory {\n",
        "585": "\n",
        "586": "    private final String initialString;\n",
        "587": "\n",
        "588": "    private PathCharSinkFactory(@Nullable String initialString) {\n",
        "589": "      this.initialString = initialString;\n",
        "590": "    }\n",
        "591": "\n",
        "592": "    @Override\n",
        "593": "    public CharSink createSink() throws IOException {\n",
        "594": "      Path file = createFile();\n",
        "595": "      if (initialString != null) {\n",
        "596": "        try (Writer writer = java.nio.file.Files.newBufferedWriter(file, Charsets.UTF_8)) {\n",
        "597": "          writer.write(initialString);\n",
        "598": "        }\n",
        "599": "        return MoreFiles.asCharSink(file, Charsets.UTF_8, StandardOpenOption.APPEND);\n",
        "600": "      }\n",
        "601": "      return MoreFiles.asCharSink(file, Charsets.UTF_8);\n",
        "602": "    }\n",
        "603": "\n",
        "604": "    @Override\n",
        "605": "    public String getExpected(String string) {\n",
        "606": "      checkNotNull(string);\n",
        "607": "      return initialString == null\n",
        "608": "          ? string\n",
        "609": "          : initialString + string;\n",
        "610": "    }\n",
        "611": "\n",
        "612": "    @Override\n",
        "613": "    public String getSinkContents() throws IOException {\n",
        "614": "      Path file = getPath();\n",
        "615": "      try (Reader reader = java.nio.file.Files.newBufferedReader(file, Charsets.UTF_8)) {\n",
        "616": "        StringBuilder builder = new StringBuilder();\n",
        "617": "        for (int c = reader.read(); c != -1; c = reader.read()) {\n",
        "618": "          builder.append((char) c);\n",
        "619": "        }\n",
        "620": "        return builder.toString();\n",
        "621": "      }\n",
        "622": "    }\n",
        "623": "  }\n"
    },
    "removed": {}
}