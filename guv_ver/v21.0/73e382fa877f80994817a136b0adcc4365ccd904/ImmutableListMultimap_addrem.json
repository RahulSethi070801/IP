{
    "addition": {
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "34": "import java.util.function.Function;\n",
        "35": "import java.util.stream.Collector;\n",
        "52": "  /**\n",
        "53": "   * Returns a {@link Collector} that accumulates elements into an {@code ImmutableListMultimap}\n",
        "54": "   * whose keys and values are the result of applying the provided mapping functions to the input\n",
        "55": "   * elements.\n",
        "56": "   *\n",
        "57": "   * <p>For streams with {@linkplain java.util.stream#Ordering defined encounter order}, that order\n",
        "58": "   * is preserved, but entries are {@linkplain ImmutableMultimap#iteration grouped by key}.\n",
        "59": "   *\n",
        "60": "   * Example:\n",
        "61": "   * <pre>   {@code\n",
        "62": "   *\n",
        "63": "   *   static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "64": "   *       Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n",
        "65": "   *           .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1)));\n",
        "66": "   *\n",
        "67": "   *   // is equivalent to\n",
        "68": "   *\n",
        "69": "   *   static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "70": "   *       new ImmutableListMultimap.Builder<Character, String>()\n",
        "71": "   *           .put('b', \"anana\")\n",
        "72": "   *           .putAll('a', \"pple\", \"sparagus\")\n",
        "73": "   *           .putAll('c', \"arrot\", \"herry\")\n",
        "74": "   *           .build();}</pre>\n",
        "75": "   *\n",
        "76": "   * @since 21.0\n",
        "77": "   */\n",
        "78": "  @Beta\n",
        "79": "  public static <T, K, V> Collector<T, ?, ImmutableListMultimap<K, V>> toImmutableListMultimap(\n",
        "80": "      Function<? super T, ? extends K> keyFunction,\n",
        "81": "      Function<? super T, ? extends V> valueFunction) {\n",
        "82": "    checkNotNull(keyFunction, \"keyFunction\");\n",
        "83": "    checkNotNull(valueFunction, \"valueFunction\");\n",
        "84": "    return Collector.of(\n",
        "85": "        ImmutableListMultimap::<K, V>builder,\n",
        "86": "        (builder, t) -> builder.put(keyFunction.apply(t), valueFunction.apply(t)),\n",
        "87": "        ImmutableListMultimap.Builder::combine,\n",
        "88": "        ImmutableListMultimap.Builder::build);\n",
        "89": "  }\n",
        "243": "    @CanIgnoreReturnValue\n",
        "244": "    @Override\n",
        "245": "    Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other) {\n",
        "246": "      super.combine(other);\n",
        "247": "      return this;\n",
        "248": "    }\n",
        "249": "\n"
    },
    "removed": {}
}