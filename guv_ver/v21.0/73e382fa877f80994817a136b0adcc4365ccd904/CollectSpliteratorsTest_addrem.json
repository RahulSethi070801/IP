{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.collect;\n",
        "16": "\n",
        "17": "import static com.google.common.truth.Truth.assertThat;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.GwtCompatible;\n",
        "20": "import com.google.common.base.Ascii;\n",
        "21": "import com.google.common.collect.testing.SpliteratorTester;\n",
        "22": "import java.util.Arrays;\n",
        "23": "import java.util.List;\n",
        "24": "import java.util.Spliterator;\n",
        "25": "import junit.framework.TestCase;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * Tests for {@code CollectSpliterators}.\n",
        "29": " */\n",
        "30": "@GwtCompatible\n",
        "31": "public class CollectSpliteratorsTest extends TestCase {\n",
        "32": "  public void testMap() {\n",
        "33": "    SpliteratorTester.of(\n",
        "34": "            ()\n",
        "35": "                -> CollectSpliterators.map(\n",
        "36": "                    Arrays.spliterator(new String[] {\"a\", \"b\", \"c\", \"d\", \"e\"}), Ascii::toUpperCase))\n",
        "37": "        .expect(\"A\", \"B\", \"C\", \"D\", \"E\");\n",
        "38": "  }\n",
        "39": "\n",
        "40": "  public void testFlatMap() {\n",
        "41": "    SpliteratorTester.of(\n",
        "42": "            ()\n",
        "43": "                -> CollectSpliterators.flatMap(\n",
        "44": "                    Arrays.spliterator(new String[] {\"abc\", \"\", \"de\", \"f\", \"g\", \"\"}),\n",
        "45": "                    (String str) -> Lists.charactersOf(str).spliterator(),\n",
        "46": "                    Spliterator.SIZED | Spliterator.DISTINCT | Spliterator.NONNULL,\n",
        "47": "                    7))\n",
        "48": "        .expect('a', 'b', 'c', 'd', 'e', 'f', 'g');\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  public void testMultisetsSpliterator() {\n",
        "52": "    Multiset<String> multiset = TreeMultiset.create();\n",
        "53": "    multiset.add(\"a\", 3);\n",
        "54": "    multiset.add(\"b\", 1);\n",
        "55": "    multiset.add(\"c\", 2);\n",
        "56": "\n",
        "57": "    List<String> actualValues = Lists.newArrayList();\n",
        "58": "    multiset.spliterator().forEachRemaining(actualValues::add);\n",
        "59": "    assertThat(multiset).containsExactly(\n",
        "60": "        \"a\",\n",
        "61": "        \"a\",\n",
        "62": "        \"a\",\n",
        "63": "        \"b\",\n",
        "64": "        \"c\",\n",
        "65": "        \"c\").inOrder();\n",
        "66": "  }\n",
        "67": "}\n"
    },
    "removed": {}
}