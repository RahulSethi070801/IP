{
    "addition": {
        "39": "import java.util.function.Function;\n",
        "40": "import java.util.stream.Collector;\n",
        "57": "  /**\n",
        "58": "   * Returns a {@link Collector} that accumulates elements into an {@code ImmutableSetMultimap}\n",
        "59": "   * whose keys and values are the result of applying the provided mapping functions to the input\n",
        "60": "   * elements.\n",
        "61": "   *\n",
        "62": "   * <p>For streams with {@linkplain java.util.stream#Ordering defined encounter order}, that order\n",
        "63": "   * is preserved, but entries are {@linkplain ImmutableMultimap#iteration grouped by key}.\n",
        "64": "   *\n",
        "65": "   * Example:\n",
        "66": "   * <pre>   {@code\n",
        "67": "   *\n",
        "68": "   *   static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "69": "   *       Stream.of(\"banana\", \"apple\", \"carrot\", \"asparagus\", \"cherry\")\n",
        "70": "   *           .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1)));\n",
        "71": "   *\n",
        "72": "   *   // is equivalent to\n",
        "73": "   *\n",
        "74": "   *   static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =\n",
        "75": "   *       new ImmutableSetMultimap.Builder<Character, String>()\n",
        "76": "   *           .put('b', \"anana\")\n",
        "77": "   *           .putAll('a', \"pple\", \"sparagus\")\n",
        "78": "   *           .putAll('c', \"arrot\", \"herry\")\n",
        "79": "   *           .build();}</pre>\n",
        "80": "   * @since 21.0\n",
        "81": "   */\n",
        "82": "  @Beta\n",
        "83": "  public static <T, K, V> Collector<T, ?, ImmutableSetMultimap<K, V>> toImmutableSetMultimap(\n",
        "84": "      Function<? super T, ? extends K> keyFunction,\n",
        "85": "      Function<? super T, ? extends V> valueFunction) {\n",
        "86": "    checkNotNull(keyFunction, \"keyFunction\");\n",
        "87": "    checkNotNull(valueFunction, \"valueFunction\");\n",
        "88": "    return Collector.of(\n",
        "89": "        ImmutableSetMultimap::<K, V>builder,\n",
        "90": "        (builder, t) -> builder.put(keyFunction.apply(t), valueFunction.apply(t)),\n",
        "91": "        ImmutableSetMultimap.Builder::combine,\n",
        "92": "        ImmutableSetMultimap.Builder::build);\n",
        "93": "  }\n",
        "265": "    @CanIgnoreReturnValue\n",
        "266": "    @Override\n",
        "267": "    Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other) {\n",
        "268": "      super.combine(other);\n",
        "269": "      return this;\n",
        "270": "    }\n",
        "271": "\n"
    },
    "removed": {}
}