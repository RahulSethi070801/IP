{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2013 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_VALUES;\n",
        "20": "import static com.google.common.collect.testing.features.CollectionFeature.KNOWN_ORDER;\n",
        "21": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_ADD;\n",
        "22": "import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_REMOVE;\n",
        "23": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "24": "\n",
        "25": "import com.google.common.annotations.GwtCompatible;\n",
        "26": "import com.google.common.annotations.GwtIncompatible;\n",
        "27": "import com.google.common.collect.testing.AbstractCollectionTester;\n",
        "28": "import com.google.common.collect.testing.Helpers;\n",
        "29": "import com.google.common.collect.testing.SpliteratorTester;\n",
        "30": "import com.google.common.collect.testing.features.CollectionFeature;\n",
        "31": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "32": "import java.lang.reflect.Method;\n",
        "33": "import java.util.Spliterator;\n",
        "34": "\n",
        "35": "/**\n",
        "36": " * A generic JUnit test which tests {@code spliterator} operations on a collection.\n",
        "37": " * Can't be invoked directly; please see\n",
        "38": " * {@link com.google.common.collect.testing.CollectionTestSuiteBuilder}.\n",
        "39": " *\n",
        "40": " * @author Louis Wasserman\n",
        "41": " */\n",
        "42": "@GwtCompatible(emulated = true)\n",
        "43": "public class CollectionSpliteratorTester<E> extends AbstractCollectionTester<E> {\n",
        "44": "\n",
        "45": "  @CollectionFeature.Require(absent = KNOWN_ORDER)\n",
        "46": "  public void testSpliteratorUnknownOrder() {\n",
        "47": "    synchronized (collection) {\n",
        "48": "      SpliteratorTester.of(collection::spliterator).expect(getSampleElements());\n",
        "49": "    }\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  @CollectionFeature.Require(KNOWN_ORDER)\n",
        "53": "  public void testSpliteratorKnownOrder() {\n",
        "54": "    synchronized (collection) {\n",
        "55": "      SpliteratorTester.of(collection::spliterator).expect(getOrderedElements()).inOrder();\n",
        "56": "    }\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  @CollectionFeature.Require(ALLOWS_NULL_VALUES)\n",
        "60": "  @CollectionSize.Require(absent = ZERO)\n",
        "61": "  public void testSpliteratorNullable() {\n",
        "62": "    initCollectionWithNullElement();\n",
        "63": "    synchronized (collection) { // for Collections.synchronized\n",
        "64": "      assertFalse(collection.spliterator().hasCharacteristics(Spliterator.NONNULL));\n",
        "65": "    }\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  @CollectionFeature.Require(SUPPORTS_ADD)\n",
        "69": "  public void testSpliteratorNotImmutable_CollectionAllowsAdd() {\n",
        "70": "    // If add is supported, verify that IMMUTABLE is not reported.\n",
        "71": "    synchronized (collection) { // for Collections.synchronized\n",
        "72": "      assertFalse(collection.spliterator().hasCharacteristics(Spliterator.IMMUTABLE));\n",
        "73": "    }\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  @CollectionFeature.Require(SUPPORTS_REMOVE)\n",
        "77": "  public void testSpliteratorNotImmutable_CollectionAllowsRemove() {\n",
        "78": "    // If remove is supported, verify that IMMUTABLE is not reported.\n",
        "79": "    synchronized (collection) { // for Collections.synchronized\n",
        "80": "      assertFalse(collection.spliterator().hasCharacteristics(Spliterator.IMMUTABLE));\n",
        "81": "    }\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  @GwtIncompatible // reflection\n",
        "85": "  public static Method getSpliteratorNotImmutableCollectionAllowsAddMethod() {\n",
        "86": "    return Helpers.getMethod(\n",
        "87": "        CollectionSpliteratorTester.class, \"testSpliteratorNotImmutable_CollectionAllowsAdd\");\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  @GwtIncompatible // reflection\n",
        "91": "  public static Method getSpliteratorNotImmutableCollectionAllowsRemoveMethod() {\n",
        "92": "    return Helpers.getMethod(\n",
        "93": "        CollectionSpliteratorTester.class, \"testSpliteratorNotImmutable_CollectionAllowsRemove\");\n",
        "94": "  }\n",
        "95": "}\n"
    },
    "removed": {}
}