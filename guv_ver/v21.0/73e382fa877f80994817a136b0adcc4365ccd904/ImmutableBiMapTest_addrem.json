{
    "addition": {
        "19": "import static com.google.common.collect.testing.Helpers.mapEntry;\n",
        "24": "import com.google.common.base.Equivalence;\n",
        "36": "import com.google.common.testing.CollectorTester;\n",
        "43": "import java.util.stream.Collector;\n",
        "44": "import java.util.stream.Stream;\n",
        "484": "\n",
        "485": "    public void testToImmutableBiMap() {\n",
        "486": "      Collector<Entry<String, Integer>, ?, ImmutableBiMap<String, Integer>> collector =\n",
        "487": "          ImmutableBiMap.toImmutableBiMap(Entry::getKey, Entry::getValue);\n",
        "488": "      Equivalence<ImmutableBiMap<String, Integer>> equivalence =\n",
        "489": "          Equivalence.equals()\n",
        "490": "              .<Entry<String, Integer>>pairwise()\n",
        "491": "              .onResultOf(ImmutableBiMap::entrySet);\n",
        "492": "      CollectorTester.of(collector, equivalence)\n",
        "493": "          .expectCollects(\n",
        "494": "              ImmutableBiMap.of(\"one\", 1, \"two\", 2, \"three\", 3),\n",
        "495": "              mapEntry(\"one\", 1),\n",
        "496": "              mapEntry(\"two\", 2),\n",
        "497": "              mapEntry(\"three\", 3));\n",
        "498": "    }\n",
        "499": "\n",
        "500": "    public void testToImmutableBiMap_exceptionOnDuplicateKey() {\n",
        "501": "      Collector<Entry<String, Integer>, ?, ImmutableBiMap<String, Integer>> collector =\n",
        "502": "          ImmutableBiMap.toImmutableBiMap(Entry::getKey, Entry::getValue);\n",
        "503": "      try {\n",
        "504": "        Stream.of(mapEntry(\"one\", 1), mapEntry(\"one\", 11)).collect(collector);\n",
        "505": "        fail(\"Expected IllegalArgumentException\");\n",
        "506": "      } catch (IllegalArgumentException expected) {\n",
        "507": "      }\n",
        "508": "    }\n"
    },
    "removed": {}
}