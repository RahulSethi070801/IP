[{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_1.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_1.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_1.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_1.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_1.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_1.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[632],"dellines":[638,639],"addcode":["   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSet#toImmutableSet} to {@code\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableSet.copyOf(stream.iterator())}, or after\n","   * the next release of Guava, pass {@link ImmutableSet#toImmutableSet} to {@code\n"],"methodSig":"public final ImmutableSet<E> toSet()"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_2.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_2.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_2.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_2.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_2.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_2.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[647],"dellines":[654,655],"addcode":["   * <p><b>{@code Stream} equivalent:</b> pass {@link\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableSortedSet.copyOf(comparator,\n","   * stream.iterator())}, or after the next release of Guava, pass {@link\n"],"methodSig":"public final ImmutableSortedSet<E> toSortedSet(Comparator<? super E> comparator)"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_3.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_3.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_3.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_3.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_3.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_3.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_4.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_4.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_4.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_4.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_4.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_4.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[736,737],"dellines":[746,747,748,749],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@code\n","   * stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> after the next release of Guava, use {@code\n","   * stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}. Before then you can use\n","   * {@code ImmutableMap.copyOf(stream.collect(Collectors.toMap(keyFunction, v -> v)))}, but be\n","   * aware that this may not preserve the order of entries.\n"],"methodSig":"public final ImmutableMap<K, E> uniqueIndex(Function<? super E, K> keyFunction)"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_5.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_5.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_5.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_5.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_5.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_5.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[617],"dellines":[621,622,623],"addcode":["   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code\n","   * ImmutableList.copyOf(stream.sorted(comparator).iterator())}, or after the next release of\n","   * Guava, pass {@link ImmutableList#toImmutableList} to {@code\n"],"methodSig":"public final ImmutableList<E> toSortedList(Comparator<? super E> comparator)"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_6.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_6.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_6.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_6.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_6.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_6.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[603],"dellines":[606,607],"addcode":["   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableList.copyOf(stream.iterator())}, or after\n","   * the next release of Guava, pass {@link ImmutableList#toImmutableList} to {@code\n"],"methodSig":"public final ImmutableList<E> toList()"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_7.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_7.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_7.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_7.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_7.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_7.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[661,662],"dellines":[669,670],"addcode":["   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableMultiset#toImmutableMultiset} to\n","   * {@code\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableMultiset.copyOf(stream.iterator())}, or\n","   * after the next release of Guava, pass {@link ImmutableMultiset#toImmutableMultiset} to {@code\n"],"methodSig":"public final ImmutableMultiset<E> toMultiset()"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_8.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_8.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_8.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_8.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_8.txt","newdoc":" In this case, just dumping the collection to an array and sorting is\n faster than using the implementation for Iterator, which is\n specialized for k much smaller than n.\n c only contains E's and doesn't escape\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_8.txt","olddoc":" In this case, just dumping the collection to an array and sorting is\n faster than using the implementation for Iterator, which is\n specialized for k much smaller than n.\n c only contains E's and doesn't escape\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Ordering","pathinproj":"guava/src/com/google/common/collect/Ordering.java","addlines":[727,728],"dellines":[727,728],"addcode":["   * <p><b>Java 8 users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k,\n","   * thisComparator))} instead.\n"],"delcode":["   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n","   * use {@code Streams.stream(iterable).collect(Comparators.least(k, thisComparator))} instead.\n"],"methodSig":"public List<E> leastOf(Iterable<E> iterable, int k)"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_9.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_9.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_9.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_9.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_9.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_9.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_10.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_10.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_10.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_10.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_10.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_10.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[134,135],"dellines":[137,138],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Collection#stream} if {@code iterable} is a\n","   * {@link Collection}; {@link Streams#stream(Iterable)} otherwise.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code iterable.stream()} if {@code iterable} is a\n","   * {@link Collection}; {@code StreamSupport.stream(iterable.spliterator(), false)} otherwise.\n"],"methodSig":"public static FluentIterable<E> from(final Iterable<E> iterable)"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_11.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_11.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_11.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_11.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_11.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_11.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_12.txt","newdoc":" Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[144,145,146,147,148,149,136,137,138,139,142,143],"dellines":[],"addcode":["    @Override\n","    public long size() throws IOException {\n","      BasicFileAttributes attrs = readAttributes();\n","\n","      if (attrs.isDirectory()) {\n","        throw new IOException(\"can't read: is a directory\");\n","      } else if (attrs.isSymbolicLink()) {\n","        throw new IOException(\"can't read: is a symbolic link\");\n","      }\n","\n","      return attrs.size();\n","    }\n"],"delcode":[],"methodSig":"public long size() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_12.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_12.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_12.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_13.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_13.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_13.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_13.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_13.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_13.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[680,681],"dellines":[688,689,690,691],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@code\n","   * stream.collect(ImmutableMap.toImmutableMap(k -> k, valueFunction))}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> after the next release of Guava, use {@code\n","   * stream.collect(ImmutableMap.toImmutableMap(k -> k, valueFunction))}. Before then you can use\n","   * {@code ImmutableMap.copyOf(stream.collect(Collectors.toMap(k -> k, valueFunction)))}, but be\n","   * aware that this may not preserve the order of entries.\n"],"methodSig":"public final ImmutableMap<E, V> toMap(Function<? super E, V> valueFunction)"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_14.txt","newdoc":" Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[144,145,146,147,148,149,136,137,138,139,142,143],"dellines":[],"addcode":["    @Override\n","    public long size() throws IOException {\n","      BasicFileAttributes attrs = readAttributes();\n","\n","      if (attrs.isDirectory()) {\n","        throw new IOException(\"can't read: is a directory\");\n","      } else if (attrs.isSymbolicLink()) {\n","        throw new IOException(\"can't read: is a symbolic link\");\n","      }\n","\n","      return attrs.size();\n","    }\n"],"delcode":[],"methodSig":"public long size() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_14.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_14.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_14.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_14.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[680,681],"dellines":[688,689,690,691],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@code\n","   * stream.collect(ImmutableMap.toImmutableMap(k -> k, valueFunction))}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> after the next release of Guava, use {@code\n","   * stream.collect(ImmutableMap.toImmutableMap(k -> k, valueFunction))}. Before then you can use\n","   * {@code ImmutableMap.copyOf(stream.collect(Collectors.toMap(k -> k, valueFunction)))}, but be\n","   * aware that this may not preserve the order of entries.\n"],"methodSig":"public final ImmutableMap<E, V> toMap(Function<? super E, V> valueFunction)"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_15.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_15.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_15.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_15.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_15.txt","newdoc":" TODO(kevinb): see if delegation is hurting performance noticeably\n TODO(kevinb): if we change this implementation, add full unit tests.\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_15.txt","olddoc":" TODO(kevinb): see if delegation is hurting performance noticeably\n TODO(kevinb): if we change this implementation, add full unit tests.\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Ordering","pathinproj":"guava/src/com/google/common/collect/Ordering.java","addlines":[801,802],"dellines":[801,802],"addcode":["   * <p><b>Java 8 users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k,\n","   * thisComparator))} instead.\n"],"delcode":["   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n","   * use {@code Streams.stream(iterable).collect(Comparators.greatest(k, thisComparator))} instead.\n"],"methodSig":"public List<E> greatestOf(Iterable<E> iterable, int k)"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_16.txt","newdoc":" Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[144,145,146,147,148,149,136,137,138,139,142,143],"dellines":[],"addcode":["    @Override\n","    public long size() throws IOException {\n","      BasicFileAttributes attrs = readAttributes();\n","\n","      if (attrs.isDirectory()) {\n","        throw new IOException(\"can't read: is a directory\");\n","      } else if (attrs.isSymbolicLink()) {\n","        throw new IOException(\"can't read: is a symbolic link\");\n","      }\n","\n","      return attrs.size();\n","    }\n"],"delcode":[],"methodSig":"public long size() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_16.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_16.txt","newdoc":" TODO(kevinb): see if delegation is hurting performance noticeably\n TODO(kevinb): if we change this implementation, add full unit tests.\n TODO(kevinb): see if delegation is hurting performance noticeably\n TODO(kevinb): if we change this implementation, add full unit tests.\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_16.txt","olddoc":" TODO(kevinb): see if delegation is hurting performance noticeably\n TODO(kevinb): if we change this implementation, add full unit tests.\n TODO(kevinb): see if delegation is hurting performance noticeably\n TODO(kevinb): if we change this implementation, add full unit tests.\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Ordering","pathinproj":"guava/src/com/google/common/collect/Ordering.java","addlines":[801,802],"dellines":[801,802],"addcode":["   * <p><b>Java 8 users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k,\n","   * thisComparator))} instead.\n"],"delcode":["   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,\n","   * use {@code Streams.stream(iterable).collect(Comparators.greatest(k, thisComparator))} instead.\n"],"methodSig":"public List<E> greatestOf(Iterable<E> iterable, int k)"},"id":5,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_17.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[421,422,423,424,425,426],"dellines":[],"addcode":["    @Override\n","    public void replaceAll(UnaryOperator<E> operator) {\n","      synchronized (mutex) {\n","        delegate().replaceAll(operator);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void replaceAll(UnaryOperator<E> operator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_17.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_17.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_17.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_17.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_18.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[421,422,423,424,425,426],"dellines":[],"addcode":["    @Override\n","    public void replaceAll(UnaryOperator<E> operator) {\n","      synchronized (mutex) {\n","        delegate().replaceAll(operator);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void replaceAll(UnaryOperator<E> operator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_18.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_18.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_18.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_18.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_19.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_19.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[836,837,838],"dellines":[],"addcode":["  public final Stream<E> stream() {\n","    return Streams.stream(getDelegate());\n","  }\n"],"delcode":[],"methodSig":"public final Stream<E> stream()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_19.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_19.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_19.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_19.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_20.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_20.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[836,837,838],"dellines":[],"addcode":["  public final Stream<E> stream() {\n","    return Streams.stream(getDelegate());\n","  }\n"],"delcode":[],"methodSig":"public final Stream<E> stream()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_20.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_20.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_20.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_20.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_21.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_21.txt","newdoc":" TODO(kevinb): Support a concurrently modified collection?\n\n         * We can't just return the iterator because an immediate call to its\n         * remove() method would remove one of the skipped elements instead of\n         * throwing an IllegalStateException.\n         \n not called if next() fails\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_21.txt","olddoc":" TODO(kevinb): Support a concurrently modified collection?\n\n         * We can't just return the iterator because an immediate call to its\n         * remove() method would remove one of the skipped elements instead of\n         * throwing an IllegalStateException.\n         \n not called if next() fails\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_21.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[928,929,930,931,927],"dellines":[],"addcode":["\n","      @Override\n","      public Spliterator<T> spliterator() {\n","        return Streams.stream(iterable).skip(numberToSkip).spliterator();\n","      }\n"],"delcode":[],"methodSig":"public static Iterable<T> skip(final Iterable<T> iterable, final int numberToSkip)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_21.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_21.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_21.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_21.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_22.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_22.txt","newdoc":" TODO(kevinb): Support a concurrently modified collection?\n\n         * We can't just return the iterator because an immediate call to its\n         * remove() method would remove one of the skipped elements instead of\n         * throwing an IllegalStateException.\n         \n not called if next() fails\n TODO(kevinb): Support a concurrently modified collection?\n\n         * We can't just return the iterator because an immediate call to its\n         * remove() method would remove one of the skipped elements instead of\n         * throwing an IllegalStateException.\n         \n not called if next() fails\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_22.txt","olddoc":" TODO(kevinb): Support a concurrently modified collection?\n\n         * We can't just return the iterator because an immediate call to its\n         * remove() method would remove one of the skipped elements instead of\n         * throwing an IllegalStateException.\n         \n not called if next() fails\n TODO(kevinb): Support a concurrently modified collection?\n\n         * We can't just return the iterator because an immediate call to its\n         * remove() method would remove one of the skipped elements instead of\n         * throwing an IllegalStateException.\n         \n not called if next() fails\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_22.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[928,929,930,931,927],"dellines":[],"addcode":["\n","      @Override\n","      public Spliterator<T> spliterator() {\n","        return Streams.stream(iterable).skip(numberToSkip).spliterator();\n","      }\n"],"delcode":[],"methodSig":"public static Iterable<T> skip(final Iterable<T> iterable, final int numberToSkip)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_22.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_22.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_22.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_22.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_23.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Predicate","pathinproj":"guava/src/com/google/common/base/Predicate.java","addlines":[80,81,78,79],"dellines":[],"addcode":["  @Override\n","  default boolean test(@Nullable T input) {\n","    return apply(input);\n","  }\n"],"delcode":[],"methodSig":" boolean test(@Nullable T input)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_23.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_23.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_23.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_23.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_24.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Predicate","pathinproj":"guava/src/com/google/common/base/Predicate.java","addlines":[80,81,78,79],"dellines":[],"addcode":["  @Override\n","  default boolean test(@Nullable T input) {\n","    return apply(input);\n","  }\n"],"delcode":[],"methodSig":" boolean test(@Nullable T input)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_24.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_24.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_24.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_24.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_25.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_25.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_25.txt","olddoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[110],"dellines":[128,129,130,131,132,133,134,136,137,109,110,111,112,113,114,115,116,118,119,120,121,122,124,125,126],"addcode":["    return accumulateAndGet(key, delta, Long::sum);\n"],"delcode":["    outer:\n","    while (true) {\n","      AtomicLong atomic = map.get(key);\n","      if (atomic == null) {\n","        atomic = map.putIfAbsent(key, new AtomicLong(delta));\n","        if (atomic == null) {\n","          return delta;\n","        }\n","      }\n","\n","      while (true) {\n","        long oldValue = atomic.get();\n","        if (oldValue == 0L) {\n","          if (map.replace(key, atomic, new AtomicLong(delta))) {\n","            return delta;\n","          }\n","          continue outer;\n","        }\n","\n","        long newValue = oldValue + delta;\n","        if (atomic.compareAndSet(oldValue, newValue)) {\n","          return newValue;\n","        }\n","      }\n","    }\n"],"methodSig":"public long addAndGet(K key, long delta)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_25.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_25.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_25.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_26.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_26.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_26.txt","olddoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_26.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[110],"dellines":[128,129,130,131,132,133,134,136,137,109,110,111,112,113,114,115,116,118,119,120,121,122,124,125,126],"addcode":["    return accumulateAndGet(key, delta, Long::sum);\n"],"delcode":["    outer:\n","    while (true) {\n","      AtomicLong atomic = map.get(key);\n","      if (atomic == null) {\n","        atomic = map.putIfAbsent(key, new AtomicLong(delta));\n","        if (atomic == null) {\n","          return delta;\n","        }\n","      }\n","\n","      while (true) {\n","        long oldValue = atomic.get();\n","        if (oldValue == 0L) {\n","          if (map.replace(key, atomic, new AtomicLong(delta))) {\n","            return delta;\n","          }\n","          continue outer;\n","        }\n","\n","        long newValue = oldValue + delta;\n","        if (atomic.compareAndSet(oldValue, newValue)) {\n","          return newValue;\n","        }\n","      }\n","    }\n"],"methodSig":"public long addAndGet(K key, long delta)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_26.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_26.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_26.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_26.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_27.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableCollection_2","pathinproj":"guava/src/com/google/common/collect/ImmutableCollection.java","addlines":[774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,171,172,173,174,175,176,177,52,53,54,55,186,187,188,189,579,580,581,69,582,70,71,72,73,74,75,76,77,78,79,87,88,89,90,91,92,93,94,380,381,382,383],"dellines":[],"addcode":["  @Override\n","  public Spliterator<E> spliterator() {\n","    return Spliterators.spliterator(this, SPLITERATOR_CHARACTERISTICS);\n","  }\n","    @Override\n","    public Spliterator<E> spliterator() {\n","      return CollectSpliterators.indexed(size(), SPLITERATOR_CHARACTERISTICS, this::get);\n","    }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return new Spliterators.AbstractSpliterator<E>(\n","        size(), SPLITERATOR_CHARACTERISTICS | Spliterator.SIZED) {\n","      final UnmodifiableIterator<E> iterator = iterator();\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super E> action) {\n","        if (iterator.hasNext()) {\n","          action.accept(iterator.next());\n","          return true;\n","        } else {\n","          return false;\n","        }\n","      }\n","\n","      @Override\n","      public Comparator<? super E> getComparator() {\n","        return comparator;\n","      }\n","    };\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return Spliterators.spliterator(elements, SPLITERATOR_CHARACTERISTICS);\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return delegate.spliterator();\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return CollectSpliterators.indexed(size(), SPLITERATOR_CHARACTERISTICS, this::get);\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return Collections.singleton(element).spliterator();\n","  }\n","    @Override\n","    public Spliterator<E> spliterator() {\n","      return CollectSpliterators.filter(unfiltered.spliterator(), predicate);\n","    }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return CollectSpliterators.indexed(\n","        size(), \n","        ImmutableList.SPLITERATOR_CHARACTERISTICS | Spliterator.SORTED | Spliterator.DISTINCT,\n","        delegateList()::get,\n","        comparator());\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return asList().spliterator();\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return Spliterators.spliterator(array, SPLITERATOR_CHARACTERISTICS);\n","  }\n","    @Override\n","    public Spliterator<E> spliterator() {\n","      synchronized (mutex) {\n","        return delegate().spliterator();\n","      }\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<E> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_27.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_27.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_27.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_27.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_28.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableCollection_2","pathinproj":"guava/src/com/google/common/collect/ImmutableCollection.java","addlines":[774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,171,172,173,174,175,176,177,52,53,54,55,186,187,188,189,579,580,581,69,582,70,71,72,73,74,75,76,77,78,79,87,88,89,90,91,92,93,94,380,381,382,383],"dellines":[],"addcode":["  @Override\n","  public Spliterator<E> spliterator() {\n","    return Spliterators.spliterator(this, SPLITERATOR_CHARACTERISTICS);\n","  }\n","    @Override\n","    public Spliterator<E> spliterator() {\n","      return CollectSpliterators.indexed(size(), SPLITERATOR_CHARACTERISTICS, this::get);\n","    }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return new Spliterators.AbstractSpliterator<E>(\n","        size(), SPLITERATOR_CHARACTERISTICS | Spliterator.SIZED) {\n","      final UnmodifiableIterator<E> iterator = iterator();\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super E> action) {\n","        if (iterator.hasNext()) {\n","          action.accept(iterator.next());\n","          return true;\n","        } else {\n","          return false;\n","        }\n","      }\n","\n","      @Override\n","      public Comparator<? super E> getComparator() {\n","        return comparator;\n","      }\n","    };\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return Spliterators.spliterator(elements, SPLITERATOR_CHARACTERISTICS);\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return delegate.spliterator();\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return CollectSpliterators.indexed(size(), SPLITERATOR_CHARACTERISTICS, this::get);\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return Collections.singleton(element).spliterator();\n","  }\n","    @Override\n","    public Spliterator<E> spliterator() {\n","      return CollectSpliterators.filter(unfiltered.spliterator(), predicate);\n","    }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return CollectSpliterators.indexed(\n","        size(), \n","        ImmutableList.SPLITERATOR_CHARACTERISTICS | Spliterator.SORTED | Spliterator.DISTINCT,\n","        delegateList()::get,\n","        comparator());\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return asList().spliterator();\n","  }\n","  @Override\n","  public Spliterator<E> spliterator() {\n","    return Spliterators.spliterator(array, SPLITERATOR_CHARACTERISTICS);\n","  }\n","    @Override\n","    public Spliterator<E> spliterator() {\n","      synchronized (mutex) {\n","        return delegate().spliterator();\n","      }\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<E> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_28.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_28.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_28.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_28.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_29.txt","newdoc":" TODO(cgdecker): Should there be a custom exception type for this?\n Also, should we try to include the Path of each file we may have failed to delete rather\n than just the exceptions that occurred?\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_29.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[736,737,726,727,731,732,733,734,735],"dellines":[],"addcode":["  private static void throwDeleteFailed(\n","      Path path, Collection<IOException> exceptions) throws FileSystemException {\n","    FileSystemException deleteFailed = new FileSystemException(path.toString(), null,\n","        \"failed to delete one or more files; see suppressed exceptions for details\");\n","    for (IOException e : exceptions) {\n","      deleteFailed.addSuppressed(e);\n","    }\n","    throw deleteFailed;\n","  }\n"],"delcode":[],"methodSig":"private static void throwDeleteFailed(Path path, Collection<IOException> exceptions) throws FileSystemException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_29.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_29.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_29.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_29.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_30.txt","newdoc":" TODO(cgdecker): Should there be a custom exception type for this?\n Also, should we try to include the Path of each file we may have failed to delete rather\n than just the exceptions that occurred?\n TODO(cgdecker): Should there be a custom exception type for this?\n Also, should we try to include the Path of each file we may have failed to delete rather\n than just the exceptions that occurred?\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_30.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[736,737,726,727,731,732,733,734,735],"dellines":[],"addcode":["  private static void throwDeleteFailed(\n","      Path path, Collection<IOException> exceptions) throws FileSystemException {\n","    FileSystemException deleteFailed = new FileSystemException(path.toString(), null,\n","        \"failed to delete one or more files; see suppressed exceptions for details\");\n","    for (IOException e : exceptions) {\n","      deleteFailed.addSuppressed(e);\n","    }\n","    throw deleteFailed;\n","  }\n"],"delcode":[],"methodSig":"private static void throwDeleteFailed(Path path, Collection<IOException> exceptions) throws FileSystemException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_30.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_30.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_30.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_30.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_31.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/HashBiMap","pathinproj":"guava/src/com/google/common/collect/HashBiMap.java","addlines":[690,691,692,693,694,202,203,204,205,206],"dellines":[],"addcode":["    @Override\n","    public void forEach(BiConsumer<? super V, ? super K> action) {\n","      checkNotNull(action);\n","      HashBiMap.this.forEach((k, v) -> action.accept(v, k));\n","    }\n","    @Override\n","    public void forEach(BiConsumer<? super V, ? super K> action) {\n","      checkNotNull(action);\n","      RegularImmutableBiMap.this.forEach((k, v) -> action.accept(v, k));\n","    }\n"],"delcode":[],"methodSig":"public void forEach(BiConsumer<? super V, ? super K> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_31.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_31.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_31.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_31.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_32.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/HashBiMap","pathinproj":"guava/src/com/google/common/collect/HashBiMap.java","addlines":[690,691,692,693,694,202,203,204,205,206],"dellines":[],"addcode":["    @Override\n","    public void forEach(BiConsumer<? super V, ? super K> action) {\n","      checkNotNull(action);\n","      HashBiMap.this.forEach((k, v) -> action.accept(v, k));\n","    }\n","    @Override\n","    public void forEach(BiConsumer<? super V, ? super K> action) {\n","      checkNotNull(action);\n","      RegularImmutableBiMap.this.forEach((k, v) -> action.accept(v, k));\n","    }\n"],"delcode":[],"methodSig":"public void forEach(BiConsumer<? super V, ? super K> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_32.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_32.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_32.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_32.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_33.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_33.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_33.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_33.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/RangeSet","pathinproj":"guava/src/com/google/common/collect/RangeSet.java","addlines":[102,103,104,105,106,107,108,109],"dellines":[101],"addcode":["  default boolean enclosesAll(Iterable<Range<C>> other) {\n","    for (Range<C> range : other) {\n","      if (!encloses(range)) {\n","        return false;\n","      }\n","    }\n","    return true;\n","  }\n"],"delcode":["  boolean enclosesAll(Iterable<Range<C>> other);\n"],"methodSig":" boolean enclosesAll(Iterable<Range<C>> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_33.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_33.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_33.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_33.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_34.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_34.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_34.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_34.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/RangeSet","pathinproj":"guava/src/com/google/common/collect/RangeSet.java","addlines":[102,103,104,105,106,107,108,109],"dellines":[101],"addcode":["  default boolean enclosesAll(Iterable<Range<C>> other) {\n","    for (Range<C> range : other) {\n","      if (!encloses(range)) {\n","        return false;\n","      }\n","    }\n","    return true;\n","  }\n"],"delcode":["  boolean enclosesAll(Iterable<Range<C>> other);\n"],"methodSig":" boolean enclosesAll(Iterable<Range<C>> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_34.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_34.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_34.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_34.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_35.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_35.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableTable","pathinproj":"guava/src/com/google/common/collect/ImmutableTable.java","addlines":[64,65,66,67,68,69,70,57,58,59,60,61,62,63],"dellines":[],"addcode":["  public static <T, R, C, V> Collector<T, ?, ImmutableTable<R, C, V>> toImmutableTable(\n","      Function<? super T, ? extends R> rowFunction,\n","      Function<? super T, ? extends C> columnFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(rowFunction);\n","    checkNotNull(columnFunction);\n","    checkNotNull(valueFunction);\n","    return Collector.of(\n","        Builder<R, C, V>::new,\n","        (builder, t) ->\n","            builder.put(rowFunction.apply(t), columnFunction.apply(t), valueFunction.apply(t)),\n","        Builder::combine,\n","        Builder::build);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableTable<R, C, V>> toImmutableTable(Function<? super T, ? extends R> rowFunction, Function<? super T, ? extends C> columnFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_35.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_35.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_35.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_35.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_36.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_36.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableTable","pathinproj":"guava/src/com/google/common/collect/ImmutableTable.java","addlines":[64,65,66,67,68,69,70,57,58,59,60,61,62,63],"dellines":[],"addcode":["  public static <T, R, C, V> Collector<T, ?, ImmutableTable<R, C, V>> toImmutableTable(\n","      Function<? super T, ? extends R> rowFunction,\n","      Function<? super T, ? extends C> columnFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(rowFunction);\n","    checkNotNull(columnFunction);\n","    checkNotNull(valueFunction);\n","    return Collector.of(\n","        Builder<R, C, V>::new,\n","        (builder, t) ->\n","            builder.put(rowFunction.apply(t), columnFunction.apply(t), valueFunction.apply(t)),\n","        Builder::combine,\n","        Builder::build);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableTable<R, C, V>> toImmutableTable(Function<? super T, ? extends R> rowFunction, Function<? super T, ? extends C> columnFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_36.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_36.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_36.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_36.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_37.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[3562,3563,3564],"dellines":[],"addcode":["    void forEachEntry(Consumer<? super Entry<K, V>> action) {\n","      entryIterator().forEachRemaining(action);\n","    }\n"],"delcode":[],"methodSig":" void forEachEntry(Consumer<? super Entry<K, V>> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_37.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_37.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_37.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_37.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_38.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[3562,3563,3564],"dellines":[],"addcode":["    void forEachEntry(Consumer<? super Entry<K, V>> action) {\n","      entryIterator().forEachRemaining(action);\n","    }\n"],"delcode":[],"methodSig":" void forEachEntry(Consumer<? super Entry<K, V>> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_38.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_38.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_38.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_38.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_39.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectSpliterators","pathinproj":"guava/src/com/google/common/collect/CollectSpliterators.java","addlines":[39,40,41],"dellines":[],"addcode":["  static <T> Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function) {\n","    return indexed(size, extraCharacteristics, function, null);\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_39.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_39.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_39.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_39.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_40.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectSpliterators","pathinproj":"guava/src/com/google/common/collect/CollectSpliterators.java","addlines":[39,40,41],"dellines":[],"addcode":["  static <T> Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function) {\n","    return indexed(size, extraCharacteristics, function, null);\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_40.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_40.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_40.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_40.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_41.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_41.txt","newdoc":" measuring the integral on the right part of the function (the climbing line)\n TODO(cpovirk): Figure out a good name for this variable.\n measuring the integral on the left part of the function (the horizontal line)\n","newJdoc":"","olddoc":" measuring the integral on the right part of the function (the climbing line)\n TODO(cpovirk): Figure out a good name for this variable.\n measuring the integral on the left part of the function (the horizontal line)\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/SmoothRateLimiter","pathinproj":"guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java","addlines":[251],"dellines":[251],"addcode":["                + permitsToTime(availablePermitsAboveThreshold - permitsAboveThresholdToTake);\n"],"delcode":["            + permitsToTime(availablePermitsAboveThreshold - permitsAboveThresholdToTake);\n"],"methodSig":" long storedPermitsToWaitTime(double storedPermits, double permitsToTake)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_41.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_41.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_41.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_41.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_42.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_42.txt","newdoc":" measuring the integral on the right part of the function (the climbing line)\n TODO(cpovirk): Figure out a good name for this variable.\n measuring the integral on the left part of the function (the horizontal line)\n measuring the integral on the right part of the function (the climbing line)\n TODO(cpovirk): Figure out a good name for this variable.\n measuring the integral on the left part of the function (the horizontal line)\n","newJdoc":"","olddoc":" measuring the integral on the right part of the function (the climbing line)\n TODO(cpovirk): Figure out a good name for this variable.\n measuring the integral on the left part of the function (the horizontal line)\n measuring the integral on the right part of the function (the climbing line)\n TODO(cpovirk): Figure out a good name for this variable.\n measuring the integral on the left part of the function (the horizontal line)\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/SmoothRateLimiter","pathinproj":"guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java","addlines":[251],"dellines":[251],"addcode":["                + permitsToTime(availablePermitsAboveThreshold - permitsAboveThresholdToTake);\n"],"delcode":["            + permitsToTime(availablePermitsAboveThreshold - permitsAboveThresholdToTake);\n"],"methodSig":" long storedPermitsToWaitTime(double storedPermits, double permitsToTake)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_42.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_42.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_42.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_42.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_43.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_43.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multimap","pathinproj":"guava/src/com/google/common/collect/Multimap.java","addlines":[358,359,360,361],"dellines":[],"addcode":["  default void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    entries().forEach(entry -> action.accept(entry.getKey(), entry.getValue()));\n","  }\n"],"delcode":[],"methodSig":" void forEach(BiConsumer<? super K, ? super V> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_43.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_43.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_43.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_43.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_44.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_44.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multimap","pathinproj":"guava/src/com/google/common/collect/Multimap.java","addlines":[358,359,360,361],"dellines":[],"addcode":["  default void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    entries().forEach(entry -> action.accept(entry.getKey(), entry.getValue()));\n","  }\n"],"delcode":[],"methodSig":" void forEach(BiConsumer<? super K, ? super V> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_44.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_44.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_44.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_44.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_45.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_45.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableList_2","pathinproj":"guava/src/com/google/common/collect/ImmutableList.java","addlines":[48,49,50,51,69,70,71,72],"dellines":[],"addcode":["  @Beta\n","  public static <E> Collector<E, ?, ImmutableList<E>> toImmutableList() {\n","    return CollectCollectors.toImmutableList();\n","  }\n","  @Beta\n","  public static <E> Collector<E, ?, ImmutableList<E>> toImmutableList() {\n","    return CollectCollectors.toImmutableList();\n","  }\n"],"delcode":[],"methodSig":"public static Collector<E, ?, ImmutableList<E>> toImmutableList()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_45.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_45.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_45.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_45.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_46.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_46.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableList_2","pathinproj":"guava/src/com/google/common/collect/ImmutableList.java","addlines":[48,49,50,51,69,70,71,72],"dellines":[],"addcode":["  @Beta\n","  public static <E> Collector<E, ?, ImmutableList<E>> toImmutableList() {\n","    return CollectCollectors.toImmutableList();\n","  }\n","  @Beta\n","  public static <E> Collector<E, ?, ImmutableList<E>> toImmutableList() {\n","    return CollectCollectors.toImmutableList();\n","  }\n"],"delcode":[],"methodSig":"public static Collector<E, ?, ImmutableList<E>> toImmutableList()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_46.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_46.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_46.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_46.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_47.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_47.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMap.java","addlines":[70,71,72,73,74,75,76,77,78,79,80,81,82,83],"dellines":[],"addcode":["  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n","      Comparator<? super K> comparator,\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    return CollectCollectors.toImmutableSortedMap(comparator, keyFunction, valueFunction);\n","  }\n","  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n","      Comparator<? super K> comparator,\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    return CollectCollectors.toImmutableSortedMap(comparator, keyFunction, valueFunction);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_47.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_47.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_47.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_47.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_48.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_48.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMap.java","addlines":[70,71,72,73,74,75,76,77,78,79,80,81,82,83],"dellines":[],"addcode":["  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n","      Comparator<? super K> comparator,\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    return CollectCollectors.toImmutableSortedMap(comparator, keyFunction, valueFunction);\n","  }\n","  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n","      Comparator<? super K> comparator,\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    return CollectCollectors.toImmutableSortedMap(comparator, keyFunction, valueFunction);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_48.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_48.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_48.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_48.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_49.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_49.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[82,83,84,85],"dellines":[],"addcode":["  @SuppressWarnings(\"unchecked\")\n","  public static <T> Collector<T, ?, T> onlyElement() {\n","    return (Collector) ONLY_ELEMENT;\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, T> onlyElement()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_49.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_49.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_49.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_49.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_50.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_50.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[82,83,84,85],"dellines":[],"addcode":["  @SuppressWarnings(\"unchecked\")\n","  public static <T> Collector<T, ?, T> onlyElement() {\n","    return (Collector) ONLY_ELEMENT;\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, T> onlyElement()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_50.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_50.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_50.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_50.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_51.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_51.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_51.txt","olddoc":" only remove after setting to zero, to avoid concurrent updates\n succeed even if the remove fails, since the value was already adjusted\n value changed\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_51.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[353],"dellines":[449,451,452,453,455,437,438,439,440,441,442,443,444,445,446,447],"addcode":["    return map.remove(key, value);\n"],"delcode":["    AtomicLong atomic = map.get(key);\n","    if (atomic == null) {\n","      return false;\n","    }\n","\n","    long oldValue = atomic.get();\n","    if (oldValue != value) {\n","      return false;\n","    }\n","\n","    if (oldValue == 0L || atomic.compareAndSet(oldValue, 0L)) {\n","      map.remove(key, atomic);\n","      return true;\n","    }\n","\n","    return false;\n"],"methodSig":" boolean remove(K key, long value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_51.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_51.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_51.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_51.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_52.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_52.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_52.txt","olddoc":" only remove after setting to zero, to avoid concurrent updates\n succeed even if the remove fails, since the value was already adjusted\n value changed\n only remove after setting to zero, to avoid concurrent updates\n succeed even if the remove fails, since the value was already adjusted\n value changed\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_52.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[353],"dellines":[449,451,452,453,455,437,438,439,440,441,442,443,444,445,446,447],"addcode":["    return map.remove(key, value);\n"],"delcode":["    AtomicLong atomic = map.get(key);\n","    if (atomic == null) {\n","      return false;\n","    }\n","\n","    long oldValue = atomic.get();\n","    if (oldValue != value) {\n","      return false;\n","    }\n","\n","    if (oldValue == 0L || atomic.compareAndSet(oldValue, 0L)) {\n","      map.remove(key, atomic);\n","      return true;\n","    }\n","\n","    return false;\n"],"methodSig":" boolean remove(K key, long value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_52.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_52.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_52.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_52.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_53.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_53.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[271],"dellines":[320,321,322,323,315,316,317,318,319],"addcode":["    return Collections.unmodifiableMap(map);\n"],"delcode":["    return Collections.unmodifiableMap(\n","        Maps.transformValues(\n","            map,\n","            new Function<AtomicLong, Long>() {\n","              @Override\n","              public Long apply(AtomicLong atomic) {\n","                return atomic.get();\n","              }\n","            }));\n"],"methodSig":"private Map<K, Long> createAsMap()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_53.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_53.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_53.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_53.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_54.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_54.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[271],"dellines":[320,321,322,323,315,316,317,318,319],"addcode":["    return Collections.unmodifiableMap(map);\n"],"delcode":["    return Collections.unmodifiableMap(\n","        Maps.transformValues(\n","            map,\n","            new Function<AtomicLong, Long>() {\n","              @Override\n","              public Long apply(AtomicLong atomic) {\n","                return atomic.get();\n","              }\n","            }));\n"],"methodSig":"private Map<K, Long> createAsMap()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_54.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_54.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_54.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_54.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_55.txt","newdoc":" TODO(lowasser): consider exposing this\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_55.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMultiset","pathinproj":"guava/src/com/google/common/collect/ImmutableMultiset.java","addlines":[80,81,83,84,85,86,87,88,89,90,91,92,93],"dellines":[],"addcode":["  private static <T, E> Collector<T, ?, ImmutableMultiset<E>> toImmutableMultiset(\n","      Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction) {\n","    checkNotNull(elementFunction);\n","    checkNotNull(countFunction);\n","    return Collector.of(\n","        LinkedHashMultiset::create,\n","        (multiset, t) -> multiset.add(elementFunction.apply(t), countFunction.applyAsInt(t)),\n","        (multiset1, multiset2) -> {\n","          multiset1.addAll(multiset2);\n","          return multiset1;\n","        },\n","        (Multiset<E> multiset) -> copyFromEntries(multiset.entrySet()));\n","  }\n"],"delcode":[],"methodSig":"private static Collector<T, ?, ImmutableMultiset<E>> toImmutableMultiset(Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_55.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_55.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_55.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_55.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_56.txt","newdoc":" TODO(lowasser): consider exposing this\n TODO(lowasser): consider exposing this\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_56.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMultiset","pathinproj":"guava/src/com/google/common/collect/ImmutableMultiset.java","addlines":[80,81,83,84,85,86,87,88,89,90,91,92,93],"dellines":[],"addcode":["  private static <T, E> Collector<T, ?, ImmutableMultiset<E>> toImmutableMultiset(\n","      Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction) {\n","    checkNotNull(elementFunction);\n","    checkNotNull(countFunction);\n","    return Collector.of(\n","        LinkedHashMultiset::create,\n","        (multiset, t) -> multiset.add(elementFunction.apply(t), countFunction.applyAsInt(t)),\n","        (multiset1, multiset2) -> {\n","          multiset1.addAll(multiset2);\n","          return multiset1;\n","        },\n","        (Multiset<E> multiset) -> copyFromEntries(multiset.entrySet()));\n","  }\n"],"delcode":[],"methodSig":"private static Collector<T, ?, ImmutableMultiset<E>> toImmutableMultiset(Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_56.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_56.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_56.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_56.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_57.txt","newdoc":" avoids entry allocation for those maps that allocate entries on iteration\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[69,70,71,3720,72,3721,73,3722,3724,3725],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super K> action) {\n","      checkNotNull(action);\n","      map.forEach((k, v) -> action.accept(k));\n","    }\n","  @Override\n","  public void forEach(Consumer<? super K> action) {\n","    checkNotNull(action);\n","    map.forEach((k, v) -> action.accept(k));\n","  }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super K> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_57.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_57.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_57.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_57.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_58.txt","newdoc":" avoids entry allocation for those maps that allocate entries on iteration\n avoids entry allocation for those maps that allocate entries on iteration\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[69,70,71,3720,72,3721,73,3722,3724,3725],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super K> action) {\n","      checkNotNull(action);\n","      map.forEach((k, v) -> action.accept(k));\n","    }\n","  @Override\n","  public void forEach(Consumer<? super K> action) {\n","    checkNotNull(action);\n","    map.forEach((k, v) -> action.accept(k));\n","  }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super K> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_58.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_58.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_58.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_58.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_59.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_59.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LinkedListMultimap","pathinproj":"guava/src/com/google/common/collect/LinkedListMultimap.java","addlines":[816,817,818,819,820,813,814,815],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super Entry<K, V>> action) {\n","        checkNotNull(action);\n","        for (Node<K, V> node = head; node != null; node = node.next) {\n","          action.accept(node);\n","        }\n","      }\n"],"delcode":[],"methodSig":" List<Entry<K, V>> createEntries()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_59.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_59.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_59.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_59.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_60.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_60.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LinkedListMultimap","pathinproj":"guava/src/com/google/common/collect/LinkedListMultimap.java","addlines":[816,817,818,819,820,813,814,815],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super Entry<K, V>> action) {\n","        checkNotNull(action);\n","        for (Node<K, V> node = head; node != null; node = node.next) {\n","          action.accept(node);\n","        }\n","      }\n"],"delcode":[],"methodSig":" List<Entry<K, V>> createEntries()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_60.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_60.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_60.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_60.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_61.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_61.txt","newdoc":" TODO(kevinb): remove this\n","newJdoc":"","olddoc":" TODO(kevinb): remove this\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_61.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Function","pathinproj":"guava/src/com/google/common/base/Function.java","addlines":[46],"dellines":[],"addcode":["  @Override\n"],"delcode":[],"methodSig":" T apply(@Nullable F input)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_61.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_61.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_61.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_61.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_62.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_62.txt","newdoc":" TODO(kevinb): remove this\n TODO(kevinb): remove this\n","newJdoc":"","olddoc":" TODO(kevinb): remove this\n TODO(kevinb): remove this\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_62.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Function","pathinproj":"guava/src/com/google/common/base/Function.java","addlines":[46],"dellines":[],"addcode":["  @Override\n"],"delcode":[],"methodSig":" T apply(@Nullable F input)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_62.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_62.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_62.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_62.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_63.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[2016,2017,2018,2019,2015],"dellines":[],"addcode":["    @Override\n","    @Nullable\n","    public V2 get(@Nullable Object key) {\n","      return getOrDefault(key, null);\n","    }\n"],"delcode":[],"methodSig":"public V2 get(@Nullable Object key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_63.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_63.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_63.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_63.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_64.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[2016,2017,2018,2019,2015],"dellines":[],"addcode":["    @Override\n","    @Nullable\n","    public V2 get(@Nullable Object key) {\n","      return getOrDefault(key, null);\n","    }\n"],"delcode":[],"methodSig":"public V2 get(@Nullable Object key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_64.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_64.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_64.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_64.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_65.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractRangeSet","pathinproj":"guava/src/com/google/common/collect/AbstractRangeSet.java","addlines":[],"dellines":[89,90,91,92,93,94],"addcode":[],"delcode":["  @Override\n","  public void removeAll(Iterable<Range<C>> ranges) {\n","    for (Range<C> range : ranges) {\n","      remove(range);\n","    }\n","  }\n"],"methodSig":"public void removeAll(Iterable<Range<C>> ranges)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_65.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_65.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_65.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_65.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_66.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractRangeSet","pathinproj":"guava/src/com/google/common/collect/AbstractRangeSet.java","addlines":[],"dellines":[89,90,91,92,93,94],"addcode":[],"delcode":["  @Override\n","  public void removeAll(Iterable<Range<C>> ranges) {\n","    for (Range<C> range : ranges) {\n","      remove(range);\n","    }\n","  }\n"],"methodSig":"public void removeAll(Iterable<Range<C>> ranges)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_66.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_66.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_66.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_66.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_67.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_67.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_67.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_67.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[736,737,738,739,740,741,742,743,744,734,735],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        fromIterable.forEach((F f) -> action.accept(function.apply(f)));\n","      }\n","\n","      @Override\n","      public Spliterator<T> spliterator() {\n","        return CollectSpliterators.map(fromIterable.spliterator(), function);\n","      }\n"],"delcode":[],"methodSig":"public static Iterable<T> transform(final Iterable<F> fromIterable, final Function<? super F, ? extends T> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_67.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_67.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_67.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_67.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_68.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_68.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_68.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_68.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[736,737,738,739,740,741,742,743,744,734,735],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        fromIterable.forEach((F f) -> action.accept(function.apply(f)));\n","      }\n","\n","      @Override\n","      public Spliterator<T> spliterator() {\n","        return CollectSpliterators.map(fromIterable.spliterator(), function);\n","      }\n"],"delcode":[],"methodSig":"public static Iterable<T> transform(final Iterable<F> fromIterable, final Function<? super F, ? extends T> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_68.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_68.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_68.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_68.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_69.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/SynchronizedBiMapTest","pathinproj":"guava-tests/test/com/google/common/collect/SynchronizedBiMapTest.java","addlines":[532,533,534,535,1175,536,1176,537,1177,538,1178,539,1179,540,1180,3231,3232,289,3233,290,3234,291,3235,292,3236,3237,3238,3239,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,204,123,124,125,126,127],"dellines":[],"addcode":["    @Override\n","    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","      assertTrue(Thread.holdsLock(mutex));\n","      delegate.replaceAll(function);\n","    }\n","    @Override\n","    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","      forward().replaceAll(function);\n","    }\n","  @Override\n","  public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","    this.delegate.replaceAll(function);\n","    inverse.delegate.clear();\n","    Entry<K, V> broken = null;\n","    Iterator<Entry<K, V>> itr = this.delegate.entrySet().iterator();\n","    while (itr.hasNext()) {\n","      Entry<K, V> entry = itr.next();\n","      K k = entry.getKey();\n","      V v = entry.getValue();\n","      K conflict = inverse.delegate.putIfAbsent(v, k);\n","      if (conflict != null) {\n","        broken = entry;\n","        itr.remove();\n","      }\n","    }\n","    if (broken != null) {\n","      throw new IllegalArgumentException(\"value already present: \" + broken.getValue());\n","    }\n","  }\n","    @Override\n","    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","      unfiltered()\n","          .replaceAll(\n","              (key, value) ->\n","                  predicate.apply(Maps.immutableEntry(key, value))\n","                      ? function.apply(key, value)\n","                      : value);\n","    }\n","  @Override\n","  public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","    checkNotNull(function);\n","    BiEntry<K, V> oldFirst = firstInKeyInsertionOrder;\n","    clear();\n","    for (BiEntry<K, V> entry = oldFirst; entry != null; entry = entry.nextInKeyInsertionOrder) {\n","      put(entry.key, function.apply(entry.key, entry.value));\n","    }\n","  }\n","    @Override\n","    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","      synchronized (mutex) {\n","        delegate().replaceAll(function);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_69.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_69.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_69.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_69.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_70.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/SynchronizedBiMapTest","pathinproj":"guava-tests/test/com/google/common/collect/SynchronizedBiMapTest.java","addlines":[532,533,534,535,1175,536,1176,537,1177,538,1178,539,1179,540,1180,3231,3232,289,3233,290,3234,291,3235,292,3236,3237,3238,3239,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,204,123,124,125,126,127],"dellines":[],"addcode":["    @Override\n","    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","      assertTrue(Thread.holdsLock(mutex));\n","      delegate.replaceAll(function);\n","    }\n","    @Override\n","    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","      forward().replaceAll(function);\n","    }\n","  @Override\n","  public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","    this.delegate.replaceAll(function);\n","    inverse.delegate.clear();\n","    Entry<K, V> broken = null;\n","    Iterator<Entry<K, V>> itr = this.delegate.entrySet().iterator();\n","    while (itr.hasNext()) {\n","      Entry<K, V> entry = itr.next();\n","      K k = entry.getKey();\n","      V v = entry.getValue();\n","      K conflict = inverse.delegate.putIfAbsent(v, k);\n","      if (conflict != null) {\n","        broken = entry;\n","        itr.remove();\n","      }\n","    }\n","    if (broken != null) {\n","      throw new IllegalArgumentException(\"value already present: \" + broken.getValue());\n","    }\n","  }\n","    @Override\n","    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","      unfiltered()\n","          .replaceAll(\n","              (key, value) ->\n","                  predicate.apply(Maps.immutableEntry(key, value))\n","                      ? function.apply(key, value)\n","                      : value);\n","    }\n","  @Override\n","  public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","    checkNotNull(function);\n","    BiEntry<K, V> oldFirst = firstInKeyInsertionOrder;\n","    clear();\n","    for (BiEntry<K, V> entry = oldFirst; entry != null; entry = entry.nextInKeyInsertionOrder) {\n","      put(entry.key, function.apply(entry.key, entry.value));\n","    }\n","  }\n","    @Override\n","    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","      synchronized (mutex) {\n","        delegate().replaceAll(function);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_70.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_70.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_70.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_70.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_71.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_71.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_71.txt","olddoc":" only remove after setting to zero, to avoid concurrent updates\n succeed even if the remove fails, since the value was already adjusted\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_71.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[226,227],"dellines":[256,258,259,260,247,248,249,250,251,252,253,254],"addcode":["    Long result = map.remove(key);\n","    return (result == null) ? 0L : result.longValue();\n"],"delcode":["    AtomicLong atomic = map.get(key);\n","    if (atomic == null) {\n","      return 0L;\n","    }\n","\n","    while (true) {\n","      long oldValue = atomic.get();\n","      if (oldValue == 0L || atomic.compareAndSet(oldValue, 0L)) {\n","        map.remove(key, atomic);\n","        return oldValue;\n","      }\n","    }\n"],"methodSig":"public long remove(K key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_71.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_71.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_71.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_71.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_72.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_72.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_72.txt","olddoc":" only remove after setting to zero, to avoid concurrent updates\n succeed even if the remove fails, since the value was already adjusted\n only remove after setting to zero, to avoid concurrent updates\n succeed even if the remove fails, since the value was already adjusted\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_72.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[226,227],"dellines":[256,258,259,260,247,248,249,250,251,252,253,254],"addcode":["    Long result = map.remove(key);\n","    return (result == null) ? 0L : result.longValue();\n"],"delcode":["    AtomicLong atomic = map.get(key);\n","    if (atomic == null) {\n","      return 0L;\n","    }\n","\n","    while (true) {\n","      long oldValue = atomic.get();\n","      if (oldValue == 0L || atomic.compareAndSet(oldValue, 0L)) {\n","        map.remove(key, atomic);\n","        return oldValue;\n","      }\n","    }\n"],"methodSig":"public long remove(K key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_72.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_72.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_72.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_72.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_73.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[32,33,34,35,36,37,38,39,40,41,42,31],"dellines":[],"addcode":["  static <T, K, V> Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(keyFunction);\n","    checkNotNull(valueFunction);\n","    return Collector.of(\n","        ImmutableBiMap.Builder<K, V>::new,\n","        (builder, input) -> builder.put(keyFunction.apply(input), valueFunction.apply(input)),\n","        ImmutableBiMap.Builder::combine,\n","        ImmutableBiMap.Builder::build,\n","        new Collector.Characteristics[0]);\n","  }\n"],"delcode":[],"methodSig":" static Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_73.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_73.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_73.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_73.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_74.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[32,33,34,35,36,37,38,39,40,41,42,31],"dellines":[],"addcode":["  static <T, K, V> Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(keyFunction);\n","    checkNotNull(valueFunction);\n","    return Collector.of(\n","        ImmutableBiMap.Builder<K, V>::new,\n","        (builder, input) -> builder.put(keyFunction.apply(input), valueFunction.apply(input)),\n","        ImmutableBiMap.Builder::combine,\n","        ImmutableBiMap.Builder::build,\n","        new Collector.Characteristics[0]);\n","  }\n"],"delcode":[],"methodSig":" static Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_74.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_74.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_74.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_74.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_75.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_75.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_75.txt","olddoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_75.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[207],"dellines":[225,226,199,200,201,202,203,204,205,206,208,209,210,211,212,214,215,216,218,219,220,221,222,223],"addcode":["    return getAndUpdate(key, x -> newValue);\n"],"delcode":["    outer:\n","    while (true) {\n","      AtomicLong atomic = map.get(key);\n","      if (atomic == null) {\n","        atomic = map.putIfAbsent(key, new AtomicLong(newValue));\n","        if (atomic == null) {\n","          return 0L;\n","        }\n","      }\n","\n","      while (true) {\n","        long oldValue = atomic.get();\n","        if (oldValue == 0L) {\n","          if (map.replace(key, atomic, new AtomicLong(newValue))) {\n","            return 0L;\n","          }\n","          continue outer;\n","        }\n","\n","        if (atomic.compareAndSet(oldValue, newValue)) {\n","          return oldValue;\n","        }\n","      }\n","    }\n"],"methodSig":"public long put(K key, long newValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_75.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_75.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_75.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_75.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_76.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_76.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_76.txt","olddoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_76.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[207],"dellines":[225,226,199,200,201,202,203,204,205,206,208,209,210,211,212,214,215,216,218,219,220,221,222,223],"addcode":["    return getAndUpdate(key, x -> newValue);\n"],"delcode":["    outer:\n","    while (true) {\n","      AtomicLong atomic = map.get(key);\n","      if (atomic == null) {\n","        atomic = map.putIfAbsent(key, new AtomicLong(newValue));\n","        if (atomic == null) {\n","          return 0L;\n","        }\n","      }\n","\n","      while (true) {\n","        long oldValue = atomic.get();\n","        if (oldValue == 0L) {\n","          if (map.replace(key, atomic, new AtomicLong(newValue))) {\n","            return 0L;\n","          }\n","          continue outer;\n","        }\n","\n","        if (atomic.compareAndSet(oldValue, newValue)) {\n","          return oldValue;\n","        }\n","      }\n","    }\n"],"methodSig":"public long put(K key, long newValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_76.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_76.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_76.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_76.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_77.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_77.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/HashBiMap","pathinproj":"guava/src/com/google/common/collect/HashBiMap.java","addlines":[576],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n"],"delcode":[],"methodSig":"public K put(@Nullable V value, @Nullable K key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_77.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_77.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_77.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_77.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_78.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_78.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/HashBiMap","pathinproj":"guava/src/com/google/common/collect/HashBiMap.java","addlines":[576],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n"],"delcode":[],"methodSig":"public K put(@Nullable V value, @Nullable K key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_78.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_78.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_78.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_78.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_79.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_79.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMap.java","addlines":[78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"dellines":[],"addcode":["  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n","      Comparator<? super K> comparator,\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction,\n","      BinaryOperator<V> mergeFunction) {\n","    checkNotNull(comparator);\n","    checkNotNull(keyFunction);\n","    checkNotNull(valueFunction);\n","    checkNotNull(mergeFunction);\n","    return Collectors.collectingAndThen(\n","        Collectors.toMap(\n","            keyFunction, valueFunction, mergeFunction, () -> new TreeMap<K, V>(comparator)),\n","        ImmutableSortedMap::copyOfSorted);\n","  }\n","  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n","      Comparator<? super K> comparator,\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction,\n","      BinaryOperator<V> mergeFunction) {\n","    checkNotNull(comparator);\n","    checkNotNull(keyFunction);\n","    checkNotNull(valueFunction);\n","    checkNotNull(mergeFunction);\n","    return Collectors.collectingAndThen(\n","        Collectors.toMap(\n","            keyFunction, valueFunction, mergeFunction, () -> new TreeMap<K, V>(comparator)),\n","        ImmutableSortedMap::copyOfSorted);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction, BinaryOperator<V> mergeFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_79.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_79.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_79.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_79.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_80.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_80.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMap.java","addlines":[78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"dellines":[],"addcode":["  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n","      Comparator<? super K> comparator,\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction,\n","      BinaryOperator<V> mergeFunction) {\n","    checkNotNull(comparator);\n","    checkNotNull(keyFunction);\n","    checkNotNull(valueFunction);\n","    checkNotNull(mergeFunction);\n","    return Collectors.collectingAndThen(\n","        Collectors.toMap(\n","            keyFunction, valueFunction, mergeFunction, () -> new TreeMap<K, V>(comparator)),\n","        ImmutableSortedMap::copyOfSorted);\n","  }\n","  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n","      Comparator<? super K> comparator,\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction,\n","      BinaryOperator<V> mergeFunction) {\n","    checkNotNull(comparator);\n","    checkNotNull(keyFunction);\n","    checkNotNull(valueFunction);\n","    checkNotNull(mergeFunction);\n","    return Collectors.collectingAndThen(\n","        Collectors.toMap(\n","            keyFunction, valueFunction, mergeFunction, () -> new TreeMap<K, V>(comparator)),\n","        ImmutableSortedMap::copyOfSorted);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction, BinaryOperator<V> mergeFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_80.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_80.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_80.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_80.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_81.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_81.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[260,261,262],"dellines":[],"addcode":["  public static TreeTraverser<Path> directoryTreeTraverser() {\n","    return DirectoryTreeTraverser.INSTANCE;\n","  }\n"],"delcode":[],"methodSig":"public static TreeTraverser<Path> directoryTreeTraverser()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_81.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_81.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_81.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_81.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_82.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_82.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[260,261,262],"dellines":[],"addcode":["  public static TreeTraverser<Path> directoryTreeTraverser() {\n","    return DirectoryTreeTraverser.INSTANCE;\n","  }\n"],"delcode":[],"methodSig":"public static TreeTraverser<Path> directoryTreeTraverser()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_82.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_82.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_82.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_82.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_83.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_83.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[676,677,678,679,680,681],"dellines":[],"addcode":["  private static void checkAllowsInsecure(\n","      Path path, RecursiveDeleteOption[] options) throws InsecureRecursiveDeleteException {\n","    if (!Arrays.asList(options).contains(RecursiveDeleteOption.ALLOW_INSECURE)) {\n","      throw new InsecureRecursiveDeleteException(path.toString());\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static void checkAllowsInsecure(Path path, RecursiveDeleteOption[] options) throws InsecureRecursiveDeleteException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_83.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_83.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_83.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_83.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_84.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_84.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[676,677,678,679,680,681],"dellines":[],"addcode":["  private static void checkAllowsInsecure(\n","      Path path, RecursiveDeleteOption[] options) throws InsecureRecursiveDeleteException {\n","    if (!Arrays.asList(options).contains(RecursiveDeleteOption.ALLOW_INSECURE)) {\n","      throw new InsecureRecursiveDeleteException(path.toString());\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static void checkAllowsInsecure(Path path, RecursiveDeleteOption[] options) throws InsecureRecursiveDeleteException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_84.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_84.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_84.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_84.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_85.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMapBasedMultimap","pathinproj":"guava/src/com/google/common/collect/AbstractMapBasedMultimap.java","addlines":[976,1584,1585,1586,1587,54,55,56,57,973,974,975],"dellines":[],"addcode":["    @Override\n","    public Spliterator<K> spliterator() {\n","      return map().keySet().spliterator();\n","    }\n","  @Override\n","  public Spliterator<K> spliterator() {\n","    return map.keySpliterator();\n","  }\n","    @Override\n","    public Spliterator<K> spliterator() {\n","      return CollectSpliterators.map(multimap.entries().spliterator(), Map.Entry::getKey);\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<K> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_85.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_85.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_85.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_85.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_86.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMapBasedMultimap","pathinproj":"guava/src/com/google/common/collect/AbstractMapBasedMultimap.java","addlines":[976,1584,1585,1586,1587,54,55,56,57,973,974,975],"dellines":[],"addcode":["    @Override\n","    public Spliterator<K> spliterator() {\n","      return map().keySet().spliterator();\n","    }\n","  @Override\n","  public Spliterator<K> spliterator() {\n","    return map.keySpliterator();\n","  }\n","    @Override\n","    public Spliterator<K> spliterator() {\n","      return CollectSpliterators.map(multimap.entries().spliterator(), Map.Entry::getKey);\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<K> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_86.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_86.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_86.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_86.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_87.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_87.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectSpliterators","pathinproj":"guava/src/com/google/common/collect/CollectSpliterators.java","addlines":[128,129,130,131,132,133,134,135,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],"dellines":[],"addcode":["  static <F, T> Spliterator<T> map(\n","      Spliterator<F> fromSpliterator, Function<? super F, ? extends T> function) {\n","    checkNotNull(fromSpliterator);\n","    checkNotNull(function);\n","    return new Spliterator<T>() {\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super T> action) {\n","        return fromSpliterator.tryAdvance(\n","            fromElement -> action.accept(function.apply(fromElement)));\n","      }\n","\n","      @Override\n","      public void forEachRemaining(Consumer<? super T> action) {\n","        fromSpliterator.forEachRemaining(fromElement -> action.accept(function.apply(fromElement)));\n","      }\n","\n","      @Override\n","      public Spliterator<T> trySplit() {\n","        Spliterator<F> fromSplit = fromSpliterator.trySplit();\n","        return (fromSplit != null) ? map(fromSplit, function) : null;\n","      }\n","\n","      @Override\n","      public long estimateSize() {\n","        return fromSpliterator.estimateSize();\n","      }\n","\n","      @Override\n","      public int characteristics() {\n","        return fromSpliterator.characteristics()\n","            & ~(Spliterator.DISTINCT | Spliterator.NONNULL | Spliterator.SORTED);\n","      }\n","    };\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<T> map(Spliterator<F> fromSpliterator, Function<? super F, ? extends T> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_87.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_87.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_87.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_87.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_88.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_88.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectSpliterators","pathinproj":"guava/src/com/google/common/collect/CollectSpliterators.java","addlines":[128,129,130,131,132,133,134,135,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],"dellines":[],"addcode":["  static <F, T> Spliterator<T> map(\n","      Spliterator<F> fromSpliterator, Function<? super F, ? extends T> function) {\n","    checkNotNull(fromSpliterator);\n","    checkNotNull(function);\n","    return new Spliterator<T>() {\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super T> action) {\n","        return fromSpliterator.tryAdvance(\n","            fromElement -> action.accept(function.apply(fromElement)));\n","      }\n","\n","      @Override\n","      public void forEachRemaining(Consumer<? super T> action) {\n","        fromSpliterator.forEachRemaining(fromElement -> action.accept(function.apply(fromElement)));\n","      }\n","\n","      @Override\n","      public Spliterator<T> trySplit() {\n","        Spliterator<F> fromSplit = fromSpliterator.trySplit();\n","        return (fromSplit != null) ? map(fromSplit, function) : null;\n","      }\n","\n","      @Override\n","      public long estimateSize() {\n","        return fromSpliterator.estimateSize();\n","      }\n","\n","      @Override\n","      public int characteristics() {\n","        return fromSpliterator.characteristics()\n","            & ~(Spliterator.DISTINCT | Spliterator.NONNULL | Spliterator.SORTED);\n","      }\n","    };\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<T> map(Spliterator<F> fromSpliterator, Function<? super F, ? extends T> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_88.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_88.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_88.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_88.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_89.txt","newdoc":" Interestingly, unlike File.getCanonicalFile(), Path/Files provides no way of getting the\n canonical (absolute, normalized, symlinks resolved, etc.) form of a path to a nonexistent\n file. getCanonicalFile() can at least get the canonical form of the part of the path which\n Check if the parent is a directory first because createDirectories will fail if the parent\n exists and is a symlink to a directory... we'd like for this to succeed in that case.\n (I'm kind of surprised that createDirectories would fail in that case; doesn't seem like\n actually exists and then append the normalized remainder of the path to that.\n The given directory is a filesystem root. All zero of its ancestors exist. This doesn't\n mean that the root itself exists -- consider x:\\ on a Windows machine without such a\n drive -- or even that the caller can create it, but this method makes no such guarantees\n even for non-root files.\n what you'd want to happen.)\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_89.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[352,357,358,359,364,365,366,371,372,373,374,375,376,377,351],"dellines":[],"addcode":["  public static void createParentDirectories(\n","      Path path, FileAttribute<?>... attrs) throws IOException {\n","    Path normalizedAbsolutePath = path.toAbsolutePath().normalize();\n","    Path parent = normalizedAbsolutePath.getParent();\n","    if (parent == null) {\n","      return;\n","    }\n","\n","    if (!Files.isDirectory(parent)) {\n","      Files.createDirectories(parent, attrs);\n","      if (!Files.isDirectory(parent)) {\n","        throw new IOException(\"Unable to create parent directories of \" + path);\n","      }\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static void createParentDirectories(Path path, FileAttribute<?>... attrs) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_89.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_89.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_89.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_89.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_90.txt","newdoc":" Interestingly, unlike File.getCanonicalFile(), Path/Files provides no way of getting the\n canonical (absolute, normalized, symlinks resolved, etc.) form of a path to a nonexistent\n file. getCanonicalFile() can at least get the canonical form of the part of the path which\n Check if the parent is a directory first because createDirectories will fail if the parent\n exists and is a symlink to a directory... we'd like for this to succeed in that case.\n (I'm kind of surprised that createDirectories would fail in that case; doesn't seem like\n actually exists and then append the normalized remainder of the path to that.\n The given directory is a filesystem root. All zero of its ancestors exist. This doesn't\n mean that the root itself exists -- consider x:\\ on a Windows machine without such a\n drive -- or even that the caller can create it, but this method makes no such guarantees\n even for non-root files.\n what you'd want to happen.)\n Interestingly, unlike File.getCanonicalFile(), Path/Files provides no way of getting the\n canonical (absolute, normalized, symlinks resolved, etc.) form of a path to a nonexistent\n file. getCanonicalFile() can at least get the canonical form of the part of the path which\n Check if the parent is a directory first because createDirectories will fail if the parent\n exists and is a symlink to a directory... we'd like for this to succeed in that case.\n (I'm kind of surprised that createDirectories would fail in that case; doesn't seem like\n actually exists and then append the normalized remainder of the path to that.\n The given directory is a filesystem root. All zero of its ancestors exist. This doesn't\n mean that the root itself exists -- consider x:\\ on a Windows machine without such a\n drive -- or even that the caller can create it, but this method makes no such guarantees\n even for non-root files.\n what you'd want to happen.)\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_90.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[352,357,358,359,364,365,366,371,372,373,374,375,376,377,351],"dellines":[],"addcode":["  public static void createParentDirectories(\n","      Path path, FileAttribute<?>... attrs) throws IOException {\n","    Path normalizedAbsolutePath = path.toAbsolutePath().normalize();\n","    Path parent = normalizedAbsolutePath.getParent();\n","    if (parent == null) {\n","      return;\n","    }\n","\n","    if (!Files.isDirectory(parent)) {\n","      Files.createDirectories(parent, attrs);\n","      if (!Files.isDirectory(parent)) {\n","        throw new IOException(\"Unable to create parent directories of \" + path);\n","      }\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static void createParentDirectories(Path path, FileAttribute<?>... attrs) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_90.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_90.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_90.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_90.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_91.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[160,161,162,195,196,197,198,159],"dellines":[],"addcode":["    @Override\n","    public String toString() {\n","      return \"MoreFiles.asByteSource(\" + path + \", \" + Arrays.toString(options) + \")\";\n","    }\n","    @Override\n","    public String toString() {\n","      return \"MoreFiles.asByteSink(\" + path + \", \" + Arrays.toString(options) + \")\";\n","    }\n"],"delcode":[],"methodSig":"public String toString()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_91.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_91.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_91.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_91.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_92.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[160,161,162,195,196,197,198,159],"dellines":[],"addcode":["    @Override\n","    public String toString() {\n","      return \"MoreFiles.asByteSource(\" + path + \", \" + Arrays.toString(options) + \")\";\n","    }\n","    @Override\n","    public String toString() {\n","      return \"MoreFiles.asByteSink(\" + path + \", \" + Arrays.toString(options) + \")\";\n","    }\n"],"delcode":[],"methodSig":"public String toString()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_92.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_92.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_92.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_92.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_93.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_93.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_93.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_93.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/RangeSet","pathinproj":"guava/src/com/google/common/collect/RangeSet.java","addlines":[256,252,253,254,255],"dellines":[240],"addcode":["  default void removeAll(Iterable<Range<C>> ranges) {\n","    for (Range<C> range : ranges) {\n","      remove(range);\n","    }\n","  }\n"],"delcode":["  void removeAll(Iterable<Range<C>> ranges);\n"],"methodSig":" void removeAll(Iterable<Range<C>> ranges)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_93.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_93.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_93.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_93.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_94.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_94.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_94.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_94.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/RangeSet","pathinproj":"guava/src/com/google/common/collect/RangeSet.java","addlines":[256,252,253,254,255],"dellines":[240],"addcode":["  default void removeAll(Iterable<Range<C>> ranges) {\n","    for (Range<C> range : ranges) {\n","      remove(range);\n","    }\n","  }\n"],"delcode":["  void removeAll(Iterable<Range<C>> ranges);\n"],"methodSig":" void removeAll(Iterable<Range<C>> ranges)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_94.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_94.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_94.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_94.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_95.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_95.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_95.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_95.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[68],"dellines":[66],"addcode":["    return new AtomicLongMap<K>(new ConcurrentHashMap<>());\n"],"delcode":["    return new AtomicLongMap<K>(new ConcurrentHashMap<K, AtomicLong>());\n"],"methodSig":"public static AtomicLongMap<K> create()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_95.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_95.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_95.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_95.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_96.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_96.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_96.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_96.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[68],"dellines":[66],"addcode":["    return new AtomicLongMap<K>(new ConcurrentHashMap<>());\n"],"delcode":["    return new AtomicLongMap<K>(new ConcurrentHashMap<K, AtomicLong>());\n"],"methodSig":"public static AtomicLongMap<K> create()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_96.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_96.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_96.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_96.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_97.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[642,643,644,645,646],"dellines":[],"addcode":["  @Override\n","  public final V getOrDefault(@Nullable Object key, @Nullable V defaultValue) {\n","    V result = get(key);\n","    return (result != null) ? result : defaultValue;\n","  }\n"],"delcode":[],"methodSig":"public final V getOrDefault(@Nullable Object key, @Nullable V defaultValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_97.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_97.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_97.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_97.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_98.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[642,643,644,645,646],"dellines":[],"addcode":["  @Override\n","  public final V getOrDefault(@Nullable Object key, @Nullable V defaultValue) {\n","    V result = get(key);\n","    return (result != null) ? result : defaultValue;\n","  }\n"],"delcode":[],"methodSig":"public final V getOrDefault(@Nullable Object key, @Nullable V defaultValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_98.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_98.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_98.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_98.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_99.txt","newdoc":" Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[144,145,146,147,148,149,136,137,138,139,142,143],"dellines":[],"addcode":["    @Override\n","    public long size() throws IOException {\n","      BasicFileAttributes attrs = readAttributes();\n","\n","      if (attrs.isDirectory()) {\n","        throw new IOException(\"can't read: is a directory\");\n","      } else if (attrs.isSymbolicLink()) {\n","        throw new IOException(\"can't read: is a symbolic link\");\n","      }\n","\n","      return attrs.size();\n","    }\n"],"delcode":[],"methodSig":"public long size() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_99.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_99.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_99.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_99.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_100.txt","newdoc":" Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n specific and they can't be read as bytes using the read methods anyway.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[144,145,146,147,148,149,136,137,138,139,142,143],"dellines":[],"addcode":["    @Override\n","    public long size() throws IOException {\n","      BasicFileAttributes attrs = readAttributes();\n","\n","      if (attrs.isDirectory()) {\n","        throw new IOException(\"can't read: is a directory\");\n","      } else if (attrs.isSymbolicLink()) {\n","        throw new IOException(\"can't read: is a symbolic link\");\n","      }\n","\n","      return attrs.size();\n","    }\n"],"delcode":[],"methodSig":"public long size() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_100.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_100.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_100.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_100.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_101.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_101.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSetMultimap","pathinproj":"guava/src/com/google/common/collect/ImmutableSetMultimap.java","addlines":[82,83,84,85,86,87,88,89,90,91,92,93],"dellines":[],"addcode":["  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableSetMultimap<K, V>> toImmutableSetMultimap(\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(keyFunction, \"keyFunction\");\n","    checkNotNull(valueFunction, \"valueFunction\");\n","    return Collector.of(\n","        ImmutableSetMultimap::<K, V>builder,\n","        (builder, t) -> builder.put(keyFunction.apply(t), valueFunction.apply(t)),\n","        ImmutableSetMultimap.Builder::combine,\n","        ImmutableSetMultimap.Builder::build);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableSetMultimap<K, V>> toImmutableSetMultimap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_101.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_101.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_101.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_101.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_102.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_102.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSetMultimap","pathinproj":"guava/src/com/google/common/collect/ImmutableSetMultimap.java","addlines":[82,83,84,85,86,87,88,89,90,91,92,93],"dellines":[],"addcode":["  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableSetMultimap<K, V>> toImmutableSetMultimap(\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(keyFunction, \"keyFunction\");\n","    checkNotNull(valueFunction, \"valueFunction\");\n","    return Collector.of(\n","        ImmutableSetMultimap::<K, V>builder,\n","        (builder, t) -> builder.put(keyFunction.apply(t), valueFunction.apply(t)),\n","        ImmutableSetMultimap.Builder::combine,\n","        ImmutableSetMultimap.Builder::build);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableSetMultimap<K, V>> toImmutableSetMultimap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_102.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_102.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_102.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_102.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_103.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4384,4385,4386,4387,4388,4389],"dellines":[],"addcode":["  @Override\n","  public V computeIfAbsent(K key, Function<? super K, ? extends V> function) {\n","    checkNotNull(key);\n","    checkNotNull(function);\n","    return compute(key, (k, oldValue) -> (oldValue == null) ? function.apply(key) : oldValue);\n","  }\n"],"delcode":[],"methodSig":"public V computeIfAbsent(K key, Function<? super K, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_103.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_103.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_103.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_103.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_104.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4384,4385,4386,4387,4388,4389],"dellines":[],"addcode":["  @Override\n","  public V computeIfAbsent(K key, Function<? super K, ? extends V> function) {\n","    checkNotNull(key);\n","    checkNotNull(function);\n","    return compute(key, (k, oldValue) -> (oldValue == null) ? function.apply(key) : oldValue);\n","  }\n"],"delcode":[],"methodSig":"public V computeIfAbsent(K key, Function<? super K, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_104.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_104.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_104.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_104.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_105.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_105.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multiset","pathinproj":"guava/src/com/google/common/collect/Multiset.java","addlines":[310,311,312,313,314],"dellines":[],"addcode":["  @Beta\n","  default void forEachEntry(ObjIntConsumer<? super E> action) {\n","    checkNotNull(action);\n","    entrySet().forEach(entry -> action.accept(entry.getElement(), entry.getCount()));\n","  }\n"],"delcode":[],"methodSig":" void forEachEntry(ObjIntConsumer<? super E> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_105.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_105.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_105.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_105.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_106.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_106.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multiset","pathinproj":"guava/src/com/google/common/collect/Multiset.java","addlines":[310,311,312,313,314],"dellines":[],"addcode":["  @Beta\n","  default void forEachEntry(ObjIntConsumer<? super E> action) {\n","    checkNotNull(action);\n","    entrySet().forEach(entry -> action.accept(entry.getElement(), entry.getCount()));\n","  }\n"],"delcode":[],"methodSig":" void forEachEntry(ObjIntConsumer<? super E> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_106.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_106.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_106.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_106.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_107.txt","newdoc":" Paths that have a parent:\n \"/foo\" (\"/\")\n \"foo/bar\" (\"foo\")\n \"C:\\foo\" (\"C:\\\")\n \"\\foo\" (\"\\\" - current drive for process on Windows)\n \"C:foo\" (\"C:\" - working dir of drive C on Windows)\n Paths that don't have a parent:\n \"/\", \"C:\\\", \"\\\" (no parent)\n \"\" (undefined, though typically parent of working dir)\n \"C:\" (parent of working dir of drive C on Windows)\n\n For working dir paths (\"\" and \"C:\"), return null because:\n   A) it's not specified that \"\" is the path to the working directory.\n   B) if we're getting this path for recursive delete, it's typically not possible to\n      delete the working dir with a relative path anyway, so it's ok to fail.\n   C) if we're getting it for opening a new SecureDirectoryStream, there's no need to get\n      the parent path anyway since we can safely open a DirectoryStream to the path without\n      worrying about a symlink.\n \"foo\" (working dir)\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_107.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[640,641,642,644,650,651,652,654,666,667,669,670,639,671],"dellines":[],"addcode":["  @Nullable\n","  private static Path getParentPath(Path path) throws IOException {\n","    Path parent = path.getParent();\n","\n","    if (parent != null) {\n","      return parent;\n","    }\n","\n","    if (path.getNameCount() == 0) {\n","      return null;\n","    } else {\n","      return path.getFileSystem().getPath(\".\");\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static Path getParentPath(Path path) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_107.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_107.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_107.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_107.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_108.txt","newdoc":" Paths that have a parent:\n \"/foo\" (\"/\")\n \"foo/bar\" (\"foo\")\n \"C:\\foo\" (\"C:\\\")\n \"\\foo\" (\"\\\" - current drive for process on Windows)\n \"C:foo\" (\"C:\" - working dir of drive C on Windows)\n Paths that don't have a parent:\n \"/\", \"C:\\\", \"\\\" (no parent)\n \"\" (undefined, though typically parent of working dir)\n \"C:\" (parent of working dir of drive C on Windows)\n\n For working dir paths (\"\" and \"C:\"), return null because:\n   A) it's not specified that \"\" is the path to the working directory.\n   B) if we're getting this path for recursive delete, it's typically not possible to\n      delete the working dir with a relative path anyway, so it's ok to fail.\n   C) if we're getting it for opening a new SecureDirectoryStream, there's no need to get\n      the parent path anyway since we can safely open a DirectoryStream to the path without\n      worrying about a symlink.\n \"foo\" (working dir)\n Paths that have a parent:\n \"/foo\" (\"/\")\n \"foo/bar\" (\"foo\")\n \"C:\\foo\" (\"C:\\\")\n \"\\foo\" (\"\\\" - current drive for process on Windows)\n \"C:foo\" (\"C:\" - working dir of drive C on Windows)\n Paths that don't have a parent:\n \"/\", \"C:\\\", \"\\\" (no parent)\n \"\" (undefined, though typically parent of working dir)\n \"C:\" (parent of working dir of drive C on Windows)\n\n For working dir paths (\"\" and \"C:\"), return null because:\n   A) it's not specified that \"\" is the path to the working directory.\n   B) if we're getting this path for recursive delete, it's typically not possible to\n      delete the working dir with a relative path anyway, so it's ok to fail.\n   C) if we're getting it for opening a new SecureDirectoryStream, there's no need to get\n      the parent path anyway since we can safely open a DirectoryStream to the path without\n      worrying about a symlink.\n \"foo\" (working dir)\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_108.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[640,641,642,644,650,651,652,654,666,667,669,670,639,671],"dellines":[],"addcode":["  @Nullable\n","  private static Path getParentPath(Path path) throws IOException {\n","    Path parent = path.getParent();\n","\n","    if (parent != null) {\n","      return parent;\n","    }\n","\n","    if (path.getNameCount() == 0) {\n","      return null;\n","    } else {\n","      return path.getFileSystem().getPath(\".\");\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static Path getParentPath(Path path) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_108.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_108.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_108.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_108.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_109.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[160,161,162,163,164,165,166,158,159],"dellines":[],"addcode":["    Object getElement() {\n","      if (element == null) {\n","        throw new NoSuchElementException();\n","      } else if (extras == null) {\n","        return element;\n","      } else {\n","        throw multiples(false);\n","      }\n","    }\n"],"delcode":[],"methodSig":" Object getElement()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_109.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_109.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_109.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_109.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_110.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[160,161,162,163,164,165,166,158,159],"dellines":[],"addcode":["    Object getElement() {\n","      if (element == null) {\n","        throw new NoSuchElementException();\n","      } else if (extras == null) {\n","        return element;\n","      } else {\n","        throw multiples(false);\n","      }\n","    }\n"],"delcode":[],"methodSig":" Object getElement()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_110.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_110.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_110.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_110.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_111.txt","newdoc":" TODO(lowasser): consider exposing this\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_111.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMultiset","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMultiset.java","addlines":[96,97,98,82,83,84,85,87,88,89,90,91,92,93,94,95],"dellines":[],"addcode":["  private static <T, E> Collector<T, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(\n","      Comparator<? super E> comparator,\n","      Function<? super T, ? extends E> elementFunction,\n","      ToIntFunction<? super T> countFunction) {\n","    checkNotNull(comparator);\n","    checkNotNull(elementFunction);\n","    checkNotNull(countFunction);\n","    return Collector.of(\n","        () -> TreeMultiset.create(comparator),\n","        (multiset, t) -> multiset.add(elementFunction.apply(t), countFunction.applyAsInt(t)),\n","        (multiset1, multiset2) -> {\n","          multiset1.addAll(multiset2);\n","          return multiset1;\n","        },\n","        (Multiset<E> multiset) -> copyOfSortedEntries(comparator, multiset.entrySet()));\n","  }\n"],"delcode":[],"methodSig":"private static Collector<T, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(Comparator<? super E> comparator, Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_111.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_111.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_111.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_111.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_112.txt","newdoc":" TODO(lowasser): consider exposing this\n TODO(lowasser): consider exposing this\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_112.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMultiset","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMultiset.java","addlines":[96,97,98,82,83,84,85,87,88,89,90,91,92,93,94,95],"dellines":[],"addcode":["  private static <T, E> Collector<T, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(\n","      Comparator<? super E> comparator,\n","      Function<? super T, ? extends E> elementFunction,\n","      ToIntFunction<? super T> countFunction) {\n","    checkNotNull(comparator);\n","    checkNotNull(elementFunction);\n","    checkNotNull(countFunction);\n","    return Collector.of(\n","        () -> TreeMultiset.create(comparator),\n","        (multiset, t) -> multiset.add(elementFunction.apply(t), countFunction.applyAsInt(t)),\n","        (multiset1, multiset2) -> {\n","          multiset1.addAll(multiset2);\n","          return multiset1;\n","        },\n","        (Multiset<E> multiset) -> copyOfSortedEntries(comparator, multiset.entrySet()));\n","  }\n"],"delcode":[],"methodSig":"private static Collector<T, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(Comparator<? super E> comparator, Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_112.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_112.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_112.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_112.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_113.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_113.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[544,545,546,547,548],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_113.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_113.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_113.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_113.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_114.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_114.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[544,545,546,547,548],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_114.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_114.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_114.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_114.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_115.txt","newdoc":" findLast(Stream) does some allocation, so we might as well box some more\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_115.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[292,294,295,296],"dellines":[],"addcode":["  public static OptionalInt findLast(IntStream stream) {\n","    java.util.Optional<Integer> boxedLast = findLast(stream.boxed());\n","    return boxedLast.isPresent() ? OptionalInt.of(boxedLast.get()) : OptionalInt.empty();\n","  }\n"],"delcode":[],"methodSig":"public static OptionalInt findLast(IntStream stream)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_115.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_115.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_115.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_115.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_116.txt","newdoc":" findLast(Stream) does some allocation, so we might as well box some more\n findLast(Stream) does some allocation, so we might as well box some more\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_116.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[292,294,295,296],"dellines":[],"addcode":["  public static OptionalInt findLast(IntStream stream) {\n","    java.util.Optional<Integer> boxedLast = findLast(stream.boxed());\n","    return boxedLast.isPresent() ? OptionalInt.of(boxedLast.get()) : OptionalInt.empty();\n","  }\n"],"delcode":[],"methodSig":"public static OptionalInt findLast(IntStream stream)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_116.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_116.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_116.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_116.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_117.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_117.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_117.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_117.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[688,689,690,691,692,693,694,695,686,687],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(inSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(inSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> intersection(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_117.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_117.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_117.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_117.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_118.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_118.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_118.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_118.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[688,689,690,691,692,693,694,695,686,687],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(inSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(inSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> intersection(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_118.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_118.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_118.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_118.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_119.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[151,152,153,154,155,156,157],"dellines":[],"addcode":["    @Override\n","    public byte[] read() throws IOException {\n","      try (SeekableByteChannel channel = Files.newByteChannel(path, options)) {\n","        return com.google.common.io.Files.readFile(\n","            Channels.newInputStream(channel), channel.size());\n","      }\n","    }\n"],"delcode":[],"methodSig":"public byte[] read() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_119.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_119.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_119.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_119.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_120.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[151,152,153,154,155,156,157],"dellines":[],"addcode":["    @Override\n","    public byte[] read() throws IOException {\n","      try (SeekableByteChannel channel = Files.newByteChannel(path, options)) {\n","        return com.google.common.io.Files.readFile(\n","            Channels.newInputStream(channel), channel.size());\n","      }\n","    }\n"],"delcode":[],"methodSig":"public byte[] read() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_120.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_120.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_120.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_120.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_121.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractTable","pathinproj":"guava/src/com/google/common/collect/AbstractTable.java","addlines":[162,163,164,165],"dellines":[],"addcode":["    @Override\n","    public Spliterator<Cell<R, C, V>> spliterator() {\n","      return cellSpliterator();\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<Cell<R, C, V>> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_121.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_121.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_121.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_121.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_122.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractTable","pathinproj":"guava/src/com/google/common/collect/AbstractTable.java","addlines":[162,163,164,165],"dellines":[],"addcode":["    @Override\n","    public Spliterator<Cell<R, C, V>> spliterator() {\n","      return cellSpliterator();\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<Cell<R, C, V>> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_122.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_122.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_122.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_122.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_123.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[106,107,108,109],"dellines":[],"addcode":["    @Override\n","    public InputStream openStream() throws IOException {\n","      return Files.newInputStream(path, options);\n","    }\n"],"delcode":[],"methodSig":"public InputStream openStream() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_123.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_123.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_123.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_123.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_124.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[106,107,108,109],"dellines":[],"addcode":["    @Override\n","    public InputStream openStream() throws IOException {\n","      return Files.newInputStream(path, options);\n","    }\n"],"delcode":[],"methodSig":"public InputStream openStream() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_124.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_124.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_124.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_124.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_125.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_125.txt","newdoc":" To avoid a race, make sure the refreshed value is set into loadingValueReference\n *before* returning newValue from the cache query.\n","newJdoc":"","olddoc":" To avoid a race, make sure the refreshed value is set into loadingValueReference\n *before* returning newValue from the cache query.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[3727],"dellines":[3639],"addcode":["            new com.google.common.base.Function<V, V>() {\n"],"delcode":["            new Function<V, V>() {\n"],"methodSig":"public ListenableFuture<V> loadFuture(K key, CacheLoader<? super K, V> loader)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_125.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_125.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_125.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_125.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_126.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_126.txt","newdoc":" To avoid a race, make sure the refreshed value is set into loadingValueReference\n *before* returning newValue from the cache query.\n To avoid a race, make sure the refreshed value is set into loadingValueReference\n *before* returning newValue from the cache query.\n","newJdoc":"","olddoc":" To avoid a race, make sure the refreshed value is set into loadingValueReference\n *before* returning newValue from the cache query.\n To avoid a race, make sure the refreshed value is set into loadingValueReference\n *before* returning newValue from the cache query.\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[3727],"dellines":[3639],"addcode":["            new com.google.common.base.Function<V, V>() {\n"],"delcode":["            new Function<V, V>() {\n"],"methodSig":"public ListenableFuture<V> loadFuture(K key, CacheLoader<? super K, V> loader)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_126.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_126.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_126.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_126.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_127.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/HashBiMap","pathinproj":"guava/src/com/google/common/collect/HashBiMap.java","addlines":[704,696,697,698,699,700,701,702,703],"dellines":[],"addcode":["    @Override\n","    public void replaceAll(BiFunction<? super V, ? super K, ? extends K> function) {\n","      checkNotNull(function);\n","      BiEntry<K, V> oldFirst = firstInKeyInsertionOrder;\n","      clear();\n","      for (BiEntry<K, V> entry = oldFirst; entry != null; entry = entry.nextInKeyInsertionOrder) {\n","        put(entry.value, function.apply(entry.value, entry.key));\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void replaceAll(BiFunction<? super V, ? super K, ? extends K> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_127.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_127.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_127.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_127.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_128.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/HashBiMap","pathinproj":"guava/src/com/google/common/collect/HashBiMap.java","addlines":[704,696,697,698,699,700,701,702,703],"dellines":[],"addcode":["    @Override\n","    public void replaceAll(BiFunction<? super V, ? super K, ? extends K> function) {\n","      checkNotNull(function);\n","      BiEntry<K, V> oldFirst = firstInKeyInsertionOrder;\n","      clear();\n","      for (BiEntry<K, V> entry = oldFirst; entry != null; entry = entry.nextInKeyInsertionOrder) {\n","        put(entry.value, function.apply(entry.value, entry.key));\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void replaceAll(BiFunction<? super V, ? super K, ? extends K> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_128.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_128.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_128.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_128.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_129.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_129.txt","newdoc":" Returns the first PatternCompiler that loads successfully.\n from hasNext()\n Fall back to the JDK regex library.\n","newJdoc":"","olddoc":"\n     * We'd normally use ServiceLoader here, but it hurts Android startup performance. To avoid\n     * that, we hardcode the JDK Pattern compiler on Android (and, inadvertently, on App Engine and\n     * in Guava, at least for now).\n     \n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Platform","pathinproj":"guava/src/com/google/common/base/Platform.java","addlines":[80,81,82,83,85,86,74,76,77,78,79],"dellines":[],"addcode":["    ServiceLoader<PatternCompiler> loader = ServiceLoader.load(PatternCompiler.class);\n","    try {\n","      for (Iterator<PatternCompiler> it = loader.iterator(); it.hasNext();) {\n","        try {\n","          return it.next();\n","        } catch (ServiceConfigurationError e) {\n","          logPatternCompilerError(e);\n","        }\n","      }\n","      logPatternCompilerError(e);\n","    }\n"],"delcode":[],"methodSig":"private static PatternCompiler loadPatternCompiler()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_129.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_129.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_129.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_129.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_130.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_130.txt","newdoc":" Returns the first PatternCompiler that loads successfully.\n from hasNext()\n Fall back to the JDK regex library.\n Returns the first PatternCompiler that loads successfully.\n from hasNext()\n Fall back to the JDK regex library.\n","newJdoc":"","olddoc":"\n     * We'd normally use ServiceLoader here, but it hurts Android startup performance. To avoid\n     * that, we hardcode the JDK Pattern compiler on Android (and, inadvertently, on App Engine and\n     * in Guava, at least for now).\n     \n\n     * We'd normally use ServiceLoader here, but it hurts Android startup performance. To avoid\n     * that, we hardcode the JDK Pattern compiler on Android (and, inadvertently, on App Engine and\n     * in Guava, at least for now).\n     \n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Platform","pathinproj":"guava/src/com/google/common/base/Platform.java","addlines":[80,81,82,83,85,86,74,76,77,78,79],"dellines":[],"addcode":["    ServiceLoader<PatternCompiler> loader = ServiceLoader.load(PatternCompiler.class);\n","    try {\n","      for (Iterator<PatternCompiler> it = loader.iterator(); it.hasNext();) {\n","        try {\n","          return it.next();\n","        } catch (ServiceConfigurationError e) {\n","          logPatternCompilerError(e);\n","        }\n","      }\n","      logPatternCompilerError(e);\n","    }\n"],"delcode":[],"methodSig":"private static PatternCompiler loadPatternCompiler()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_130.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_130.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_130.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_130.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_131.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[185,186,187,188,189,190],"dellines":[],"addcode":["    @Override\n","    public Stream<E> parallelStream() {\n","      synchronized (mutex) {\n","        return delegate().parallelStream();\n","      }\n","    }\n"],"delcode":[],"methodSig":"public Stream<E> parallelStream()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_131.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_131.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_131.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_131.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_132.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[185,186,187,188,189,190],"dellines":[],"addcode":["    @Override\n","    public Stream<E> parallelStream() {\n","      synchronized (mutex) {\n","        return delegate().parallelStream();\n","      }\n","    }\n"],"delcode":[],"methodSig":"public Stream<E> parallelStream()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_132.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_132.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_132.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_132.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_133.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_133.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedSet_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedSet.java","addlines":[80,81,82,71,72,73,74,75,78,79],"dellines":[],"addcode":["  @Beta\n","  public static <E> Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(\n","      Comparator<? super E> comparator) {\n","    return CollectCollectors.toImmutableSortedSet(comparator);\n","  }\n","  @Beta\n","  public static <E> Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(\n","      Comparator<? super E> comparator) {\n","    return CollectCollectors.toImmutableSortedSet(comparator);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(Comparator<? super E> comparator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_133.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_133.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_133.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_133.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_134.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_134.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedSet_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedSet.java","addlines":[80,81,82,71,72,73,74,75,78,79],"dellines":[],"addcode":["  @Beta\n","  public static <E> Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(\n","      Comparator<? super E> comparator) {\n","    return CollectCollectors.toImmutableSortedSet(comparator);\n","  }\n","  @Beta\n","  public static <E> Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(\n","      Comparator<? super E> comparator) {\n","    return CollectCollectors.toImmutableSortedSet(comparator);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(Comparator<? super E> comparator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_134.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_134.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_134.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_134.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_135.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_135.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[189,190,191],"dellines":[],"addcode":["  public static LongStream stream(OptionalLong optional) {\n","    return optional.isPresent() ? LongStream.of(optional.getAsLong()) : LongStream.empty();\n","  }\n"],"delcode":[],"methodSig":"public static LongStream stream(OptionalLong optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_135.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_135.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_135.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_135.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_136.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_136.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[189,190,191],"dellines":[],"addcode":["  public static LongStream stream(OptionalLong optional) {\n","    return optional.isPresent() ? LongStream.of(optional.getAsLong()) : LongStream.empty();\n","  }\n"],"delcode":[],"methodSig":"public static LongStream stream(OptionalLong optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_136.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_136.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_136.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_136.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_137.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_137.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[214,215],"dellines":[198],"addcode":["      return removeIf(element -> !collection.contains(element));\n","    }\n"],"delcode":["      return Iterables.removeIf(unfiltered, and(predicate, not(Predicates.<Object>in(collection))));\n"],"methodSig":"public boolean retainAll(final Collection<?> collection)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_137.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_137.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_137.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_137.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_138.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_138.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[214,215],"dellines":[198],"addcode":["      return removeIf(element -> !collection.contains(element));\n","    }\n"],"delcode":["      return Iterables.removeIf(unfiltered, and(predicate, not(Predicates.<Object>in(collection))));\n"],"methodSig":"public boolean retainAll(final Collection<?> collection)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_138.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_138.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_138.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_138.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_139.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_139.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[59,60,61,62],"dellines":[],"addcode":["  @SuppressWarnings(\"unchecked\")\n","  public static <T> Collector<T, ?, Optional<T>> toOptional() {\n","    return (Collector) TO_OPTIONAL;\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, Optional<T>> toOptional()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_139.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_139.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_139.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_139.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_140.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_140.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[59,60,61,62],"dellines":[],"addcode":["  @SuppressWarnings(\"unchecked\")\n","  public static <T> Collector<T, ?, Optional<T>> toOptional() {\n","    return (Collector) TO_OPTIONAL;\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, Optional<T>> toOptional()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_140.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_140.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_140.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_140.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_141.txt","newdoc":" If exceptions is not null, something went wrong trying to delete the contents of the\n directory, so we shouldn't try to delete the directory as it will probably fail.\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_141.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[544,545,546,547,548,549,550,551,552,553,556,557,558,559,560,561,562,563,564,565,566,567],"dellines":[],"addcode":["  @Nullable\n","  private static Collection<IOException> deleteRecursivelySecure(\n","      SecureDirectoryStream<Path> dir, Path path) {\n","    Collection<IOException> exceptions = null;\n","    try {\n","      if (isDirectory(dir, path, NOFOLLOW_LINKS)) {\n","        try (SecureDirectoryStream<Path> childDir = dir.newDirectoryStream(path, NOFOLLOW_LINKS)) {\n","          exceptions = deleteDirectoryContentsSecure(childDir);\n","        }\n","\n","        if (exceptions == null) {\n","          dir.deleteDirectory(path);\n","        }\n","      } else {\n","        dir.deleteFile(path);\n","      }\n","\n","      return exceptions;\n","    } catch (IOException e) {\n","      return addException(exceptions, e);\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static Collection<IOException> deleteRecursivelySecure(SecureDirectoryStream<Path> dir, Path path)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_141.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_141.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_141.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_141.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_142.txt","newdoc":" If exceptions is not null, something went wrong trying to delete the contents of the\n directory, so we shouldn't try to delete the directory as it will probably fail.\n If exceptions is not null, something went wrong trying to delete the contents of the\n directory, so we shouldn't try to delete the directory as it will probably fail.\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_142.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[544,545,546,547,548,549,550,551,552,553,556,557,558,559,560,561,562,563,564,565,566,567],"dellines":[],"addcode":["  @Nullable\n","  private static Collection<IOException> deleteRecursivelySecure(\n","      SecureDirectoryStream<Path> dir, Path path) {\n","    Collection<IOException> exceptions = null;\n","    try {\n","      if (isDirectory(dir, path, NOFOLLOW_LINKS)) {\n","        try (SecureDirectoryStream<Path> childDir = dir.newDirectoryStream(path, NOFOLLOW_LINKS)) {\n","          exceptions = deleteDirectoryContentsSecure(childDir);\n","        }\n","\n","        if (exceptions == null) {\n","          dir.deleteDirectory(path);\n","        }\n","      } else {\n","        dir.deleteFile(path);\n","      }\n","\n","      return exceptions;\n","    } catch (IOException e) {\n","      return addException(exceptions, e);\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static Collection<IOException> deleteRecursivelySecure(SecureDirectoryStream<Path> dir, Path path)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_142.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_142.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_142.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_142.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_143.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_143.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[176,177,175],"dellines":[],"addcode":["  public static ByteSink asByteSink(Path path, OpenOption... options) {\n","    return new PathByteSink(path, options);\n","  }\n"],"delcode":[],"methodSig":"public static ByteSink asByteSink(Path path, OpenOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_143.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_143.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_143.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_143.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_144.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_144.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[176,177,175],"dellines":[],"addcode":["  public static ByteSink asByteSink(Path path, OpenOption... options) {\n","    return new PathByteSink(path, options);\n","  }\n"],"delcode":[],"methodSig":"public static ByteSink asByteSink(Path path, OpenOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_144.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_144.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_144.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_144.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_145.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1136,1131,1132,1133,1134,1135],"dellines":[],"addcode":["    @Override\n","    public V replace(K key, V value) {\n","      synchronized (mutex) {\n","        return delegate().replace(key, value);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V replace(K key, V value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_145.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_145.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_145.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_145.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_146.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1136,1131,1132,1133,1134,1135],"dellines":[],"addcode":["    @Override\n","    public V replace(K key, V value) {\n","      synchronized (mutex) {\n","        return delegate().replace(key, value);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V replace(K key, V value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_146.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_146.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_146.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_146.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_147.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_147.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[199,200,201],"dellines":[],"addcode":["  public static DoubleStream stream(OptionalDouble optional) {\n","    return optional.isPresent() ? DoubleStream.of(optional.getAsDouble()) : DoubleStream.empty();\n","  }\n"],"delcode":[],"methodSig":"public static DoubleStream stream(OptionalDouble optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_147.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_147.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_147.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_147.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_148.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_148.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[199,200,201],"dellines":[],"addcode":["  public static DoubleStream stream(OptionalDouble optional) {\n","    return optional.isPresent() ? DoubleStream.of(optional.getAsDouble()) : DoubleStream.empty();\n","  }\n"],"delcode":[],"methodSig":"public static DoubleStream stream(OptionalDouble optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_148.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_148.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_148.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_148.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_149.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[2057,2058,2059,2060,2061],"dellines":[],"addcode":["    @Override\n","    Spliterator<Entry<K, V2>> entrySpliterator() {\n","      return CollectSpliterators.map(\n","          fromMap.entrySet().spliterator(), Maps.<K, V1, V2>asEntryToEntryFunction(transformer));\n","    }\n"],"delcode":[],"methodSig":" Spliterator<Entry<K, V2>> entrySpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_149.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_149.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_149.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_149.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_150.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[2057,2058,2059,2060,2061],"dellines":[],"addcode":["    @Override\n","    Spliterator<Entry<K, V2>> entrySpliterator() {\n","      return CollectSpliterators.map(\n","          fromMap.entrySet().spliterator(), Maps.<K, V1, V2>asEntryToEntryFunction(transformer));\n","    }\n"],"delcode":[],"methodSig":" Spliterator<Entry<K, V2>> entrySpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_150.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_150.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_150.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_150.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_151.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_151.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectSpliterators","pathinproj":"guava/src/com/google/common/collect/CollectSpliterators.java","addlines":[256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"dellines":[],"addcode":["  static <F, T> Spliterator<T> flatMap(\n","      Spliterator<F> fromSpliterator,\n","      Function<? super F, Spliterator<T>> function,\n","      int topCharacteristics,\n","      long topSize) {\n","    checkArgument(\n","        (topCharacteristics & Spliterator.SUBSIZED) == 0,\n","        \"flatMap does not support SUBSIZED characteristic\");\n","    checkArgument(\n","        (topCharacteristics & Spliterator.SORTED) == 0,\n","        \"flatMap does not support SORTED characteristic\");\n","    checkNotNull(fromSpliterator);\n","    checkNotNull(function);\n","    class FlatMapSpliterator implements Spliterator<T> {\n","      @Nullable Spliterator<T> prefix;\n","      final Spliterator<F> from;\n","      final int characteristics;\n","      long estimatedSize;\n","\n","      FlatMapSpliterator(\n","          Spliterator<T> prefix, Spliterator<F> from, int characteristics, long estimatedSize) {\n","        this.prefix = prefix;\n","        this.from = from;\n","        this.characteristics = characteristics;\n","        this.estimatedSize = estimatedSize;\n","      }\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super T> action) {\n","        while (true) {\n","          if (prefix != null && prefix.tryAdvance(action)) {\n","            if (estimatedSize != Long.MAX_VALUE) {\n","              estimatedSize--;\n","            }\n","            return true;\n","          } else {\n","            prefix = null;\n","          }\n","          if (!from.tryAdvance(fromElement -> prefix = function.apply(fromElement))) {\n","            return false;\n","          }\n","        }\n","      }\n","\n","      @Override\n","      public void forEachRemaining(Consumer<? super T> action) {\n","        if (prefix != null) {\n","          prefix.forEachRemaining(action);\n","          prefix = null;\n","        }\n","        from.forEachRemaining(fromElement -> function.apply(fromElement).forEachRemaining(action));\n","        estimatedSize = 0;\n","      }\n","\n","      @Override\n","      public Spliterator<T> trySplit() {\n","        Spliterator<F> fromSplit = from.trySplit();\n","        if (fromSplit != null) {\n","          int splitCharacteristics = characteristics & ~Spliterator.SIZED;\n","          long estSplitSize = estimateSize();\n","          if (estSplitSize < Long.MAX_VALUE) {\n","            estSplitSize /= 2;\n","            this.estimatedSize -= estSplitSize;\n","          }\n","          Spliterator<T> result =\n","              new FlatMapSpliterator(this.prefix, fromSplit, splitCharacteristics, estSplitSize);\n","          this.prefix = null;\n","          return result;\n","        } else if (prefix != null) {\n","          Spliterator<T> result = prefix;\n","          this.prefix = null;\n","          return result;\n","        } else {\n","          return null;\n","        }\n","      }\n","\n","      @Override\n","      public long estimateSize() {\n","        if (prefix != null) {\n","          estimatedSize = Math.max(estimatedSize, prefix.estimateSize());\n","        }\n","        return Math.max(estimatedSize, 0);\n","      }\n","\n","      @Override\n","      public int characteristics() {\n","        return characteristics;\n","      }\n","    }\n","    return new FlatMapSpliterator(null, fromSpliterator, topCharacteristics, topSize);\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<T> flatMap(Spliterator<F> fromSpliterator, Function<? super F, Spliterator<T>> function, int topCharacteristics, long topSize)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_151.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_151.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_151.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_151.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_152.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_152.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectSpliterators","pathinproj":"guava/src/com/google/common/collect/CollectSpliterators.java","addlines":[256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"dellines":[],"addcode":["  static <F, T> Spliterator<T> flatMap(\n","      Spliterator<F> fromSpliterator,\n","      Function<? super F, Spliterator<T>> function,\n","      int topCharacteristics,\n","      long topSize) {\n","    checkArgument(\n","        (topCharacteristics & Spliterator.SUBSIZED) == 0,\n","        \"flatMap does not support SUBSIZED characteristic\");\n","    checkArgument(\n","        (topCharacteristics & Spliterator.SORTED) == 0,\n","        \"flatMap does not support SORTED characteristic\");\n","    checkNotNull(fromSpliterator);\n","    checkNotNull(function);\n","    class FlatMapSpliterator implements Spliterator<T> {\n","      @Nullable Spliterator<T> prefix;\n","      final Spliterator<F> from;\n","      final int characteristics;\n","      long estimatedSize;\n","\n","      FlatMapSpliterator(\n","          Spliterator<T> prefix, Spliterator<F> from, int characteristics, long estimatedSize) {\n","        this.prefix = prefix;\n","        this.from = from;\n","        this.characteristics = characteristics;\n","        this.estimatedSize = estimatedSize;\n","      }\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super T> action) {\n","        while (true) {\n","          if (prefix != null && prefix.tryAdvance(action)) {\n","            if (estimatedSize != Long.MAX_VALUE) {\n","              estimatedSize--;\n","            }\n","            return true;\n","          } else {\n","            prefix = null;\n","          }\n","          if (!from.tryAdvance(fromElement -> prefix = function.apply(fromElement))) {\n","            return false;\n","          }\n","        }\n","      }\n","\n","      @Override\n","      public void forEachRemaining(Consumer<? super T> action) {\n","        if (prefix != null) {\n","          prefix.forEachRemaining(action);\n","          prefix = null;\n","        }\n","        from.forEachRemaining(fromElement -> function.apply(fromElement).forEachRemaining(action));\n","        estimatedSize = 0;\n","      }\n","\n","      @Override\n","      public Spliterator<T> trySplit() {\n","        Spliterator<F> fromSplit = from.trySplit();\n","        if (fromSplit != null) {\n","          int splitCharacteristics = characteristics & ~Spliterator.SIZED;\n","          long estSplitSize = estimateSize();\n","          if (estSplitSize < Long.MAX_VALUE) {\n","            estSplitSize /= 2;\n","            this.estimatedSize -= estSplitSize;\n","          }\n","          Spliterator<T> result =\n","              new FlatMapSpliterator(this.prefix, fromSplit, splitCharacteristics, estSplitSize);\n","          this.prefix = null;\n","          return result;\n","        } else if (prefix != null) {\n","          Spliterator<T> result = prefix;\n","          this.prefix = null;\n","          return result;\n","        } else {\n","          return null;\n","        }\n","      }\n","\n","      @Override\n","      public long estimateSize() {\n","        if (prefix != null) {\n","          estimatedSize = Math.max(estimatedSize, prefix.estimateSize());\n","        }\n","        return Math.max(estimatedSize, 0);\n","      }\n","\n","      @Override\n","      public int characteristics() {\n","        return characteristics;\n","      }\n","    }\n","    return new FlatMapSpliterator(null, fromSpliterator, topCharacteristics, topSize);\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<T> flatMap(Spliterator<F> fromSpliterator, Function<? super F, Spliterator<T>> function, int topCharacteristics, long topSize)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_152.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_152.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_152.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_152.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_153.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_153.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Optional","pathinproj":"guava/src/com/google/common/base/Optional.java","addlines":[134,135,136,137,138,139],"dellines":[],"addcode":["  @Nullable\n","  public static <T> java.util.Optional<T> toJavaUtil(@Nullable Optional<T> googleOptional) {\n","    return (googleOptional == null)\n","        ? null\n","        : java.util.Optional.ofNullable(googleOptional.orNull());\n","  }\n"],"delcode":[],"methodSig":"public static java.util.Optional<T> toJavaUtil(@Nullable Optional<T> googleOptional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_153.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_153.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_153.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_153.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_154.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_154.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Optional","pathinproj":"guava/src/com/google/common/base/Optional.java","addlines":[134,135,136,137,138,139],"dellines":[],"addcode":["  @Nullable\n","  public static <T> java.util.Optional<T> toJavaUtil(@Nullable Optional<T> googleOptional) {\n","    return (googleOptional == null)\n","        ? null\n","        : java.util.Optional.ofNullable(googleOptional.orNull());\n","  }\n"],"delcode":[],"methodSig":"public static java.util.Optional<T> toJavaUtil(@Nullable Optional<T> googleOptional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_154.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_154.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_154.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_154.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_155.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Lists","pathinproj":"guava/src/com/google/common/collect/Lists.java","addlines":[657,658,659,660,661],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super T> filter) {\n","      checkNotNull(filter);\n","      return fromList.removeIf(element -> filter.test(function.apply(element)));\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super T> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_155.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_155.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_155.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_155.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_156.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Lists","pathinproj":"guava/src/com/google/common/collect/Lists.java","addlines":[657,658,659,660,661],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super T> filter) {\n","      checkNotNull(filter);\n","      return fromList.removeIf(element -> filter.test(function.apply(element)));\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super T> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_156.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_156.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_156.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_156.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_157.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_157.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[576,577,578,579,580,581,582,583,584,585,586,573,574,575],"dellines":[],"addcode":["  @Nullable\n","  private static Collection<IOException> deleteDirectoryContentsSecure(\n","      SecureDirectoryStream<Path> dir) {\n","    Collection<IOException> exceptions = null;\n","    try {\n","      for (Path path : dir) {\n","        exceptions = concat(exceptions, deleteRecursivelySecure(dir, path.getFileName()));\n","      }\n","\n","      return exceptions;\n","    } catch (DirectoryIteratorException e) {\n","      return addException(exceptions, e.getCause());\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static Collection<IOException> deleteDirectoryContentsSecure(SecureDirectoryStream<Path> dir)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_157.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_157.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_157.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_157.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_158.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_158.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[576,577,578,579,580,581,582,583,584,585,586,573,574,575],"dellines":[],"addcode":["  @Nullable\n","  private static Collection<IOException> deleteDirectoryContentsSecure(\n","      SecureDirectoryStream<Path> dir) {\n","    Collection<IOException> exceptions = null;\n","    try {\n","      for (Path path : dir) {\n","        exceptions = concat(exceptions, deleteRecursivelySecure(dir, path.getFileName()));\n","      }\n","\n","      return exceptions;\n","    } catch (DirectoryIteratorException e) {\n","      return addException(exceptions, e.getCause());\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static Collection<IOException> deleteDirectoryContentsSecure(SecureDirectoryStream<Path> dir)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_158.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_158.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_158.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_158.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_159.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_159.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[160,161,162,163,164,165,166,167,168,169,170,171,159],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  public long getAndUpdate(K key, LongUnaryOperator updaterFunction) {\n","    checkNotNull(updaterFunction);\n","    AtomicLong holder = new AtomicLong();\n","    map.compute(\n","        key,\n","        (k, value) -> {\n","          long oldValue = (value == null) ? 0L : value.longValue();\n","          holder.set(oldValue);\n","          return updaterFunction.applyAsLong(oldValue);\n","        });\n","    return holder.get();\n","  }\n"],"delcode":[],"methodSig":"public long getAndUpdate(K key, LongUnaryOperator updaterFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_159.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_159.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_159.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_159.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_160.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_160.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[160,161,162,163,164,165,166,167,168,169,170,171,159],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  public long getAndUpdate(K key, LongUnaryOperator updaterFunction) {\n","    checkNotNull(updaterFunction);\n","    AtomicLong holder = new AtomicLong();\n","    map.compute(\n","        key,\n","        (k, value) -> {\n","          long oldValue = (value == null) ? 0L : value.longValue();\n","          holder.set(oldValue);\n","          return updaterFunction.applyAsLong(oldValue);\n","        });\n","    return holder.get();\n","  }\n"],"delcode":[],"methodSig":"public long getAndUpdate(K key, LongUnaryOperator updaterFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_160.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_160.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_160.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_160.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_161.txt","newdoc":" If exceptions is not null, something went wrong trying to delete the contents of the\n directory, so we shouldn't try to delete the directory as it will probably fail.\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_161.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[608,609,610,611,612,592,593,594,595,596,597,598,599,600,601,604,605,606,607],"dellines":[],"addcode":["  @Nullable\n","  private static Collection<IOException> deleteRecursivelyInsecure(Path path) {\n","    Collection<IOException> exceptions = null;\n","    try {\n","      if (Files.isDirectory(path, NOFOLLOW_LINKS)) {\n","        try (DirectoryStream<Path> stream = Files.newDirectoryStream(path)) {\n","          exceptions = deleteDirectoryContentsInsecure(stream);\n","        }\n","      }\n","\n","      if (exceptions == null) {\n","        Files.delete(path);\n","      }\n","\n","      return exceptions;\n","    } catch (IOException e) {\n","      return addException(exceptions, e);\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static Collection<IOException> deleteRecursivelyInsecure(Path path)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_161.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_161.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_161.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_161.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_162.txt","newdoc":" If exceptions is not null, something went wrong trying to delete the contents of the\n directory, so we shouldn't try to delete the directory as it will probably fail.\n If exceptions is not null, something went wrong trying to delete the contents of the\n directory, so we shouldn't try to delete the directory as it will probably fail.\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_162.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[608,609,610,611,612,592,593,594,595,596,597,598,599,600,601,604,605,606,607],"dellines":[],"addcode":["  @Nullable\n","  private static Collection<IOException> deleteRecursivelyInsecure(Path path) {\n","    Collection<IOException> exceptions = null;\n","    try {\n","      if (Files.isDirectory(path, NOFOLLOW_LINKS)) {\n","        try (DirectoryStream<Path> stream = Files.newDirectoryStream(path)) {\n","          exceptions = deleteDirectoryContentsInsecure(stream);\n","        }\n","      }\n","\n","      if (exceptions == null) {\n","        Files.delete(path);\n","      }\n","\n","      return exceptions;\n","    } catch (IOException e) {\n","      return addException(exceptions, e);\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static Collection<IOException> deleteRecursivelyInsecure(Path path)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_162.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_162.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_162.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_162.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_163.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_163.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableCollection_2","pathinproj":"guava/src/com/google/common/collect/ImmutableCollection.java","addlines":[268,269,270],"dellines":[],"addcode":["  public final boolean removeIf(Predicate<? super E> filter) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final boolean removeIf(Predicate<? super E> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_163.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_163.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_163.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_163.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_164.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_164.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableCollection_2","pathinproj":"guava/src/com/google/common/collect/ImmutableCollection.java","addlines":[268,269,270],"dellines":[],"addcode":["  public final boolean removeIf(Predicate<? super E> filter) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final boolean removeIf(Predicate<? super E> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_164.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_164.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_164.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_164.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_165.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_165.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_165.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_165.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/TreeTraverser","pathinproj":"guava/src/com/google/common/collect/TreeTraverser.java","addlines":[176,177,178,179,180,181,182,183,172,173,174,175],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        new Consumer<T>() {\n","          @Override\n","          public void accept(T t) {\n","            children(t).forEach(this);\n","            action.accept(t);\n","          }\n","        }.accept(root);\n","      }\n"],"delcode":[],"methodSig":"public final FluentIterable<T> postOrderTraversal(final T root)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_165.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_165.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_165.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_165.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_166.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_166.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_166.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_166.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/TreeTraverser","pathinproj":"guava/src/com/google/common/collect/TreeTraverser.java","addlines":[176,177,178,179,180,181,182,183,172,173,174,175],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        new Consumer<T>() {\n","          @Override\n","          public void accept(T t) {\n","            children(t).forEach(this);\n","            action.accept(t);\n","          }\n","        }.accept(root);\n","      }\n"],"delcode":[],"methodSig":"public final FluentIterable<T> postOrderTraversal(final T root)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_166.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_166.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_166.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_166.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_167.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_167.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_167.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_167.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[955,956,957,958,959],"dellines":[],"addcode":["\n","      @Override\n","      public Spliterator<T> spliterator() {\n","        return Streams.stream(iterable).limit(limitSize).spliterator();\n","      }\n"],"delcode":[],"methodSig":"public static Iterable<T> limit(final Iterable<T> iterable, final int limitSize)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_167.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_167.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_167.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_167.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_168.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_168.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_168.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_168.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[955,956,957,958,959],"dellines":[],"addcode":["\n","      @Override\n","      public Spliterator<T> spliterator() {\n","        return Streams.stream(iterable).limit(limitSize).spliterator();\n","      }\n"],"delcode":[],"methodSig":"public static Iterable<T> limit(final Iterable<T> iterable, final int limitSize)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_168.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_168.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_168.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_168.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_169.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_169.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[181,182,183,184,185],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  public long accumulateAndGet(K key, long x, LongBinaryOperator accumulatorFunction) {\n","    checkNotNull(accumulatorFunction);\n","    return updateAndGet(key, oldValue -> accumulatorFunction.applyAsLong(oldValue, x));\n","  }\n"],"delcode":[],"methodSig":"public long accumulateAndGet(K key, long x, LongBinaryOperator accumulatorFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_169.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_169.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_169.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_169.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_170.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_170.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[181,182,183,184,185],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  public long accumulateAndGet(K key, long x, LongBinaryOperator accumulatorFunction) {\n","    checkNotNull(accumulatorFunction);\n","    return updateAndGet(key, oldValue -> accumulatorFunction.applyAsLong(oldValue, x));\n","  }\n"],"delcode":[],"methodSig":"public long accumulateAndGet(K key, long x, LongBinaryOperator accumulatorFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_170.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_170.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_170.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_170.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_171.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_171.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[225,226,227],"dellines":[],"addcode":["  public static CharSink asCharSink(Path path, Charset charset, OpenOption... options) {\n","    return asByteSink(path, options).asCharSink(charset);\n","  }\n"],"delcode":[],"methodSig":"public static CharSink asCharSink(Path path, Charset charset, OpenOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_171.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_171.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_171.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_171.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_172.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_172.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[225,226,227],"dellines":[],"addcode":["  public static CharSink asCharSink(Path path, Charset charset, OpenOption... options) {\n","    return asByteSink(path, options).asCharSink(charset);\n","  }\n"],"delcode":[],"methodSig":"public static CharSink asCharSink(Path path, Charset charset, OpenOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_172.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_172.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_172.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_172.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_173.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_173.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_173.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_173.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/BinaryTreeTraverser","pathinproj":"guava/src/com/google/common/collect/BinaryTreeTraverser.java","addlines":[86,87,88,89,90,91],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        acceptIfPresent(action, leftChild(root));\n","        acceptIfPresent(action, rightChild(root));\n","      }\n"],"delcode":[],"methodSig":"public final Iterable<T> children(final T root)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_173.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_173.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_173.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_173.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_174.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_174.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_174.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_174.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/BinaryTreeTraverser","pathinproj":"guava/src/com/google/common/collect/BinaryTreeTraverser.java","addlines":[86,87,88,89,90,91],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        acceptIfPresent(action, leftChild(root));\n","        acceptIfPresent(action, rightChild(root));\n","      }\n"],"delcode":[],"methodSig":"public final Iterable<T> children(final T root)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_174.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_174.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_174.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_174.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_175.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[97,98,99,100,101,102,103,104],"dellines":[],"addcode":["    private static boolean followLinks(OpenOption[] options) {\n","      for (OpenOption option : options) {\n","        if (option == NOFOLLOW_LINKS) {\n","          return false;\n","        }\n","      }\n","      return true;\n","    }\n"],"delcode":[],"methodSig":"private static boolean followLinks(OpenOption[] options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_175.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_175.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_175.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_175.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_176.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[97,98,99,100,101,102,103,104],"dellines":[],"addcode":["    private static boolean followLinks(OpenOption[] options) {\n","      for (OpenOption option : options) {\n","        if (option == NOFOLLOW_LINKS) {\n","          return false;\n","        }\n","      }\n","      return true;\n","    }\n"],"delcode":[],"methodSig":"private static boolean followLinks(OpenOption[] options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_176.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_176.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_176.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_176.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_177.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_177.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[305,306,307,308,309,310,311,312,313,314,315,316,317,318],"dellines":[],"addcode":["  public static Predicate<Path> isRegularFile(LinkOption... options) {\n","    final LinkOption[] optionsCopy = options.clone();\n","    return new Predicate<Path>() {\n","      @Override\n","      public boolean apply(Path input) {\n","        return Files.isRegularFile(input, optionsCopy);\n","      }\n","\n","      @Override\n","      public String toString() {\n","        return \"MoreFiles.isRegularFile(\" + Arrays.toString(optionsCopy) + \")\";\n","      }\n","    };\n","  }\n"],"delcode":[],"methodSig":"public static Predicate<Path> isRegularFile(LinkOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_177.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_177.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_177.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_177.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_178.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_178.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[305,306,307,308,309,310,311,312,313,314,315,316,317,318],"dellines":[],"addcode":["  public static Predicate<Path> isRegularFile(LinkOption... options) {\n","    final LinkOption[] optionsCopy = options.clone();\n","    return new Predicate<Path>() {\n","      @Override\n","      public boolean apply(Path input) {\n","        return Files.isRegularFile(input, optionsCopy);\n","      }\n","\n","      @Override\n","      public String toString() {\n","        return \"MoreFiles.isRegularFile(\" + Arrays.toString(optionsCopy) + \")\";\n","      }\n","    };\n","  }\n"],"delcode":[],"methodSig":"public static Predicate<Path> isRegularFile(LinkOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_178.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_178.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_178.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_178.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_179.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[288,112,289,290,291,109,110,111],"dellines":[],"addcode":["    @Override\n","    public Spliterator<T> spliterator() {\n","      return CollectSpliterators.map(fromCollection.spliterator(), function);\n","    }\n","    @Override\n","    public Spliterator<T> spliterator() {\n","      return (Spliterator<T>) iterable.spliterator();\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<T> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_179.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_179.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_179.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_179.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_180.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[288,112,289,290,291,109,110,111],"dellines":[],"addcode":["    @Override\n","    public Spliterator<T> spliterator() {\n","      return CollectSpliterators.map(fromCollection.spliterator(), function);\n","    }\n","    @Override\n","    public Spliterator<T> spliterator() {\n","      return (Spliterator<T>) iterable.spliterator();\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<T> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_180.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_180.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_180.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_180.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_181.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_181.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Optional","pathinproj":"guava/src/com/google/common/base/Optional.java","addlines":[128,125,126,127],"dellines":[],"addcode":["  @Nullable\n","  public static <T> Optional<T> fromJavaUtil(@Nullable java.util.Optional<T> javaUtilOptional) {\n","    return (javaUtilOptional == null) ? null : fromNullable(javaUtilOptional.orElse(null));\n","  }\n"],"delcode":[],"methodSig":"public static Optional<T> fromJavaUtil(@Nullable java.util.Optional<T> javaUtilOptional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_181.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_181.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_181.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_181.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_182.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_182.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Optional","pathinproj":"guava/src/com/google/common/base/Optional.java","addlines":[128,125,126,127],"dellines":[],"addcode":["  @Nullable\n","  public static <T> Optional<T> fromJavaUtil(@Nullable java.util.Optional<T> javaUtilOptional) {\n","    return (javaUtilOptional == null) ? null : fromNullable(javaUtilOptional.orElse(null));\n","  }\n"],"delcode":[],"methodSig":"public static Optional<T> fromJavaUtil(@Nullable java.util.Optional<T> javaUtilOptional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_182.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_182.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_182.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_182.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_183.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_183.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[210,211,212],"dellines":[],"addcode":["  public static CharSource asCharSource(Path path, Charset charset, OpenOption... options) {\n","    return asByteSource(path, options).asCharSource(charset);\n","  }\n"],"delcode":[],"methodSig":"public static CharSource asCharSource(Path path, Charset charset, OpenOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_183.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_183.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_183.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_183.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_184.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_184.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[210,211,212],"dellines":[],"addcode":["  public static CharSource asCharSource(Path path, Charset charset, OpenOption... options) {\n","    return asByteSource(path, options).asCharSource(charset);\n","  }\n"],"delcode":[],"methodSig":"public static CharSource asCharSource(Path path, Charset charset, OpenOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_184.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_184.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_184.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_184.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_185.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Tables","pathinproj":"guava/src/com/google/common/collect/Tables.java","addlines":[256,257,258,254,255],"dellines":[],"addcode":["    @SuppressWarnings(\"unchecked\")\n","    @Override\n","    Spliterator<Cell<C, R, V>> cellSpliterator() {\n","      return CollectSpliterators.map(original.cellSet().spliterator(), (Function) TRANSPOSE_CELL);\n","    }\n"],"delcode":[],"methodSig":" Spliterator<Cell<C, R, V>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_185.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_185.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_185.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_185.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_186.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Tables","pathinproj":"guava/src/com/google/common/collect/Tables.java","addlines":[256,257,258,254,255],"dellines":[],"addcode":["    @SuppressWarnings(\"unchecked\")\n","    @Override\n","    Spliterator<Cell<C, R, V>> cellSpliterator() {\n","      return CollectSpliterators.map(original.cellSet().spliterator(), (Function) TRANSPOSE_CELL);\n","    }\n"],"delcode":[],"methodSig":" Spliterator<Cell<C, R, V>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_186.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_186.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_186.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_186.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_187.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[64,65,66,67,68,69,70],"dellines":[],"addcode":["  static <E> Collector<E, ?, ImmutableSet<E>> toImmutableSet() {\n","    return Collector.of(\n","        ImmutableSet::<E>builder,\n","        ImmutableSet.Builder::add,\n","        ImmutableSet.Builder::combine,\n","        ImmutableSet.Builder::build);\n","  }\n"],"delcode":[],"methodSig":" static Collector<E, ?, ImmutableSet<E>> toImmutableSet()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_187.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_187.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_187.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_187.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_188.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[64,65,66,67,68,69,70],"dellines":[],"addcode":["  static <E> Collector<E, ?, ImmutableSet<E>> toImmutableSet() {\n","    return Collector.of(\n","        ImmutableSet::<E>builder,\n","        ImmutableSet.Builder::add,\n","        ImmutableSet.Builder::combine,\n","        ImmutableSet.Builder::build);\n","  }\n"],"delcode":[],"methodSig":" static Collector<E, ?, ImmutableSet<E>> toImmutableSet()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_188.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_188.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_188.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_188.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_189.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[112,113,102,103,104,105,106,107,108,109,110,111],"dellines":[],"addcode":["    IllegalArgumentException multiples(boolean overflow) {\n","      StringBuilder sb =\n","          new StringBuilder().append(\"expected one element but was: <\").append(element);\n","      for (Object o : extras) {\n","        sb.append(\", \").append(o);\n","      }\n","      if (overflow) {\n","        sb.append(\", ...\");\n","      }\n","      sb.append('>');\n","      throw new IllegalArgumentException(sb.toString());\n","    }\n"],"delcode":[],"methodSig":" IllegalArgumentException multiples(boolean overflow)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_189.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_189.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_189.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_189.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_190.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[112,113,102,103,104,105,106,107,108,109,110,111],"dellines":[],"addcode":["    IllegalArgumentException multiples(boolean overflow) {\n","      StringBuilder sb =\n","          new StringBuilder().append(\"expected one element but was: <\").append(element);\n","      for (Object o : extras) {\n","        sb.append(\", \").append(o);\n","      }\n","      if (overflow) {\n","        sb.append(\", ...\");\n","      }\n","      sb.append('>');\n","      throw new IllegalArgumentException(sb.toString());\n","    }\n"],"delcode":[],"methodSig":" IllegalArgumentException multiples(boolean overflow)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_190.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_190.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_190.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_190.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_191.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1160,1161,1162,1163,1164,1165,1166],"dellines":[],"addcode":["    @Override\n","    public V merge(\n","        K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n","      synchronized (mutex) {\n","        return delegate().merge(key, value, remappingFunction);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_191.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_191.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_191.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_191.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_192.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1160,1161,1162,1163,1164,1165,1166],"dellines":[],"addcode":["    @Override\n","    public V merge(\n","        K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n","      synchronized (mutex) {\n","        return delegate().merge(key, value, remappingFunction);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_192.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_192.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_192.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_192.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_193.txt","newdoc":" Synchronizes on the entry to allow failing fast when a recursive load is\n detected. This may be circumvented when an entry is copied, but will fail fast most\n note valueReference can be an existing value or even itself another loading value if\n re-read ticker once inside the lock\n This is a duplicate check, as preWriteCleanup already purged expired\n entries, but let's accomodate an incorrect expiration queue.\n immediately reuse invalid entries\n the value for the key is already being computed.\n of the time.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[2331,2332,2333,2334,2335,2336,2337,2338,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2356,2357,2358,2359,2360,2361,2362,2363,2365,2366,2367,2368,2369,2370,2371,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414],"dellines":[],"addcode":["    V compute(K key, int hash, BiFunction<? super K, ? super V, ? extends V> function) {\n","      ReferenceEntry<K, V> e;\n","      ValueReference<K, V> valueReference = null;\n","      LoadingValueReference<K, V> loadingValueReference = null;\n","      boolean createNewEntry = true;\n","\n","      lock();\n","      try {\n","        long now = map.ticker.read();\n","        preWriteCleanup(now);\n","\n","        AtomicReferenceArray<ReferenceEntry<K, V>> table = this.table;\n","        int index = hash & (table.length() - 1);\n","        ReferenceEntry<K, V> first = table.get(index);\n","\n","        for (e = first; e != null; e = e.getNext()) {\n","          K entryKey = e.getKey();\n","          if (e.getHash() == hash\n","              && entryKey != null\n","              && map.keyEquivalence.equivalent(key, entryKey)) {\n","            valueReference = e.getValueReference();\n","            if (map.isExpired(e, now)) {\n","              enqueueNotification(\n","                  entryKey,\n","                  hash,\n","                  valueReference.get(),\n","                  valueReference.getWeight(),\n","                  RemovalCause.EXPIRED);\n","            }\n","\n","            writeQueue.remove(e);\n","            accessQueue.remove(e);\n","            createNewEntry = false;\n","            break;\n","          }\n","        }\n","\n","        loadingValueReference = new LoadingValueReference<K, V>(valueReference);\n","\n","        if (e == null) {\n","          createNewEntry = true;\n","          e = newEntry(key, hash, first);\n","          e.setValueReference(loadingValueReference);\n","          table.set(index, e);\n","        } else {\n","          e.setValueReference(loadingValueReference);\n","        }\n","      } finally {\n","        unlock();\n","        postWriteCleanup();\n","      }\n","\n","      synchronized (e) {\n","        V newValue = loadingValueReference.compute(key, function);\n","        if (newValue != null) {\n","          try {\n","            return getAndRecordStats(\n","                key, hash, loadingValueReference, Futures.immediateFuture(newValue));\n","          } catch (ExecutionException exception) {\n","            throw new AssertionError(\"impossible; Futures.immediateFuture can't throw\");\n","          }\n","        } else if (createNewEntry) {\n","          removeLoadingValue(key, hash, loadingValueReference);\n","          return null;\n","        } else {\n","          lock();\n","          try {\n","            removeEntry(e, hash, RemovalCause.EXPLICIT);\n","          } finally {\n","            unlock();\n","          }\n","          return null;\n","        }\n","      }\n","    }\n"],"delcode":[],"methodSig":" V compute(K key, int hash, BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_193.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_193.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_193.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_193.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_194.txt","newdoc":" Synchronizes on the entry to allow failing fast when a recursive load is\n detected. This may be circumvented when an entry is copied, but will fail fast most\n note valueReference can be an existing value or even itself another loading value if\n re-read ticker once inside the lock\n This is a duplicate check, as preWriteCleanup already purged expired\n entries, but let's accomodate an incorrect expiration queue.\n immediately reuse invalid entries\n the value for the key is already being computed.\n of the time.\n Synchronizes on the entry to allow failing fast when a recursive load is\n detected. This may be circumvented when an entry is copied, but will fail fast most\n note valueReference can be an existing value or even itself another loading value if\n re-read ticker once inside the lock\n This is a duplicate check, as preWriteCleanup already purged expired\n entries, but let's accomodate an incorrect expiration queue.\n immediately reuse invalid entries\n the value for the key is already being computed.\n of the time.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[2331,2332,2333,2334,2335,2336,2337,2338,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2356,2357,2358,2359,2360,2361,2362,2363,2365,2366,2367,2368,2369,2370,2371,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414],"dellines":[],"addcode":["    V compute(K key, int hash, BiFunction<? super K, ? super V, ? extends V> function) {\n","      ReferenceEntry<K, V> e;\n","      ValueReference<K, V> valueReference = null;\n","      LoadingValueReference<K, V> loadingValueReference = null;\n","      boolean createNewEntry = true;\n","\n","      lock();\n","      try {\n","        long now = map.ticker.read();\n","        preWriteCleanup(now);\n","\n","        AtomicReferenceArray<ReferenceEntry<K, V>> table = this.table;\n","        int index = hash & (table.length() - 1);\n","        ReferenceEntry<K, V> first = table.get(index);\n","\n","        for (e = first; e != null; e = e.getNext()) {\n","          K entryKey = e.getKey();\n","          if (e.getHash() == hash\n","              && entryKey != null\n","              && map.keyEquivalence.equivalent(key, entryKey)) {\n","            valueReference = e.getValueReference();\n","            if (map.isExpired(e, now)) {\n","              enqueueNotification(\n","                  entryKey,\n","                  hash,\n","                  valueReference.get(),\n","                  valueReference.getWeight(),\n","                  RemovalCause.EXPIRED);\n","            }\n","\n","            writeQueue.remove(e);\n","            accessQueue.remove(e);\n","            createNewEntry = false;\n","            break;\n","          }\n","        }\n","\n","        loadingValueReference = new LoadingValueReference<K, V>(valueReference);\n","\n","        if (e == null) {\n","          createNewEntry = true;\n","          e = newEntry(key, hash, first);\n","          e.setValueReference(loadingValueReference);\n","          table.set(index, e);\n","        } else {\n","          e.setValueReference(loadingValueReference);\n","        }\n","      } finally {\n","        unlock();\n","        postWriteCleanup();\n","      }\n","\n","      synchronized (e) {\n","        V newValue = loadingValueReference.compute(key, function);\n","        if (newValue != null) {\n","          try {\n","            return getAndRecordStats(\n","                key, hash, loadingValueReference, Futures.immediateFuture(newValue));\n","          } catch (ExecutionException exception) {\n","            throw new AssertionError(\"impossible; Futures.immediateFuture can't throw\");\n","          }\n","        } else if (createNewEntry) {\n","          removeLoadingValue(key, hash, loadingValueReference);\n","          return null;\n","        } else {\n","          lock();\n","          try {\n","            removeEntry(e, hash, RemovalCause.EXPLICIT);\n","          } finally {\n","            unlock();\n","          }\n","          return null;\n","        }\n","      }\n","    }\n"],"delcode":[],"methodSig":" V compute(K key, int hash, BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_194.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_194.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_194.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_194.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_195.txt","newdoc":" created lazily if needed\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_195.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[448,449,450,451,452,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,446,447],"dellines":[],"addcode":["  public static void deleteRecursively(\n","      Path path, RecursiveDeleteOption... options) throws IOException {\n","    Path parentPath = getParentPath(path);\n","    if (parentPath == null) {\n","      throw new FileSystemException(path.toString(), null, \"can't delete recursively\");\n","    }\n","\n","    try {\n","      boolean sdsSupported = false;\n","      try (DirectoryStream<Path> parent = Files.newDirectoryStream(parentPath)) {\n","        if (parent instanceof SecureDirectoryStream) {\n","          sdsSupported = true;\n","          exceptions = deleteRecursivelySecure(\n","              (SecureDirectoryStream<Path>) parent, path.getFileName());\n","        }\n","      }\n","\n","      if (!sdsSupported) {\n","        checkAllowsInsecure(path, options);\n","        exceptions = deleteRecursivelyInsecure(path);\n","      }\n","    } catch (IOException e) {\n","      if (exceptions == null) {\n","        throw e;\n","      } else {\n","        exceptions.add(e);\n","      }\n","    }\n","\n","    if (exceptions != null) {\n","      throwDeleteFailed(path, exceptions);\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static void deleteRecursively(Path path, RecursiveDeleteOption... options) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_195.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_195.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_195.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_195.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_196.txt","newdoc":" created lazily if needed\n created lazily if needed\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_196.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[448,449,450,451,452,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,446,447],"dellines":[],"addcode":["  public static void deleteRecursively(\n","      Path path, RecursiveDeleteOption... options) throws IOException {\n","    Path parentPath = getParentPath(path);\n","    if (parentPath == null) {\n","      throw new FileSystemException(path.toString(), null, \"can't delete recursively\");\n","    }\n","\n","    try {\n","      boolean sdsSupported = false;\n","      try (DirectoryStream<Path> parent = Files.newDirectoryStream(parentPath)) {\n","        if (parent instanceof SecureDirectoryStream) {\n","          sdsSupported = true;\n","          exceptions = deleteRecursivelySecure(\n","              (SecureDirectoryStream<Path>) parent, path.getFileName());\n","        }\n","      }\n","\n","      if (!sdsSupported) {\n","        checkAllowsInsecure(path, options);\n","        exceptions = deleteRecursivelyInsecure(path);\n","      }\n","    } catch (IOException e) {\n","      if (exceptions == null) {\n","        throw e;\n","      } else {\n","        exceptions.add(e);\n","      }\n","    }\n","\n","    if (exceptions != null) {\n","      throwDeleteFailed(path, exceptions);\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static void deleteRecursively(Path path, RecursiveDeleteOption... options) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_196.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_196.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_196.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_196.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_197.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractRangeSet","pathinproj":"guava/src/com/google/common/collect/AbstractRangeSet.java","addlines":[],"dellines":[64,65,66,67,68,69,70,62,63],"addcode":[],"delcode":["  @Override\n","  public boolean enclosesAll(Iterable<Range<C>> ranges) {\n","    for (Range<C> range : ranges) {\n","      if (!encloses(range)) {\n","        return false;\n","      }\n","    }\n","    return true;\n","  }\n"],"methodSig":"public boolean enclosesAll(Iterable<Range<C>> ranges)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_197.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_197.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_197.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_197.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_198.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractRangeSet","pathinproj":"guava/src/com/google/common/collect/AbstractRangeSet.java","addlines":[],"dellines":[64,65,66,67,68,69,70,62,63],"addcode":[],"delcode":["  @Override\n","  public boolean enclosesAll(Iterable<Range<C>> ranges) {\n","    for (Range<C> range : ranges) {\n","      if (!encloses(range)) {\n","        return false;\n","      }\n","    }\n","    return true;\n","  }\n"],"methodSig":"public boolean enclosesAll(Iterable<Range<C>> ranges)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_198.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_198.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_198.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_198.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_199.txt","newdoc":" the exception thrown when iterating a DirectoryStream if an I/O exception occurs\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[272,273,275,276,277,278,279,268,269,270,271],"dellines":[],"addcode":["    @Override\n","    public Iterable<Path> children(Path dir) {\n","      if (Files.isDirectory(dir, NOFOLLOW_LINKS)) {\n","        try {\n","          return listFiles(dir);\n","        } catch (IOException e) {\n","          throw new DirectoryIteratorException(e);\n","        }\n","      }\n","      return ImmutableList.of();\n","    }\n"],"delcode":[],"methodSig":"public Iterable<Path> children(Path dir)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_199.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_199.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_199.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_199.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_200.txt","newdoc":" the exception thrown when iterating a DirectoryStream if an I/O exception occurs\n the exception thrown when iterating a DirectoryStream if an I/O exception occurs\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[272,273,275,276,277,278,279,268,269,270,271],"dellines":[],"addcode":["    @Override\n","    public Iterable<Path> children(Path dir) {\n","      if (Files.isDirectory(dir, NOFOLLOW_LINKS)) {\n","        try {\n","          return listFiles(dir);\n","        } catch (IOException e) {\n","          throw new DirectoryIteratorException(e);\n","        }\n","      }\n","      return ImmutableList.of();\n","    }\n"],"delcode":[],"methodSig":"public Iterable<Path> children(Path dir)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_200.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_200.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_200.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_200.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_201.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_201.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[619,620,621,622,623,624,625,626,627,628,629,630,631,632],"dellines":[],"addcode":["  @Nullable\n","  private static Collection<IOException> deleteDirectoryContentsInsecure(\n","      DirectoryStream<Path> dir) {\n","    Collection<IOException> exceptions = null;\n","    try {\n","      for (Path entry : dir) {\n","        exceptions = concat(exceptions, deleteRecursivelyInsecure(entry));\n","      }\n","\n","      return exceptions;\n","    } catch (DirectoryIteratorException e) {\n","      return addException(exceptions, e.getCause());\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static Collection<IOException> deleteDirectoryContentsInsecure(DirectoryStream<Path> dir)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_201.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_201.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_201.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_201.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_202.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_202.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[619,620,621,622,623,624,625,626,627,628,629,630,631,632],"dellines":[],"addcode":["  @Nullable\n","  private static Collection<IOException> deleteDirectoryContentsInsecure(\n","      DirectoryStream<Path> dir) {\n","    Collection<IOException> exceptions = null;\n","    try {\n","      for (Path entry : dir) {\n","        exceptions = concat(exceptions, deleteRecursivelyInsecure(entry));\n","      }\n","\n","      return exceptions;\n","    } catch (DirectoryIteratorException e) {\n","      return addException(exceptions, e.getCause());\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static Collection<IOException> deleteDirectoryContentsInsecure(DirectoryStream<Path> dir)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_202.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_202.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_202.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_202.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_203.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_203.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[391],"dellines":[],"addcode":["    R apply(T from, long index);\n"],"delcode":[],"methodSig":" R apply(T from, long index)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_203.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_203.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_203.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_203.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_204.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_204.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[391],"dellines":[],"addcode":["    R apply(T from, long index);\n"],"delcode":[],"methodSig":" R apply(T from, long index)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_204.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_204.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_204.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_204.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_205.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractRangeSet","pathinproj":"guava/src/com/google/common/collect/AbstractRangeSet.java","addlines":[],"dellines":[80,81,82,77,78,79],"addcode":[],"delcode":["  @Override\n","  public void addAll(Iterable<Range<C>> ranges) {\n","    for (Range<C> range : ranges) {\n","      add(range);\n","    }\n","  }\n"],"methodSig":"public void addAll(Iterable<Range<C>> ranges)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_205.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_205.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_205.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_205.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_206.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractRangeSet","pathinproj":"guava/src/com/google/common/collect/AbstractRangeSet.java","addlines":[],"dellines":[80,81,82,77,78,79],"addcode":[],"delcode":["  @Override\n","  public void addAll(Iterable<Range<C>> ranges) {\n","    for (Range<C> range : ranges) {\n","      add(range);\n","    }\n","  }\n"],"methodSig":"public void addAll(Iterable<Range<C>> ranges)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_206.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_206.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_206.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_206.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_207.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_207.txt","newdoc":"","newJdoc":"","olddoc":" unsafe, but Javadoc warns about it\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[994,995,843,844],"dellines":[979,840],"addcode":["      return getOrDefault(key, null);\n","    }\n","      return getOrDefault(key, null);\n","    }\n"],"delcode":["        return null;\n","        return null;\n"],"methodSig":"public V get(@Nullable Object key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_207.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_207.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_207.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_207.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_208.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_208.txt","newdoc":"","newJdoc":"","olddoc":" unsafe, but Javadoc warns about it\n unsafe, but Javadoc warns about it\n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[994,995,843,844],"dellines":[979,840],"addcode":["      return getOrDefault(key, null);\n","    }\n","      return getOrDefault(key, null);\n","    }\n"],"delcode":["        return null;\n","        return null;\n"],"methodSig":"public V get(@Nullable Object key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_208.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_208.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_208.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_208.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_209.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1124,1125,1126,1127,1128,1129],"dellines":[],"addcode":["    @Override\n","    public boolean replace(K key, V oldValue, V newValue) {\n","      synchronized (mutex) {\n","        return delegate().replace(key, oldValue, newValue);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public boolean replace(K key, V oldValue, V newValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_209.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_209.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_209.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_209.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_210.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1124,1125,1126,1127,1128,1129],"dellines":[],"addcode":["    @Override\n","    public boolean replace(K key, V oldValue, V newValue) {\n","      synchronized (mutex) {\n","        return delegate().replace(key, oldValue, newValue);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public boolean replace(K key, V oldValue, V newValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_210.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_210.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_210.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_210.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_211.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_211.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_211.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_211.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableCollection_2","pathinproj":"guava/src/com/google/common/collect/ImmutableCollection.java","addlines":[278,279],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n"],"delcode":[],"methodSig":"public final boolean retainAll(Collection<?> elementsToKeep)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_211.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_211.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_211.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_211.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_212.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_212.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_212.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_212.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableCollection_2","pathinproj":"guava/src/com/google/common/collect/ImmutableCollection.java","addlines":[278,279],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n"],"delcode":[],"methodSig":"public final boolean retainAll(Collection<?> elementsToKeep)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_212.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_212.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_212.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_212.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_213.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_213.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_213.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_213.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_213.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_213.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_213.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_213.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_214.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_214.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_214.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_214.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[740,741,742,743,744,745,746,747,748,749],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return set1.stream().filter(notInSet2);\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return set1.parallelStream().filter(notInSet2);\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> difference(final Set<E> set1, final Set<?> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_214.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_214.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_214.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_214.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_215.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/StandardTable","pathinproj":"guava/src/com/google/common/collect/StandardTable.java","addlines":[269,270,271,272,273,561,274,562,275,563,276,564,277,565,278,279,280,281],"dellines":[],"addcode":["  @Override\n","  Spliterator<Cell<R, C, V>> cellSpliterator() {\n","    return CollectSpliterators.flatMap(\n","        backingMap.entrySet().spliterator(),\n","        (Map.Entry<R, Map<C, V>> rowEntry) ->\n","            CollectSpliterators.map(\n","                rowEntry.getValue().entrySet().spliterator(),\n","                (Map.Entry<C, V> columnEntry) ->\n","                    Tables.immutableCell(\n","                        rowEntry.getKey(), columnEntry.getKey(), columnEntry.getValue())),\n","        Spliterator.DISTINCT | Spliterator.SIZED,\n","        size());\n","  }\n","  @Override\n","  Spliterator<Cell<R, C, V>> cellSpliterator() {\n","    return CollectSpliterators.indexed(\n","        size(), Spliterator.ORDERED | Spliterator.NONNULL | Spliterator.DISTINCT, this::getCell);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<Cell<R, C, V>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_215.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_215.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_215.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_215.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_216.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/StandardTable","pathinproj":"guava/src/com/google/common/collect/StandardTable.java","addlines":[269,270,271,272,273,561,274,562,275,563,276,564,277,565,278,279,280,281],"dellines":[],"addcode":["  @Override\n","  Spliterator<Cell<R, C, V>> cellSpliterator() {\n","    return CollectSpliterators.flatMap(\n","        backingMap.entrySet().spliterator(),\n","        (Map.Entry<R, Map<C, V>> rowEntry) ->\n","            CollectSpliterators.map(\n","                rowEntry.getValue().entrySet().spliterator(),\n","                (Map.Entry<C, V> columnEntry) ->\n","                    Tables.immutableCell(\n","                        rowEntry.getKey(), columnEntry.getKey(), columnEntry.getValue())),\n","        Spliterator.DISTINCT | Spliterator.SIZED,\n","        size());\n","  }\n","  @Override\n","  Spliterator<Cell<R, C, V>> cellSpliterator() {\n","    return CollectSpliterators.indexed(\n","        size(), Spliterator.ORDERED | Spliterator.NONNULL | Spliterator.DISTINCT, this::getCell);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<Cell<R, C, V>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_216.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_216.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_216.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_216.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_217.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[115,116,117,118,119,120,121,122,123,124,125,126,127],"dellines":[],"addcode":["    void add(Object o) {\n","      checkNotNull(o);\n","      if (element == null) {\n","        this.element = o;\n","      } else if (extras == null) {\n","        extras = new ArrayList<>(MAX_EXTRAS);\n","        extras.add(o);\n","      } else if (extras.size() < MAX_EXTRAS) {\n","        extras.add(o);\n","      } else {\n","        throw multiples(true);\n","      }\n","    }\n"],"delcode":[],"methodSig":" void add(Object o)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_217.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_217.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_217.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_217.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_218.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[115,116,117,118,119,120,121,122,123,124,125,126,127],"dellines":[],"addcode":["    void add(Object o) {\n","      checkNotNull(o);\n","      if (element == null) {\n","        this.element = o;\n","      } else if (extras == null) {\n","        extras = new ArrayList<>(MAX_EXTRAS);\n","        extras.add(o);\n","      } else if (extras.size() < MAX_EXTRAS) {\n","        extras.add(o);\n","      } else {\n","        throw multiples(true);\n","      }\n","    }\n"],"delcode":[],"methodSig":" void add(Object o)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_218.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_218.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_218.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_218.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_219.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_219.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[145,146,147,148,149,150],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  public long updateAndGet(K key, LongUnaryOperator updaterFunction) {\n","    checkNotNull(updaterFunction);\n","    return map.compute(\n","        key, (k, value) -> updaterFunction.applyAsLong((value == null) ? 0L : value.longValue()));\n","  }\n"],"delcode":[],"methodSig":"public long updateAndGet(K key, LongUnaryOperator updaterFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_219.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_219.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_219.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_219.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_220.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_220.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[145,146,147,148,149,150],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  public long updateAndGet(K key, LongUnaryOperator updaterFunction) {\n","    checkNotNull(updaterFunction);\n","    return map.compute(\n","        key, (k, value) -> updaterFunction.applyAsLong((value == null) ? 0L : value.longValue()));\n","  }\n"],"delcode":[],"methodSig":"public long updateAndGet(K key, LongUnaryOperator updaterFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_220.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_220.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_220.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_220.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_221.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[96,97,98,99,91,92,93,94,95],"dellines":[],"addcode":["  static <E> Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(\n","      Comparator<? super E> comparator) {\n","    checkNotNull(comparator);\n","    return Collector.of(\n","        () -> new ImmutableSortedSet.Builder<E>(comparator),\n","        ImmutableSortedSet.Builder::add,\n","        ImmutableSortedSet.Builder::combine,\n","        ImmutableSortedSet.Builder::build);\n","  }\n"],"delcode":[],"methodSig":" static Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(Comparator<? super E> comparator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_221.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_221.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_221.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_221.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_222.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[96,97,98,99,91,92,93,94,95],"dellines":[],"addcode":["  static <E> Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(\n","      Comparator<? super E> comparator) {\n","    checkNotNull(comparator);\n","    return Collector.of(\n","        () -> new ImmutableSortedSet.Builder<E>(comparator),\n","        ImmutableSortedSet.Builder::add,\n","        ImmutableSortedSet.Builder::combine,\n","        ImmutableSortedSet.Builder::build);\n","  }\n"],"delcode":[],"methodSig":" static Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(Comparator<? super E> comparator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_222.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_222.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_222.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_222.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_223.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_223.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableList_2","pathinproj":"guava/src/com/google/common/collect/ImmutableList.java","addlines":[551,552,553,554,555],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final void replaceAll(UnaryOperator<E> operator) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final void replaceAll(UnaryOperator<E> operator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_223.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_223.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_223.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_223.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_224.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_224.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableList_2","pathinproj":"guava/src/com/google/common/collect/ImmutableList.java","addlines":[551,552,553,554,555],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final void replaceAll(UnaryOperator<E> operator) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final void replaceAll(UnaryOperator<E> operator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_224.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_224.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_224.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_224.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_225.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/TopKSelector","pathinproj":"guava/src/com/google/common/collect/TopKSelector.java","addlines":[224,225,220,221,222,223],"dellines":[],"addcode":["  TopKSelector<T> combine(TopKSelector<T> other) {\n","    for (int i = 0; i < other.bufferSize; i++) {\n","      this.offer(other.buffer[i]);\n","    }\n","    return this;\n","  }\n"],"delcode":[],"methodSig":" TopKSelector<T> combine(TopKSelector<T> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_225.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_225.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_225.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_225.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_226.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/TopKSelector","pathinproj":"guava/src/com/google/common/collect/TopKSelector.java","addlines":[224,225,220,221,222,223],"dellines":[],"addcode":["  TopKSelector<T> combine(TopKSelector<T> other) {\n","    for (int i = 0; i < other.bufferSize; i++) {\n","      this.offer(other.buffer[i]);\n","    }\n","    return this;\n","  }\n"],"delcode":[],"methodSig":" TopKSelector<T> combine(TopKSelector<T> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_226.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_226.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_226.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_226.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_227.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_227.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_227.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_227.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[576,577,578,579,580,581,582,583,584,585,586,587,588,589,574,575],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        unfiltered.forEach(\n","            (T a) -> {\n","              if (retainIfTrue.test(a)) {\n","                action.accept(a);\n","              }\n","            });\n","      }\n","\n","      @Override\n","      public Spliterator<T> spliterator() {\n","        return CollectSpliterators.filter(unfiltered.spliterator(), retainIfTrue);\n","      }\n"],"delcode":[],"methodSig":"public static Iterable<T> filter(final Iterable<T> unfiltered, final Predicate<? super T> retainIfTrue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_227.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_227.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_227.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_227.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_228.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_228.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_228.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_228.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[576,577,578,579,580,581,582,583,584,585,586,587,588,589,574,575],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        unfiltered.forEach(\n","            (T a) -> {\n","              if (retainIfTrue.test(a)) {\n","                action.accept(a);\n","              }\n","            });\n","      }\n","\n","      @Override\n","      public Spliterator<T> spliterator() {\n","        return CollectSpliterators.filter(unfiltered.spliterator(), retainIfTrue);\n","      }\n"],"delcode":[],"methodSig":"public static Iterable<T> filter(final Iterable<T> unfiltered, final Predicate<? super T> retainIfTrue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_228.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_228.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_228.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_228.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_229.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_229.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMultisetFauxverideShim","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMultisetFauxverideShim.java","addlines":[48,49,65,50,66,51,67,68],"dellines":[],"addcode":["  @Deprecated\n","  public static <E> Collector<E, ?, ImmutableMultiset<E>> toImmutableMultiset() {\n","    throw new UnsupportedOperationException();\n","  }\n","  @Beta\n","  public static <E> Collector<E, ?, ImmutableMultiset<E>> toImmutableMultiset() {\n","    return toImmutableMultiset(Function.identity(), e -> 1);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<E, ?, ImmutableMultiset<E>> toImmutableMultiset()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_229.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_229.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_229.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_229.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_230.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_230.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMultisetFauxverideShim","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMultisetFauxverideShim.java","addlines":[48,49,65,50,66,51,67,68],"dellines":[],"addcode":["  @Deprecated\n","  public static <E> Collector<E, ?, ImmutableMultiset<E>> toImmutableMultiset() {\n","    throw new UnsupportedOperationException();\n","  }\n","  @Beta\n","  public static <E> Collector<E, ?, ImmutableMultiset<E>> toImmutableMultiset() {\n","    return toImmutableMultiset(Function.identity(), e -> 1);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<E, ?, ImmutableMultiset<E>> toImmutableMultiset()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_230.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_230.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_230.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_230.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_231.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_231.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_231.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_231.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[200,201],"dellines":[183,184],"addcode":["    if (removeFrom instanceof Collection) {\n","      return ((Collection<T>) removeFrom).removeIf(predicate);\n"],"delcode":["    if (removeFrom instanceof RandomAccess && removeFrom instanceof List) {\n","      return removeIfFromRandomAccessList((List<T>) removeFrom, checkNotNull(predicate));\n"],"methodSig":"public static boolean removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_231.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_231.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_231.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_231.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_232.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_232.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_232.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_232.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[200,201],"dellines":[183,184],"addcode":["    if (removeFrom instanceof Collection) {\n","      return ((Collection<T>) removeFrom).removeIf(predicate);\n"],"delcode":["    if (removeFrom instanceof RandomAccess && removeFrom instanceof List) {\n","      return removeIfFromRandomAccessList((List<T>) removeFrom, checkNotNull(predicate));\n"],"methodSig":"public static boolean removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_232.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_232.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_232.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_232.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_233.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMap.java","addlines":[544,545,546,547,543],"dellines":[],"addcode":["    @Override\n","    Builder<K, V> combine(ImmutableMap.Builder<K, V> other) {\n","      super.combine(other);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<K, V> combine(ImmutableMap.Builder<K, V> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_233.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_233.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_233.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_233.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_234.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMap.java","addlines":[544,545,546,547,543],"dellines":[],"addcode":["    @Override\n","    Builder<K, V> combine(ImmutableMap.Builder<K, V> other) {\n","      super.combine(other);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<K, V> combine(ImmutableMap.Builder<K, V> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_234.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_234.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_234.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_234.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_235.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableEnumSet","pathinproj":"guava/src/com/google/common/collect/ImmutableEnumSet.java","addlines":[192,193,194,195,196,197,198,199,200,74,75,76,77,78,79,80,60,61,62,191,63],"dellines":[],"addcode":["  @Override\n","  public void forEach(Consumer<? super E> action) {\n","    delegate.forEach(action);\n","  }\n","    @Override\n","    public void forEach(Consumer<? super E> action) {\n","      checkNotNull(action);\n","      unfiltered.forEach(\n","          (E e) -> {\n","            if (predicate.test(e)) {\n","              action.accept(e);\n","            }\n","          });\n","    }\n","  @Override\n","  public void forEach(Consumer<? super E> action) {\n","    elements.forEach(action);\n","  }\n","  @Override\n","  public void forEach(Consumer<? super E> action) {\n","    delegateList.forEach(action);\n","  }\n","    @Override\n","    public void forEach(Consumer<? super E> action) {\n","      synchronized (mutex) {\n","        delegate().forEach(action);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super E> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_235.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_235.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_235.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_235.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_236.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableEnumSet","pathinproj":"guava/src/com/google/common/collect/ImmutableEnumSet.java","addlines":[192,193,194,195,196,197,198,199,200,74,75,76,77,78,79,80,60,61,62,191,63],"dellines":[],"addcode":["  @Override\n","  public void forEach(Consumer<? super E> action) {\n","    delegate.forEach(action);\n","  }\n","    @Override\n","    public void forEach(Consumer<? super E> action) {\n","      checkNotNull(action);\n","      unfiltered.forEach(\n","          (E e) -> {\n","            if (predicate.test(e)) {\n","              action.accept(e);\n","            }\n","          });\n","    }\n","  @Override\n","  public void forEach(Consumer<? super E> action) {\n","    elements.forEach(action);\n","  }\n","  @Override\n","  public void forEach(Consumer<? super E> action) {\n","    delegateList.forEach(action);\n","  }\n","    @Override\n","    public void forEach(Consumer<? super E> action) {\n","      synchronized (mutex) {\n","        delegate().forEach(action);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super E> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_236.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_236.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_236.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_236.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_237.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMultimap","pathinproj":"guava/src/com/google/common/collect/AbstractMultimap.java","addlines":[208,209,210,66,67,68,207],"dellines":[],"addcode":["    @Override\n","    public Spliterator<V> spliterator() {\n","      return valueSpliterator();\n","    }\n","  @Override public Spliterator<V> spliterator() {\n","    return CollectSpliterators.map(map.entrySet().spliterator(), Entry::getValue);\n","  }\n"],"delcode":[],"methodSig":"public Spliterator<V> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_237.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_237.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_237.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_237.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_238.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMultimap","pathinproj":"guava/src/com/google/common/collect/AbstractMultimap.java","addlines":[208,209,210,66,67,68,207],"dellines":[],"addcode":["    @Override\n","    public Spliterator<V> spliterator() {\n","      return valueSpliterator();\n","    }\n","  @Override public Spliterator<V> spliterator() {\n","    return CollectSpliterators.map(map.entrySet().spliterator(), Entry::getValue);\n","  }\n"],"delcode":[],"methodSig":"public Spliterator<V> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_238.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_238.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_238.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_238.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_239.txt","newdoc":" findLast(Stream) does some allocation, so we might as well box some more\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_239.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[310,312,313,314],"dellines":[],"addcode":["  public static OptionalLong findLast(LongStream stream) {\n","    java.util.Optional<Long> boxedLast = findLast(stream.boxed());\n","    return boxedLast.isPresent() ? OptionalLong.of(boxedLast.get()) : OptionalLong.empty();\n","  }\n"],"delcode":[],"methodSig":"public static OptionalLong findLast(LongStream stream)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_239.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_239.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_239.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_239.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_240.txt","newdoc":" findLast(Stream) does some allocation, so we might as well box some more\n findLast(Stream) does some allocation, so we might as well box some more\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_240.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[310,312,313,314],"dellines":[],"addcode":["  public static OptionalLong findLast(LongStream stream) {\n","    java.util.Optional<Long> boxedLast = findLast(stream.boxed());\n","    return boxedLast.isPresent() ? OptionalLong.of(boxedLast.get()) : OptionalLong.empty();\n","  }\n"],"delcode":[],"methodSig":"public static OptionalLong findLast(LongStream stream)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_240.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_240.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_240.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_240.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_241.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractTable","pathinproj":"guava/src/com/google/common/collect/AbstractTable.java","addlines":[124],"dellines":[],"addcode":["  abstract Spliterator<Table.Cell<R, C, V>> cellSpliterator();\n"],"delcode":[],"methodSig":" abstract Spliterator<Table.Cell<R, C, V>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_241.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_241.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_241.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_241.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_242.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractTable","pathinproj":"guava/src/com/google/common/collect/AbstractTable.java","addlines":[124],"dellines":[],"addcode":["  abstract Spliterator<Table.Cell<R, C, V>> cellSpliterator();\n"],"delcode":[],"methodSig":" abstract Spliterator<Table.Cell<R, C, V>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_242.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_242.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_242.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_242.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_243.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSet_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSet.java","addlines":[808,809,810,811,812,813,527,528,529,530,531,532,536,537,538,539,540,541],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    @Override\n","    Builder<E> combine(ArrayBasedBuilder<E> builder) {\n","      super.combine(builder);\n","      return this;\n","    }\n","    @CanIgnoreReturnValue\n","    @Override\n","    Builder<E> combine(ArrayBasedBuilder<E> builder) {\n","      super.combine(builder);\n","      return this;\n","    }\n","    @CanIgnoreReturnValue\n","    @Override\n","    Builder<E> combine(ArrayBasedBuilder<E> builder) {\n","      super.combine(builder);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<E> combine(ArrayBasedBuilder<E> builder)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_243.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_243.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_243.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_243.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_244.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSet_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSet.java","addlines":[808,809,810,811,812,813,527,528,529,530,531,532,536,537,538,539,540,541],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    @Override\n","    Builder<E> combine(ArrayBasedBuilder<E> builder) {\n","      super.combine(builder);\n","      return this;\n","    }\n","    @CanIgnoreReturnValue\n","    @Override\n","    Builder<E> combine(ArrayBasedBuilder<E> builder) {\n","      super.combine(builder);\n","      return this;\n","    }\n","    @CanIgnoreReturnValue\n","    @Override\n","    Builder<E> combine(ArrayBasedBuilder<E> builder) {\n","      super.combine(builder);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<E> combine(ArrayBasedBuilder<E> builder)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_244.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_244.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_244.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_244.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_245.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multisets","pathinproj":"guava/src/com/google/common/collect/Multisets.java","addlines":[1090,1091,1092,1093,1094,1095,1096,1097,1098,1099],"dellines":[],"addcode":["  static <E> Spliterator<E> spliteratorImpl(Multiset<E> multiset) {\n","    Spliterator<Entry<E>> entrySpliterator = multiset.entrySet().spliterator();\n","    return CollectSpliterators.flatMap(\n","        entrySpliterator,\n","        entry -> Collections.nCopies(entry.getCount(), entry.getElement()).spliterator(),\n","        Spliterator.SIZED\n","            | (entrySpliterator.characteristics()\n","                & (Spliterator.ORDERED | Spliterator.NONNULL | Spliterator.IMMUTABLE)),\n","        multiset.size());\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<E> spliteratorImpl(Multiset<E> multiset)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_245.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_245.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_245.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_245.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_246.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multisets","pathinproj":"guava/src/com/google/common/collect/Multisets.java","addlines":[1090,1091,1092,1093,1094,1095,1096,1097,1098,1099],"dellines":[],"addcode":["  static <E> Spliterator<E> spliteratorImpl(Multiset<E> multiset) {\n","    Spliterator<Entry<E>> entrySpliterator = multiset.entrySet().spliterator();\n","    return CollectSpliterators.flatMap(\n","        entrySpliterator,\n","        entry -> Collections.nCopies(entry.getCount(), entry.getElement()).spliterator(),\n","        Spliterator.SIZED\n","            | (entrySpliterator.characteristics()\n","                & (Spliterator.ORDERED | Spliterator.NONNULL | Spliterator.IMMUTABLE)),\n","        multiset.size());\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<E> spliteratorImpl(Multiset<E> multiset)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_246.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_246.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_246.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_246.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_247.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_247.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[96,94,95],"dellines":[],"addcode":["  public static <T> Stream<T> stream(java.util.Optional<T> optional) {\n","    return optional.isPresent() ? Stream.of(optional.get()) : Stream.of();\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(java.util.Optional<T> optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_247.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_247.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_247.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_247.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_248.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_248.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[96,94,95],"dellines":[],"addcode":["  public static <T> Stream<T> stream(java.util.Optional<T> optional) {\n","    return optional.isPresent() ? Stream.of(optional.get()) : Stream.of();\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(java.util.Optional<T> optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_248.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_248.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_248.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_248.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_249.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[52,53,54,55,56,57,58,59,60,61,62],"dellines":[],"addcode":["  static <T, K, V> Collector<T, ?, ImmutableMap<K, V>> toImmutableMap(\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(keyFunction);\n","    checkNotNull(valueFunction);\n","    return Collector.of(\n","        ImmutableMap.Builder<K, V>::new,\n","        (builder, input) -> builder.put(keyFunction.apply(input), valueFunction.apply(input)),\n","        ImmutableMap.Builder::combine,\n","        ImmutableMap.Builder::build);\n","  }\n"],"delcode":[],"methodSig":" static Collector<T, ?, ImmutableMap<K, V>> toImmutableMap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_249.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_249.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_249.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_249.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_250.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[52,53,54,55,56,57,58,59,60,61,62],"dellines":[],"addcode":["  static <T, K, V> Collector<T, ?, ImmutableMap<K, V>> toImmutableMap(\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(keyFunction);\n","    checkNotNull(valueFunction);\n","    return Collector.of(\n","        ImmutableMap.Builder<K, V>::new,\n","        (builder, input) -> builder.put(keyFunction.apply(input), valueFunction.apply(input)),\n","        ImmutableMap.Builder::combine,\n","        ImmutableMap.Builder::build);\n","  }\n"],"delcode":[],"methodSig":" static Collector<T, ?, ImmutableMap<K, V>> toImmutableMap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_250.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_250.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_250.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_250.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_251.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectSpliterators","pathinproj":"guava/src/com/google/common/collect/CollectSpliterators.java","addlines":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],"dellines":[],"addcode":["  static <T> Spliterator<T> indexed(\n","      int size,\n","      int extraCharacteristics,\n","      IntFunction<T> function,\n","      Comparator<? super T> comparator) {\n","    if (comparator != null) {\n","      checkArgument((extraCharacteristics & (Spliterator.SORTED)) != 0);\n","    }\n","    class WithCharacteristics implements Spliterator<T> {\n","      private final Spliterator<T> delegate;\n","\n","      WithCharacteristics(Spliterator<T> delegate) {\n","        this.delegate = delegate;\n","      }\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super T> action) {\n","        return delegate.tryAdvance(action);\n","      }\n","\n","      @Override\n","      public void forEachRemaining(Consumer<? super T> action) {\n","        delegate.forEachRemaining(action);\n","      }\n","\n","      @Override\n","      @Nullable\n","      public Spliterator<T> trySplit() {\n","        Spliterator<T> split = delegate.trySplit();\n","        return (split == null) ? null : new WithCharacteristics(split);\n","      }\n","\n","      @Override\n","      public long estimateSize() {\n","        return delegate.estimateSize();\n","      }\n","\n","      @Override\n","      public int characteristics() {\n","        return delegate.characteristics() | extraCharacteristics;\n","      }\n","\n","      @Override\n","      public Comparator<? super T> getComparator() {\n","        if (hasCharacteristics(Spliterator.SORTED)) {\n","          return comparator;\n","        } else {\n","          throw new IllegalStateException();\n","        }\n","      }\n","    }\n","    return new WithCharacteristics(IntStream.range(0, size).mapToObj(function).spliterator());\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function, Comparator<? super T> comparator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_251.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_251.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_251.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_251.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_252.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectSpliterators","pathinproj":"guava/src/com/google/common/collect/CollectSpliterators.java","addlines":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],"dellines":[],"addcode":["  static <T> Spliterator<T> indexed(\n","      int size,\n","      int extraCharacteristics,\n","      IntFunction<T> function,\n","      Comparator<? super T> comparator) {\n","    if (comparator != null) {\n","      checkArgument((extraCharacteristics & (Spliterator.SORTED)) != 0);\n","    }\n","    class WithCharacteristics implements Spliterator<T> {\n","      private final Spliterator<T> delegate;\n","\n","      WithCharacteristics(Spliterator<T> delegate) {\n","        this.delegate = delegate;\n","      }\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super T> action) {\n","        return delegate.tryAdvance(action);\n","      }\n","\n","      @Override\n","      public void forEachRemaining(Consumer<? super T> action) {\n","        delegate.forEachRemaining(action);\n","      }\n","\n","      @Override\n","      @Nullable\n","      public Spliterator<T> trySplit() {\n","        Spliterator<T> split = delegate.trySplit();\n","        return (split == null) ? null : new WithCharacteristics(split);\n","      }\n","\n","      @Override\n","      public long estimateSize() {\n","        return delegate.estimateSize();\n","      }\n","\n","      @Override\n","      public int characteristics() {\n","        return delegate.characteristics() | extraCharacteristics;\n","      }\n","\n","      @Override\n","      public Comparator<? super T> getComparator() {\n","        if (hasCharacteristics(Spliterator.SORTED)) {\n","          return comparator;\n","        } else {\n","          throw new IllegalStateException();\n","        }\n","      }\n","    }\n","    return new WithCharacteristics(IntStream.range(0, size).mapToObj(function).spliterator());\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function, Comparator<? super T> comparator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_252.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_252.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_252.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_252.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_253.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_253.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_253.txt","olddoc":" atomic is now non-null; fall through\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_253.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[320,321,322,323,324,325,326,327,328,329,317,318,319],"dellines":[392,393,394,395,396,397,398,400,401,402,403,405,406,407,409,410,411,412,413],"addcode":["    AtomicBoolean noValue = new AtomicBoolean(false);\n","    Long result =\n","        map.compute(\n","            key,\n","            (k, oldValue) -> {\n","              if (oldValue == null || oldValue == 0) {\n","                noValue.set(true);\n","                return newValue;\n","              } else {\n","                return oldValue;\n","              }\n","            });\n","    return noValue.get() ? 0L : result.longValue();\n"],"delcode":["    while (true) {\n","      AtomicLong atomic = map.get(key);\n","      if (atomic == null) {\n","        atomic = map.putIfAbsent(key, new AtomicLong(newValue));\n","        if (atomic == null) {\n","          return 0L;\n","        }\n","      }\n","\n","      long oldValue = atomic.get();\n","      if (oldValue == 0L) {\n","        if (map.replace(key, atomic, new AtomicLong(newValue))) {\n","          return 0L;\n","        }\n","        continue;\n","      }\n","\n","      return oldValue;\n","    }\n"],"methodSig":" long putIfAbsent(K key, long newValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_253.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_253.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_253.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_253.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_254.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_254.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_254.txt","olddoc":" atomic is now non-null; fall through\n don't compareAndSet a zero\n atomic replaced\n atomic is now non-null; fall through\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_254.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[320,321,322,323,324,325,326,327,328,329,317,318,319],"dellines":[392,393,394,395,396,397,398,400,401,402,403,405,406,407,409,410,411,412,413],"addcode":["    AtomicBoolean noValue = new AtomicBoolean(false);\n","    Long result =\n","        map.compute(\n","            key,\n","            (k, oldValue) -> {\n","              if (oldValue == null || oldValue == 0) {\n","                noValue.set(true);\n","                return newValue;\n","              } else {\n","                return oldValue;\n","              }\n","            });\n","    return noValue.get() ? 0L : result.longValue();\n"],"delcode":["    while (true) {\n","      AtomicLong atomic = map.get(key);\n","      if (atomic == null) {\n","        atomic = map.putIfAbsent(key, new AtomicLong(newValue));\n","        if (atomic == null) {\n","          return 0L;\n","        }\n","      }\n","\n","      long oldValue = atomic.get();\n","      if (oldValue == 0L) {\n","        if (map.replace(key, atomic, new AtomicLong(newValue))) {\n","          return 0L;\n","        }\n","        continue;\n","      }\n","\n","      return oldValue;\n","    }\n"],"methodSig":" long putIfAbsent(K key, long newValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_254.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_254.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_254.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_254.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_255.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[159,160,161,162,563,436,564,437,565,438,566,439,440,441,3532,3533,3534,3535,603,604,605,606,607,608,97,609,98,610,99,611,100,612,613,614,615,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,250,251,1019,252,1020,253,1021,1022],"dellines":[],"addcode":["    Spliterator<Entry<K, V>> entrySpliterator() {\n","      return Spliterators.spliterator(\n","          entryIterator(),\n","          size(),\n","          Spliterator.DISTINCT | Spliterator.NONNULL | Spliterator.IMMUTABLE | Spliterator.ORDERED);\n","    }\n","  Spliterator<Entry<K, V>> entrySpliterator() {\n","    return Spliterators.spliterator(\n","        entryIterator(), size(), (this instanceof SetMultimap) ? Spliterator.DISTINCT : 0);\n","  }\n","    @Override\n","    Spliterator<Entry<K, V>> entrySpliterator() {\n","      return CollectSpliterators.indexed(size(), Spliterator.ORDERED, this::getEntry);\n","    }\n","    @Override\n","    Spliterator<Entry<K, V>> entrySpliterator() {\n","      return CollectSpliterators.map(set.spliterator(), e -> immutableEntry(e, function.apply(e)));\n","    }\n","    Spliterator<Entry<K, V>> entrySpliterator() {\n","      return Spliterators.spliterator(\n","          entryIterator(), size(), Spliterator.SIZED | Spliterator.DISTINCT);\n","    }\n","  @Override\n","  Spliterator<Entry<K, V>> entrySpliterator() {\n","    return CollectSpliterators.map(delegate.entrySet().spliterator(), Maps::unmodifiableEntry);\n","  }\n","  @Override\n","  Spliterator<Entry<K, V>> entrySpliterator() {\n","    return CollectSpliterators.flatMap(\n","        asMap().entrySet().spliterator(),\n","        keyToValueCollectionEntry -> {\n","          K key = keyToValueCollectionEntry.getKey();\n","          Collection<V> valueCollection = keyToValueCollectionEntry.getValue();\n","          return CollectSpliterators.map(\n","              valueCollection.spliterator(), (V value) -> Maps.immutableEntry(key, value));\n","        },\n","        Spliterator.SIZED | (this instanceof SetMultimap ? Spliterator.DISTINCT : 0),\n","        size());\n","  }\n","  @Override\n","  Spliterator<Entry<K, V>> entrySpliterator() {\n","    return CollectSpliterators.flatMap(\n","        map.entrySet().spliterator(),\n","        keyToValueCollectionEntry -> {\n","          K key = keyToValueCollectionEntry.getKey();\n","          Collection<V> valueCollection = keyToValueCollectionEntry.getValue();\n","          return CollectSpliterators.map(\n","              valueCollection.spliterator(), (V value) -> Maps.immutableEntry(key, value));\n","        },\n","        Spliterator.SIZED,\n","        size());\n","  }\n","  @Override\n","  Spliterator<Entry<K, V>> entrySpliterator() {\n","    return Spliterators.spliterator(entries(), Spliterator.DISTINCT | Spliterator.ORDERED);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<Entry<K, V>> entrySpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_255.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_255.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_255.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_255.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_256.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[159,160,161,162,563,436,564,437,565,438,566,439,440,441,3532,3533,3534,3535,603,604,605,606,607,608,97,609,98,610,99,611,100,612,613,614,615,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,250,251,1019,252,1020,253,1021,1022],"dellines":[],"addcode":["    Spliterator<Entry<K, V>> entrySpliterator() {\n","      return Spliterators.spliterator(\n","          entryIterator(),\n","          size(),\n","          Spliterator.DISTINCT | Spliterator.NONNULL | Spliterator.IMMUTABLE | Spliterator.ORDERED);\n","    }\n","  Spliterator<Entry<K, V>> entrySpliterator() {\n","    return Spliterators.spliterator(\n","        entryIterator(), size(), (this instanceof SetMultimap) ? Spliterator.DISTINCT : 0);\n","  }\n","    @Override\n","    Spliterator<Entry<K, V>> entrySpliterator() {\n","      return CollectSpliterators.indexed(size(), Spliterator.ORDERED, this::getEntry);\n","    }\n","    @Override\n","    Spliterator<Entry<K, V>> entrySpliterator() {\n","      return CollectSpliterators.map(set.spliterator(), e -> immutableEntry(e, function.apply(e)));\n","    }\n","    Spliterator<Entry<K, V>> entrySpliterator() {\n","      return Spliterators.spliterator(\n","          entryIterator(), size(), Spliterator.SIZED | Spliterator.DISTINCT);\n","    }\n","  @Override\n","  Spliterator<Entry<K, V>> entrySpliterator() {\n","    return CollectSpliterators.map(delegate.entrySet().spliterator(), Maps::unmodifiableEntry);\n","  }\n","  @Override\n","  Spliterator<Entry<K, V>> entrySpliterator() {\n","    return CollectSpliterators.flatMap(\n","        asMap().entrySet().spliterator(),\n","        keyToValueCollectionEntry -> {\n","          K key = keyToValueCollectionEntry.getKey();\n","          Collection<V> valueCollection = keyToValueCollectionEntry.getValue();\n","          return CollectSpliterators.map(\n","              valueCollection.spliterator(), (V value) -> Maps.immutableEntry(key, value));\n","        },\n","        Spliterator.SIZED | (this instanceof SetMultimap ? Spliterator.DISTINCT : 0),\n","        size());\n","  }\n","  @Override\n","  Spliterator<Entry<K, V>> entrySpliterator() {\n","    return CollectSpliterators.flatMap(\n","        map.entrySet().spliterator(),\n","        keyToValueCollectionEntry -> {\n","          K key = keyToValueCollectionEntry.getKey();\n","          Collection<V> valueCollection = keyToValueCollectionEntry.getValue();\n","          return CollectSpliterators.map(\n","              valueCollection.spliterator(), (V value) -> Maps.immutableEntry(key, value));\n","        },\n","        Spliterator.SIZED,\n","        size());\n","  }\n","  @Override\n","  Spliterator<Entry<K, V>> entrySpliterator() {\n","    return Spliterators.spliterator(entries(), Spliterator.DISTINCT | Spliterator.ORDERED);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<Entry<K, V>> entrySpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_256.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_256.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_256.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_256.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_257.txt","newdoc":" created lazily if needed\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_257.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[516,517,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538],"dellines":[],"addcode":["  public static void deleteDirectoryContents(\n","      Path path, RecursiveDeleteOption... options) throws IOException {\n","    try (DirectoryStream<Path> stream = Files.newDirectoryStream(path)) {\n","      if (stream instanceof SecureDirectoryStream) {\n","        SecureDirectoryStream<Path> sds = (SecureDirectoryStream<Path>) stream;\n","        exceptions = deleteDirectoryContentsSecure(sds);\n","      } else {\n","        checkAllowsInsecure(path, options);\n","        exceptions = deleteDirectoryContentsInsecure(stream);\n","      }\n","    } catch (IOException e) {\n","      if (exceptions == null) {\n","        throw e;\n","      } else {\n","        exceptions.add(e);\n","      }\n","    }\n","\n","    if (exceptions != null) {\n","      throwDeleteFailed(path, exceptions);\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static void deleteDirectoryContents(Path path, RecursiveDeleteOption... options) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_257.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_257.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_257.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_257.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_258.txt","newdoc":" created lazily if needed\n created lazily if needed\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_258.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[516,517,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538],"dellines":[],"addcode":["  public static void deleteDirectoryContents(\n","      Path path, RecursiveDeleteOption... options) throws IOException {\n","    try (DirectoryStream<Path> stream = Files.newDirectoryStream(path)) {\n","      if (stream instanceof SecureDirectoryStream) {\n","        SecureDirectoryStream<Path> sds = (SecureDirectoryStream<Path>) stream;\n","        exceptions = deleteDirectoryContentsSecure(sds);\n","      } else {\n","        checkAllowsInsecure(path, options);\n","        exceptions = deleteDirectoryContentsInsecure(stream);\n","      }\n","    } catch (IOException e) {\n","      if (exceptions == null) {\n","        throw e;\n","      } else {\n","        exceptions.add(e);\n","      }\n","    }\n","\n","    if (exceptions != null) {\n","      throwDeleteFailed(path, exceptions);\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static void deleteDirectoryContents(Path path, RecursiveDeleteOption... options) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_258.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_258.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_258.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_258.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_259.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_259.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Equivalence","pathinproj":"guava/src/com/google/common/base/Equivalence.java","addlines":[81,82,83,84,85],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final boolean test(@Nullable T t, @Nullable T u) {\n","    return equivalent(t, u);\n","  }\n"],"delcode":[],"methodSig":"public final boolean test(@Nullable T t, @Nullable T u)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_259.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_259.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_259.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_259.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_260.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_260.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Equivalence","pathinproj":"guava/src/com/google/common/base/Equivalence.java","addlines":[81,82,83,84,85],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final boolean test(@Nullable T t, @Nullable T u) {\n","    return equivalent(t, u);\n","  }\n"],"delcode":[],"methodSig":"public final boolean test(@Nullable T t, @Nullable T u)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_260.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_260.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_260.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_260.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_261.txt","newdoc":" avoids allocation of entries for those maps that generate fresh entries on iteration\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[97,98,3907,99,3908,100,3909,101,3911,423,3912,424,425,426,427,428,429,430,431],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super V> action) {\n","      checkNotNull(action);\n","      map.forEach((k, v) -> action.accept(v));\n","    }\n","  @Override\n","  public void forEach(Consumer<? super V> action) {\n","    checkNotNull(action);\n","    map.forEach((k, v) -> action.accept(v));\n","  }\n","    @Override\n","    public void forEach(Consumer<? super V> action) {\n","      checkNotNull(action);\n","      for (ValueSetLink<K, V> entry = firstEntry;\n","          entry != ValueSet.this;\n","          entry = entry.getSuccessorInValueSet()) {\n","        action.accept(((ValueEntry<K, V>) entry).getValue());\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super V> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_261.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_261.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_261.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_261.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_262.txt","newdoc":" avoids allocation of entries for those maps that generate fresh entries on iteration\n avoids allocation of entries for those maps that generate fresh entries on iteration\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[97,98,3907,99,3908,100,3909,101,3911,423,3912,424,425,426,427,428,429,430,431],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super V> action) {\n","      checkNotNull(action);\n","      map.forEach((k, v) -> action.accept(v));\n","    }\n","  @Override\n","  public void forEach(Consumer<? super V> action) {\n","    checkNotNull(action);\n","    map.forEach((k, v) -> action.accept(v));\n","  }\n","    @Override\n","    public void forEach(Consumer<? super V> action) {\n","      checkNotNull(action);\n","      for (ValueSetLink<K, V> entry = firstEntry;\n","          entry != ValueSet.this;\n","          entry = entry.getSuccessorInValueSet()) {\n","        action.accept(((ValueEntry<K, V>) entry).getValue());\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super V> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_262.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_262.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_262.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_262.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_263.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_263.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/BinaryTreeTraverser","pathinproj":"guava/src/com/google/common/collect/BinaryTreeTraverser.java","addlines":[192,193,181,182,183,184,185,186,187,188,189,190,191],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        new Consumer<T>() {\n","          @Override\n","          public void accept(T t) {\n","            acceptIfPresent(this, leftChild(t));\n","            action.accept(t);\n","            acceptIfPresent(this, rightChild(t));\n","          }\n","        }.accept(root);\n","      }\n"],"delcode":[],"methodSig":"public final FluentIterable<T> inOrderTraversal(final T root)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_263.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_263.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_263.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_263.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_264.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_264.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/BinaryTreeTraverser","pathinproj":"guava/src/com/google/common/collect/BinaryTreeTraverser.java","addlines":[192,193,181,182,183,184,185,186,187,188,189,190,191],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        new Consumer<T>() {\n","          @Override\n","          public void accept(T t) {\n","            acceptIfPresent(this, leftChild(t));\n","            action.accept(t);\n","            acceptIfPresent(this, rightChild(t));\n","          }\n","        }.accept(root);\n","      }\n"],"delcode":[],"methodSig":"public final FluentIterable<T> inOrderTraversal(final T root)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_264.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_264.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_264.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_264.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_265.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_265.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MutableClassToInstanceMap","pathinproj":"guava/src/com/google/common/collect/MutableClassToInstanceMap.java","addlines":[80,79],"dellines":[],"addcode":["  private static <B> Entry<Class<? extends B>, B> checkedEntry(\n","      final Entry<Class<? extends B>, B> entry) {\n"],"delcode":[],"methodSig":"private static Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_265.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_265.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_265.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_265.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_266.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_266.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MutableClassToInstanceMap","pathinproj":"guava/src/com/google/common/collect/MutableClassToInstanceMap.java","addlines":[80,79],"dellines":[],"addcode":["  private static <B> Entry<Class<? extends B>, B> checkedEntry(\n","      final Entry<Class<? extends B>, B> entry) {\n"],"delcode":[],"methodSig":"private static Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_266.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_266.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_266.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_266.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_267.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_267.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[209],"dellines":[193],"addcode":["      return removeIf(collection::contains);\n"],"delcode":["      return Iterables.removeIf(unfiltered, and(predicate, Predicates.<Object>in(collection)));\n"],"methodSig":"public boolean removeAll(final Collection<?> collection)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_267.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_267.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_267.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_267.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_268.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_268.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[209],"dellines":[193],"addcode":["      return removeIf(collection::contains);\n"],"delcode":["      return Iterables.removeIf(unfiltered, and(predicate, Predicates.<Object>in(collection)));\n"],"methodSig":"public boolean removeAll(final Collection<?> collection)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_268.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_268.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_268.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_268.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_269.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_269.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[179,180,181],"dellines":[],"addcode":["  public static IntStream stream(OptionalInt optional) {\n","    return optional.isPresent() ? IntStream.of(optional.getAsInt()) : IntStream.empty();\n","  }\n"],"delcode":[],"methodSig":"public static IntStream stream(OptionalInt optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_269.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_269.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_269.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_269.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_270.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_270.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[179,180,181],"dellines":[],"addcode":["  public static IntStream stream(OptionalInt optional) {\n","    return optional.isPresent() ? IntStream.of(optional.getAsInt()) : IntStream.empty();\n","  }\n"],"delcode":[],"methodSig":"public static IntStream stream(OptionalInt optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_270.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_270.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_270.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_270.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_271.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1120,1121,1122,1117,1118,1119],"dellines":[],"addcode":["    @Override\n","    public V putIfAbsent(K key, V value) {\n","      synchronized (mutex) {\n","        return delegate().putIfAbsent(key, value);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V putIfAbsent(K key, V value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_271.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_271.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_271.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_271.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_272.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1120,1121,1122,1117,1118,1119],"dellines":[],"addcode":["    @Override\n","    public V putIfAbsent(K key, V value) {\n","      synchronized (mutex) {\n","        return delegate().putIfAbsent(key, value);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V putIfAbsent(K key, V value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_272.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_272.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_272.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_272.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_273.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1153,1154,1155,1156,1157,1158],"dellines":[],"addcode":["    @Override\n","    public V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n","      synchronized (mutex) {\n","        return delegate().compute(key, remappingFunction);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_273.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_273.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_273.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_273.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_274.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1153,1154,1155,1156,1157,1158],"dellines":[],"addcode":["    @Override\n","    public V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n","      synchronized (mutex) {\n","        return delegate().compute(key, remappingFunction);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_274.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_274.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_274.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_274.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_275.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_275.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MutableClassToInstanceMap","pathinproj":"guava/src/com/google/common/collect/MutableClassToInstanceMap.java","addlines":[103,104,105,106,107,108],"dellines":[],"addcode":["      @Override\n","      public Spliterator<Entry<Class<? extends B>, B>> spliterator() {\n","        return CollectSpliterators.map(\n","            delegate().spliterator(), MutableClassToInstanceMap::checkedEntry);\n","      }\n","\n"],"delcode":[],"methodSig":"public Set<Entry<Class<? extends B>, B>> entrySet()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_275.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_275.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_275.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_275.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_276.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_276.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MutableClassToInstanceMap","pathinproj":"guava/src/com/google/common/collect/MutableClassToInstanceMap.java","addlines":[103,104,105,106,107,108],"dellines":[],"addcode":["      @Override\n","      public Spliterator<Entry<Class<? extends B>, B>> spliterator() {\n","        return CollectSpliterators.map(\n","            delegate().spliterator(), MutableClassToInstanceMap::checkedEntry);\n","      }\n","\n"],"delcode":[],"methodSig":"public Set<Entry<Class<? extends B>, B>> entrySet()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_276.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_276.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_276.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_276.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_277.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_277.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[485,486,487],"dellines":[],"addcode":["  public final V putIfAbsent(K key, V value) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V putIfAbsent(K key, V value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_277.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_277.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_277.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_277.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_278.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_278.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[485,486,487],"dellines":[],"addcode":["  public final V putIfAbsent(K key, V value) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V putIfAbsent(K key, V value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_278.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_278.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_278.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_278.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_279.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multiset","pathinproj":"guava/src/com/google/common/collect/Multiset.java","addlines":[496,497,494,495],"dellines":[],"addcode":["  @Override\n","  default Spliterator<E> spliterator() {\n","    return Multisets.spliteratorImpl(this);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<E> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_279.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_279.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_279.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_279.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_280.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multiset","pathinproj":"guava/src/com/google/common/collect/Multiset.java","addlines":[496,497,494,495],"dellines":[],"addcode":["  @Override\n","  default Spliterator<E> spliterator() {\n","    return Multisets.spliteratorImpl(this);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<E> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_280.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_280.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_280.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_280.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_281.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1088,1089,1090,1091,1086,1087],"dellines":[],"addcode":["    @Override\n","    public V getOrDefault(Object key, V defaultValue) {\n","      synchronized (mutex) {\n","        return delegate().getOrDefault(key, defaultValue);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V getOrDefault(Object key, V defaultValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_281.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_281.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_281.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_281.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_282.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1088,1089,1090,1091,1086,1087],"dellines":[],"addcode":["    @Override\n","    public V getOrDefault(Object key, V defaultValue) {\n","      synchronized (mutex) {\n","        return delegate().getOrDefault(key, defaultValue);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V getOrDefault(Object key, V defaultValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_282.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_282.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_282.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_282.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_283.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_283.txt","newdoc":" k is really large; just do a straightforward sorted-copy-and-sublist\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_283.txt","olddoc":" k is really large; just do a straightforward sorted-copy-and-sublist\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_283.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Ordering","pathinproj":"guava/src/com/google/common/collect/Ordering.java","addlines":[780],"dellines":[780],"addcode":["      list.sort(this);\n"],"delcode":["      Collections.sort(list, this);\n"],"methodSig":"public List<E> leastOf(Iterator<E> iterator, int k)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_283.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_283.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_283.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_283.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_284.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_284.txt","newdoc":" k is really large; just do a straightforward sorted-copy-and-sublist\n k is really large; just do a straightforward sorted-copy-and-sublist\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_284.txt","olddoc":" k is really large; just do a straightforward sorted-copy-and-sublist\n k is really large; just do a straightforward sorted-copy-and-sublist\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_284.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Ordering","pathinproj":"guava/src/com/google/common/collect/Ordering.java","addlines":[780],"dellines":[780],"addcode":["      list.sort(this);\n"],"delcode":["      Collections.sort(list, this);\n"],"methodSig":"public List<E> leastOf(Iterator<E> iterator, int k)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_284.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_284.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_284.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_284.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_285.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_285.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[496,497,498,499,495],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final boolean replace(K key, V oldValue, V newValue) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final boolean replace(K key, V oldValue, V newValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_285.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_285.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_285.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_285.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_286.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_286.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[496,497,498,499,495],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final boolean replace(K key, V oldValue, V newValue) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final boolean replace(K key, V oldValue, V newValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_286.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_286.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_286.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_286.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_287.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_287.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_287.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_287.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[217],"dellines":[236,237,238],"addcode":["    m.forEach(this::put);\n"],"delcode":["    for (Map.Entry<? extends K, ? extends Long> entry : m.entrySet()) {\n","      put(entry.getKey(), entry.getValue());\n","    }\n"],"methodSig":"public void putAll(Map<? extends K, ? extends Long> m)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_287.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_287.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_287.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_287.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_288.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_288.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_288.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_288.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[217],"dellines":[236,237,238],"addcode":["    m.forEach(this::put);\n"],"delcode":["    for (Map.Entry<? extends K, ? extends Long> entry : m.entrySet()) {\n","      put(entry.getKey(), entry.getValue());\n","    }\n"],"methodSig":"public void putAll(Map<? extends K, ? extends Long> m)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_288.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_288.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_288.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_288.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_289.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_289.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_289.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_289.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/RangeSet","pathinproj":"guava/src/com/google/common/collect/RangeSet.java","addlines":[224,225,226,227,223],"dellines":[215],"addcode":["  default void addAll(Iterable<Range<C>> ranges) {\n","    for (Range<C> range : ranges) {\n","      add(range);\n","    }\n","  }\n"],"delcode":["  void addAll(Iterable<Range<C>> ranges);\n"],"methodSig":" void addAll(Iterable<Range<C>> ranges)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_289.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_289.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_289.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_289.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_290.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_290.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_290.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_290.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/RangeSet","pathinproj":"guava/src/com/google/common/collect/RangeSet.java","addlines":[224,225,226,227,223],"dellines":[215],"addcode":["  default void addAll(Iterable<Range<C>> ranges) {\n","    for (Range<C> range : ranges) {\n","      add(range);\n","    }\n","  }\n"],"delcode":["  void addAll(Iterable<Range<C>> ranges);\n"],"methodSig":" void addAll(Iterable<Range<C>> ranges)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_290.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_290.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_290.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_290.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_291.txt","newdoc":" null for empty paths and root-only paths\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_291.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[384,385,386,388,389,390,391,392,393,394,395],"dellines":[],"addcode":["  public static String getFileExtension(Path path) {\n","    Path name = path.getFileName();\n","\n","    if (name == null) {\n","      return \"\";\n","    }\n","\n","    String fileName = name.toString();\n","    int dotIndex = fileName.lastIndexOf('.');\n","    return dotIndex == -1 ? \"\" : fileName.substring(dotIndex + 1);\n","  }\n"],"delcode":[],"methodSig":"public static String getFileExtension(Path path)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_291.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_291.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_291.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_291.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_292.txt","newdoc":" null for empty paths and root-only paths\n null for empty paths and root-only paths\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_292.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[384,385,386,388,389,390,391,392,393,394,395],"dellines":[],"addcode":["  public static String getFileExtension(Path path) {\n","    Path name = path.getFileName();\n","\n","    if (name == null) {\n","      return \"\";\n","    }\n","\n","    String fileName = name.toString();\n","    int dotIndex = fileName.lastIndexOf('.');\n","    return dotIndex == -1 ? \"\" : fileName.substring(dotIndex + 1);\n","  }\n"],"delcode":[],"methodSig":"public static String getFileExtension(Path path)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_292.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_292.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_292.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_292.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_293.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_293.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMultiset","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMultiset.java","addlines":[66,67,68,69,70],"dellines":[],"addcode":["  @Beta\n","  public static <E> Collector<E, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(\n","      Comparator<? super E> comparator) {\n","    return toImmutableSortedMultiset(comparator, Function.identity(), e -> 1);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<E, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(Comparator<? super E> comparator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_293.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_293.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_293.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_293.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_294.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_294.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMultiset","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMultiset.java","addlines":[66,67,68,69,70],"dellines":[],"addcode":["  @Beta\n","  public static <E> Collector<E, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(\n","      Comparator<? super E> comparator) {\n","    return toImmutableSortedMultiset(comparator, Function.identity(), e -> 1);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<E, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(Comparator<? super E> comparator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_294.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_294.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_294.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_294.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_295.txt","newdoc":" unsafe, but Javadoc warns about it\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[853,997,998,999,1005,846,847],"dellines":[],"addcode":["    @Override\n","    public V getOrDefault(@Nullable Object key, @Nullable V defaultValue) {\n","        return defaultValue;\n","    @Override\n","    @Nullable\n","    public V getOrDefault(@Nullable Object key, @Nullable V defaultValue) {\n","        return defaultValue;\n"],"delcode":[],"methodSig":"public V getOrDefault(@Nullable Object key, @Nullable V defaultValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_295.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_295.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_295.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_295.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_296.txt","newdoc":" unsafe, but Javadoc warns about it\n unsafe, but Javadoc warns about it\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[853,997,998,999,1005,846,847],"dellines":[],"addcode":["    @Override\n","    public V getOrDefault(@Nullable Object key, @Nullable V defaultValue) {\n","        return defaultValue;\n","    @Override\n","    @Nullable\n","    public V getOrDefault(@Nullable Object key, @Nullable V defaultValue) {\n","        return defaultValue;\n"],"delcode":[],"methodSig":"public V getOrDefault(@Nullable Object key, @Nullable V defaultValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_296.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_296.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_296.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_296.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_297.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_297.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_297.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_297.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[257],"dellines":[297,298,299,300,301],"addcode":["    return map.values().stream().mapToLong(Long::longValue).sum();\n"],"delcode":["    long sum = 0L;\n","    for (AtomicLong value : map.values()) {\n","      sum = sum + value.get();\n","    }\n","    return sum;\n"],"methodSig":"public long sum()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_297.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_297.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_297.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_297.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_298.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_298.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_298.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_298.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[257],"dellines":[297,298,299,300,301],"addcode":["    return map.values().stream().mapToLong(Long::longValue).sum();\n"],"delcode":["    long sum = 0L;\n","    for (AtomicLong value : map.values()) {\n","      sum = sum + value.get();\n","    }\n","    return sum;\n"],"methodSig":"public long sum()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_298.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_298.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_298.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_298.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_299.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_299.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[2024,2025,2029],"dellines":[],"addcode":["    @Nullable\n","    public V2 getOrDefault(@Nullable Object key, @Nullable V2 defaultValue) {\n","          : defaultValue;\n"],"delcode":[],"methodSig":"public V2 getOrDefault(@Nullable Object key, @Nullable V2 defaultValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_299.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_299.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_299.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_299.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_300.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_300.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[2024,2025,2029],"dellines":[],"addcode":["    @Nullable\n","    public V2 getOrDefault(@Nullable Object key, @Nullable V2 defaultValue) {\n","          : defaultValue;\n"],"delcode":[],"methodSig":"public V2 getOrDefault(@Nullable Object key, @Nullable V2 defaultValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_300.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_300.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_300.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_300.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_301.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_301.txt","newdoc":" Class.isInstance\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_301.txt","olddoc":" Class.isInstance\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_301.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634],"dellines":[],"addcode":["\n","      @SuppressWarnings(\"unchecked\")\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        unfiltered.forEach(\n","            (Object o) -> {\n","              if (desiredType.isInstance(o)) {\n","                action.accept(desiredType.cast(o));\n","              }\n","            });\n","      }\n","\n","      @SuppressWarnings(\"unchecked\")\n","      @Override\n","      public Spliterator<T> spliterator() {\n","        return (Spliterator<T>)\n","            CollectSpliterators.filter(unfiltered.spliterator(), desiredType::isInstance);\n","      }\n"],"delcode":[],"methodSig":"public static Iterable<T> filter(final Iterable<?> unfiltered, final Class<T> desiredType)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_301.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_301.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_301.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_301.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_302.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_302.txt","newdoc":" Class.isInstance\n Class.isInstance\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_302.txt","olddoc":" Class.isInstance\n Class.isInstance\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_302.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634],"dellines":[],"addcode":["\n","      @SuppressWarnings(\"unchecked\")\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        unfiltered.forEach(\n","            (Object o) -> {\n","              if (desiredType.isInstance(o)) {\n","                action.accept(desiredType.cast(o));\n","              }\n","            });\n","      }\n","\n","      @SuppressWarnings(\"unchecked\")\n","      @Override\n","      public Spliterator<T> spliterator() {\n","        return (Spliterator<T>)\n","            CollectSpliterators.filter(unfiltered.spliterator(), desiredType::isInstance);\n","      }\n"],"delcode":[],"methodSig":"public static Iterable<T> filter(final Iterable<?> unfiltered, final Class<T> desiredType)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_302.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_302.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_302.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_302.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_303.txt","newdoc":" null for empty paths and root-only paths\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_303.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[402,403,404,406,407,408,409,410,411,412,413],"dellines":[],"addcode":["  public static String getNameWithoutExtension(Path path) {\n","    Path name = path.getFileName();\n","\n","    if (name == null) {\n","      return \"\";\n","    }\n","\n","    String fileName = name.toString();\n","    int dotIndex = fileName.lastIndexOf('.');\n","    return dotIndex == -1 ? fileName : fileName.substring(0, dotIndex);\n","  }\n"],"delcode":[],"methodSig":"public static String getNameWithoutExtension(Path path)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_303.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_303.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_303.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_303.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_304.txt","newdoc":" null for empty paths and root-only paths\n null for empty paths and root-only paths\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_304.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[402,403,404,406,407,408,409,410,411,412,413],"dellines":[],"addcode":["  public static String getNameWithoutExtension(Path path) {\n","    Path name = path.getFileName();\n","\n","    if (name == null) {\n","      return \"\";\n","    }\n","\n","    String fileName = name.toString();\n","    int dotIndex = fileName.lastIndexOf('.');\n","    return dotIndex == -1 ? fileName : fileName.substring(0, dotIndex);\n","  }\n"],"delcode":[],"methodSig":"public static String getNameWithoutExtension(Path path)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_304.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_304.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_304.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_304.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_305.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_305.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_305.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_305.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[85],"dellines":[83,84],"addcode":["    return map.getOrDefault(key, 0L);\n"],"delcode":["    AtomicLong atomic = map.get(key);\n","    return atomic == null ? 0L : atomic.get();\n"],"methodSig":"public long get(K key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_305.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_305.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_305.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_305.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_306.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_306.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_306.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_306.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[85],"dellines":[83,84],"addcode":["    return map.getOrDefault(key, 0L);\n"],"delcode":["    AtomicLong atomic = map.get(key);\n","    return atomic == null ? 0L : atomic.get();\n"],"methodSig":"public long get(K key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_306.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_306.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_306.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_306.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_307.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_307.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_307.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_307.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[624,625,626,627,628,629,620,621,622,623],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return Stream.concat(set1.stream(), set2minus1.stream());\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return Stream.concat(set1.parallelStream(), set2minus1.parallelStream());\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> union(final Set<? extends E> set1, final Set<? extends E> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_307.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_307.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_307.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_307.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_308.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_308.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_308.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_308.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[624,625,626,627,628,629,620,621,622,623],"dellines":[],"addcode":["      @Override\n","      public Stream<E> stream() {\n","        return Stream.concat(set1.stream(), set2minus1.stream());\n","      }\n","\n","      @Override\n","      public Stream<E> parallelStream() {\n","        return Stream.concat(set1.parallelStream(), set2minus1.parallelStream());\n","      }\n","\n"],"delcode":[],"methodSig":"public static SetView<E> union(final Set<? extends E> set1, final Set<? extends E> set2)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_308.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_308.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_308.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_308.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_309.txt","newdoc":" same as Stream.concat\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_309.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[356,357,358,359,360,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383],"dellines":[],"addcode":["  public static <A, B, R> Stream<R> zip(\n","      Stream<A> streamA, Stream<B> streamB, BiFunction<? super A, ? super B, R> function) {\n","    checkNotNull(streamA);\n","    checkNotNull(streamB);\n","    checkNotNull(function);\n","    Spliterator<A> splitrA = streamA.spliterator();\n","    Spliterator<B> splitrB = streamB.spliterator();\n","    int characteristics =\n","        splitrA.characteristics()\n","            & splitrB.characteristics()\n","            & (Spliterator.SIZED | Spliterator.ORDERED);\n","    Iterator<A> itrA = Spliterators.iterator(splitrA);\n","    Iterator<B> itrB = Spliterators.iterator(splitrB);\n","    return StreamSupport.stream(\n","        new AbstractSpliterator<R>(\n","            Math.min(splitrA.estimateSize(), splitrB.estimateSize()), characteristics) {\n","          @Override\n","          public boolean tryAdvance(Consumer<? super R> action) {\n","            if (itrA.hasNext() && itrB.hasNext()) {\n","              action.accept(function.apply(itrA.next(), itrB.next()));\n","              return true;\n","            }\n","            return false;\n","          }\n","        },\n","        isParallel);\n","  }\n"],"delcode":[],"methodSig":"public static Stream<R> zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A, ? super B, R> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_309.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_309.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_309.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_309.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_310.txt","newdoc":" same as Stream.concat\n same as Stream.concat\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_310.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[356,357,358,359,360,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383],"dellines":[],"addcode":["  public static <A, B, R> Stream<R> zip(\n","      Stream<A> streamA, Stream<B> streamB, BiFunction<? super A, ? super B, R> function) {\n","    checkNotNull(streamA);\n","    checkNotNull(streamB);\n","    checkNotNull(function);\n","    Spliterator<A> splitrA = streamA.spliterator();\n","    Spliterator<B> splitrB = streamB.spliterator();\n","    int characteristics =\n","        splitrA.characteristics()\n","            & splitrB.characteristics()\n","            & (Spliterator.SIZED | Spliterator.ORDERED);\n","    Iterator<A> itrA = Spliterators.iterator(splitrA);\n","    Iterator<B> itrB = Spliterators.iterator(splitrB);\n","    return StreamSupport.stream(\n","        new AbstractSpliterator<R>(\n","            Math.min(splitrA.estimateSize(), splitrB.estimateSize()), characteristics) {\n","          @Override\n","          public boolean tryAdvance(Consumer<? super R> action) {\n","            if (itrA.hasNext() && itrB.hasNext()) {\n","              action.accept(function.apply(itrA.next(), itrB.next()));\n","              return true;\n","            }\n","            return false;\n","          }\n","        },\n","        isParallel);\n","  }\n"],"delcode":[],"methodSig":"public static Stream<R> zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A, ? super B, R> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_310.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_310.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_310.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_310.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_311.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableTable","pathinproj":"guava/src/com/google/common/collect/ImmutableTable.java","addlines":[284,285,286,287],"dellines":[],"addcode":["  @Override\n","  final Spliterator<Cell<R, C, V>> cellSpliterator() {\n","    throw new AssertionError(\"should never be called\");\n","  }\n"],"delcode":[],"methodSig":" final Spliterator<Cell<R, C, V>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_311.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_311.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_311.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_311.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_312.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableTable","pathinproj":"guava/src/com/google/common/collect/ImmutableTable.java","addlines":[284,285,286,287],"dellines":[],"addcode":["  @Override\n","  final Spliterator<Cell<R, C, V>> cellSpliterator() {\n","    throw new AssertionError(\"should never be called\");\n","  }\n"],"delcode":[],"methodSig":" final Spliterator<Cell<R, C, V>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_312.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_312.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_312.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_312.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_313.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_313.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[608,609,605,606,607],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final boolean remove(Object key, Object value) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final boolean remove(Object key, Object value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_313.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_313.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_313.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_313.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_314.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_314.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[608,609,605,606,607],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final boolean remove(Object key, Object value) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final boolean remove(Object key, Object value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_314.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_314.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_314.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_314.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_315.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_315.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[80,78,79],"dellines":[],"addcode":["  public static ByteSource asByteSource(Path path, OpenOption... options) {\n","    return new PathByteSource(path, options);\n","  }\n"],"delcode":[],"methodSig":"public static ByteSource asByteSource(Path path, OpenOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_315.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_315.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_315.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_315.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_316.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_316.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[80,78,79],"dellines":[],"addcode":["  public static ByteSource asByteSource(Path path, OpenOption... options) {\n","    return new PathByteSource(path, options);\n","  }\n"],"delcode":[],"methodSig":"public static ByteSource asByteSource(Path path, OpenOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_316.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_316.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_316.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_316.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_317.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[299,300,301,302,303],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(java.util.function.Predicate<? super T> filter) {\n","      checkNotNull(filter);\n","      return fromCollection.removeIf(element -> filter.test(function.apply(element)));\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(java.util.function.Predicate<? super T> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_317.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_317.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_317.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_317.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_318.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[299,300,301,302,303],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(java.util.function.Predicate<? super T> filter) {\n","      checkNotNull(filter);\n","      return fromCollection.removeIf(element -> filter.test(function.apply(element)));\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(java.util.function.Predicate<? super T> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_318.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_318.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_318.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_318.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_319.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4736,4737,4738,4739,4740,4741,4742,4727,4728,4729,4730,4731,4732,4733,4734,4735],"dellines":[],"addcode":["  boolean removeIf(BiPredicate<? super K, ? super V> filter) {\n","    checkNotNull(filter);\n","    boolean changed = false;\n","    for (K key : keySet()) {\n","      while (true) {\n","        V value = get(key);\n","        if (value == null || !filter.test(key, value)) {\n","          break;\n","        } else if (LocalCache.this.remove(key, value)) {\n","          changed = true;\n","          break;\n","        }\n","      }\n","    }\n","    return changed;\n","  }\n"],"delcode":[],"methodSig":" boolean removeIf(BiPredicate<? super K, ? super V> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_319.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_319.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_319.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_319.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_320.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4736,4737,4738,4739,4740,4741,4742,4727,4728,4729,4730,4731,4732,4733,4734,4735],"dellines":[],"addcode":["  boolean removeIf(BiPredicate<? super K, ? super V> filter) {\n","    checkNotNull(filter);\n","    boolean changed = false;\n","    for (K key : keySet()) {\n","      while (true) {\n","        V value = get(key);\n","        if (value == null || !filter.test(key, value)) {\n","          break;\n","        } else if (LocalCache.this.remove(key, value)) {\n","          changed = true;\n","          break;\n","        }\n","      }\n","    }\n","    return changed;\n","  }\n"],"delcode":[],"methodSig":" boolean removeIf(BiPredicate<? super K, ? super V> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_320.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_320.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_320.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_320.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_321.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1138,1139,1140,1141,1142,1143],"dellines":[],"addcode":["    @Override\n","    public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n","      synchronized (mutex) {\n","        return delegate().computeIfAbsent(key, mappingFunction);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_321.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_321.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_321.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_321.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_322.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1138,1139,1140,1141,1142,1143],"dellines":[],"addcode":["    @Override\n","    public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n","      synchronized (mutex) {\n","        return delegate().computeIfAbsent(key, mappingFunction);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_322.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_322.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_322.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_322.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_323.txt","newdoc":" The file didn't exist when we called setLastModifiedTime, but it did when we called\n createFile, so something else created the file in between. The end result is\n what we wanted: a new file that probably has its last modified time set to approximately\n now. Or it could have an arbitrary last modified time set by the creator, but that's no\n different than if another process set its last modified time to something else after we\n created it here.\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_323.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[339,324,340,325,341,326,327,328,329,330,331,332],"dellines":[],"addcode":["  public static void touch(Path path) throws IOException {\n","    checkNotNull(path);\n","\n","    try {\n","      Files.setLastModifiedTime(path, FileTime.fromMillis(System.currentTimeMillis()));\n","    } catch (NoSuchFileException e) {\n","      try {\n","        Files.createFile(path);\n","      } catch (FileAlreadyExistsException ignore) {\n","      }\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static void touch(Path path) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_323.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_323.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_323.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_323.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_324.txt","newdoc":" The file didn't exist when we called setLastModifiedTime, but it did when we called\n createFile, so something else created the file in between. The end result is\n what we wanted: a new file that probably has its last modified time set to approximately\n now. Or it could have an arbitrary last modified time set by the creator, but that's no\n different than if another process set its last modified time to something else after we\n created it here.\n The file didn't exist when we called setLastModifiedTime, but it did when we called\n createFile, so something else created the file in between. The end result is\n what we wanted: a new file that probably has its last modified time set to approximately\n now. Or it could have an arbitrary last modified time set by the creator, but that's no\n different than if another process set its last modified time to something else after we\n created it here.\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_324.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[339,324,340,325,341,326,327,328,329,330,331,332],"dellines":[],"addcode":["  public static void touch(Path path) throws IOException {\n","    checkNotNull(path);\n","\n","    try {\n","      Files.setLastModifiedTime(path, FileTime.fromMillis(System.currentTimeMillis()));\n","    } catch (NoSuchFileException e) {\n","      try {\n","        Files.createFile(path);\n","      } catch (FileAlreadyExistsException ignore) {\n","      }\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static void touch(Path path) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_324.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_324.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_324.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_324.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_325.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[150,151,152,153,154,155,156],"dellines":[],"addcode":["    Optional<Object> getOptional() {\n","      if (extras == null) {\n","        return Optional.ofNullable(element);\n","      } else {\n","        throw multiples(false);\n","      }\n","    }\n"],"delcode":[],"methodSig":" Optional<Object> getOptional()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_325.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_325.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_325.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_325.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_326.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[150,151,152,153,154,155,156],"dellines":[],"addcode":["    Optional<Object> getOptional() {\n","      if (extras == null) {\n","        return Optional.ofNullable(element);\n","      } else {\n","        throw multiples(false);\n","      }\n","    }\n"],"delcode":[],"methodSig":" Optional<Object> getOptional()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_326.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_326.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_326.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_326.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_327.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4400,4401,4402,4403,4404,4405,4398,4399],"dellines":[],"addcode":["  @Override\n","  public V merge(K key, V newValue, BiFunction<? super V, ? super V, ? extends V> function) {\n","    checkNotNull(key);\n","    checkNotNull(newValue);\n","    checkNotNull(function);\n","    return compute(\n","        key, (k, oldValue) -> (oldValue == null) ? newValue : function.apply(oldValue, newValue));\n","  }\n"],"delcode":[],"methodSig":"public V merge(K key, V newValue, BiFunction<? super V, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_327.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_327.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_327.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_327.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_328.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4400,4401,4402,4403,4404,4405,4398,4399],"dellines":[],"addcode":["  @Override\n","  public V merge(K key, V newValue, BiFunction<? super V, ? super V, ? extends V> function) {\n","    checkNotNull(key);\n","    checkNotNull(newValue);\n","    checkNotNull(function);\n","    return compute(\n","        key, (k, oldValue) -> (oldValue == null) ? newValue : function.apply(oldValue, newValue));\n","  }\n"],"delcode":[],"methodSig":"public V merge(K key, V newValue, BiFunction<? super V, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_328.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_328.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_328.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_328.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_329.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/RegularImmutableMap","pathinproj":"guava/src/com/google/common/collect/RegularImmutableMap.java","addlines":[1024,1025,1026,1027,522,523,524,525,142,526,143,527,144,528,145,529,146,530,147,148,149,150,151,152,153,154,155,1072,1073,1074,1075,1076,1077,63,64,65,66,590,591,592,593,594,595,596,597,102,103,104,617,618,619,620,621,622,623,1272,1273,890,1274,891,1275,892,1276,1277,894,895],"dellines":[],"addcode":["  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    for (Entry<K, V> entry : entries) {\n","      action.accept(entry.getKey(), entry.getValue());\n","    }\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action).accept(singleKey, singleValue);\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    ImmutableList<K> keyList = keySet.asList();\n","    for (int i = 0; i < size(); i++) {\n","      action.accept(keyList.get(i), valueList.get(i));\n","    }\n","  }\n","    @Override\n","    public void forEach(BiConsumer<? super K, ? super V> action) {\n","      checkNotNull(action);\n","      backingSet().forEach(k -> action.accept(k, function.apply(k)));\n","    }\n","    @Override\n","    public void forEach(BiConsumer<? super K, ? super V> action) {\n","      set.forEach(k -> action.accept(k, function.apply(k)));\n","    }\n","  @Override public void forEach(BiConsumer<? super K, ? super V> action) {\n","    delegate.forEach(action);\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    for (BiEntry<K, V> entry = firstInKeyInsertionOrder;\n","        entry != null;\n","        entry = entry.nextInKeyInsertionOrder) {\n","      action.accept(entry.key, entry.value);\n","    }\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    asMap()\n","        .forEach(\n","            (key, valueCollection) -> valueCollection.forEach(value -> action.accept(key, value)));\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    map.forEach(\n","        (key, valueCollection) -> valueCollection.forEach(value -> action.accept(key, value)));\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    for (Entry<K, V> entry : entries) {\n","      action.accept(entry.getKey(), entry.getValue());\n","    }\n","  }\n","    @Override\n","    public void forEach(BiConsumer<? super K, ? super V> action) {\n","      synchronized (mutex) {\n","        delegate().forEach(action);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void forEach(BiConsumer<? super K, ? super V> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_329.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_329.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_329.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_329.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_330.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/RegularImmutableMap","pathinproj":"guava/src/com/google/common/collect/RegularImmutableMap.java","addlines":[1024,1025,1026,1027,522,523,524,525,142,526,143,527,144,528,145,529,146,530,147,148,149,150,151,152,153,154,155,1072,1073,1074,1075,1076,1077,63,64,65,66,590,591,592,593,594,595,596,597,102,103,104,617,618,619,620,621,622,623,1272,1273,890,1274,891,1275,892,1276,1277,894,895],"dellines":[],"addcode":["  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    for (Entry<K, V> entry : entries) {\n","      action.accept(entry.getKey(), entry.getValue());\n","    }\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action).accept(singleKey, singleValue);\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    ImmutableList<K> keyList = keySet.asList();\n","    for (int i = 0; i < size(); i++) {\n","      action.accept(keyList.get(i), valueList.get(i));\n","    }\n","  }\n","    @Override\n","    public void forEach(BiConsumer<? super K, ? super V> action) {\n","      checkNotNull(action);\n","      backingSet().forEach(k -> action.accept(k, function.apply(k)));\n","    }\n","    @Override\n","    public void forEach(BiConsumer<? super K, ? super V> action) {\n","      set.forEach(k -> action.accept(k, function.apply(k)));\n","    }\n","  @Override public void forEach(BiConsumer<? super K, ? super V> action) {\n","    delegate.forEach(action);\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    for (BiEntry<K, V> entry = firstInKeyInsertionOrder;\n","        entry != null;\n","        entry = entry.nextInKeyInsertionOrder) {\n","      action.accept(entry.key, entry.value);\n","    }\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    asMap()\n","        .forEach(\n","            (key, valueCollection) -> valueCollection.forEach(value -> action.accept(key, value)));\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    map.forEach(\n","        (key, valueCollection) -> valueCollection.forEach(value -> action.accept(key, value)));\n","  }\n","  @Override\n","  public void forEach(BiConsumer<? super K, ? super V> action) {\n","    checkNotNull(action);\n","    for (Entry<K, V> entry : entries) {\n","      action.accept(entry.getKey(), entry.getValue());\n","    }\n","  }\n","    @Override\n","    public void forEach(BiConsumer<? super K, ? super V> action) {\n","      synchronized (mutex) {\n","        delegate().forEach(action);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void forEach(BiConsumer<? super K, ? super V> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_330.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_330.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_330.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_330.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_331.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_331.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableList_2","pathinproj":"guava/src/com/google/common/collect/ImmutableList.java","addlines":[563,564,565,566,567],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final void sort(Comparator<? super E> c) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final void sort(Comparator<? super E> c)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_331.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_331.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_331.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_331.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_332.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_332.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableList_2","pathinproj":"guava/src/com/google/common/collect/ImmutableList.java","addlines":[563,564,565,566,567],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final void sort(Comparator<? super E> c) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final void sort(Comparator<? super E> c)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_332.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_332.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_332.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_332.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_333.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multimaps","pathinproj":"guava/src/com/google/common/collect/Multimaps.java","addlines":[1589,1590,1591,1592,1593],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super K> consumer) {\n","      checkNotNull(consumer);\n","      multimap.entries().forEach(entry -> consumer.accept(entry.getKey()));\n","    }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super K> consumer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_333.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_333.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_333.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_333.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_334.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multimaps","pathinproj":"guava/src/com/google/common/collect/Multimaps.java","addlines":[1589,1590,1591,1592,1593],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super K> consumer) {\n","      checkNotNull(consumer);\n","      multimap.entries().forEach(entry -> consumer.accept(entry.getKey()));\n","    }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super K> consumer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_334.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_334.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_334.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_334.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_335.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[432,433,428,429,430,431],"dellines":[],"addcode":["    @Override\n","    public void sort(Comparator<? super E> c) {\n","      synchronized (mutex) {\n","        delegate().sort(c);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void sort(Comparator<? super E> c)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_335.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_335.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_335.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_335.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_336.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[432,433,428,429,430,431],"dellines":[],"addcode":["    @Override\n","    public void sort(Comparator<? super E> c) {\n","      synchronized (mutex) {\n","        delegate().sort(c);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void sort(Comparator<? super E> c)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_336.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_336.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_336.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_336.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_337.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_337.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[581,582,583,584,585],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_337.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_337.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_337.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_337.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_338.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_338.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[581,582,583,584,585],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_338.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_338.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_338.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_338.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_339.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_339.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[76,77,78],"dellines":[],"addcode":["  public static <T> Stream<T> stream(Iterator<T> iterator) {\n","    return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(Iterator<T> iterator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_339.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_339.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_339.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_339.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_340.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_340.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[76,77,78],"dellines":[],"addcode":["  public static <T> Stream<T> stream(Iterator<T> iterator) {\n","    return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(Iterator<T> iterator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_340.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_340.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_340.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_340.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_341.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_341.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_341.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_341.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMultimap","pathinproj":"guava/src/com/google/common/collect/ImmutableMultimap.java","addlines":[281],"dellines":[276],"addcode":["          list.sort(valueComparator);\n"],"delcode":["          Collections.sort(list, valueComparator);\n"],"methodSig":"public ImmutableMultimap<K, V> build()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_341.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_341.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_341.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_341.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_342.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_342.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_342.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_342.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMultimap","pathinproj":"guava/src/com/google/common/collect/ImmutableMultimap.java","addlines":[281],"dellines":[276],"addcode":["          list.sort(valueComparator);\n"],"delcode":["          Collections.sort(list, valueComparator);\n"],"methodSig":"public ImmutableMultimap<K, V> build()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_342.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_342.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_342.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_342.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_343.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_343.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_343.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_343.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[344],"dellines":[427,428],"addcode":["      return map.replace(key, expectedOldValue, newValue);\n"],"delcode":["      AtomicLong atomic = map.get(key);\n","      return (atomic == null) ? false : atomic.compareAndSet(expectedOldValue, newValue);\n"],"methodSig":" boolean replace(K key, long expectedOldValue, long newValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_343.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_343.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_343.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_343.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_344.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_344.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_344.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_344.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[344],"dellines":[427,428],"addcode":["      return map.replace(key, expectedOldValue, newValue);\n"],"delcode":["      AtomicLong atomic = map.get(key);\n","      return (atomic == null) ? false : atomic.compareAndSet(expectedOldValue, newValue);\n"],"methodSig":" boolean replace(K key, long expectedOldValue, long newValue)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_344.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_344.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_344.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_344.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_345.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_345.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[],"dellines":[1985,1981],"addcode":[],"delcode":["    public V2 get(Object key) {\n","          : null;\n"],"methodSig":"public V2 get(Object key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_345.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_345.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_345.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_345.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_346.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_346.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[],"dellines":[1985,1981],"addcode":[],"delcode":["    public V2 get(Object key) {\n","          : null;\n"],"methodSig":"public V2 get(Object key)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_346.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_346.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_346.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_346.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_347.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[293,294,295,103,296,104,297,105,106],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super T> action) {\n","      checkNotNull(action);\n","      fromCollection.forEach((F f) -> action.accept(function.apply(f)));\n","    }\n","    @Override\n","    public void forEach(Consumer<? super T> action) {\n","      iterable.forEach(action);\n","    }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super T> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_347.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_347.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_347.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_347.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_348.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[293,294,295,103,296,104,297,105,106],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super T> action) {\n","      checkNotNull(action);\n","      fromCollection.forEach((F f) -> action.accept(function.apply(f)));\n","    }\n","    @Override\n","    public void forEach(Consumer<? super T> action) {\n","      iterable.forEach(action);\n","    }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super T> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_348.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_348.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_348.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_348.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_349.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_349.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[240,241,242,243,237,238,239],"dellines":[],"addcode":["  public static ImmutableList<Path> listFiles(Path dir) throws IOException {\n","    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n","      return ImmutableList.copyOf(stream);\n","    } catch (DirectoryIteratorException e) {\n","      throw e.getCause();\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static ImmutableList<Path> listFiles(Path dir) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_349.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_349.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_349.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_349.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_350.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_350.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[240,241,242,243,237,238,239],"dellines":[],"addcode":["  public static ImmutableList<Path> listFiles(Path dir) throws IOException {\n","    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n","      return ImmutableList.copyOf(stream);\n","    } catch (DirectoryIteratorException e) {\n","      throw e.getCause();\n","    }\n","  }\n"],"delcode":[],"methodSig":"public static ImmutableList<Path> listFiles(Path dir) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_350.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_350.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_350.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_350.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_351.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_351.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[368,369,370,371,372,373,374,375,376],"dellines":[],"addcode":["  public Guard newGuard(final BooleanSupplier isSatisfied) {\n","    checkNotNull(isSatisfied, \"isSatisfied\");\n","    return new Guard(this) {\n","      @Override\n","      public boolean isSatisfied() {\n","        return isSatisfied.getAsBoolean();\n","      }\n","    };\n","  }\n"],"delcode":[],"methodSig":"public Guard newGuard(final BooleanSupplier isSatisfied)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_351.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_351.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_351.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_351.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_352.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_352.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Monitor","pathinproj":"guava/src/com/google/common/util/concurrent/Monitor.java","addlines":[368,369,370,371,372,373,374,375,376],"dellines":[],"addcode":["  public Guard newGuard(final BooleanSupplier isSatisfied) {\n","    checkNotNull(isSatisfied, \"isSatisfied\");\n","    return new Guard(this) {\n","      @Override\n","      public boolean isSatisfied() {\n","        return isSatisfied.getAsBoolean();\n","      }\n","    };\n","  }\n"],"delcode":[],"methodSig":"public Guard newGuard(final BooleanSupplier isSatisfied)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_352.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_352.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_352.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_352.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_353.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[217,218,219,220],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(java.util.function.Predicate<? super E> filter) {\n","      checkNotNull(filter);\n","      return unfiltered.removeIf(element -> predicate.apply(element) && filter.test(element));\n"],"delcode":[],"methodSig":"public boolean removeIf(java.util.function.Predicate<? super E> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_353.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_353.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_353.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_353.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_354.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Collections2","pathinproj":"guava/src/com/google/common/collect/Collections2.java","addlines":[217,218,219,220],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(java.util.function.Predicate<? super E> filter) {\n","      checkNotNull(filter);\n","      return unfiltered.removeIf(element -> predicate.apply(element) && filter.test(element));\n"],"delcode":[],"methodSig":"public boolean removeIf(java.util.function.Predicate<? super E> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_354.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_354.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_354.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_354.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_355.txt","newdoc":" This is safe because entries can only get bumped up to earlier in the iteration,\n so they can't get revisited.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/HashBiMap","pathinproj":"guava/src/com/google/common/collect/HashBiMap.java","addlines":[644,645,647,648,651,652,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,675,676,677,678,679,680,681,684,685],"dellines":[],"addcode":["    Iterator<Entry<V, K>> entryIterator() {\n","      return new Itr<Entry<V, K>>() {\n","        Entry<V, K> output(BiEntry<K, V> entry) {\n","          return new InverseEntry(entry);\n","        class InverseEntry extends AbstractMapEntry<V, K> {\n","          BiEntry<K, V> delegate;\n","          InverseEntry(BiEntry<K, V> entry) {\n","            this.delegate = entry;\n","          }\n","\n","          @Override\n","          public V getKey() {\n","            return delegate.value;\n","          }\n","\n","          @Override\n","          public K getValue() {\n","            return delegate.key;\n","          }\n","\n","          @Override\n","          public K setValue(K key) {\n","            K oldKey = delegate.key;\n","            int keyHash = smearedHash(key);\n","            if (keyHash == delegate.keyHash && Objects.equal(key, oldKey)) {\n","              return key;\n","            checkArgument(seekByKey(key, keyHash) == null, \"value already present: %s\", key);\n","            delete(delegate);\n","            BiEntry<K, V> newEntry =\n","                new BiEntry<K, V>(key, keyHash, delegate.value, delegate.valueHash);\n","            delegate = newEntry;\n","            insert(newEntry, null);\n","            expectedModCount = modCount;\n","            return oldKey;\n","          }\n"],"delcode":[],"methodSig":" Iterator<Entry<V, K>> entryIterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_355.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_355.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_355.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_355.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_356.txt","newdoc":" This is safe because entries can only get bumped up to earlier in the iteration,\n so they can't get revisited.\n This is safe because entries can only get bumped up to earlier in the iteration,\n so they can't get revisited.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/HashBiMap","pathinproj":"guava/src/com/google/common/collect/HashBiMap.java","addlines":[644,645,647,648,651,652,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,675,676,677,678,679,680,681,684,685],"dellines":[],"addcode":["    Iterator<Entry<V, K>> entryIterator() {\n","      return new Itr<Entry<V, K>>() {\n","        Entry<V, K> output(BiEntry<K, V> entry) {\n","          return new InverseEntry(entry);\n","        class InverseEntry extends AbstractMapEntry<V, K> {\n","          BiEntry<K, V> delegate;\n","          InverseEntry(BiEntry<K, V> entry) {\n","            this.delegate = entry;\n","          }\n","\n","          @Override\n","          public V getKey() {\n","            return delegate.value;\n","          }\n","\n","          @Override\n","          public K getValue() {\n","            return delegate.key;\n","          }\n","\n","          @Override\n","          public K setValue(K key) {\n","            K oldKey = delegate.key;\n","            int keyHash = smearedHash(key);\n","            if (keyHash == delegate.keyHash && Objects.equal(key, oldKey)) {\n","              return key;\n","            checkArgument(seekByKey(key, keyHash) == null, \"value already present: %s\", key);\n","            delete(delegate);\n","            BiEntry<K, V> newEntry =\n","                new BiEntry<K, V>(key, keyHash, delegate.value, delegate.valueHash);\n","            delegate = newEntry;\n","            insert(newEntry, null);\n","            expectedModCount = modCount;\n","            return oldKey;\n","          }\n"],"delcode":[],"methodSig":" Iterator<Entry<V, K>> entryIterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_356.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_356.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_356.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_356.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_357.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_357.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_357.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_357.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/TreeTraverser","pathinproj":"guava/src/com/google/common/collect/TreeTraverser.java","addlines":[112,113,114,115,116,117,118,119,120,121,110,111],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        new Consumer<T>() {\n","          @Override\n","          public void accept(T t) {\n","            action.accept(t);\n","            children(t).forEach(this);\n","          }\n","        }.accept(root);\n","      }\n"],"delcode":[],"methodSig":"public final FluentIterable<T> preOrderTraversal(final T root)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_357.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_357.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_357.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_357.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_358.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_358.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_358.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_358.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/TreeTraverser","pathinproj":"guava/src/com/google/common/collect/TreeTraverser.java","addlines":[112,113,114,115,116,117,118,119,120,121,110,111],"dellines":[],"addcode":["\n","      @Override\n","      public void forEach(Consumer<? super T> action) {\n","        checkNotNull(action);\n","        new Consumer<T>() {\n","          @Override\n","          public void accept(T t) {\n","            action.accept(t);\n","            children(t).forEach(this);\n","          }\n","        }.accept(root);\n","      }\n"],"delcode":[],"methodSig":"public final FluentIterable<T> preOrderTraversal(final T root)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_358.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_358.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_358.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_358.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_359.txt","newdoc":" avoids creating new Entry<K, V2> objects\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[2064,2065,2067,2068,2063],"dellines":[],"addcode":["    @Override\n","    public void forEach(BiConsumer<? super K, ? super V2> action) {\n","      checkNotNull(action);\n","      fromMap.forEach((k, v1) -> action.accept(k, transformer.transformEntry(k, v1)));\n","    }\n"],"delcode":[],"methodSig":"public void forEach(BiConsumer<? super K, ? super V2> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_359.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_359.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_359.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_359.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_360.txt","newdoc":" avoids creating new Entry<K, V2> objects\n avoids creating new Entry<K, V2> objects\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[2064,2065,2067,2068,2063],"dellines":[],"addcode":["    @Override\n","    public void forEach(BiConsumer<? super K, ? super V2> action) {\n","      checkNotNull(action);\n","      fromMap.forEach((k, v1) -> action.accept(k, transformer.transformEntry(k, v1)));\n","    }\n"],"delcode":[],"methodSig":"public void forEach(BiConsumer<? super K, ? super V2> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_360.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_360.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_360.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_360.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_361.txt","newdoc":" Many spliterators will have trySplits that are SUBSIZED even if they are not themselves\n drop this split\n SUBSIZED.\n we can drill down to exactly the smallest nonempty spliterator\n spliterator is known to be nonempty now\n we can't split this any further\n fall back to the last split\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_361.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[256,257,258,260,261,262,263,264,265,267,268,269,270,272,273,274,275,276,277,278,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,243,244,247,249,250,251,252,253,254,255],"dellines":[],"addcode":["  public static <T> java.util.Optional<T> findLast(Stream<T> stream) {\n","    class OptionalState<T> {\n","      boolean set = false;\n","      T value = null;\n","\n","      void set(@Nullable T value) {\n","        this.set = true;\n","        this.value = value;\n","      }\n","\n","      T get() {\n","        checkState(set);\n","        return value;\n","      }\n","    }\n","    OptionalState<T> state = new OptionalState<>();\n","\n","    Deque<Spliterator<T>> splits = new ArrayDeque<>();\n","    splits.addLast(stream.spliterator());\n","\n","    while (!splits.isEmpty()) {\n","      Spliterator<T> spliterator = splits.removeLast();\n","\n","      if (spliterator.getExactSizeIfKnown() == 0) {\n","      }\n","\n","      if (spliterator.hasCharacteristics(Spliterator.SUBSIZED)) {\n","        while (true) {\n","          Spliterator<T> prefix = spliterator.trySplit();\n","          if (prefix == null || prefix.getExactSizeIfKnown() == 0) {\n","            break;\n","          } else if (spliterator.getExactSizeIfKnown() == 0) {\n","            spliterator = prefix;\n","            break;\n","          }\n","        }\n","\n","        spliterator.forEachRemaining(state::set);\n","        return java.util.Optional.of(state.get());\n","      }\n","\n","      Spliterator<T> prefix = spliterator.trySplit();\n","      if (prefix == null || prefix.getExactSizeIfKnown() == 0) {\n","        spliterator.forEachRemaining(state::set);\n","        if (state.set) {\n","          return java.util.Optional.of(state.get());\n","        }\n","        continue;\n","      }\n","      splits.addLast(prefix);\n","      splits.addLast(spliterator);\n","    }\n","    return java.util.Optional.empty();\n","  }\n"],"delcode":[],"methodSig":"public static java.util.Optional<T> findLast(Stream<T> stream)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_361.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_361.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_361.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_361.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_362.txt","newdoc":" Many spliterators will have trySplits that are SUBSIZED even if they are not themselves\n drop this split\n SUBSIZED.\n we can drill down to exactly the smallest nonempty spliterator\n spliterator is known to be nonempty now\n we can't split this any further\n fall back to the last split\n Many spliterators will have trySplits that are SUBSIZED even if they are not themselves\n drop this split\n SUBSIZED.\n we can drill down to exactly the smallest nonempty spliterator\n spliterator is known to be nonempty now\n we can't split this any further\n fall back to the last split\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_362.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[256,257,258,260,261,262,263,264,265,267,268,269,270,272,273,274,275,276,277,278,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,243,244,247,249,250,251,252,253,254,255],"dellines":[],"addcode":["  public static <T> java.util.Optional<T> findLast(Stream<T> stream) {\n","    class OptionalState<T> {\n","      boolean set = false;\n","      T value = null;\n","\n","      void set(@Nullable T value) {\n","        this.set = true;\n","        this.value = value;\n","      }\n","\n","      T get() {\n","        checkState(set);\n","        return value;\n","      }\n","    }\n","    OptionalState<T> state = new OptionalState<>();\n","\n","    Deque<Spliterator<T>> splits = new ArrayDeque<>();\n","    splits.addLast(stream.spliterator());\n","\n","    while (!splits.isEmpty()) {\n","      Spliterator<T> spliterator = splits.removeLast();\n","\n","      if (spliterator.getExactSizeIfKnown() == 0) {\n","      }\n","\n","      if (spliterator.hasCharacteristics(Spliterator.SUBSIZED)) {\n","        while (true) {\n","          Spliterator<T> prefix = spliterator.trySplit();\n","          if (prefix == null || prefix.getExactSizeIfKnown() == 0) {\n","            break;\n","          } else if (spliterator.getExactSizeIfKnown() == 0) {\n","            spliterator = prefix;\n","            break;\n","          }\n","        }\n","\n","        spliterator.forEachRemaining(state::set);\n","        return java.util.Optional.of(state.get());\n","      }\n","\n","      Spliterator<T> prefix = spliterator.trySplit();\n","      if (prefix == null || prefix.getExactSizeIfKnown() == 0) {\n","        spliterator.forEachRemaining(state::set);\n","        if (state.set) {\n","          return java.util.Optional.of(state.get());\n","        }\n","        continue;\n","      }\n","      splits.addLast(prefix);\n","      splits.addLast(spliterator);\n","    }\n","    return java.util.Optional.empty();\n","  }\n"],"delcode":[],"methodSig":"public static java.util.Optional<T> findLast(Stream<T> stream)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_362.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_362.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_362.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_362.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_363.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_363.txt","newdoc":"\n       * This sorting logic leads to a cellSet() ordering that may not be expected and that isn't\n       * documented in the Javadoc. If a row Comparator is provided, cellSet() iterates across the\n       * columns in the first row, the columns in the second row, etc. If a column Comparator is\n       * provided but a row Comparator isn't, cellSet() iterates across the rows in the first\n       * column, the rows in the second column, etc.\n       \n","newJdoc":"","olddoc":"\n       * This sorting logic leads to a cellSet() ordering that may not be expected and that isn't\n       * documented in the Javadoc. If a row Comparator is provided, cellSet() iterates across the\n       * columns in the first row, the columns in the second row, etc. If a column Comparator is\n       * provided but a row Comparator isn't, cellSet() iterates across the rows in the first\n       * column, the rows in the second column, etc.\n       \n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/RegularImmutableTable","pathinproj":"guava/src/com/google/common/collect/RegularImmutableTable.java","addlines":[127],"dellines":[130],"addcode":["      cells.sort(comparator);\n"],"delcode":["      Collections.sort(cells, comparator);\n"],"methodSig":" static RegularImmutableTable<R, C, V> forCells(List<Cell<R, C, V>> cells, @Nullable final Comparator<? super R> rowComparator, @Nullable final Comparator<? super C> columnComparator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_363.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_363.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_363.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_363.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_364.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_364.txt","newdoc":"\n       * This sorting logic leads to a cellSet() ordering that may not be expected and that isn't\n       * documented in the Javadoc. If a row Comparator is provided, cellSet() iterates across the\n       * columns in the first row, the columns in the second row, etc. If a column Comparator is\n       * provided but a row Comparator isn't, cellSet() iterates across the rows in the first\n       * column, the rows in the second column, etc.\n       \n\n       * This sorting logic leads to a cellSet() ordering that may not be expected and that isn't\n       * documented in the Javadoc. If a row Comparator is provided, cellSet() iterates across the\n       * columns in the first row, the columns in the second row, etc. If a column Comparator is\n       * provided but a row Comparator isn't, cellSet() iterates across the rows in the first\n       * column, the rows in the second column, etc.\n       \n","newJdoc":"","olddoc":"\n       * This sorting logic leads to a cellSet() ordering that may not be expected and that isn't\n       * documented in the Javadoc. If a row Comparator is provided, cellSet() iterates across the\n       * columns in the first row, the columns in the second row, etc. If a column Comparator is\n       * provided but a row Comparator isn't, cellSet() iterates across the rows in the first\n       * column, the rows in the second column, etc.\n       \n\n       * This sorting logic leads to a cellSet() ordering that may not be expected and that isn't\n       * documented in the Javadoc. If a row Comparator is provided, cellSet() iterates across the\n       * columns in the first row, the columns in the second row, etc. If a column Comparator is\n       * provided but a row Comparator isn't, cellSet() iterates across the rows in the first\n       * column, the rows in the second column, etc.\n       \n","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/RegularImmutableTable","pathinproj":"guava/src/com/google/common/collect/RegularImmutableTable.java","addlines":[127],"dellines":[130],"addcode":["      cells.sort(comparator);\n"],"delcode":["      Collections.sort(cells, comparator);\n"],"methodSig":" static RegularImmutableTable<R, C, V> forCells(List<Cell<R, C, V>> cells, @Nullable final Comparator<? super R> rowComparator, @Nullable final Comparator<? super C> columnComparator)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_364.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_364.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_364.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_364.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_365.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMapEntrySet","pathinproj":"guava/src/com/google/common/collect/ImmutableMapEntrySet.java","addlines":[64,65,66,67,68,69,63],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super Entry<K, V>> action) {\n","      checkNotNull(action);\n","      for (Entry<K, V> entry : entries) {\n","        action.accept(entry);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super Entry<K, V>> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_365.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_365.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_365.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_365.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_366.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMapEntrySet","pathinproj":"guava/src/com/google/common/collect/ImmutableMapEntrySet.java","addlines":[64,65,66,67,68,69,63],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super Entry<K, V>> action) {\n","      checkNotNull(action);\n","      for (Entry<K, V> entry : entries) {\n","        action.accept(entry);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super Entry<K, V>> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_366.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_366.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_366.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_366.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_367.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableTable","pathinproj":"guava/src/com/google/common/collect/ImmutableTable.java","addlines":[246,247,248,249],"dellines":[],"addcode":["    Builder<R, C, V> combine(Builder<R, C, V> other) {\n","      this.cells.addAll(other.cells);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<R, C, V> combine(Builder<R, C, V> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_367.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_367.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_367.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_367.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_368.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableTable","pathinproj":"guava/src/com/google/common/collect/ImmutableTable.java","addlines":[246,247,248,249],"dellines":[],"addcode":["    Builder<R, C, V> combine(Builder<R, C, V> other) {\n","      this.cells.addAll(other.cells);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<R, C, V> combine(Builder<R, C, V> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_368.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_368.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_368.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_368.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_369.txt","newdoc":" don't need Set semantics\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_369.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[704,697,698,699,701,702,703],"dellines":[],"addcode":["  private static Collection<IOException> addException(\n","      @Nullable Collection<IOException> exceptions, IOException e) {\n","    if (exceptions == null) {\n","    }\n","    exceptions.add(e);\n","    return exceptions;\n","  }\n"],"delcode":[],"methodSig":"private static Collection<IOException> addException(@Nullable Collection<IOException> exceptions, IOException e)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_369.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_369.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_369.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_369.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_370.txt","newdoc":" don't need Set semantics\n don't need Set semantics\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_370.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[704,697,698,699,701,702,703],"dellines":[],"addcode":["  private static Collection<IOException> addException(\n","      @Nullable Collection<IOException> exceptions, IOException e) {\n","    if (exceptions == null) {\n","    }\n","    exceptions.add(e);\n","    return exceptions;\n","  }\n"],"delcode":[],"methodSig":"private static Collection<IOException> addException(@Nullable Collection<IOException> exceptions, IOException e)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_370.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_370.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_370.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_370.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_371.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/StandardTable","pathinproj":"guava/src/com/google/common/collect/StandardTable.java","addlines":[389,390,391,392,393,394,395,396],"dellines":[],"addcode":["    @Override\n","    Spliterator<Entry<C, V>> entrySpliterator() {\n","      Map<C, V> map = backingRowMap();\n","      if (map == null) {\n","        return Spliterators.emptySpliterator();\n","      }\n","      return CollectSpliterators.map(map.entrySet().spliterator(), this::wrapEntry);\n","    }\n"],"delcode":[],"methodSig":" Spliterator<Entry<C, V>> entrySpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_371.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_371.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_371.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_371.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_372.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/StandardTable","pathinproj":"guava/src/com/google/common/collect/StandardTable.java","addlines":[389,390,391,392,393,394,395,396],"dellines":[],"addcode":["    @Override\n","    Spliterator<Entry<C, V>> entrySpliterator() {\n","      Map<C, V> map = backingRowMap();\n","      if (map == null) {\n","        return Spliterators.emptySpliterator();\n","      }\n","      return CollectSpliterators.map(map.entrySet().spliterator(), this::wrapEntry);\n","    }\n"],"delcode":[],"methodSig":" Spliterator<Entry<C, V>> entrySpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_372.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_372.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_372.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_372.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_373.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_373.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multiset","pathinproj":"guava/src/com/google/common/collect/Multiset.java","addlines":[480,481,482,483,484,485,486,487,488,489,490,491,492],"dellines":[],"addcode":["  @Override\n","  default void forEach(Consumer<? super E> action) {\n","    checkNotNull(action);\n","    entrySet()\n","        .forEach(\n","            entry -> {\n","              E elem = entry.getElement();\n","              int count = entry.getCount();\n","              for (int i = 0; i < count; i++) {\n","                action.accept(elem);\n","              }\n","            });\n","  }\n"],"delcode":[],"methodSig":" void forEach(Consumer<? super E> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_373.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_373.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_373.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_373.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_374.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_374.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Multiset","pathinproj":"guava/src/com/google/common/collect/Multiset.java","addlines":[480,481,482,483,484,485,486,487,488,489,490,491,492],"dellines":[],"addcode":["  @Override\n","  default void forEach(Consumer<? super E> action) {\n","    checkNotNull(action);\n","    entrySet()\n","        .forEach(\n","            entry -> {\n","              E elem = entry.getElement();\n","              int count = entry.getCount();\n","              for (int i = 0; i < count; i++) {\n","                action.accept(elem);\n","              }\n","            });\n","  }\n"],"delcode":[],"methodSig":" void forEach(Consumer<? super E> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_374.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_374.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_374.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_374.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_375.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148],"dellines":[],"addcode":["    ToOptionalState combine(ToOptionalState other) {\n","      if (element == null) {\n","        return other;\n","      } else if (other.element == null) {\n","        return this;\n","      } else {\n","        if (extras == null) {\n","          extras = new ArrayList<>();\n","        }\n","        extras.add(other.element);\n","        if (other.extras != null) {\n","          this.extras.addAll(other.extras);\n","        }\n","        if (extras.size() > MAX_EXTRAS) {\n","          extras.subList(MAX_EXTRAS, extras.size()).clear();\n","          throw multiples(true);\n","        }\n","        return this;\n","      }\n","    }\n"],"delcode":[],"methodSig":" ToOptionalState combine(ToOptionalState other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_375.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_375.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_375.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_375.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_376.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreCollectors","pathinproj":"guava/src/com/google/common/collect/MoreCollectors.java","addlines":[129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148],"dellines":[],"addcode":["    ToOptionalState combine(ToOptionalState other) {\n","      if (element == null) {\n","        return other;\n","      } else if (other.element == null) {\n","        return this;\n","      } else {\n","        if (extras == null) {\n","          extras = new ArrayList<>();\n","        }\n","        extras.add(other.element);\n","        if (other.extras != null) {\n","          this.extras.addAll(other.extras);\n","        }\n","        if (extras.size() > MAX_EXTRAS) {\n","          extras.subList(MAX_EXTRAS, extras.size()).clear();\n","          throw multiples(true);\n","        }\n","        return this;\n","      }\n","    }\n"],"delcode":[],"methodSig":" ToOptionalState combine(ToOptionalState other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_376.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_376.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_376.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_376.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_377.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_377.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectSpliterators","pathinproj":"guava/src/com/google/common/collect/CollectSpliterators.java","addlines":[138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190],"dellines":[],"addcode":["  static <T> Spliterator<T> filter(Spliterator<T> fromSpliterator, Predicate<? super T> predicate) {\n","    checkNotNull(fromSpliterator);\n","    checkNotNull(predicate);\n","    class Splitr implements Spliterator<T>, Consumer<T> {\n","      T holder = null;\n","\n","      @Override\n","      public void accept(T t) {\n","        this.holder = t;\n","      }\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super T> action) {\n","        while (fromSpliterator.tryAdvance(this)) {\n","          try {\n","            if (predicate.test(holder)) {\n","              action.accept(holder);\n","              return true;\n","            }\n","          } finally {\n","            holder = null;\n","          }\n","        }\n","        return false;\n","      }\n","\n","      @Override\n","      public Spliterator<T> trySplit() {\n","        Spliterator<T> fromSplit = fromSpliterator.trySplit();\n","        return (fromSplit == null) ? null : filter(fromSplit, predicate);\n","      }\n","\n","      @Override\n","      public long estimateSize() {\n","        return fromSpliterator.estimateSize() / 2;\n","      }\n","\n","      @Override\n","      public Comparator<? super T> getComparator() {\n","        return fromSpliterator.getComparator();\n","      }\n","\n","      @Override\n","      public int characteristics() {\n","        return fromSpliterator.characteristics()\n","            & (Spliterator.DISTINCT\n","                | Spliterator.NONNULL\n","                | Spliterator.ORDERED\n","                | Spliterator.SORTED);\n","      }\n","    }\n","    return new Splitr();\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<T> filter(Spliterator<T> fromSpliterator, Predicate<? super T> predicate)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_377.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_377.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_377.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_377.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_378.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_378.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectSpliterators","pathinproj":"guava/src/com/google/common/collect/CollectSpliterators.java","addlines":[138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190],"dellines":[],"addcode":["  static <T> Spliterator<T> filter(Spliterator<T> fromSpliterator, Predicate<? super T> predicate) {\n","    checkNotNull(fromSpliterator);\n","    checkNotNull(predicate);\n","    class Splitr implements Spliterator<T>, Consumer<T> {\n","      T holder = null;\n","\n","      @Override\n","      public void accept(T t) {\n","        this.holder = t;\n","      }\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super T> action) {\n","        while (fromSpliterator.tryAdvance(this)) {\n","          try {\n","            if (predicate.test(holder)) {\n","              action.accept(holder);\n","              return true;\n","            }\n","          } finally {\n","            holder = null;\n","          }\n","        }\n","        return false;\n","      }\n","\n","      @Override\n","      public Spliterator<T> trySplit() {\n","        Spliterator<T> fromSplit = fromSpliterator.trySplit();\n","        return (fromSplit == null) ? null : filter(fromSplit, predicate);\n","      }\n","\n","      @Override\n","      public long estimateSize() {\n","        return fromSpliterator.estimateSize() / 2;\n","      }\n","\n","      @Override\n","      public Comparator<? super T> getComparator() {\n","        return fromSpliterator.getComparator();\n","      }\n","\n","      @Override\n","      public int characteristics() {\n","        return fromSpliterator.characteristics()\n","            & (Spliterator.DISTINCT\n","                | Spliterator.NONNULL\n","                | Spliterator.ORDERED\n","                | Spliterator.SORTED);\n","      }\n","    }\n","    return new Splitr();\n","  }\n"],"delcode":[],"methodSig":" static Spliterator<T> filter(Spliterator<T> fromSpliterator, Predicate<? super T> predicate)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_378.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_378.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_378.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_378.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_379.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_379.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_379.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_379.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[384,380,381,382,383],"dellines":[],"addcode":["      @Override\n","      public Spliterator<T> spliterator() {\n","        return Stream.generate(() -> iterable).flatMap(Streams::stream).spliterator();\n","      }\n","\n"],"delcode":[],"methodSig":"public static Iterable<T> cycle(final Iterable<T> iterable)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_379.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_379.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_379.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_379.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_380.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_380.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_380.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_380.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[384,380,381,382,383],"dellines":[],"addcode":["      @Override\n","      public Spliterator<T> spliterator() {\n","        return Stream.generate(() -> iterable).flatMap(Streams::stream).spliterator();\n","      }\n","\n"],"delcode":[],"methodSig":"public static Iterable<T> cycle(final Iterable<T> iterable)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_380.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_380.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_380.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_380.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_381.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_381.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1189,1190,1191,1192,1193,1194],"dellines":[],"addcode":["    @Override\n","    public boolean remove(Object key, Object value) {\n","      synchronized (mutex) {\n","        return delegate().remove(key, value);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public boolean remove(Object key, Object value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_381.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_381.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_381.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_381.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_382.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_382.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1189,1190,1191,1192,1193,1194],"dellines":[],"addcode":["    @Override\n","    public boolean remove(Object key, Object value) {\n","      synchronized (mutex) {\n","        return delegate().remove(key, value);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public boolean remove(Object key, Object value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_382.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_382.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_382.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_382.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_383.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ArrayTable","pathinproj":"guava/src/com/google/common/collect/ArrayTable.java","addlines":[800,801,194,195,196,798,799],"dellines":[],"addcode":["  @Override\n","  Spliterator<V> valuesSpliterator() {\n","    return CollectSpliterators.indexed(size(), Spliterator.ORDERED, this::getValue);\n","  }\n","  Spliterator<V> valuesSpliterator() {\n","    return CollectSpliterators.map(cellSpliterator(), Table.Cell::getValue);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<V> valuesSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_383.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_383.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_383.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_383.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_384.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ArrayTable","pathinproj":"guava/src/com/google/common/collect/ArrayTable.java","addlines":[800,801,194,195,196,798,799],"dellines":[],"addcode":["  @Override\n","  Spliterator<V> valuesSpliterator() {\n","    return CollectSpliterators.indexed(size(), Spliterator.ORDERED, this::getValue);\n","  }\n","  Spliterator<V> valuesSpliterator() {\n","    return CollectSpliterators.map(cellSpliterator(), Table.Cell::getValue);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<V> valuesSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_384.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_384.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_384.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_384.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_385.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_385.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493],"dellines":[],"addcode":["  public static <T, R> Stream<R> mapWithIndex(\n","      Stream<T> stream, FunctionWithIndex<? super T, ? extends R> function) {\n","    checkNotNull(stream);\n","    checkNotNull(function);\n","    boolean isParallel = stream.isParallel();\n","    Spliterator<T> fromSpliterator = stream.spliterator();\n","\n","    if (!fromSpliterator.hasCharacteristics(Spliterator.SUBSIZED)) {\n","      Iterator<T> fromIterator = Spliterators.iterator(fromSpliterator);\n","      return StreamSupport.stream(\n","          new AbstractSpliterator<R>(\n","              fromSpliterator.estimateSize(),\n","              fromSpliterator.characteristics() & (Spliterator.ORDERED | Spliterator.SIZED)) {\n","            long index = 0;\n","\n","            @Override\n","            public boolean tryAdvance(Consumer<? super R> action) {\n","              if (fromIterator.hasNext()) {\n","                action.accept(function.apply(fromIterator.next(), index++));\n","                return true;\n","              }\n","              return false;\n","            }\n","          },\n","          isParallel);\n","    }\n","    class Splitr implements Spliterator<R>, Consumer<T> {\n","      final Spliterator<T> splitr;\n","      long index;\n","      T holder = null;\n","\n","      Splitr(Spliterator<T> splitr, long index) {\n","        this.splitr = splitr;\n","        this.index = index;\n","      }\n","\n","      @Override\n","      public void accept(@Nullable T t) {\n","        this.holder = t;\n","      }\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super R> action) {\n","        if (splitr.tryAdvance(this)) {\n","          try {\n","            action.accept(function.apply(holder, index++));\n","            return true;\n","          } finally {\n","            holder = null;\n","          }\n","        }\n","        return false;\n","      }\n","\n","      @Override\n","      public Spliterator<R> trySplit() {\n","        Spliterator<T> split = splitr.trySplit();\n","        if (split == null) {\n","          return null;\n","        }\n","        Spliterator<R> result = new Splitr(split, index);\n","        this.index += split.getExactSizeIfKnown();\n","        return result;\n","      }\n","\n","      @Override\n","      public long estimateSize() {\n","        return splitr.estimateSize();\n","      }\n","\n","      @Override\n","      public int characteristics() {\n","        return splitr.characteristics()\n","            & (Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED);\n","      }\n","    }\n","    return StreamSupport.stream(new Splitr(fromSpliterator, 0), isParallel);\n","  }\n"],"delcode":[],"methodSig":"public static Stream<R> mapWithIndex(Stream<T> stream, FunctionWithIndex<? super T, ? extends R> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_385.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_385.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_385.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_385.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_386.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_386.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493],"dellines":[],"addcode":["  public static <T, R> Stream<R> mapWithIndex(\n","      Stream<T> stream, FunctionWithIndex<? super T, ? extends R> function) {\n","    checkNotNull(stream);\n","    checkNotNull(function);\n","    boolean isParallel = stream.isParallel();\n","    Spliterator<T> fromSpliterator = stream.spliterator();\n","\n","    if (!fromSpliterator.hasCharacteristics(Spliterator.SUBSIZED)) {\n","      Iterator<T> fromIterator = Spliterators.iterator(fromSpliterator);\n","      return StreamSupport.stream(\n","          new AbstractSpliterator<R>(\n","              fromSpliterator.estimateSize(),\n","              fromSpliterator.characteristics() & (Spliterator.ORDERED | Spliterator.SIZED)) {\n","            long index = 0;\n","\n","            @Override\n","            public boolean tryAdvance(Consumer<? super R> action) {\n","              if (fromIterator.hasNext()) {\n","                action.accept(function.apply(fromIterator.next(), index++));\n","                return true;\n","              }\n","              return false;\n","            }\n","          },\n","          isParallel);\n","    }\n","    class Splitr implements Spliterator<R>, Consumer<T> {\n","      final Spliterator<T> splitr;\n","      long index;\n","      T holder = null;\n","\n","      Splitr(Spliterator<T> splitr, long index) {\n","        this.splitr = splitr;\n","        this.index = index;\n","      }\n","\n","      @Override\n","      public void accept(@Nullable T t) {\n","        this.holder = t;\n","      }\n","\n","      @Override\n","      public boolean tryAdvance(Consumer<? super R> action) {\n","        if (splitr.tryAdvance(this)) {\n","          try {\n","            action.accept(function.apply(holder, index++));\n","            return true;\n","          } finally {\n","            holder = null;\n","          }\n","        }\n","        return false;\n","      }\n","\n","      @Override\n","      public Spliterator<R> trySplit() {\n","        Spliterator<T> split = splitr.trySplit();\n","        if (split == null) {\n","          return null;\n","        }\n","        Spliterator<R> result = new Splitr(split, index);\n","        this.index += split.getExactSizeIfKnown();\n","        return result;\n","      }\n","\n","      @Override\n","      public long estimateSize() {\n","        return splitr.estimateSize();\n","      }\n","\n","      @Override\n","      public int characteristics() {\n","        return splitr.characteristics()\n","            & (Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED);\n","      }\n","    }\n","    return StreamSupport.stream(new Splitr(fromSpliterator, 0), isParallel);\n","  }\n"],"delcode":[],"methodSig":"public static Stream<R> mapWithIndex(Stream<T> stream, FunctionWithIndex<? super T, ? extends R> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_386.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_386.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_386.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_386.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_387.txt","newdoc":" findLast(Stream) does some allocation, so we might as well box some more\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_387.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[328,330,331,332],"dellines":[],"addcode":["  public static OptionalDouble findLast(DoubleStream stream) {\n","    java.util.Optional<Double> boxedLast = findLast(stream.boxed());\n","    return boxedLast.isPresent() ? OptionalDouble.of(boxedLast.get()) : OptionalDouble.empty();\n","  }\n"],"delcode":[],"methodSig":"public static OptionalDouble findLast(DoubleStream stream)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_387.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_387.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_387.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_387.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_388.txt","newdoc":" findLast(Stream) does some allocation, so we might as well box some more\n findLast(Stream) does some allocation, so we might as well box some more\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_388.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[328,330,331,332],"dellines":[],"addcode":["  public static OptionalDouble findLast(DoubleStream stream) {\n","    java.util.Optional<Double> boxedLast = findLast(stream.boxed());\n","    return boxedLast.isPresent() ? OptionalDouble.of(boxedLast.get()) : OptionalDouble.empty();\n","  }\n"],"delcode":[],"methodSig":"public static OptionalDouble findLast(DoubleStream stream)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_388.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_388.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_388.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_388.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_389.txt","newdoc":"\n     * We will always fail if there are duplicate keys, and the keys are always sorted by\n     * the Comparator, so the entries can come in in arbitrary order -- so we report UNORDERED.\n     \n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[72,73,74,75,76,77,78,83,84,85,86,87,88,89],"dellines":[],"addcode":["  static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n","      Comparator<? super K> comparator,\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(comparator);\n","    checkNotNull(keyFunction);\n","    checkNotNull(valueFunction);\n","    return Collector.of(\n","        () -> new ImmutableSortedMap.Builder<K, V>(comparator),\n","        (builder, input) -> builder.put(keyFunction.apply(input), valueFunction.apply(input)),\n","        ImmutableSortedMap.Builder::combine,\n","        ImmutableSortedMap.Builder::build,\n","        Collector.Characteristics.UNORDERED);\n","  }\n"],"delcode":[],"methodSig":" static Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_389.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_389.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_389.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_389.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_390.txt","newdoc":"\n     * We will always fail if there are duplicate keys, and the keys are always sorted by\n     * the Comparator, so the entries can come in in arbitrary order -- so we report UNORDERED.\n     \n\n     * We will always fail if there are duplicate keys, and the keys are always sorted by\n     * the Comparator, so the entries can come in in arbitrary order -- so we report UNORDERED.\n     \n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[72,73,74,75,76,77,78,83,84,85,86,87,88,89],"dellines":[],"addcode":["  static <T, K, V> Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(\n","      Comparator<? super K> comparator,\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(comparator);\n","    checkNotNull(keyFunction);\n","    checkNotNull(valueFunction);\n","    return Collector.of(\n","        () -> new ImmutableSortedMap.Builder<K, V>(comparator),\n","        (builder, input) -> builder.put(keyFunction.apply(input), valueFunction.apply(input)),\n","        ImmutableSortedMap.Builder::combine,\n","        ImmutableSortedMap.Builder::build,\n","        Collector.Characteristics.UNORDERED);\n","  }\n"],"delcode":[],"methodSig":" static Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_390.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_390.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_390.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_390.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_391.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMultimap","pathinproj":"guava/src/com/google/common/collect/AbstractMultimap.java","addlines":[1216,576,1217,232,233,234,1213,573,1214,574,1215,575],"dellines":[],"addcode":["  Spliterator<V> valueSpliterator() {\n","    return Spliterators.spliterator(valueIterator(), size(), 0);\n","  }\n","  @Override\n","  Spliterator<V> valueSpliterator() {\n","    return CollectSpliterators.flatMap(\n","        map.values().spliterator(), Collection::spliterator, Spliterator.SIZED, size());\n","  }\n","  @Override\n","  Spliterator<V> valueSpliterator() {\n","    return CollectSpliterators.map(entrySpliterator(), Entry::getValue);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<V> valueSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_391.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_391.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_391.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_391.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_392.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMultimap","pathinproj":"guava/src/com/google/common/collect/AbstractMultimap.java","addlines":[1216,576,1217,232,233,234,1213,573,1214,574,1215,575],"dellines":[],"addcode":["  Spliterator<V> valueSpliterator() {\n","    return Spliterators.spliterator(valueIterator(), size(), 0);\n","  }\n","  @Override\n","  Spliterator<V> valueSpliterator() {\n","    return CollectSpliterators.flatMap(\n","        map.values().spliterator(), Collection::spliterator, Spliterator.SIZED, size());\n","  }\n","  @Override\n","  Spliterator<V> valueSpliterator() {\n","    return CollectSpliterators.map(entrySpliterator(), Entry::getValue);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<V> valueSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_392.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_392.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_392.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_392.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_393.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMultimap","pathinproj":"guava/src/com/google/common/collect/AbstractMultimap.java","addlines":[1216,576,1217,232,233,234,1213,573,1214,574,1215,575],"dellines":[],"addcode":["  Spliterator<V> valueSpliterator() {\n","    return Spliterators.spliterator(valueIterator(), size(), 0);\n","  }\n","  @Override\n","  Spliterator<V> valueSpliterator() {\n","    return CollectSpliterators.flatMap(\n","        map.values().spliterator(), Collection::spliterator, Spliterator.SIZED, size());\n","  }\n","  @Override\n","  Spliterator<V> valueSpliterator() {\n","    return CollectSpliterators.map(entrySpliterator(), Entry::getValue);\n","  }\n"],"delcode":[],"methodSig":" Spliterator<V> valueSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_393.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_393.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_393.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_393.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_394.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[48,49,50,44,45,46,47],"dellines":[],"addcode":["  static <E> Collector<E, ?, ImmutableList<E>> toImmutableList() {\n","    return Collector.of(\n","        ImmutableList::<E>builder,\n","        ImmutableList.Builder::add,\n","        ImmutableList.Builder::combine,\n","        ImmutableList.Builder::build);\n","  }\n"],"delcode":[],"methodSig":" static Collector<E, ?, ImmutableList<E>> toImmutableList()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_394.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_394.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_394.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_394.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_395.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[48,49,50,44,45,46,47],"dellines":[],"addcode":["  static <E> Collector<E, ?, ImmutableList<E>> toImmutableList() {\n","    return Collector.of(\n","        ImmutableList::<E>builder,\n","        ImmutableList.Builder::add,\n","        ImmutableList.Builder::combine,\n","        ImmutableList.Builder::build);\n","  }\n"],"delcode":[],"methodSig":" static Collector<E, ?, ImmutableList<E>> toImmutableList()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_395.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_395.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_395.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_395.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_396.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/CollectCollectors","pathinproj":"guava/src/com/google/common/collect/CollectCollectors.java","addlines":[48,49,50,44,45,46,47],"dellines":[],"addcode":["  static <E> Collector<E, ?, ImmutableList<E>> toImmutableList() {\n","    return Collector.of(\n","        ImmutableList::<E>builder,\n","        ImmutableList.Builder::add,\n","        ImmutableList.Builder::combine,\n","        ImmutableList.Builder::build);\n","  }\n"],"delcode":[],"methodSig":" static Collector<E, ?, ImmutableList<E>> toImmutableList()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_396.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_396.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_396.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_396.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_397.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1145,1146,1147,1148,1149,1150,1151],"dellines":[],"addcode":["    @Override\n","    public V computeIfPresent(\n","        K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n","      synchronized (mutex) {\n","        return delegate().computeIfPresent(key, remappingFunction);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_397.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_397.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_397.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_397.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_398.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1145,1146,1147,1148,1149,1150,1151],"dellines":[],"addcode":["    @Override\n","    public V computeIfPresent(\n","        K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n","      synchronized (mutex) {\n","        return delegate().computeIfPresent(key, remappingFunction);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_398.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_398.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_398.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_398.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_399.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[1145,1146,1147,1148,1149,1150,1151],"dellines":[],"addcode":["    @Override\n","    public V computeIfPresent(\n","        K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n","      synchronized (mutex) {\n","        return delegate().computeIfPresent(key, remappingFunction);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_399.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_399.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_399.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_399.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_400.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableCollection_2","pathinproj":"guava/src/com/google/common/collect/ImmutableCollection.java","addlines":[503,504,505,506,507,508,509,510],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    ArrayBasedBuilder<E> combine(ArrayBasedBuilder<E> builder) {\n","      checkNotNull(builder);\n","      ensureCapacity(size + builder.size);\n","      System.arraycopy(builder.contents, 0, this.contents, size, builder.size);\n","      size += builder.size;\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" ArrayBasedBuilder<E> combine(ArrayBasedBuilder<E> builder)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_400.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_400.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_400.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_400.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_401.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableCollection_2","pathinproj":"guava/src/com/google/common/collect/ImmutableCollection.java","addlines":[503,504,505,506,507,508,509,510],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    ArrayBasedBuilder<E> combine(ArrayBasedBuilder<E> builder) {\n","      checkNotNull(builder);\n","      ensureCapacity(size + builder.size);\n","      System.arraycopy(builder.contents, 0, this.contents, size, builder.size);\n","      size += builder.size;\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" ArrayBasedBuilder<E> combine(ArrayBasedBuilder<E> builder)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_401.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_401.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_401.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_401.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_402.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableCollection_2","pathinproj":"guava/src/com/google/common/collect/ImmutableCollection.java","addlines":[503,504,505,506,507,508,509,510],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    ArrayBasedBuilder<E> combine(ArrayBasedBuilder<E> builder) {\n","      checkNotNull(builder);\n","      ensureCapacity(size + builder.size);\n","      System.arraycopy(builder.contents, 0, this.contents, size, builder.size);\n","      size += builder.size;\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" ArrayBasedBuilder<E> combine(ArrayBasedBuilder<E> builder)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_402.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_402.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_402.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_402.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_403.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_403.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_403.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_403.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[593,594,595,596,597],"dellines":[419],"addcode":["  @Deprecated\n","  @Override\n","  public final V remove(Object o) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":["  public final V remove(Object o) {\n"],"methodSig":"public final V remove(Object o)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_403.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_403.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_403.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_403.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_404.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_404.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_404.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_404.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[593,594,595,596,597],"dellines":[419],"addcode":["  @Deprecated\n","  @Override\n","  public final V remove(Object o) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":["  public final V remove(Object o) {\n"],"methodSig":"public final V remove(Object o)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_404.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_404.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_404.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_404.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_405.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_405.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_405.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_405.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[593,594,595,596,597],"dellines":[419],"addcode":["  @Deprecated\n","  @Override\n","  public final V remove(Object o) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":["  public final V remove(Object o) {\n"],"methodSig":"public final V remove(Object o)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_405.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_405.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_405.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_405.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_406.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_406.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[531,532,533,534,535,536],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V computeIfPresent(\n","      K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_406.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_406.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_406.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_406.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_407.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_407.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[531,532,533,534,535,536],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V computeIfPresent(\n","      K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_407.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_407.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_407.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_407.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_408.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_408.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[531,532,533,534,535,536],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V computeIfPresent(\n","      K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_408.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_408.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_408.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_408.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_409.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_409.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableListMultimap","pathinproj":"guava/src/com/google/common/collect/ImmutableListMultimap.java","addlines":[80,81,82,83,84,85,86,87,88,89,78,79],"dellines":[],"addcode":["  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableListMultimap<K, V>> toImmutableListMultimap(\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(keyFunction, \"keyFunction\");\n","    checkNotNull(valueFunction, \"valueFunction\");\n","    return Collector.of(\n","        ImmutableListMultimap::<K, V>builder,\n","        (builder, t) -> builder.put(keyFunction.apply(t), valueFunction.apply(t)),\n","        ImmutableListMultimap.Builder::combine,\n","        ImmutableListMultimap.Builder::build);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableListMultimap<K, V>> toImmutableListMultimap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_409.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_409.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_409.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_409.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_410.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_410.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableListMultimap","pathinproj":"guava/src/com/google/common/collect/ImmutableListMultimap.java","addlines":[80,81,82,83,84,85,86,87,88,89,78,79],"dellines":[],"addcode":["  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableListMultimap<K, V>> toImmutableListMultimap(\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(keyFunction, \"keyFunction\");\n","    checkNotNull(valueFunction, \"valueFunction\");\n","    return Collector.of(\n","        ImmutableListMultimap::<K, V>builder,\n","        (builder, t) -> builder.put(keyFunction.apply(t), valueFunction.apply(t)),\n","        ImmutableListMultimap.Builder::combine,\n","        ImmutableListMultimap.Builder::build);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableListMultimap<K, V>> toImmutableListMultimap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_410.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_410.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_410.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_410.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_411.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_411.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableListMultimap","pathinproj":"guava/src/com/google/common/collect/ImmutableListMultimap.java","addlines":[80,81,82,83,84,85,86,87,88,89,78,79],"dellines":[],"addcode":["  @Beta\n","  public static <T, K, V> Collector<T, ?, ImmutableListMultimap<K, V>> toImmutableListMultimap(\n","      Function<? super T, ? extends K> keyFunction,\n","      Function<? super T, ? extends V> valueFunction) {\n","    checkNotNull(keyFunction, \"keyFunction\");\n","    checkNotNull(valueFunction, \"valueFunction\");\n","    return Collector.of(\n","        ImmutableListMultimap::<K, V>builder,\n","        (builder, t) -> builder.put(keyFunction.apply(t), valueFunction.apply(t)),\n","        ImmutableListMultimap.Builder::combine,\n","        ImmutableListMultimap.Builder::build);\n","  }\n"],"delcode":[],"methodSig":"public static Collector<T, ?, ImmutableListMultimap<K, V>> toImmutableListMultimap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_411.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_411.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_411.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_411.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_412.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_412.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[56,57,58,59,60],"dellines":[],"addcode":["  public static <T> Stream<T> stream(Iterable<T> iterable) {\n","    return (iterable instanceof Collection)\n","        ? ((Collection<T>) iterable).stream()\n","        : StreamSupport.stream(iterable.spliterator(), false);\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(Iterable<T> iterable)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_412.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_412.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_412.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_412.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_413.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_413.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[56,57,58,59,60],"dellines":[],"addcode":["  public static <T> Stream<T> stream(Iterable<T> iterable) {\n","    return (iterable instanceof Collection)\n","        ? ((Collection<T>) iterable).stream()\n","        : StreamSupport.stream(iterable.spliterator(), false);\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(Iterable<T> iterable)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_413.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_413.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_413.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_413.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_414.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_414.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[56,57,58,59,60],"dellines":[],"addcode":["  public static <T> Stream<T> stream(Iterable<T> iterable) {\n","    return (iterable instanceof Collection)\n","        ? ((Collection<T>) iterable).stream()\n","        : StreamSupport.stream(iterable.spliterator(), false);\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(Iterable<T> iterable)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_414.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_414.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_414.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_414.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_415.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSet_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSet.java","addlines":[385,386,387,388,389,390,391,392,404,405,406,407,408,409,410,411],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super E> consumer) {\n","      checkNotNull(consumer);\n","      int n = size();\n","      for (int i = 0; i < n; i++) {\n","        consumer.accept(get(i));\n","      }\n","    }\n","  @Override\n","  public void forEach(Consumer<? super E> consumer) {\n","    checkNotNull(consumer);\n","    int n = size();\n","    for (int i = 0; i < n; i++) {\n","      consumer.accept(get(i));\n","    }\n","  }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super E> consumer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_415.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_415.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_415.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_415.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_416.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSet_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSet.java","addlines":[385,386,387,388,389,390,391,392,404,405,406,407,408,409,410,411],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super E> consumer) {\n","      checkNotNull(consumer);\n","      int n = size();\n","      for (int i = 0; i < n; i++) {\n","        consumer.accept(get(i));\n","      }\n","    }\n","  @Override\n","  public void forEach(Consumer<? super E> consumer) {\n","    checkNotNull(consumer);\n","    int n = size();\n","    for (int i = 0; i < n; i++) {\n","      consumer.accept(get(i));\n","    }\n","  }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super E> consumer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_416.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_416.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_416.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_416.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_417.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSet_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSet.java","addlines":[385,386,387,388,389,390,391,392,404,405,406,407,408,409,410,411],"dellines":[],"addcode":["    @Override\n","    public void forEach(Consumer<? super E> consumer) {\n","      checkNotNull(consumer);\n","      int n = size();\n","      for (int i = 0; i < n; i++) {\n","        consumer.accept(get(i));\n","      }\n","    }\n","  @Override\n","  public void forEach(Consumer<? super E> consumer) {\n","    checkNotNull(consumer);\n","    int n = size();\n","    for (int i = 0; i < n; i++) {\n","      consumer.accept(get(i));\n","    }\n","  }\n"],"delcode":[],"methodSig":"public void forEach(Consumer<? super E> consumer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_417.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_417.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_417.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_417.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_418.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[112,113,114,115,111],"dellines":[],"addcode":["    private BasicFileAttributes readAttributes() throws IOException {\n","      return Files.readAttributes(\n","          path, BasicFileAttributes.class,\n","          followLinks ? FOLLOW_LINKS : new LinkOption[] { NOFOLLOW_LINKS });\n","    }\n"],"delcode":[],"methodSig":"private BasicFileAttributes readAttributes() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_418.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_418.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_418.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_418.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_419.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[112,113,114,115,111],"dellines":[],"addcode":["    private BasicFileAttributes readAttributes() throws IOException {\n","      return Files.readAttributes(\n","          path, BasicFileAttributes.class,\n","          followLinks ? FOLLOW_LINKS : new LinkOption[] { NOFOLLOW_LINKS });\n","    }\n"],"delcode":[],"methodSig":"private BasicFileAttributes readAttributes() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_419.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_419.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_419.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_419.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_420.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[112,113,114,115,111],"dellines":[],"addcode":["    private BasicFileAttributes readAttributes() throws IOException {\n","      return Files.readAttributes(\n","          path, BasicFileAttributes.class,\n","          followLinks ? FOLLOW_LINKS : new LinkOption[] { NOFOLLOW_LINKS });\n","    }\n"],"delcode":[],"methodSig":"private BasicFileAttributes readAttributes() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_420.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_420.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_420.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_420.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_421.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/BinaryTreeTraverser","pathinproj":"guava/src/com/google/common/collect/BinaryTreeTraverser.java","addlines":[231,232,233,234,235],"dellines":[],"addcode":["  private static <T> void acceptIfPresent(Consumer<? super T> action, Optional<T> node) {\n","    if (node.isPresent()) {\n","      action.accept(node.get());\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static void acceptIfPresent(Consumer<? super T> action, Optional<T> node)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_421.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_421.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_421.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_421.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_422.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/BinaryTreeTraverser","pathinproj":"guava/src/com/google/common/collect/BinaryTreeTraverser.java","addlines":[231,232,233,234,235],"dellines":[],"addcode":["  private static <T> void acceptIfPresent(Consumer<? super T> action, Optional<T> node) {\n","    if (node.isPresent()) {\n","      action.accept(node.get());\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static void acceptIfPresent(Consumer<? super T> action, Optional<T> node)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_422.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_422.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_422.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_422.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_423.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/BinaryTreeTraverser","pathinproj":"guava/src/com/google/common/collect/BinaryTreeTraverser.java","addlines":[231,232,233,234,235],"dellines":[],"addcode":["  private static <T> void acceptIfPresent(Consumer<? super T> action, Optional<T> node) {\n","    if (node.isPresent()) {\n","      action.accept(node.get());\n","    }\n","  }\n"],"delcode":[],"methodSig":"private static void acceptIfPresent(Consumer<? super T> action, Optional<T> node)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_423.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_423.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_423.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_423.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_424.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_424.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[288,289,290,291,292,293,294,295,296,297,298,299,286,287],"dellines":[],"addcode":["  public static Predicate<Path> isDirectory(LinkOption... options) {\n","    final LinkOption[] optionsCopy = options.clone();\n","    return new Predicate<Path>() {\n","      @Override\n","      public boolean apply(Path input) {\n","        return Files.isDirectory(input, optionsCopy);\n","      }\n","\n","      @Override\n","      public String toString() {\n","        return \"MoreFiles.isDirectory(\" + Arrays.toString(optionsCopy) + \")\";\n","      }\n","    };\n","  }\n"],"delcode":[],"methodSig":"public static Predicate<Path> isDirectory(LinkOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_424.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_424.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_424.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_424.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_425.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_425.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[288,289,290,291,292,293,294,295,296,297,298,299,286,287],"dellines":[],"addcode":["  public static Predicate<Path> isDirectory(LinkOption... options) {\n","    final LinkOption[] optionsCopy = options.clone();\n","    return new Predicate<Path>() {\n","      @Override\n","      public boolean apply(Path input) {\n","        return Files.isDirectory(input, optionsCopy);\n","      }\n","\n","      @Override\n","      public String toString() {\n","        return \"MoreFiles.isDirectory(\" + Arrays.toString(optionsCopy) + \")\";\n","      }\n","    };\n","  }\n"],"delcode":[],"methodSig":"public static Predicate<Path> isDirectory(LinkOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_425.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_425.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_425.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_425.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_426.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_426.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[288,289,290,291,292,293,294,295,296,297,298,299,286,287],"dellines":[],"addcode":["  public static Predicate<Path> isDirectory(LinkOption... options) {\n","    final LinkOption[] optionsCopy = options.clone();\n","    return new Predicate<Path>() {\n","      @Override\n","      public boolean apply(Path input) {\n","        return Files.isDirectory(input, optionsCopy);\n","      }\n","\n","      @Override\n","      public String toString() {\n","        return \"MoreFiles.isDirectory(\" + Arrays.toString(optionsCopy) + \")\";\n","      }\n","    };\n","  }\n"],"delcode":[],"methodSig":"public static Predicate<Path> isDirectory(LinkOption... options)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_426.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_426.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_426.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_426.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_427.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_427.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[519,520,521,522,523],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_427.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_427.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_427.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_427.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_428.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_428.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[519,520,521,522,523],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_428.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_428.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_428.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_428.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_429.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_429.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[519,520,521,522,523],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_429.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_429.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_429.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_429.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_430.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4391,4392,4393,4394,4395,4396],"dellines":[],"addcode":["  @Override\n","  public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> function) {\n","    checkNotNull(key);\n","    checkNotNull(function);\n","    return compute(key, (k, oldValue) -> (oldValue == null) ? null : function.apply(k, oldValue));\n","  }\n"],"delcode":[],"methodSig":"public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_430.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_430.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_430.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_430.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_431.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4391,4392,4393,4394,4395,4396],"dellines":[],"addcode":["  @Override\n","  public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> function) {\n","    checkNotNull(key);\n","    checkNotNull(function);\n","    return compute(key, (k, oldValue) -> (oldValue == null) ? null : function.apply(k, oldValue));\n","  }\n"],"delcode":[],"methodSig":"public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_431.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_431.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_431.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_431.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_432.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4391,4392,4393,4394,4395,4396],"dellines":[],"addcode":["  @Override\n","  public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> function) {\n","    checkNotNull(key);\n","    checkNotNull(function);\n","    return compute(key, (k, oldValue) -> (oldValue == null) ? null : function.apply(k, oldValue));\n","  }\n"],"delcode":[],"methodSig":"public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_432.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_432.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_432.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_432.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_433.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4795,4796,4797,4798,4799],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super V> filter) {\n","      checkNotNull(filter);\n","      return LocalCache.this.removeIf((k, v) -> filter.test(v));\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super V> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_433.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_433.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_433.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_433.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_434.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4795,4796,4797,4798,4799],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super V> filter) {\n","      checkNotNull(filter);\n","      return LocalCache.this.removeIf((k, v) -> filter.test(v));\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super V> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_434.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_434.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_434.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_434.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_435.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4795,4796,4797,4798,4799],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super V> filter) {\n","      checkNotNull(filter);\n","      return LocalCache.this.removeIf((k, v) -> filter.test(v));\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super V> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_435.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_435.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_435.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_435.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_436.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Tables","pathinproj":"guava/src/com/google/common/collect/Tables.java","addlines":[416,417,418,419],"dellines":[],"addcode":["    @Override\n","    Spliterator<Cell<R, C, V2>> cellSpliterator() {\n","      return CollectSpliterators.map(fromTable.cellSet().spliterator(), cellFunction());\n","    }\n"],"delcode":[],"methodSig":" Spliterator<Cell<R, C, V2>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_436.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_436.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_436.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_436.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_437.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Tables","pathinproj":"guava/src/com/google/common/collect/Tables.java","addlines":[416,417,418,419],"dellines":[],"addcode":["    @Override\n","    Spliterator<Cell<R, C, V2>> cellSpliterator() {\n","      return CollectSpliterators.map(fromTable.cellSet().spliterator(), cellFunction());\n","    }\n"],"delcode":[],"methodSig":" Spliterator<Cell<R, C, V2>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_437.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_437.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_437.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_437.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_438.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Tables","pathinproj":"guava/src/com/google/common/collect/Tables.java","addlines":[416,417,418,419],"dellines":[],"addcode":["    @Override\n","    Spliterator<Cell<R, C, V2>> cellSpliterator() {\n","      return CollectSpliterators.map(fromTable.cellSet().spliterator(), cellFunction());\n","    }\n"],"delcode":[],"methodSig":" Spliterator<Cell<R, C, V2>> cellSpliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_438.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_438.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_438.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_438.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_439.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMapBasedMultiset","pathinproj":"guava/src/com/google/common/collect/AbstractMapBasedMultiset.java","addlines":[129,130,131,132,69,70,71,72,73,74,75],"dellines":[],"addcode":["  @Override public void forEachEntry(ObjIntConsumer<? super E> action) {\n","    checkNotNull(action);\n","    backingMap.forEach((element, count) -> action.accept(element, count.get()));\n","  }\n","  @Override\n","  public void forEachEntry(ObjIntConsumer<? super E> action) {\n","    checkNotNull(action);\n","    for (int i = 0; i < size(); i++) {\n","      action.accept(elementSet.asList().get(i), getCount(i));\n","    }\n","  }\n"],"delcode":[],"methodSig":"public void forEachEntry(ObjIntConsumer<? super E> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_439.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_439.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_439.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_439.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_440.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMapBasedMultiset","pathinproj":"guava/src/com/google/common/collect/AbstractMapBasedMultiset.java","addlines":[129,130,131,132,69,70,71,72,73,74,75],"dellines":[],"addcode":["  @Override public void forEachEntry(ObjIntConsumer<? super E> action) {\n","    checkNotNull(action);\n","    backingMap.forEach((element, count) -> action.accept(element, count.get()));\n","  }\n","  @Override\n","  public void forEachEntry(ObjIntConsumer<? super E> action) {\n","    checkNotNull(action);\n","    for (int i = 0; i < size(); i++) {\n","      action.accept(elementSet.asList().get(i), getCount(i));\n","    }\n","  }\n"],"delcode":[],"methodSig":"public void forEachEntry(ObjIntConsumer<? super E> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_440.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_440.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_440.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_440.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_441.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMapBasedMultiset","pathinproj":"guava/src/com/google/common/collect/AbstractMapBasedMultiset.java","addlines":[129,130,131,132,69,70,71,72,73,74,75],"dellines":[],"addcode":["  @Override public void forEachEntry(ObjIntConsumer<? super E> action) {\n","    checkNotNull(action);\n","    backingMap.forEach((element, count) -> action.accept(element, count.get()));\n","  }\n","  @Override\n","  public void forEachEntry(ObjIntConsumer<? super E> action) {\n","    checkNotNull(action);\n","    for (int i = 0; i < size(); i++) {\n","      action.accept(elementSet.asList().get(i), getCount(i));\n","    }\n","  }\n"],"delcode":[],"methodSig":"public void forEachEntry(ObjIntConsumer<? super E> action)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_441.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_441.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_441.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_441.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_442.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_442.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMap.java","addlines":[646,647,648,649,650,651,628,629,630,631,632,633,634,635,636,637],"dellines":[],"addcode":["      @Override\n","      public Spliterator<Entry<K, V>> spliterator() {\n","        return asList().spliterator();\n","      }\n","\n","      @Override\n","      public void forEach(Consumer<? super Entry<K, V>> action) {\n","        asList().forEach(action);\n","      }\n","\n","          @Override\n","          public Spliterator<Entry<K, V>> spliterator() {\n","            return CollectSpliterators.indexed(\n","                size(), ImmutableSet.SPLITERATOR_CHARACTERISTICS, this::get);\n","          }\n","\n"],"delcode":[],"methodSig":" ImmutableSet<Entry<K, V>> createEntrySet()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_442.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_442.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_442.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_442.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_443.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_443.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMap.java","addlines":[646,647,648,649,650,651,628,629,630,631,632,633,634,635,636,637],"dellines":[],"addcode":["      @Override\n","      public Spliterator<Entry<K, V>> spliterator() {\n","        return asList().spliterator();\n","      }\n","\n","      @Override\n","      public void forEach(Consumer<? super Entry<K, V>> action) {\n","        asList().forEach(action);\n","      }\n","\n","          @Override\n","          public Spliterator<Entry<K, V>> spliterator() {\n","            return CollectSpliterators.indexed(\n","                size(), ImmutableSet.SPLITERATOR_CHARACTERISTICS, this::get);\n","          }\n","\n"],"delcode":[],"methodSig":" ImmutableSet<Entry<K, V>> createEntrySet()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_443.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_443.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_443.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_443.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_444.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_444.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSortedMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableSortedMap.java","addlines":[646,647,648,649,650,651,628,629,630,631,632,633,634,635,636,637],"dellines":[],"addcode":["      @Override\n","      public Spliterator<Entry<K, V>> spliterator() {\n","        return asList().spliterator();\n","      }\n","\n","      @Override\n","      public void forEach(Consumer<? super Entry<K, V>> action) {\n","        asList().forEach(action);\n","      }\n","\n","          @Override\n","          public Spliterator<Entry<K, V>> spliterator() {\n","            return CollectSpliterators.indexed(\n","                size(), ImmutableSet.SPLITERATOR_CHARACTERISTICS, this::get);\n","          }\n","\n"],"delcode":[],"methodSig":" ImmutableSet<Entry<K, V>> createEntrySet()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_444.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_444.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_444.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_444.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_445.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_445.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[195,196,197,198],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  public long getAndAccumulate(K key, long x, LongBinaryOperator accumulatorFunction) {\n","    checkNotNull(accumulatorFunction);\n","    return getAndUpdate(key, oldValue -> accumulatorFunction.applyAsLong(oldValue, x));\n"],"delcode":[],"methodSig":"public long getAndAccumulate(K key, long x, LongBinaryOperator accumulatorFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_445.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_445.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_445.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_445.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_446.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_446.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[195,196,197,198],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  public long getAndAccumulate(K key, long x, LongBinaryOperator accumulatorFunction) {\n","    checkNotNull(accumulatorFunction);\n","    return getAndUpdate(key, oldValue -> accumulatorFunction.applyAsLong(oldValue, x));\n"],"delcode":[],"methodSig":"public long getAndAccumulate(K key, long x, LongBinaryOperator accumulatorFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_446.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_446.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_446.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_446.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_447.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_447.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[195,196,197,198],"dellines":[],"addcode":["  @CanIgnoreReturnValue\n","  public long getAndAccumulate(K key, long x, LongBinaryOperator accumulatorFunction) {\n","    checkNotNull(accumulatorFunction);\n","    return getAndUpdate(key, oldValue -> accumulatorFunction.applyAsLong(oldValue, x));\n"],"delcode":[],"methodSig":"public long getAndAccumulate(K key, long x, LongBinaryOperator accumulatorFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_447.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_447.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_447.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_447.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_448.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MutableClassToInstanceMap","pathinproj":"guava/src/com/google/common/collect/MutableClassToInstanceMap.java","addlines":[],"dellines":[75],"addcode":[],"delcode":["  static <B> Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry) {\n"],"methodSig":" static Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_448.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_448.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_448.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_448.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_449.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MutableClassToInstanceMap","pathinproj":"guava/src/com/google/common/collect/MutableClassToInstanceMap.java","addlines":[],"dellines":[75],"addcode":[],"delcode":["  static <B> Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry) {\n"],"methodSig":" static Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_449.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_449.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_449.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_449.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_450.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MutableClassToInstanceMap","pathinproj":"guava/src/com/google/common/collect/MutableClassToInstanceMap.java","addlines":[],"dellines":[75],"addcode":[],"delcode":["  static <B> Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry) {\n"],"methodSig":" static Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_450.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_450.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_450.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_450.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_451.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_451.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[688,689,690,691,686,687],"dellines":[],"addcode":["  private static boolean isDirectory(\n","      SecureDirectoryStream<Path> dir, Path name, LinkOption... options) throws IOException {\n","    return dir.getFileAttributeView(name, BasicFileAttributeView.class, options)\n","        .readAttributes()\n","        .isDirectory();\n","  }\n"],"delcode":[],"methodSig":"private static boolean isDirectory(SecureDirectoryStream<Path> dir, Path name, LinkOption... options) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_451.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_451.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_451.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_451.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_452.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_452.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[688,689,690,691,686,687],"dellines":[],"addcode":["  private static boolean isDirectory(\n","      SecureDirectoryStream<Path> dir, Path name, LinkOption... options) throws IOException {\n","    return dir.getFileAttributeView(name, BasicFileAttributeView.class, options)\n","        .readAttributes()\n","        .isDirectory();\n","  }\n"],"delcode":[],"methodSig":"private static boolean isDirectory(SecureDirectoryStream<Path> dir, Path name, LinkOption... options) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_452.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_452.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_452.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_452.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_453.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_453.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[688,689,690,691,686,687],"dellines":[],"addcode":["  private static boolean isDirectory(\n","      SecureDirectoryStream<Path> dir, Path name, LinkOption... options) throws IOException {\n","    return dir.getFileAttributeView(name, BasicFileAttributeView.class, options)\n","        .readAttributes()\n","        .isDirectory();\n","  }\n"],"delcode":[],"methodSig":"private static boolean isDirectory(SecureDirectoryStream<Path> dir, Path name, LinkOption... options) throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_453.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_453.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_453.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_453.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_454.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" NavigableMap\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_454.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[],"dellines":[1850],"addcode":[],"delcode":["      NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer) {\n"],"methodSig":"public static NavigableMap<K, V2> transformEntries(NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_454.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_454.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_454.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_454.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_455.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" NavigableMap\n NavigableMap\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_455.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[],"dellines":[1850],"addcode":[],"delcode":["      NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer) {\n"],"methodSig":"public static NavigableMap<K, V2> transformEntries(NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_455.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_455.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_455.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_455.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_456.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" NavigableMap\n NavigableMap\n NavigableMap\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_456.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[],"dellines":[1850],"addcode":[],"delcode":["      NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer) {\n"],"methodSig":"public static NavigableMap<K, V2> transformEntries(NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_456.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_456.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_456.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_456.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_457.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_457.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[556,557,558,559],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V merge(\n","      K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n"],"delcode":[],"methodSig":"public final V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_457.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_457.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_457.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_457.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_458.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_458.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[556,557,558,559],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V merge(\n","      K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n"],"delcode":[],"methodSig":"public final V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_458.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_458.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_458.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_458.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_459.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_459.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[556,557,558,559],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V merge(\n","      K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n"],"delcode":[],"methodSig":"public final V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_459.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_459.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_459.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_459.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_460.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[192,193,190,191],"dellines":[],"addcode":["    @Override\n","    public OutputStream openStream() throws IOException {\n","      return Files.newOutputStream(path, options);\n","    }\n"],"delcode":[],"methodSig":"public OutputStream openStream() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_460.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_460.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_460.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_460.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_461.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[192,193,190,191],"dellines":[],"addcode":["    @Override\n","    public OutputStream openStream() throws IOException {\n","      return Files.newOutputStream(path, options);\n","    }\n"],"delcode":[],"methodSig":"public OutputStream openStream() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_461.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_461.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_461.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_461.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_462.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[192,193,190,191],"dellines":[],"addcode":["    @Override\n","    public OutputStream openStream() throws IOException {\n","      return Files.newOutputStream(path, options);\n","    }\n"],"delcode":[],"methodSig":"public OutputStream openStream() throws IOException"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_462.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_462.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_462.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_462.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_463.txt","newdoc":" NavigableMap\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_463.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[1886],"dellines":[],"addcode":["      final NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer) {\n"],"delcode":[],"methodSig":"public static NavigableMap<K, V2> transformEntries(final NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_463.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_463.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_463.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_463.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_464.txt","newdoc":" NavigableMap\n NavigableMap\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_464.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[1886],"dellines":[],"addcode":["      final NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer) {\n"],"delcode":[],"methodSig":"public static NavigableMap<K, V2> transformEntries(final NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_464.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_464.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_464.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_464.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_465.txt","newdoc":" NavigableMap\n NavigableMap\n NavigableMap\n","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_465.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[1886],"dellines":[],"addcode":["      final NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer) {\n"],"delcode":[],"methodSig":"public static NavigableMap<K, V2> transformEntries(final NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_465.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_465.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_465.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_465.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_466.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_466.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[67,68,69,70],"dellines":[],"addcode":["  @Deprecated\n","  public static <T> Stream<T> stream(Collection<T> collection) {\n","    return collection.stream();\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(Collection<T> collection)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_466.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_466.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_466.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_466.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_467.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_467.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[67,68,69,70],"dellines":[],"addcode":["  @Deprecated\n","  public static <T> Stream<T> stream(Collection<T> collection) {\n","    return collection.stream();\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(Collection<T> collection)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_467.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_467.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_467.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_467.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_468.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_468.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[67,68,69,70],"dellines":[],"addcode":["  @Deprecated\n","  public static <T> Stream<T> stream(Collection<T> collection) {\n","    return collection.stream();\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(Collection<T> collection)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_468.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_468.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_468.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_468.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_469.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_469.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[507,508,509,510,511],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V replace(K key, V value) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V replace(K key, V value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_469.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_469.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_469.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_469.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_470.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_470.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[507,508,509,510,511],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V replace(K key, V value) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V replace(K key, V value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_470.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_470.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_470.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_470.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_471.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_471.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableMap.java","addlines":[507,508,509,510,511],"dellines":[],"addcode":["  @Deprecated\n","  @Override\n","  public final V replace(K key, V value) {\n","    throw new UnsupportedOperationException();\n","  }\n"],"delcode":[],"methodSig":"public final V replace(K key, V value)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_471.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_471.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_471.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_471.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_472.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_472.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_472.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_472.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[248],"dellines":[288,281,282,283,284,285,286,287],"addcode":["    map.values().removeIf(x -> x == 0);\n"],"delcode":["    Iterator<Map.Entry<K, AtomicLong>> entryIterator = map.entrySet().iterator();\n","    while (entryIterator.hasNext()) {\n","      Map.Entry<K, AtomicLong> entry = entryIterator.next();\n","      AtomicLong atomic = entry.getValue();\n","      if (atomic != null && atomic.get() == 0L) {\n","        entryIterator.remove();\n","      }\n","    }\n"],"methodSig":"public void removeAllZeros()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_472.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_472.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_472.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_472.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_473.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_473.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_473.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_473.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[248],"dellines":[288,281,282,283,284,285,286,287],"addcode":["    map.values().removeIf(x -> x == 0);\n"],"delcode":["    Iterator<Map.Entry<K, AtomicLong>> entryIterator = map.entrySet().iterator();\n","    while (entryIterator.hasNext()) {\n","      Map.Entry<K, AtomicLong> entry = entryIterator.next();\n","      AtomicLong atomic = entry.getValue();\n","      if (atomic != null && atomic.get() == 0L) {\n","        entryIterator.remove();\n","      }\n","    }\n"],"methodSig":"public void removeAllZeros()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_473.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_473.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_473.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_473.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_474.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_474.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_474.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_474.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[248],"dellines":[288,281,282,283,284,285,286,287],"addcode":["    map.values().removeIf(x -> x == 0);\n"],"delcode":["    Iterator<Map.Entry<K, AtomicLong>> entryIterator = map.entrySet().iterator();\n","    while (entryIterator.hasNext()) {\n","      Map.Entry<K, AtomicLong> entry = entryIterator.next();\n","      AtomicLong atomic = entry.getValue();\n","      if (atomic != null && atomic.get() == 0L) {\n","        entryIterator.remove();\n","      }\n","    }\n"],"methodSig":"public void removeAllZeros()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_474.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_474.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_474.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_474.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_475.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMultimap","pathinproj":"guava/src/com/google/common/collect/AbstractMultimap.java","addlines":[138,58,139,59,140,60,141,61],"dellines":[],"addcode":["    @Override\n","    public Spliterator<Entry<K, V>> spliterator() {\n","      return entrySpliterator();\n","    }\n","    @Override\n","    public Spliterator<Entry<K, V>> spliterator() {\n","      return Spliterators.spliterator(entries, ImmutableSet.SPLITERATOR_CHARACTERISTICS);\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<Entry<K, V>> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_475.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_475.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_475.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_475.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_476.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMultimap","pathinproj":"guava/src/com/google/common/collect/AbstractMultimap.java","addlines":[138,58,139,59,140,60,141,61],"dellines":[],"addcode":["    @Override\n","    public Spliterator<Entry<K, V>> spliterator() {\n","      return entrySpliterator();\n","    }\n","    @Override\n","    public Spliterator<Entry<K, V>> spliterator() {\n","      return Spliterators.spliterator(entries, ImmutableSet.SPLITERATOR_CHARACTERISTICS);\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<Entry<K, V>> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_476.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_476.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_476.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_476.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_477.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AbstractMultimap","pathinproj":"guava/src/com/google/common/collect/AbstractMultimap.java","addlines":[138,58,139,59,140,60,141,61],"dellines":[],"addcode":["    @Override\n","    public Spliterator<Entry<K, V>> spliterator() {\n","      return entrySpliterator();\n","    }\n","    @Override\n","    public Spliterator<Entry<K, V>> spliterator() {\n","      return Spliterators.spliterator(entries, ImmutableSet.SPLITERATOR_CHARACTERISTICS);\n","    }\n"],"delcode":[],"methodSig":"public Spliterator<Entry<K, V>> spliterator()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_477.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_477.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_477.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_477.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_478.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4832,4833,4834,4835,4836],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super Entry<K, V>> filter) {\n","      checkNotNull(filter);\n","      return LocalCache.this.removeIf((k, v) -> filter.test(Maps.immutableEntry(k, v)));\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super Entry<K, V>> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_478.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_478.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_478.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_478.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_479.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4832,4833,4834,4835,4836],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super Entry<K, V>> filter) {\n","      checkNotNull(filter);\n","      return LocalCache.this.removeIf((k, v) -> filter.test(Maps.immutableEntry(k, v)));\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super Entry<K, V>> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_479.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_479.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_479.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_479.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_480.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[4832,4833,4834,4835,4836],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super Entry<K, V>> filter) {\n","      checkNotNull(filter);\n","      return LocalCache.this.removeIf((k, v) -> filter.test(Maps.immutableEntry(k, v)));\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super Entry<K, V>> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_480.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_480.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_480.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_480.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_481.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSetMultimap","pathinproj":"guava/src/com/google/common/collect/ImmutableSetMultimap.java","addlines":[243,244,245,246,247,248,265,266,267,268,269,270],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    @Override\n","    Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other) {\n","      super.combine(other);\n","      return this;\n","    }\n","    @CanIgnoreReturnValue\n","    @Override\n","    Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other) {\n","      super.combine(other);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_481.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_481.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_481.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_481.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_482.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSetMultimap","pathinproj":"guava/src/com/google/common/collect/ImmutableSetMultimap.java","addlines":[243,244,245,246,247,248,265,266,267,268,269,270],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    @Override\n","    Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other) {\n","      super.combine(other);\n","      return this;\n","    }\n","    @CanIgnoreReturnValue\n","    @Override\n","    Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other) {\n","      super.combine(other);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_482.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_482.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_482.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_482.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_483.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableSetMultimap","pathinproj":"guava/src/com/google/common/collect/ImmutableSetMultimap.java","addlines":[243,244,245,246,247,248,265,266,267,268,269,270],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    @Override\n","    Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other) {\n","      super.combine(other);\n","      return this;\n","    }\n","    @CanIgnoreReturnValue\n","    @Override\n","    Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other) {\n","      super.combine(other);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_483.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_483.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_483.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_483.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_484.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableBiMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableBiMap.java","addlines":[229,230,231,232,233],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    Builder<K, V> combine(ImmutableMap.Builder<K, V> builder) {\n","      super.combine(builder);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<K, V> combine(ImmutableMap.Builder<K, V> builder)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_484.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_484.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_484.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_484.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_485.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableBiMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableBiMap.java","addlines":[229,230,231,232,233],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    Builder<K, V> combine(ImmutableMap.Builder<K, V> builder) {\n","      super.combine(builder);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<K, V> combine(ImmutableMap.Builder<K, V> builder)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_485.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_485.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_485.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_485.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_486.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/ImmutableBiMap_2","pathinproj":"guava/src/com/google/common/collect/ImmutableBiMap.java","addlines":[229,230,231,232,233],"dellines":[],"addcode":["    @CanIgnoreReturnValue\n","    Builder<K, V> combine(ImmutableMap.Builder<K, V> builder) {\n","      super.combine(builder);\n","      return this;\n","    }\n"],"delcode":[],"methodSig":" Builder<K, V> combine(ImmutableMap.Builder<K, V> builder)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_486.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_486.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_486.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_486.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_487.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,4376,4377,4378,4379,4380,4381,4382,3743],"dellines":[],"addcode":["    public V compute(K key, BiFunction<? super K, ? super V, ? extends V> function) {\n","      stopwatch.start();\n","      V previousValue;\n","      try {\n","        previousValue = oldValue.waitForValue();\n","      } catch (ExecutionException e) {\n","        previousValue = null;\n","      }\n","      V newValue = function.apply(key, previousValue);\n","      this.set(newValue);\n","      return newValue;\n","    }\n","  @Override\n","  public V compute(K key, BiFunction<? super K, ? super V, ? extends V> function) {\n","    checkNotNull(key);\n","    checkNotNull(function);\n","    int hash = hash(key);\n","    return segmentFor(hash).compute(key, hash, function);\n","  }\n"],"delcode":[],"methodSig":"public V compute(K key, BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_487.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_487.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_487.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_487.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_488.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,4376,4377,4378,4379,4380,4381,4382,3743],"dellines":[],"addcode":["    public V compute(K key, BiFunction<? super K, ? super V, ? extends V> function) {\n","      stopwatch.start();\n","      V previousValue;\n","      try {\n","        previousValue = oldValue.waitForValue();\n","      } catch (ExecutionException e) {\n","        previousValue = null;\n","      }\n","      V newValue = function.apply(key, previousValue);\n","      this.set(newValue);\n","      return newValue;\n","    }\n","  @Override\n","  public V compute(K key, BiFunction<? super K, ? super V, ? extends V> function) {\n","    checkNotNull(key);\n","    checkNotNull(function);\n","    int hash = hash(key);\n","    return segmentFor(hash).compute(key, hash, function);\n","  }\n"],"delcode":[],"methodSig":"public V compute(K key, BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_488.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_488.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_488.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_488.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_489.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/LocalCache","pathinproj":"guava/src/com/google/common/cache/LocalCache.java","addlines":[3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,4376,4377,4378,4379,4380,4381,4382,3743],"dellines":[],"addcode":["    public V compute(K key, BiFunction<? super K, ? super V, ? extends V> function) {\n","      stopwatch.start();\n","      V previousValue;\n","      try {\n","        previousValue = oldValue.waitForValue();\n","      } catch (ExecutionException e) {\n","        previousValue = null;\n","      }\n","      V newValue = function.apply(key, previousValue);\n","      this.set(newValue);\n","      return newValue;\n","    }\n","  @Override\n","  public V compute(K key, BiFunction<? super K, ? super V, ? extends V> function) {\n","    checkNotNull(key);\n","    checkNotNull(function);\n","    int hash = hash(key);\n","    return segmentFor(hash).compute(key, hash, function);\n","  }\n"],"delcode":[],"methodSig":"public V compute(K key, BiFunction<? super K, ? super V, ? extends V> function)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_489.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_489.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_489.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_489.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_490.txt","newdoc":" Don't return a size for directories or symbolic links; their sizes are implementation\n Failed to get attributes; we don't know the size.\n specific and they can't be read as bytes using the read methods anyway.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[129,130,131,132,133,134,117,118,119,120,121,122,124,125,126],"dellines":[],"addcode":["    @Override\n","    public Optional<Long> sizeIfKnown() {\n","      BasicFileAttributes attrs;\n","      try {\n","        attrs = readAttributes();\n","      } catch (IOException e) {\n","        return Optional.absent();\n","      }\n","\n","      if (attrs.isDirectory() || attrs.isSymbolicLink()) {\n","        return Optional.absent();\n","      }\n","\n","      return Optional.of(attrs.size());\n","    }\n"],"delcode":[],"methodSig":"public Optional<Long> sizeIfKnown()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_490.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_490.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_490.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_490.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_491.txt","newdoc":" Don't return a size for directories or symbolic links; their sizes are implementation\n Failed to get attributes; we don't know the size.\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n Failed to get attributes; we don't know the size.\n specific and they can't be read as bytes using the read methods anyway.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[129,130,131,132,133,134,117,118,119,120,121,122,124,125,126],"dellines":[],"addcode":["    @Override\n","    public Optional<Long> sizeIfKnown() {\n","      BasicFileAttributes attrs;\n","      try {\n","        attrs = readAttributes();\n","      } catch (IOException e) {\n","        return Optional.absent();\n","      }\n","\n","      if (attrs.isDirectory() || attrs.isSymbolicLink()) {\n","        return Optional.absent();\n","      }\n","\n","      return Optional.of(attrs.size());\n","    }\n"],"delcode":[],"methodSig":"public Optional<Long> sizeIfKnown()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_491.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_491.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_491.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_491.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_492.txt","newdoc":" Don't return a size for directories or symbolic links; their sizes are implementation\n Failed to get attributes; we don't know the size.\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n Failed to get attributes; we don't know the size.\n specific and they can't be read as bytes using the read methods anyway.\n Don't return a size for directories or symbolic links; their sizes are implementation\n Failed to get attributes; we don't know the size.\n specific and they can't be read as bytes using the read methods anyway.\n","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/MoreFiles","pathinproj":"guava/src/com/google/common/io/MoreFiles.java","addlines":[129,130,131,132,133,134,117,118,119,120,121,122,124,125,126],"dellines":[],"addcode":["    @Override\n","    public Optional<Long> sizeIfKnown() {\n","      BasicFileAttributes attrs;\n","      try {\n","        attrs = readAttributes();\n","      } catch (IOException e) {\n","        return Optional.absent();\n","      }\n","\n","      if (attrs.isDirectory() || attrs.isSymbolicLink()) {\n","        return Optional.absent();\n","      }\n","\n","      return Optional.of(attrs.size());\n","    }\n"],"delcode":[],"methodSig":"public Optional<Long> sizeIfKnown()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_492.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_492.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_492.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_492.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_493.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_493.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[84,85,86],"dellines":[],"addcode":["  public static <T> Stream<T> stream(com.google.common.base.Optional<T> optional) {\n","    return optional.isPresent() ? Stream.of(optional.get()) : Stream.of();\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(com.google.common.base.Optional<T> optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_493.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_493.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_493.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_493.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_494.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_494.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[84,85,86],"dellines":[],"addcode":["  public static <T> Stream<T> stream(com.google.common.base.Optional<T> optional) {\n","    return optional.isPresent() ? Stream.of(optional.get()) : Stream.of();\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(com.google.common.base.Optional<T> optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_494.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_494.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_494.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_494.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_495.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_495.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Streams","pathinproj":"guava/src/com/google/common/collect/Streams.java","addlines":[84,85,86],"dellines":[],"addcode":["  public static <T> Stream<T> stream(com.google.common.base.Optional<T> optional) {\n","    return optional.isPresent() ? Stream.of(optional.get()) : Stream.of();\n","  }\n"],"delcode":[],"methodSig":"public static Stream<T> stream(com.google.common.base.Optional<T> optional)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_495.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_495.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_495.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_495.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_496.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[224,225,220,221,222,223],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super E> filter) {\n","      synchronized (mutex) {\n","        return delegate().removeIf(filter);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super E> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_496.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_496.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_496.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_496.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_497.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[224,225,220,221,222,223],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super E> filter) {\n","      synchronized (mutex) {\n","        return delegate().removeIf(filter);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super E> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_497.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_497.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_497.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_497.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_498.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Synchronized","pathinproj":"guava/src/com/google/common/collect/Synchronized.java","addlines":[224,225,220,221,222,223],"dellines":[],"addcode":["    @Override\n","    public boolean removeIf(Predicate<? super E> filter) {\n","      synchronized (mutex) {\n","        return delegate().removeIf(filter);\n","      }\n","    }\n"],"delcode":[],"methodSig":"public boolean removeIf(Predicate<? super E> filter)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_498.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_498.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_498.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_498.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_499.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_499.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_499.txt","olddoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_499.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[135,136],"dellines":[162,163,164,165,166,167,168,169,171,172,173,174,175,177,178,179,181,182,183,184,185,186,187,189,190],"addcode":["    return getAndAccumulate(key, delta, Long::sum);\n","  }\n"],"delcode":["    outer:\n","    while (true) {\n","      AtomicLong atomic = map.get(key);\n","      if (atomic == null) {\n","        atomic = map.putIfAbsent(key, new AtomicLong(delta));\n","        if (atomic == null) {\n","          return 0L;\n","        }\n","      }\n","\n","      while (true) {\n","        long oldValue = atomic.get();\n","        if (oldValue == 0L) {\n","          if (map.replace(key, atomic, new AtomicLong(delta))) {\n","            return 0L;\n","          }\n","          continue outer;\n","        }\n","\n","        long newValue = oldValue + delta;\n","        if (atomic.compareAndSet(oldValue, newValue)) {\n","          return oldValue;\n","        }\n","      }\n","    }\n"],"methodSig":"public long getAndAdd(K key, long delta)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_499.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_499.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_499.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_499.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_500.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_500.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_500.txt","olddoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_500.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[135,136],"dellines":[162,163,164,165,166,167,168,169,171,172,173,174,175,177,178,179,181,182,183,184,185,186,187,189,190],"addcode":["    return getAndAccumulate(key, delta, Long::sum);\n","  }\n"],"delcode":["    outer:\n","    while (true) {\n","      AtomicLong atomic = map.get(key);\n","      if (atomic == null) {\n","        atomic = map.putIfAbsent(key, new AtomicLong(delta));\n","        if (atomic == null) {\n","          return 0L;\n","        }\n","      }\n","\n","      while (true) {\n","        long oldValue = atomic.get();\n","        if (oldValue == 0L) {\n","          if (map.replace(key, atomic, new AtomicLong(delta))) {\n","            return 0L;\n","          }\n","          continue outer;\n","        }\n","\n","        long newValue = oldValue + delta;\n","        if (atomic.compareAndSet(oldValue, newValue)) {\n","          return oldValue;\n","        }\n","      }\n","    }\n"],"methodSig":"public long getAndAdd(K key, long delta)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_500.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_500.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_500.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_500.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_501.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_501.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfuncnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_501.txt","olddoc":" atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n atomic is now non-null; fall through\n value changed\n don't compareAndSet a zero\n atomic replaced\n","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfuncoldJdoc_73e382fa877f80994817a136b0adcc4365ccd904_501.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/AtomicLongMap","pathinproj":"guava/src/com/google/common/util/concurrent/AtomicLongMap.java","addlines":[135,136],"dellines":[162,163,164,165,166,167,168,169,171,172,173,174,175,177,178,179,181,182,183,184,185,186,187,189,190],"addcode":["    return getAndAccumulate(key, delta, Long::sum);\n","  }\n"],"delcode":["    outer:\n","    while (true) {\n","      AtomicLong atomic = map.get(key);\n","      if (atomic == null) {\n","        atomic = map.putIfAbsent(key, new AtomicLong(delta));\n","        if (atomic == null) {\n","          return 0L;\n","        }\n","      }\n","\n","      while (true) {\n","        long oldValue = atomic.get();\n","        if (oldValue == 0L) {\n","          if (map.replace(key, atomic, new AtomicLong(delta))) {\n","            return 0L;\n","          }\n","          continue outer;\n","        }\n","\n","        long newValue = oldValue + delta;\n","        if (atomic.compareAndSet(oldValue, newValue)) {\n","          return oldValue;\n","        }\n","      }\n","    }\n"],"methodSig":"public long getAndAdd(K key, long delta)"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_501.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_501.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_501.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_501.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_502.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_502.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[3552,3553,3554,3555,3556,3557,3558,3549,3550,3551],"dellines":[],"addcode":["\n","        @Override\n","        public Spliterator<Entry<K, V>> spliterator() {\n","          return entrySpliterator();\n","        }\n","\n","        @Override\n","        public void forEach(Consumer<? super Entry<K, V>> action) {\n","          forEachEntry(action);\n","        }\n"],"delcode":[],"methodSig":"public Set<Entry<K, V>> entrySet()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_502.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_502.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_502.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_502.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[283],"dellines":[286],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n"],"methodSig":"public static FluentIterable<E> of()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_503.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_503.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[3552,3553,3554,3555,3556,3557,3558,3549,3550,3551],"dellines":[],"addcode":["\n","        @Override\n","        public Spliterator<Entry<K, V>> spliterator() {\n","          return entrySpliterator();\n","        }\n","\n","        @Override\n","        public void forEach(Consumer<? super Entry<K, V>> action) {\n","          forEachEntry(action);\n","        }\n"],"delcode":[],"methodSig":"public Set<Entry<K, V>> entrySet()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_503.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_503.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_503.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_503.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[243,244],"dellines":[246,247],"addcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n","   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"delcode":["   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n","   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n"],"methodSig":"public static FluentIterable<T> concat(Iterable<? extends T>... inputs)"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"},{"func":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_oldfunccode_73e382fa877f80994817a136b0adcc4365ccd904_504.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newfunccode_73e382fa877f80994817a136b0adcc4365ccd904_504.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/Maps","pathinproj":"guava/src/com/google/common/collect/Maps.java","addlines":[3552,3553,3554,3555,3556,3557,3558,3549,3550,3551],"dellines":[],"addcode":["\n","        @Override\n","        public Spliterator<Entry<K, V>> spliterator() {\n","          return entrySpliterator();\n","        }\n","\n","        @Override\n","        public void forEach(Consumer<? super Entry<K, V>> action) {\n","          forEachEntry(action);\n","        }\n"],"delcode":[],"methodSig":"public Set<Entry<K, V>> entrySet()"},"doc":{"oldfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_504.txt","newfunccode":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocfunccode_73e382fa877f80994817a136b0adcc4365ccd904_504.txt","newdoc":"","newJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_newdocnewJdoc_73e382fa877f80994817a136b0adcc4365ccd904_504.txt","olddoc":"","oldJdoc":"73e382fa877f80994817a136b0adcc4365ccd904/Codes/Match_olddocJdoc_73e382fa877f80994817a136b0adcc4365ccd904_504.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/73e382fa877f80994817a136b0adcc4365ccd904/FluentIterable","pathinproj":"guava/src/com/google/common/collect/FluentIterable.java","addlines":[336],"dellines":[339],"addcode":["   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n"],"delcode":["   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n"],"methodSig":"public final int size()"},"id":3,"flag":1,"commit":"73e382fa877f80994817a136b0adcc4365ccd904"}]