{
    "addition": {
        "23": "import com.google.common.annotations.Beta;\n",
        "37": "import java.util.Spliterator;\n",
        "38": "import java.util.Spliterators;\n",
        "39": "import java.util.function.Consumer;\n",
        "40": "import java.util.stream.Collector;\n",
        "66": "  static final int SPLITERATOR_CHARACTERISTICS =\n",
        "67": "      ImmutableSet.SPLITERATOR_CHARACTERISTICS | Spliterator.SORTED;\n",
        "68": "\n",
        "69": "  /**\n",
        "70": "   * Returns a {@code Collector} that accumulates the input elements into a new\n",
        "71": "   * {@code ImmutableSortedSet}, ordered by the specified comparator.\n",
        "72": "   *\n",
        "73": "   * <p>If the elements contain duplicates (according to the comparator),\n",
        "74": "   * only the first duplicate in encounter order will appear in the result.\n",
        "75": "   *\n",
        "76": "   * @since 21.0\n",
        "77": "   */\n",
        "78": "  @Beta\n",
        "79": "  public static <E> Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(\n",
        "80": "      Comparator<? super E> comparator) {\n",
        "81": "    return CollectCollectors.toImmutableSortedSet(comparator);\n",
        "82": "  }\n",
        "83": "\n",
        "527": "    @CanIgnoreReturnValue\n",
        "528": "    @Override\n",
        "529": "    Builder<E> combine(ArrayBasedBuilder<E> builder) {\n",
        "530": "      super.combine(builder);\n",
        "531": "      return this;\n",
        "532": "    }\n",
        "533": "\n",
        "774": "  @Override\n",
        "775": "  public Spliterator<E> spliterator() {\n",
        "776": "    return new Spliterators.AbstractSpliterator<E>(\n",
        "777": "        size(), SPLITERATOR_CHARACTERISTICS | Spliterator.SIZED) {\n",
        "778": "      final UnmodifiableIterator<E> iterator = iterator();\n",
        "779": "\n",
        "780": "      @Override\n",
        "781": "      public boolean tryAdvance(Consumer<? super E> action) {\n",
        "782": "        if (iterator.hasNext()) {\n",
        "783": "          action.accept(iterator.next());\n",
        "784": "          return true;\n",
        "785": "        } else {\n",
        "786": "          return false;\n",
        "787": "        }\n",
        "788": "      }\n",
        "789": "\n",
        "790": "      @Override\n",
        "791": "      public Comparator<? super E> getComparator() {\n",
        "792": "        return comparator;\n",
        "793": "      }\n",
        "794": "    };\n",
        "795": "  }\n",
        "796": "\n"
    },
    "removed": {}
}