{
    "addition": {
        "21": " * Legacy version of {@code java.util.function.Supplier}. Semantically, this could be a factory,\n",
        "22": " * generator, builder, closure, or something else entirely. No guarantees are implied by this\n",
        "23": " * interface.\n",
        "27": " * <p>As this interface extends {@link java.util.function.Supplier}, an instance of this type\n",
        "28": " * can be used as a {@code java.util.function.Supplier} directly.  To use a\n",
        "29": " * {@code java.util.function.Supplier} in a context where a\n",
        "30": " * {@code com.google.common.base.Supplier} is needed, use {@code supplier::get}.\n",
        "32": " * <p>See the Guava User Guide article on\n",
        "33": " * <a href=\"https://github.com/google/guava/wiki/FunctionalExplained\">the use of {@code\n",
        "34": " * Function}</a>.\n",
        "40": "@FunctionalInterface\n",
        "41": "public interface Supplier<T> extends java.util.function.Supplier<T> {\n"
    },
    "removed": {
        "21": " * A class that can supply objects of a single type; a pre-Java-8 version of {@code\n",
        "22": " * java.util.function.Supplier}. Semantically, this could be a factory, generator, builder,\n",
        "23": " * closure, or something else entirely. No guarantees are implied by this interface.\n",
        "27": " * <p>See the Guava User Guide article on <a href=\n",
        "28": " * \"https://github.com/google/guava/wiki/FunctionalExplained\">the use of functional types</a>.\n",
        "30": " * <h3>For Java 8+ users</h3>\n",
        "31": " *\n",
        "32": " * <p>This interface is now a legacy type. Use {@code java.util.function.Supplier} (or the\n",
        "33": " * appropriate primitive specialization such as {@code IntSupplier}) instead whenever possible.\n",
        "34": " * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions\n",
        "35": " * or method references instead of classes, leaving your code easier to migrate in the future.\n",
        "36": " *\n",
        "37": " * <p>To use an existing supplier instance (say, named {@code supplier}) in a context where the\n",
        "38": " * <i>other type</i> of supplier is expected, use the method reference {@code supplier::get}. A\n",
        "39": " * future version of {@code com.google.common.base.Supplier} will be made to <i>extend</i> {@code\n",
        "40": " * java.util.function.Supplier}, making conversion code necessary only in one direction. At that\n",
        "41": " * time, this interface will be officially discouraged.\n",
        "47": "public interface Supplier<T> {\n"
    }
}