{
    "addition": {
        "33": "import java.util.stream.Stream;\n",
        "37": " * A discouraged (but not deprecated) precursor to Java's superior {@link Stream} library.\n",
        "58": " * <p>{@link Stream} is similar to this class, but generally more powerful, and certainly more\n",
        "59": " * standard. Key differences include:\n",
        "74": " * <li>Streams are standard Java, not requiring a third-party dependency.\n",
        "134": "   * <p><b>{@code Stream} equivalent:</b> {@link Collection#stream} if {@code iterable} is a\n",
        "135": "   * {@link Collection}; {@link Streams#stream(Iterable)} otherwise.\n",
        "243": "   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code\n",
        "244": "   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n",
        "283": "   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.\n",
        "336": "   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.\n",
        "603": "   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code\n",
        "617": "   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code\n",
        "632": "   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSet#toImmutableSet} to {@code\n",
        "647": "   * <p><b>{@code Stream} equivalent:</b> pass {@link\n",
        "661": "   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableMultiset#toImmutableMultiset} to\n",
        "662": "   * {@code\n",
        "680": "   * <p><b>{@code Stream} equivalent:</b> {@code\n",
        "681": "   * stream.collect(ImmutableMap.toImmutableMap(k -> k, valueFunction))}.\n",
        "736": "   * <p><b>{@code Stream} equivalent:</b> {@code\n",
        "737": "   * stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}.\n",
        "826": "  /**\n",
        "827": "   * Returns a stream of this fluent iterable's contents (similar to calling {@link\n",
        "828": "   * Collection#stream} on a collecion).\n",
        "829": "   *\n",
        "830": "   * <p><b>Note:</b> the earlier in the chain you can switch to {@code Stream} usage (ideally not\n",
        "831": "   * going through {@code FluentIterable} at all), the more performant and idiomatic your code will\n",
        "832": "   * be. This method is a transitional aid, to be used only when really necessary.\n",
        "833": "   *\n",
        "834": "   * @since 21.0\n",
        "835": "   */\n",
        "836": "  public final Stream<E> stream() {\n",
        "837": "    return Streams.stream(getDelegate());\n",
        "838": "  }\n",
        "839": "\n"
    },
    "removed": {
        "36": " * An expanded {@code Iterable} API, providing functionality similar to Java 8's powerful <a href=\n",
        "37": " * \"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#package.description\"\n",
        "38": " * >streams library</a> in a slightly different way.\n",
        "59": " * <p>Starting with Java 8, the core Java class libraries provide a new \"Streams\" library (in {@code\n",
        "60": " * java.util.stream}), which is similar to {@code FluentIterable} but generally more powerful. Key\n",
        "61": " * differences include:\n",
        "76": " * <li>Streams are standard Java, not requiring a third-party dependency (but do render your code\n",
        "77": " *     incompatible with Java 7 and earlier).\n",
        "137": "   * <p><b>{@code Stream} equivalent:</b> {@code iterable.stream()} if {@code iterable} is a\n",
        "138": "   * {@link Collection}; {@code StreamSupport.stream(iterable.spliterator(), false)} otherwise.\n",
        "246": "   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, after the next\n",
        "247": "   * release of Guava you can use {@code Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.\n",
        "286": "   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}.\n",
        "339": "   * <p><b>{@code Stream} equivalent:</b> {@code stream.count()}.\n",
        "606": "   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableList.copyOf(stream.iterator())}, or after\n",
        "607": "   * the next release of Guava, pass {@link ImmutableList#toImmutableList} to {@code\n",
        "621": "   * <p><b>{@code Stream} equivalent:</b> {@code\n",
        "622": "   * ImmutableList.copyOf(stream.sorted(comparator).iterator())}, or after the next release of\n",
        "623": "   * Guava, pass {@link ImmutableList#toImmutableList} to {@code\n",
        "638": "   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableSet.copyOf(stream.iterator())}, or after\n",
        "639": "   * the next release of Guava, pass {@link ImmutableSet#toImmutableSet} to {@code\n",
        "654": "   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableSortedSet.copyOf(comparator,\n",
        "655": "   * stream.iterator())}, or after the next release of Guava, pass {@link\n",
        "669": "   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableMultiset.copyOf(stream.iterator())}, or\n",
        "670": "   * after the next release of Guava, pass {@link ImmutableMultiset#toImmutableMultiset} to {@code\n",
        "688": "   * <p><b>{@code Stream} equivalent:</b> after the next release of Guava, use {@code\n",
        "689": "   * stream.collect(ImmutableMap.toImmutableMap(k -> k, valueFunction))}. Before then you can use\n",
        "690": "   * {@code ImmutableMap.copyOf(stream.collect(Collectors.toMap(k -> k, valueFunction)))}, but be\n",
        "691": "   * aware that this may not preserve the order of entries.\n",
        "746": "   * <p><b>{@code Stream} equivalent:</b> after the next release of Guava, use {@code\n",
        "747": "   * stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}. Before then you can use\n",
        "748": "   * {@code ImmutableMap.copyOf(stream.collect(Collectors.toMap(keyFunction, v -> v)))}, but be\n",
        "749": "   * aware that this may not preserve the order of entries.\n"
    }
}