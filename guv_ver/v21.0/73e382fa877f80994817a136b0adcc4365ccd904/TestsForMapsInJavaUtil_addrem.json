{
    "addition": {
        "37": "import java.util.NavigableMap;\n",
        "62": "    suite.addTest(testsForCheckedNavigableMap());\n",
        "65": "    suite.addTest(testsForEmptyNavigableMap());\n",
        "66": "    suite.addTest(testsForEmptySortedMap());\n",
        "74": "    suite.addTest(testsForUnmodifiableNavigableMap());\n",
        "87": "  protected Collection<Method> suppressForCheckedNavigableMap() {\n",
        "88": "    return Collections.emptySet();\n",
        "89": "  }\n",
        "90": "\n",
        "99": "  private Collection<Method> suppressForEmptyNavigableMap() {\n",
        "100": "    return Collections.emptySet();\n",
        "101": "  }\n",
        "102": "\n",
        "103": "  private Collection<Method> suppressForEmptySortedMap() {\n",
        "104": "    return Collections.emptySet();\n",
        "105": "  }\n",
        "106": "\n",
        "135": "  protected Collection<Method> suppressForUnmodifiableNavigableMap() {\n",
        "136": "    return Collections.emptySet();\n",
        "137": "  }\n",
        "138": "\n",
        "180": "  public Test testsForCheckedNavigableMap() {\n",
        "181": "    return SortedMapTestSuiteBuilder.using(\n",
        "182": "        new TestStringSortedMapGenerator() {\n",
        "183": "          @Override\n",
        "184": "          protected NavigableMap<String, String> create(Entry<String, String>[] entries) {\n",
        "185": "            NavigableMap<String, String> map = populate(new TreeMap<String, String>(), entries);\n",
        "186": "            return Collections.checkedNavigableMap(map, String.class, String.class);\n",
        "187": "          }\n",
        "188": "        })\n",
        "189": "        .named(\"checkedNavigableMap/TreeMap, natural\")\n",
        "190": "        .withFeatures(\n",
        "191": "            MapFeature.GENERAL_PURPOSE,\n",
        "192": "            MapFeature.ALLOWS_NULL_VALUES,\n",
        "193": "            MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "194": "            MapFeature.RESTRICTS_KEYS,\n",
        "195": "            MapFeature.RESTRICTS_VALUES,\n",
        "196": "            CollectionFeature.KNOWN_ORDER,\n",
        "197": "            CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n",
        "198": "            CollectionFeature.SERIALIZABLE,\n",
        "199": "            CollectionSize.ANY)\n",
        "200": "        .suppressing(suppressForCheckedNavigableMap())\n",
        "201": "        .createTestSuite();\n",
        "202": "  }\n",
        "203": "\n",
        "242": "  public Test testsForEmptyNavigableMap() {\n",
        "243": "    return MapTestSuiteBuilder.using(\n",
        "244": "        new TestStringSortedMapGenerator() {\n",
        "245": "          @Override\n",
        "246": "          protected NavigableMap<String, String> create(Entry<String, String>[] entries) {\n",
        "247": "            return Collections.emptyNavigableMap();\n",
        "248": "          }\n",
        "249": "        })\n",
        "250": "        .named(\"emptyNavigableMap\")\n",
        "251": "        .withFeatures(CollectionFeature.SERIALIZABLE, CollectionSize.ZERO)\n",
        "252": "        .suppressing(suppressForEmptyNavigableMap())\n",
        "253": "        .createTestSuite();\n",
        "254": "\n",
        "255": "  }\n",
        "256": "\n",
        "257": "  public Test testsForEmptySortedMap() {\n",
        "258": "    return MapTestSuiteBuilder.using(\n",
        "259": "        new TestStringSortedMapGenerator() {\n",
        "260": "          @Override\n",
        "261": "          protected SortedMap<String, String> create(Entry<String, String>[] entries) {\n",
        "262": "            return Collections.emptySortedMap();\n",
        "263": "          }\n",
        "264": "        })\n",
        "265": "        .named(\"emptySortedMap\")\n",
        "266": "        .withFeatures(CollectionFeature.SERIALIZABLE, CollectionSize.ZERO)\n",
        "267": "        .suppressing(suppressForEmptySortedMap())\n",
        "268": "        .createTestSuite();\n",
        "269": "\n",
        "270": "  }\n",
        "271": "\n",
        "428": "  public Test testsForUnmodifiableNavigableMap() {\n",
        "429": "    return MapTestSuiteBuilder.using(\n",
        "430": "        new TestStringSortedMapGenerator() {\n",
        "431": "          @Override\n",
        "432": "          protected NavigableMap<String, String> create(Entry<String, String>[] entries) {\n",
        "433": "            return Collections.unmodifiableNavigableMap(populate(new TreeMap<>(), entries));\n",
        "434": "          }\n",
        "435": "        })\n",
        "436": "        .named(\"unmodifiableNavigableMap/TreeMap, natural\")\n",
        "437": "        .withFeatures(\n",
        "438": "            MapFeature.ALLOWS_NULL_VALUES,\n",
        "439": "            CollectionFeature.KNOWN_ORDER,\n",
        "440": "            CollectionFeature.SERIALIZABLE,\n",
        "441": "            CollectionSize.ANY)\n",
        "442": "        .suppressing(suppressForUnmodifiableNavigableMap())\n",
        "443": "        .createTestSuite();\n",
        "444": "  }\n",
        "445": "\n",
        "487": "    return MapTestSuiteBuilder.using(\n",
        "505": "    return NavigableMapTestSuiteBuilder.using(\n",
        "524": "    return NavigableMapTestSuiteBuilder.using(\n"
    },
    "removed": {
        "394": "    return ConcurrentMapTestSuiteBuilder.using(\n",
        "412": "    return ConcurrentNavigableMapTestSuiteBuilder.using(\n",
        "431": "    return ConcurrentNavigableMapTestSuiteBuilder.using(\n"
    }
}