{
    "addition": {
        "40": "import java.util.Spliterator;\n",
        "41": "import java.util.function.Consumer;\n",
        "186": "    @Override\n",
        "187": "    public Spliterator<E> spliterator() {\n",
        "188": "      return CollectSpliterators.filter(unfiltered.spliterator(), predicate);\n",
        "189": "    }\n",
        "190": "\n",
        "191": "    @Override\n",
        "192": "    public void forEach(Consumer<? super E> action) {\n",
        "193": "      checkNotNull(action);\n",
        "194": "      unfiltered.forEach(\n",
        "195": "          (E e) -> {\n",
        "196": "            if (predicate.test(e)) {\n",
        "197": "              action.accept(e);\n",
        "198": "            }\n",
        "199": "          });\n",
        "200": "    }\n",
        "201": "\n",
        "209": "      return removeIf(collection::contains);\n",
        "214": "      return removeIf(element -> !collection.contains(element));\n",
        "215": "    }\n",
        "216": "\n",
        "217": "    @Override\n",
        "218": "    public boolean removeIf(java.util.function.Predicate<? super E> filter) {\n",
        "219": "      checkNotNull(filter);\n",
        "220": "      return unfiltered.removeIf(element -> predicate.apply(element) && filter.test(element));\n",
        "288": "    @Override\n",
        "289": "    public Spliterator<T> spliterator() {\n",
        "290": "      return CollectSpliterators.map(fromCollection.spliterator(), function);\n",
        "291": "    }\n",
        "292": "\n",
        "293": "    @Override\n",
        "294": "    public void forEach(Consumer<? super T> action) {\n",
        "295": "      checkNotNull(action);\n",
        "296": "      fromCollection.forEach((F f) -> action.accept(function.apply(f)));\n",
        "297": "    }\n",
        "298": "\n",
        "299": "    @Override\n",
        "300": "    public boolean removeIf(java.util.function.Predicate<? super T> filter) {\n",
        "301": "      checkNotNull(filter);\n",
        "302": "      return fromCollection.removeIf(element -> filter.test(function.apply(element)));\n",
        "303": "    }\n",
        "304": "\n"
    },
    "removed": {
        "21": "import static com.google.common.base.Predicates.and;\n",
        "22": "import static com.google.common.base.Predicates.not;\n",
        "193": "      return Iterables.removeIf(unfiltered, and(predicate, Predicates.<Object>in(collection)));\n",
        "198": "      return Iterables.removeIf(unfiltered, and(predicate, not(Predicates.<Object>in(collection))));\n"
    }
}