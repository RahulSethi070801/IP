{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2015 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.collect.testing.testers;\n",
        "18": "\n",
        "19": "import static com.google.common.collect.testing.features.CollectionSize.ZERO;\n",
        "20": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\n",
        "21": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEY_QUERIES;\n",
        "22": "import static com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.GwtCompatible;\n",
        "25": "import com.google.common.collect.testing.AbstractMapTester;\n",
        "26": "import com.google.common.collect.testing.WrongType;\n",
        "27": "import com.google.common.collect.testing.features.CollectionSize;\n",
        "28": "import com.google.common.collect.testing.features.MapFeature;\n",
        "29": "import java.util.Map;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * A generic JUnit test which tests {@link Map#getOrDefault}. Can't be\n",
        "33": " * invoked directly; please see\n",
        "34": " * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.\n",
        "35": " *\n",
        "36": " * @author Louis Wasserman\n",
        "37": " */\n",
        "38": "@GwtCompatible\n",
        "39": "public class MapGetOrDefaultTester<K, V> extends AbstractMapTester<K, V> {\n",
        "40": "  @CollectionSize.Require(absent = ZERO)\n",
        "41": "  public void testGetOrDefault_present() {\n",
        "42": "    assertEquals(\"getOrDefault(present, def) should return the associated value\",\n",
        "43": "        v0(), getMap().getOrDefault(k0(), v3()));\n",
        "44": "  }\n",
        "45": "  \n",
        "46": "  @CollectionSize.Require(absent = ZERO)\n",
        "47": "  public void testGetOrDefault_presentNullDefault() {\n",
        "48": "    assertEquals(\"getOrDefault(present, null) should return the associated value\",\n",
        "49": "        v0(), getMap().getOrDefault(k0(), null));\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  public void testGetOrDefault_absent() {\n",
        "53": "    assertEquals(\"getOrDefault(absent, def) should return the default value\",\n",
        "54": "        v3(), getMap().getOrDefault(k3(), v3()));\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  public void testGetOrDefault_absentNullDefault() {\n",
        "58": "    assertNull(\"getOrDefault(absent, null) should return null\",\n",
        "59": "        getMap().getOrDefault(k3(), null));\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  @MapFeature.Require(ALLOWS_NULL_KEY_QUERIES)\n",
        "63": "  public void testGetOrDefault_absentNull() {\n",
        "64": "    assertEquals(\"getOrDefault(null, def) should return the default value\",\n",
        "65": "        v3(), getMap().getOrDefault(null, v3()));\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  @MapFeature.Require(absent = ALLOWS_NULL_KEY_QUERIES)\n",
        "69": "  public void testGetOrDefault_nullAbsentAndUnsupported() {\n",
        "70": "    try {\n",
        "71": "      assertEquals(\"getOrDefault(null, def) should return default or throw\",\n",
        "72": "          v3(), getMap().getOrDefault(null, v3()));\n",
        "73": "    } catch (NullPointerException tolerated) {\n",
        "74": "    }\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  @MapFeature.Require(ALLOWS_NULL_KEYS)\n",
        "78": "  @CollectionSize.Require(absent = ZERO)\n",
        "79": "  public void testGetOrDefault_nonNullWhenNullContained() {\n",
        "80": "    initMapWithNullKey();\n",
        "81": "    assertEquals(\"getOrDefault(absent, default) should return default\", \n",
        "82": "        v3(), getMap().getOrDefault(k3(), v3()));\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  @MapFeature.Require(ALLOWS_NULL_KEYS)\n",
        "86": "  @CollectionSize.Require(absent = ZERO)\n",
        "87": "  public void testGetOrDefault_presentNull() {\n",
        "88": "    initMapWithNullKey();\n",
        "89": "    assertEquals(\"getOrDefault(null, default) should return the associated value\",\n",
        "90": "        getValueForNullKey(), getMap().getOrDefault(null, v3()));\n",
        "91": "  }\n",
        "92": "  \n",
        "93": "  @MapFeature.Require(ALLOWS_NULL_VALUES)\n",
        "94": "  @CollectionSize.Require(absent = ZERO)\n",
        "95": "  public void testGetOrDefault_presentMappedToNull() {\n",
        "96": "    initMapWithNullValue();\n",
        "97": "    assertNull(\"getOrDefault(mappedToNull, default) should return null\",\n",
        "98": "        getMap().getOrDefault(getKeyForNullValue(), v3()));\n",
        "99": "  }\n",
        "100": "\n",
        "101": "  public void testGet_wrongType() {\n",
        "102": "    try {\n",
        "103": "      assertEquals(\"getOrDefault(wrongType, default) should return default or throw\",\n",
        "104": "          v3(), getMap().getOrDefault(WrongType.VALUE, v3()));\n",
        "105": "    } catch (ClassCastException tolerated) {\n",
        "106": "    }\n",
        "107": "  }\n",
        "108": "}\n"
    },
    "removed": {}
}