com.google.common.collect.Synchronized$SynchronizedList
replaceAll
public void replaceAll(UnaryOperator<E> operator)
UnaryOperator
void
com.google.common.collect.CollectSpliterators
CollectSpliterators
private CollectSpliterators()
empty
constructor
com.google.common.collect.FluentIterable
stream
public final Stream<E> stream()
empty
Stream
com.google.common.collect.Iterables
skip
public static Iterable<T> skip(final Iterable<T> iterable, final int numberToSkip)
Iterable,int
Iterable
com.google.common.base.Predicate
test
boolean test(@Nullable T input)
T
boolean
com.google.common.util.concurrent.AtomicLongMap
addAndGet
public long addAndGet(K key, long delta)
K,long
long
com.google.common.collect.ImmutableCollection
spliterator
public Spliterator<E> spliterator()
empty
Spliterator
com.google.common.io.MoreFiles
throwDeleteFailed
private static void throwDeleteFailed(Path path, Collection<IOException> exceptions) throws FileSystemException
Path,Collection
void
com.google.common.collect.HashBiMap$Inverse
forEach
public void forEach(BiConsumer<? super V, ? super K> action)
BiConsumer
void
com.google.common.collect.RangeSet
enclosesAll
boolean enclosesAll(Iterable<Range<C>> other)
Iterable
boolean
com.google.common.collect.ImmutableTable
toImmutableTable
public static Collector<T, ?, ImmutableTable<R, C, V>> toImmutableTable(Function<? super T, ? extends R> rowFunction, Function<? super T, ? extends C> columnFunction, Function<? super T, ? extends V> valueFunction)
Function,Function,Function
Collector
com.google.common.collect.Streams
Streams
private Streams()
empty
constructor
com.google.common.collect.Maps$IteratorBasedAbstractMap
forEachEntry
void forEachEntry(Consumer<? super Entry<K, V>> action)
Consumer
void
com.google.common.collect.CollectSpliterators
indexed
static Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function)
int,int,IntFunction
Spliterator
com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp
storedPermitsToWaitTime
long storedPermitsToWaitTime(double storedPermits, double permitsToTake)
double,double
long
com.google.common.collect.Multimap
forEach
void forEach(BiConsumer<? super K, ? super V> action)
BiConsumer
void
com.google.common.collect.ImmutableList
toImmutableList
public static Collector<E, ?, ImmutableList<E>> toImmutableList()
empty
Collector
com.google.common.collect.ImmutableSortedMap
toImmutableSortedMap
public static Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)
Comparator,Function,Function
Collector
com.google.common.collect.MoreCollectors
onlyElement
public static Collector<T, ?, T> onlyElement()
empty
Collector
com.google.common.util.concurrent.AtomicLongMap
remove
boolean remove(K key, long value)
K,long
boolean
com.google.common.util.concurrent.AtomicLongMap
createAsMap
private Map<K, Long> createAsMap()
empty
Map
com.google.common.collect.ImmutableMultiset
toImmutableMultiset
private static Collector<T, ?, ImmutableMultiset<E>> toImmutableMultiset(Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction)
Function,ToIntFunction
Collector
com.google.common.collect.Maps$KeySet
forEach
public void forEach(Consumer<? super K> action)
Consumer
void
com.google.common.collect.AbstractMapBasedMultimap$AsMapEntries
spliterator
public Spliterator<Entry<K, Collection<V>>> spliterator()
empty
Spliterator
com.google.common.collect.LinkedListMultimap
createEntries
List<Entry<K, V>> createEntries()
empty
List
com.google.common.collect.CollectSpliterators$WithCharacteristics
WithCharacteristics
WithCharacteristics(Spliterator<T> delegate)
Spliterator
constructor
com.google.common.io.MoreFiles$PathByteSource
PathByteSource
private PathByteSource(Path path, OpenOption... options)
Path,OpenOption...
constructor
com.google.common.base.Function
apply
T apply(@Nullable F input)
F
T
com.google.common.collect.Streams
concat
public static IntStream concat(IntStream... streams)
IntStream...
IntStream
com.google.common.collect.Maps$TransformedEntriesMap
get
public V2 get(@Nullable Object key)
Object
V2
com.google.common.collect.AbstractRangeSet
removeAll
public void removeAll(Iterable<Range<C>> ranges)
Iterable
void
com.google.common.collect.Iterables
transform
public static Iterable<T> transform(final Iterable<F> fromIterable, final Function<? super F, ? extends T> function)
Iterable,Function
Iterable
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap
replaceAll
public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)
BiFunction
void
com.google.common.util.concurrent.AtomicLongMap
remove
public long remove(K key)
K
long
com.google.common.collect.CollectCollectors
toImmutableBiMap
static Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)
Function,Function
Collector
com.google.common.util.concurrent.AtomicLongMap
put
public long put(K key, long newValue)
K,long
long
com.google.common.collect.HashBiMap$Inverse
put
public K put(@Nullable V value, @Nullable K key)
V,K
K
com.google.common.collect.super.com.google.common.collect.ImmutableMap
toImmutableMap
public static Collector<T, ?, ImmutableMap<K, V>> toImmutableMap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)
Function,Function
Collector
com.google.common.collect.ImmutableSortedMap
toImmutableSortedMap
public static Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction, BinaryOperator<V> mergeFunction)
Comparator,Function,Function,BinaryOperator
Collector
com.google.common.io.MoreFiles
directoryTreeTraverser
public static TreeTraverser<Path> directoryTreeTraverser()
empty
TreeTraverser
com.google.common.io.MoreFiles
checkAllowsInsecure
private static void checkAllowsInsecure(Path path, RecursiveDeleteOption[] options) throws InsecureRecursiveDeleteException
Path,RecursiveDeleteOption[]
void
com.google.common.collect.AbstractMapBasedMultimap$KeySet
spliterator
public Spliterator<K> spliterator()
empty
Spliterator
com.google.common.io.InsecureRecursiveDeleteException
InsecureRecursiveDeleteException
public InsecureRecursiveDeleteException(@Nullable String file)
String
constructor
com.google.common.collect.CollectSpliterators
map
static Spliterator<T> map(Spliterator<F> fromSpliterator, Function<? super F, ? extends T> function)
Spliterator,Function
Spliterator
com.google.common.io.MoreFiles
createParentDirectories
public static void createParentDirectories(Path path, FileAttribute<?>... attrs) throws IOException
Path,FileAttribute...
void
com.google.common.collect.Iterables
removeIfFromRandomAccessList
private static boolean removeIfFromRandomAccessList(List<T> list, Predicate<? super T> predicate)
List,Predicate
boolean
com.google.common.io.MoreFiles$PathByteSource
toString
public String toString()
empty
String
com.google.common.collect.RangeSet
removeAll
void removeAll(Iterable<Range<C>> ranges)
Iterable
void
com.google.common.util.concurrent.AtomicLongMap
create
public static AtomicLongMap<K> create()
empty
AtomicLongMap
com.google.common.collect.ImmutableMap
getOrDefault
public final V getOrDefault(@Nullable Object key, @Nullable V defaultValue)
Object,V
V
com.google.common.io.MoreFiles$PathByteSource
size
public long size() throws IOException
empty
long
com.google.common.collect.ImmutableSetMultimap
toImmutableSetMultimap
public static Collector<T, ?, ImmutableSetMultimap<K, V>> toImmutableSetMultimap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)
Function,Function
Collector
com.google.common.cache.LocalCache
computeIfAbsent
public V computeIfAbsent(K key, Function<? super K, ? extends V> function)
K,Function
V
com.google.common.collect.Multiset
forEachEntry
void forEachEntry(ObjIntConsumer<? super E> action)
ObjIntConsumer
void
com.google.common.collect.CollectSpliterators$FlatMapSpliterator
FlatMapSpliterator
FlatMapSpliterator(Spliterator<T> prefix, Spliterator<F> from, int characteristics, long estimatedSize)
Spliterator,Spliterator,int,long
constructor
com.google.common.collect.HashBiMap$InverseEntry
getValue
public K getValue()
empty
K
com.google.common.io.MoreFiles
getParentPath
private static Path getParentPath(Path path) throws IOException
Path
Path
com.google.common.collect.MoreCollectors$ToOptionalState
getElement
Object getElement()
empty
Object
com.google.common.collect.ImmutableSortedMultiset
toImmutableSortedMultiset
private static Collector<T, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(Comparator<? super E> comparator, Function<? super T, ? extends E> elementFunction, ToIntFunction<? super T> countFunction)
Comparator,Function,ToIntFunction
Collector
com.google.common.collect.ImmutableMap
compute
public final V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
K,BiFunction
V
com.google.common.collect.Streams
findLast
public static OptionalInt findLast(IntStream stream)
IntStream
OptionalInt
com.google.common.collect.Sets
intersection
public static SetView<E> intersection(final Set<E> set1, final Set<?> set2)
Set,Set
SetView
com.google.common.io.MoreFiles$PathByteSource
read
public byte[] read() throws IOException
empty
byte[]
com.google.common.collect.AbstractTable$CellSet
spliterator
public Spliterator<Cell<R, C, V>> spliterator()
empty
Spliterator
com.google.common.collect.CollectSpliterators
estimateSize
public long estimateSize()
empty
long
com.google.common.io.MoreFiles$PathByteSource
openStream
public InputStream openStream() throws IOException
empty
InputStream
com.google.common.cache.LocalCache$LoadingValueReference
loadFuture
public ListenableFuture<V> loadFuture(K key, CacheLoader<? super K, V> loader)
K,CacheLoader
ListenableFuture
com.google.common.collect.HashBiMap$Inverse
replaceAll
public void replaceAll(BiFunction<? super V, ? super K, ? extends K> function)
BiFunction
void
com.google.common.base.Platform
loadPatternCompiler
private static PatternCompiler loadPatternCompiler()
empty
PatternCompiler
com.google.common.collect.Synchronized$SynchronizedCollection
parallelStream
public Stream<E> parallelStream()
empty
Stream
com.google.common.collect.ImmutableSortedSet
toImmutableSortedSet
public static Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(Comparator<? super E> comparator)
Comparator
Collector
com.google.common.collect.Streams
stream
public static LongStream stream(OptionalLong optional)
OptionalLong
LongStream
com.google.common.collect.Collections2$FilteredCollection
retainAll
public boolean retainAll(final Collection<?> collection)
Collection
boolean
com.google.common.collect.MoreCollectors
toOptional
public static Collector<T, ?, Optional<T>> toOptional()
empty
Collector
com.google.common.io.MoreFiles
deleteRecursivelySecure
private static Collection<IOException> deleteRecursivelySecure(SecureDirectoryStream<Path> dir, Path path)
SecureDirectoryStream,Path
Collection
com.google.common.io.MoreFiles
asByteSink
public static ByteSink asByteSink(Path path, OpenOption... options)
Path,OpenOption...
ByteSink
com.google.common.collect.Synchronized$SynchronizedMap
replace
public V replace(K key, V value)
K,V
V
com.google.common.collect.Streams
stream
public static DoubleStream stream(OptionalDouble optional)
OptionalDouble
DoubleStream
com.google.common.collect.Maps$TransformedEntriesMap
entrySpliterator
Spliterator<Entry<K, V2>> entrySpliterator()
empty
Spliterator
com.google.common.collect.CollectSpliterators$WithCharacteristics
characteristics
public int characteristics()
empty
int
com.google.common.collect.CollectSpliterators
flatMap
static Spliterator<T> flatMap(Spliterator<F> fromSpliterator, Function<? super F, Spliterator<T>> function, int topCharacteristics, long topSize)
Spliterator,Function,int,long
Spliterator
com.google.common.base.Optional
toJavaUtil
public static java.util.Optional<T> toJavaUtil(@Nullable Optional<T> googleOptional)
Optional
java.util.Optional
com.google.common.collect.Lists$TransformingSequentialList
removeIf
public boolean removeIf(Predicate<? super T> filter)
Predicate
boolean
com.google.common.io.MoreFiles
deleteDirectoryContentsSecure
private static Collection<IOException> deleteDirectoryContentsSecure(SecureDirectoryStream<Path> dir)
SecureDirectoryStream
Collection
com.google.common.util.concurrent.AtomicLongMap
getAndUpdate
public long getAndUpdate(K key, LongUnaryOperator updaterFunction)
K,LongUnaryOperator
long
com.google.common.io.MoreFiles
deleteRecursivelyInsecure
private static Collection<IOException> deleteRecursivelyInsecure(Path path)
Path
Collection
com.google.common.collect.ImmutableCollection
removeIf
public final boolean removeIf(Predicate<? super E> filter)
Predicate
boolean
com.google.common.collect.CollectSpliterators$Splitr
accept
public void accept(T t)
T
void
com.google.common.collect.MutableClassToInstanceMap
spliterator
public Spliterator<Entry<Class<? extends B>, B>> spliterator()
empty
Spliterator
com.google.common.collect.TreeTraverser
postOrderTraversal
public final FluentIterable<T> postOrderTraversal(final T root)
T
FluentIterable
com.google.common.collect.super.com.google.common.collect.ImmutableMap
toImmutableMap
public static Collector<T, ?, ImmutableMap<K, V>> toImmutableMap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction, BinaryOperator<V> mergeFunction)
Function,Function,BinaryOperator
Collector
com.google.common.collect.Iterables
limit
public static Iterable<T> limit(final Iterable<T> iterable, final int limitSize)
Iterable,int
Iterable
com.google.common.collect.Streams
concat
public static Stream<T> concat(Stream<? extends T>... streams)
Stream...
Stream
com.google.common.util.concurrent.AtomicLongMap
accumulateAndGet
public long accumulateAndGet(K key, long x, LongBinaryOperator accumulatorFunction)
K,long,LongBinaryOperator
long
com.google.common.io.MoreFiles
asCharSink
public static CharSink asCharSink(Path path, Charset charset, OpenOption... options)
Path,Charset,OpenOption...
CharSink
com.google.common.collect.BinaryTreeTraverser
children
public final Iterable<T> children(final T root)
T
Iterable
com.google.common.io.MoreFiles$PathByteSource
followLinks
private static boolean followLinks(OpenOption[] options)
OpenOption[]
boolean
com.google.common.io.MoreFiles
isRegularFile
public static Predicate<Path> isRegularFile(LinkOption... options)
LinkOption...
Predicate
com.google.common.collect.Collections2$TransformedCollection
spliterator
public Spliterator<T> spliterator()
empty
Spliterator
com.google.common.collect.Iterables
slowRemoveIfForRemainingElements
private static void slowRemoveIfForRemainingElements(List<T> list, Predicate<? super T> predicate, int to, int from)
List,Predicate,int,int
void
com.google.common.base.Optional
fromJavaUtil
public static Optional<T> fromJavaUtil(@Nullable java.util.Optional<T> javaUtilOptional)
java.util.Optional
Optional
com.google.common.io.MoreFiles
asCharSource
public static CharSource asCharSource(Path path, Charset charset, OpenOption... options)
Path,Charset,OpenOption...
CharSource
com.google.common.collect.Tables$TransposeTable
cellSpliterator
Spliterator<Cell<C, R, V>> cellSpliterator()
empty
Spliterator
com.google.common.collect.CollectCollectors
toImmutableSet
static Collector<E, ?, ImmutableSet<E>> toImmutableSet()
empty
Collector
com.google.common.collect.MoreCollectors$ToOptionalState
multiples
IllegalArgumentException multiples(boolean overflow)
boolean
IllegalArgumentException
com.google.common.collect.Synchronized$SynchronizedMap
merge
public V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)
K,V,BiFunction
V
com.google.common.cache.LocalCache$Segment
compute
V compute(K key, int hash, BiFunction<? super K, ? super V, ? extends V> function)
K,int,BiFunction
V
com.google.common.io.MoreFiles
deleteRecursively
public static void deleteRecursively(Path path, RecursiveDeleteOption... options) throws IOException
Path,RecursiveDeleteOption...
void
com.google.common.collect.AbstractRangeSet
enclosesAll
public boolean enclosesAll(Iterable<Range<C>> ranges)
Iterable
boolean
com.google.common.io.MoreFiles$DirectoryTreeTraverser
children
public Iterable<Path> children(Path dir)
Path
Iterable
com.google.common.io.MoreFiles
deleteDirectoryContentsInsecure
private static Collection<IOException> deleteDirectoryContentsInsecure(DirectoryStream<Path> dir)
DirectoryStream
Collection
com.google.common.collect.Streams$FunctionWithIndex
apply
R apply(T from, long index)
T,long
R
com.google.common.collect.AbstractRangeSet
addAll
public void addAll(Iterable<Range<C>> ranges)
Iterable
void
com.google.common.collect.Maps$AsMapView
get
public V get(@Nullable Object key)
Object
V
com.google.common.collect.ImmutableSortedMap$EntrySet
createAsList
ImmutableList<Entry<K, V>> createAsList()
empty
ImmutableList
com.google.common.collect.Synchronized$SynchronizedMap
replace
public boolean replace(K key, V oldValue, V newValue)
K,V,V
boolean
com.google.common.collect.ImmutableCollection
retainAll
public final boolean retainAll(Collection<?> elementsToKeep)
Collection
boolean
com.google.common.collect.Sets
difference
public static SetView<E> difference(final Set<E> set1, final Set<?> set2)
Set,Set
SetView
com.google.common.collect.StandardTable
cellSpliterator
Spliterator<Cell<R, C, V>> cellSpliterator()
empty
Spliterator
com.google.common.collect.Streams
tryAdvance
public boolean tryAdvance(Consumer<? super R> action)
Consumer
boolean
com.google.common.io.MoreFiles
concat
private static Collection<IOException> concat(@Nullable Collection<IOException> exceptions, @Nullable Collection<IOException> other)
Collection,Collection
Collection
com.google.common.collect.HashBiMap$Inverse
entrySet
public Set<Entry<V, K>> entrySet()
empty
Set
com.google.common.collect.HashBiMap$InverseEntry
setValue
public K setValue(K key)
K
K
com.google.common.collect.MoreCollectors$ToOptionalState
add
void add(Object o)
Object
void
com.google.common.util.concurrent.AtomicLongMap
updateAndGet
public long updateAndGet(K key, LongUnaryOperator updaterFunction)
K,LongUnaryOperator
long
com.google.common.collect.CollectCollectors
toImmutableSortedSet
static Collector<E, ?, ImmutableSortedSet<E>> toImmutableSortedSet(Comparator<? super E> comparator)
Comparator
Collector
com.google.common.collect.ImmutableList
replaceAll
public final void replaceAll(UnaryOperator<E> operator)
UnaryOperator
void
com.google.common.collect.TopKSelector
combine
TopKSelector<T> combine(TopKSelector<T> other)
TopKSelector
TopKSelector
com.google.common.collect.Iterables
filter
public static Iterable<T> filter(final Iterable<T> unfiltered, final Predicate<? super T> retainIfTrue)
Iterable,Predicate
Iterable
com.google.common.collect.ImmutableSortedMultisetFauxverideShim
toImmutableMultiset
public static Collector<E, ?, ImmutableMultiset<E>> toImmutableMultiset()
empty
Collector
com.google.common.collect.super.com.google.common.collect.ImmutableMap
keySpliterator
Spliterator<K> keySpliterator()
empty
Spliterator
com.google.common.collect.MoreCollectors$ToOptionalState
ToOptionalState
ToOptionalState()
empty
constructor
com.google.common.collect.Iterables
removeIf
public static boolean removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate)
Iterable,Predicate
boolean
com.google.common.collect.ImmutableSortedMap$Builder
combine
Builder<K, V> combine(ImmutableMap.Builder<K, V> other)
ImmutableMap.Builder
Builder
com.google.common.collect.ImmutableEnumSet
forEach
public void forEach(Consumer<? super E> action)
Consumer
void
com.google.common.cache.LocalCache$LoadingValueReference
LoadingValueReference
public LoadingValueReference(ValueReference<K, V> oldValue)
ValueReference
constructor
com.google.common.collect.AbstractMultimap$Values
spliterator
public Spliterator<V> spliterator()
empty
Spliterator
com.google.common.collect.Streams
findLast
public static OptionalLong findLast(LongStream stream)
LongStream
OptionalLong
com.google.common.collect.AbstractTable
cellSpliterator
abstract Spliterator<Table.Cell<R, C, V>> cellSpliterator()
empty
Spliterator
com.google.common.collect.ImmutableSet$Builder
combine
Builder<E> combine(ArrayBasedBuilder<E> builder)
ArrayBasedBuilder
Builder
com.google.common.collect.super.com.google.common.collect.ImmutableSet$Builder
combine
Builder<E> combine(Builder<E> builder)
Builder
Builder
com.google.common.collect.Multisets
spliteratorImpl
static Spliterator<E> spliteratorImpl(Multiset<E> multiset)
Multiset
Spliterator
com.google.common.collect.Streams
stream
public static Stream<T> stream(java.util.Optional<T> optional)
java.util.Optional
Stream
com.google.common.collect.CollectCollectors
toImmutableMap
static Collector<T, ?, ImmutableMap<K, V>> toImmutableMap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)
Function,Function
Collector
com.google.common.collect.CollectSpliterators
indexed
static Spliterator<T> indexed(int size, int extraCharacteristics, IntFunction<T> function, Comparator<? super T> comparator)
int,int,IntFunction,Comparator
Spliterator
com.google.common.util.concurrent.AtomicLongMap
putIfAbsent
long putIfAbsent(K key, long newValue)
K,long
long
com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap
entrySpliterator
Spliterator<Entry<K, V>> entrySpliterator()
empty
Spliterator
com.google.common.collect.Streams$Splitr
accept
public void accept(@Nullable T t)
T
void
com.google.common.io.MoreFiles
apply
public boolean apply(Path input)
Path
boolean
com.google.common.io.MoreFiles
deleteDirectoryContents
public static void deleteDirectoryContents(Path path, RecursiveDeleteOption... options) throws IOException
Path,RecursiveDeleteOption...
void
com.google.common.base.Equivalence
test
public final boolean test(@Nullable T t, @Nullable T u)
T,T
boolean
com.google.common.collect.Maps$Values
forEach
public void forEach(Consumer<? super V> action)
Consumer
void
com.google.common.collect.BinaryTreeTraverser
inOrderTraversal
public final FluentIterable<T> inOrderTraversal(final T root)
T
FluentIterable
com.google.common.collect.MutableClassToInstanceMap
checkedEntry
private static Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry)
Entry
Entry
com.google.common.collect.Collections2$FilteredCollection
removeAll
public boolean removeAll(final Collection<?> collection)
Collection
boolean
com.google.common.collect.Streams
stream
public static IntStream stream(OptionalInt optional)
OptionalInt
IntStream
com.google.common.collect.Synchronized$SynchronizedMap
putIfAbsent
public V putIfAbsent(K key, V value)
K,V
V
com.google.common.collect.Synchronized$SynchronizedMap
compute
public V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
K,BiFunction
V
com.google.common.collect.Streams$Splitr
Splitr
Splitr(Spliterator<T> splitr, long index)
Spliterator,long
constructor
com.google.common.collect.MutableClassToInstanceMap
entrySet
public Set<Entry<Class<? extends B>, B>> entrySet()
empty
Set
com.google.common.collect.ImmutableMap
putIfAbsent
public final V putIfAbsent(K key, V value)
K,V
V
com.google.common.collect.Multiset
spliterator
Spliterator<E> spliterator()
empty
Spliterator
com.google.common.collect.Synchronized$SynchronizedMap
getOrDefault
public V getOrDefault(Object key, V defaultValue)
Object,V
V
com.google.common.collect.Ordering
leastOf
public List<E> leastOf(Iterator<E> iterator, int k)
Iterator,int
List
com.google.common.collect.ImmutableMap
replace
public final boolean replace(K key, V oldValue, V newValue)
K,V,V
boolean
com.google.common.util.concurrent.AtomicLongMap
putAll
public void putAll(Map<? extends K, ? extends Long> m)
Map
void
com.google.common.collect.RangeSet
addAll
void addAll(Iterable<Range<C>> ranges)
Iterable
void
com.google.common.io.MoreFiles
getFileExtension
public static String getFileExtension(Path path)
Path
String
com.google.common.collect.ImmutableSortedMultiset
toImmutableSortedMultiset
public static Collector<E, ?, ImmutableSortedMultiset<E>> toImmutableSortedMultiset(Comparator<? super E> comparator)
Comparator
Collector
com.google.common.collect.Maps$AsMapView
getOrDefault
public V getOrDefault(@Nullable Object key, @Nullable V defaultValue)
Object,V
V
com.google.common.util.concurrent.AtomicLongMap
sum
public long sum()
empty
long
com.google.common.io.MoreFiles
MoreFiles
private MoreFiles()
empty
constructor
com.google.common.collect.Maps$TransformedEntriesMap
getOrDefault
public V2 getOrDefault(@Nullable Object key, @Nullable V2 defaultValue)
Object,V2
V2
com.google.common.collect.Iterables
filter
public static Iterable<T> filter(final Iterable<?> unfiltered, final Class<T> desiredType)
Iterable,Class
Iterable
com.google.common.io.MoreFiles
getNameWithoutExtension
public static String getNameWithoutExtension(Path path)
Path
String
com.google.common.util.concurrent.AtomicLongMap
get
public long get(K key)
K
long
com.google.common.collect.Sets
union
public static SetView<E> union(final Set<? extends E> set1, final Set<? extends E> set2)
Set,Set
SetView
com.google.common.collect.Streams
zip
public static Stream<R> zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A, ? super B, R> function)
Stream,Stream,BiFunction
Stream
com.google.common.collect.ImmutableTable
cellSpliterator
final Spliterator<Cell<R, C, V>> cellSpliterator()
empty
Spliterator
com.google.common.collect.ImmutableMap
remove
public final boolean remove(Object key, Object value)
Object,Object
boolean
com.google.common.collect.HashBiMap$InverseEntry
InverseEntry
InverseEntry(BiEntry<K, V> entry)
BiEntry
constructor
com.google.common.io.MoreFiles
asByteSource
public static ByteSource asByteSource(Path path, OpenOption... options)
Path,OpenOption...
ByteSource
com.google.common.collect.Collections2$TransformedCollection
removeIf
public boolean removeIf(java.util.function.Predicate<? super T> filter)
java.util.function.Predicate
boolean
com.google.common.cache.LocalCache
removeIf
boolean removeIf(BiPredicate<? super K, ? super V> filter)
BiPredicate
boolean
com.google.common.collect.Synchronized$SynchronizedMap
computeIfAbsent
public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)
K,Function
V
com.google.common.io.MoreFiles
touch
public static void touch(Path path) throws IOException
Path
void
com.google.common.collect.MoreCollectors$ToOptionalState
getOptional
Optional<Object> getOptional()
empty
Optional
com.google.common.cache.LocalCache
merge
public V merge(K key, V newValue, BiFunction<? super V, ? super V, ? extends V> function)
K,V,BiFunction
V
com.google.common.collect.RegularImmutableMap
forEach
public void forEach(BiConsumer<? super K, ? super V> action)
BiConsumer
void
com.google.common.collect.ImmutableList
sort
public final void sort(Comparator<? super E> c)
Comparator
void
com.google.common.collect.Multimaps$Keys
forEach
public void forEach(Consumer<? super K> consumer)
Consumer
void
com.google.common.collect.Synchronized$SynchronizedList
sort
public void sort(Comparator<? super E> c)
Comparator
void
com.google.common.collect.Streams
concat
public static DoubleStream concat(DoubleStream... streams)
DoubleStream...
DoubleStream
com.google.common.collect.super.com.google.common.collect.ImmutableSet
toImmutableSet
public static Collector<E, ?, ImmutableSet<E>> toImmutableSet()
empty
Collector
com.google.common.collect.ImmutableMap
replaceAll
public final void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)
BiFunction
void
com.google.common.collect.Streams
stream
public static Stream<T> stream(Iterator<T> iterator)
Iterator
Stream
com.google.common.collect.ImmutableMultimap$Builder
build
public ImmutableMultimap<K, V> build()
empty
ImmutableMultimap
com.google.common.util.concurrent.AtomicLongMap
replace
boolean replace(K key, long expectedOldValue, long newValue)
K,long,long
boolean
com.google.common.collect.Maps$TransformedEntriesMap
get
public V2 get(Object key)
Object
V2
com.google.common.collect.CollectSpliterators$Splitr
getComparator
public Comparator<? super T> getComparator()
empty
Comparator
com.google.common.collect.Collections2$TransformedCollection
forEach
public void forEach(Consumer<? super T> action)
Consumer
void
com.google.common.io.MoreFiles
listFiles
public static ImmutableList<Path> listFiles(Path dir) throws IOException
Path
ImmutableList
com.google.common.util.concurrent.Monitor
newGuard
public Guard newGuard(final BooleanSupplier isSatisfied)
BooleanSupplier
Guard
com.google.common.collect.Collections2$FilteredCollection
removeIf
public boolean removeIf(java.util.function.Predicate<? super E> filter)
java.util.function.Predicate
boolean
com.google.common.collect.HashBiMap$Inverse
entryIterator
Iterator<Entry<V, K>> entryIterator()
empty
Iterator
com.google.common.collect.TreeTraverser
preOrderTraversal
public final FluentIterable<T> preOrderTraversal(final T root)
T
FluentIterable
com.google.common.collect.Maps$TransformedEntriesMap
forEach
public void forEach(BiConsumer<? super K, ? super V2> action)
BiConsumer
void
com.google.common.collect.Streams
findLast
public static java.util.Optional<T> findLast(Stream<T> stream)
Stream
java.util.Optional
com.google.common.collect.RegularImmutableTable
forCells
static RegularImmutableTable<R, C, V> forCells(List<Cell<R, C, V>> cells, @Nullable final Comparator<? super R> rowComparator, @Nullable final Comparator<? super C> columnComparator)
List,Comparator,Comparator
RegularImmutableTable
com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet
forEach
public void forEach(Consumer<? super Entry<K, V>> action)
Consumer
void
com.google.common.collect.ImmutableTable$Builder
combine
Builder<R, C, V> combine(Builder<R, C, V> other)
Builder
Builder
com.google.common.io.MoreFiles
addException
private static Collection<IOException> addException(@Nullable Collection<IOException> exceptions, IOException e)
Collection,IOException
Collection
com.google.common.collect.MoreCollectors
MoreCollectors
private MoreCollectors()
empty
constructor
com.google.common.collect.StandardTable$Row
entrySpliterator
Spliterator<Entry<C, V>> entrySpliterator()
empty
Spliterator
com.google.common.collect.Multiset
forEach
void forEach(Consumer<? super E> action)
Consumer
void
com.google.common.collect.MoreCollectors$ToOptionalState
combine
ToOptionalState combine(ToOptionalState other)
ToOptionalState
ToOptionalState
com.google.common.collect.CollectSpliterators
filter
static Spliterator<T> filter(Spliterator<T> fromSpliterator, Predicate<? super T> predicate)
Spliterator,Predicate
Spliterator
com.google.common.collect.Iterables
cycle
public static Iterable<T> cycle(final Iterable<T> iterable)
Iterable
Iterable
com.google.common.collect.super.com.google.common.collect.ImmutableBiMap
toImmutableBiMap
public static Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)
Function,Function
Collector
com.google.common.collect.Synchronized$SynchronizedMultimap
remove
public boolean remove(Object key, Object value)
Object,Object
boolean
com.google.common.collect.ArrayTable
valuesSpliterator
Spliterator<V> valuesSpliterator()
empty
Spliterator
com.google.common.collect.Streams
mapWithIndex
public static Stream<R> mapWithIndex(Stream<T> stream, FunctionWithIndex<? super T, ? extends R> function)
Stream,FunctionWithIndex
Stream
com.google.common.collect.CollectSpliterators
tryAdvance
public boolean tryAdvance(Consumer<? super T> action)
Consumer
boolean
com.google.common.collect.Streams
findLast
public static OptionalDouble findLast(DoubleStream stream)
DoubleStream
OptionalDouble
com.google.common.collect.CollectCollectors
toImmutableSortedMap
static Collector<T, ?, ImmutableSortedMap<K, V>> toImmutableSortedMap(Comparator<? super K> comparator, Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)
Comparator,Function,Function
Collector
com.google.common.collect.AbstractMultimap
valueSpliterator
Spliterator<V> valueSpliterator()
empty
Spliterator
com.google.common.collect.CollectCollectors
toImmutableList
static Collector<E, ?, ImmutableList<E>> toImmutableList()
empty
Collector
com.google.common.util.concurrent.AtomicLongMap
AtomicLongMap
private AtomicLongMap(ConcurrentHashMap<K, Long> map)
ConcurrentHashMap
constructor
com.google.common.collect.Synchronized$SynchronizedMap
computeIfPresent
public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
K,BiFunction
V
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder
combine
ArrayBasedBuilder<E> combine(ArrayBasedBuilder<E> builder)
ArrayBasedBuilder
ArrayBasedBuilder
com.google.common.collect.ImmutableMap
remove
public final V remove(Object o)
Object
V
com.google.common.collect.ImmutableMap
computeIfPresent
public final V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
K,BiFunction
V
com.google.common.collect.ImmutableListMultimap
toImmutableListMultimap
public static Collector<T, ?, ImmutableListMultimap<K, V>> toImmutableListMultimap(Function<? super T, ? extends K> keyFunction, Function<? super T, ? extends V> valueFunction)
Function,Function
Collector
com.google.common.collect.super.com.google.common.collect.ImmutableMap$Builder
combine
Builder<K, V> combine(Builder<K, V> other)
Builder
Builder
com.google.common.collect.CollectSpliterators
forEachRemaining
public void forEachRemaining(Consumer<? super T> action)
Consumer
void
com.google.common.collect.Streams
stream
public static Stream<T> stream(Iterable<T> iterable)
Iterable
Stream
com.google.common.collect.ImmutableSet$Indexed
forEach
public void forEach(Consumer<? super E> consumer)
Consumer
void
com.google.common.io.MoreFiles$PathByteSource
readAttributes
private BasicFileAttributes readAttributes() throws IOException
empty
BasicFileAttributes
com.google.common.collect.BinaryTreeTraverser
acceptIfPresent
private static void acceptIfPresent(Consumer<? super T> action, Optional<T> node)
Consumer,Optional
void
com.google.common.io.MoreFiles
isDirectory
public static Predicate<Path> isDirectory(LinkOption... options)
LinkOption...
Predicate
com.google.common.collect.ImmutableMap
computeIfAbsent
public final V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)
K,Function
V
com.google.common.cache.LocalCache
computeIfPresent
public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> function)
K,BiFunction
V
com.google.common.cache.LocalCache$Values
removeIf
public boolean removeIf(Predicate<? super V> filter)
Predicate
boolean
com.google.common.collect.Tables$TransformedTable
cellSpliterator
Spliterator<Cell<R, C, V2>> cellSpliterator()
empty
Spliterator
com.google.common.collect.AbstractMapBasedMultiset
forEachEntry
public void forEachEntry(ObjIntConsumer<? super E> action)
ObjIntConsumer
void
com.google.common.io.MoreFiles$PathByteSink
PathByteSink
private PathByteSink(Path path, OpenOption... options)
Path,OpenOption...
constructor
com.google.common.collect.ImmutableSortedMap
createEntrySet
ImmutableSet<Entry<K, V>> createEntrySet()
empty
ImmutableSet
com.google.common.util.concurrent.AtomicLongMap
getAndAccumulate
public long getAndAccumulate(K key, long x, LongBinaryOperator accumulatorFunction)
K,long,LongBinaryOperator
long
com.google.common.cache.LocalCache$LoadingValueReference
LoadingValueReference
public LoadingValueReference()
empty
constructor
com.google.common.collect.MutableClassToInstanceMap
checkedEntry
static Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry)
Entry
Entry
com.google.common.io.MoreFiles
isDirectory
private static boolean isDirectory(SecureDirectoryStream<Path> dir, Path name, LinkOption... options) throws IOException
SecureDirectoryStream,Path,LinkOption...
boolean
com.google.common.collect.Maps
transformEntries
public static NavigableMap<K, V2> transformEntries(NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer)
NavigableMap,EntryTransformer
NavigableMap
com.google.common.util.concurrent.Monitor
isSatisfied
public boolean isSatisfied()
empty
boolean
com.google.common.collect.ImmutableMap
merge
public final V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)
K,V,BiFunction
V
com.google.common.io.MoreFiles$PathByteSink
openStream
public OutputStream openStream() throws IOException
empty
OutputStream
com.google.common.collect.Maps
transformEntries
public static NavigableMap<K, V2> transformEntries(final NavigableMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer)
NavigableMap,EntryTransformer
NavigableMap
com.google.common.collect.Streams
stream
public static Stream<T> stream(Collection<T> collection)
Collection
Stream
com.google.common.collect.ImmutableMap
replace
public final V replace(K key, V value)
K,V
V
com.google.common.util.concurrent.AtomicLongMap
removeAllZeros
public void removeAllZeros()
empty
void
com.google.common.collect.AbstractMultimap$Entries
spliterator
public Spliterator<Entry<K, V>> spliterator()
empty
Spliterator
com.google.common.cache.LocalCache$EntrySet
removeIf
public boolean removeIf(Predicate<? super Entry<K, V>> filter)
Predicate
boolean
com.google.common.collect.ImmutableSetMultimap$Builder
combine
Builder<K, V> combine(ImmutableMultimap.Builder<K, V> other)
ImmutableMultimap.Builder
Builder
com.google.common.collect.ImmutableBiMap$Builder
combine
Builder<K, V> combine(ImmutableMap.Builder<K, V> builder)
ImmutableMap.Builder
Builder
com.google.common.cache.LocalCache$LoadingValueReference
compute
public V compute(K key, BiFunction<? super K, ? super V, ? extends V> function)
K,BiFunction
V
com.google.common.io.MoreFiles$PathByteSource
sizeIfKnown
public Optional<Long> sizeIfKnown()
empty
Optional
com.google.common.util.concurrent.AtomicLongMap
AtomicLongMap
private AtomicLongMap(ConcurrentHashMap<K, AtomicLong> map)
ConcurrentHashMap
constructor
com.google.common.collect.RegularImmutableBiMap$InverseEntrySet
forEach
public void forEach(Consumer<? super Entry<V, K>> action)
Consumer
void
com.google.common.collect.CollectSpliterators$Splitr
trySplit
public Spliterator<T> trySplit()
empty
Spliterator
com.google.common.collect.Streams
concat
public static LongStream concat(LongStream... streams)
LongStream...
LongStream
com.google.common.collect.Streams
stream
public static Stream<T> stream(com.google.common.base.Optional<T> optional)
com.google.common.base.Optional
Stream
com.google.common.collect.Synchronized$SynchronizedCollection
removeIf
public boolean removeIf(Predicate<? super E> filter)
Predicate
boolean
com.google.common.util.concurrent.AtomicLongMap
getAndAdd
public long getAndAdd(K key, long delta)
K,long
long
com.google.common.collect.Sets
stream
public Stream<E> stream()
empty
Stream
com.google.common.collect.Maps$IteratorBasedAbstractMap
entrySet
public Set<Entry<K, V>> entrySet()
empty
Set
