{
    "addition": {
        "71": "import static java.util.Arrays.stream;\n",
        "81": "import java.util.DoubleSummaryStatistics;\n",
        "612": "\n",
        "613": "  public void testEquivalentStreams() {\n",
        "614": "    // For datasets of many double values created from an array, we test many combinations of finite\n",
        "615": "    // and non-finite values:\n",
        "616": "    for (ManyValues values : ALL_MANY_VALUES) {\n",
        "617": "      double[] array = values.asArray();\n",
        "618": "      Stats stats = Stats.of(array);\n",
        "619": "      // instance methods on Stats vs on instance methods on DoubleStream\n",
        "620": "      assertThat(stats.count()).isEqualTo(stream(array).count());\n",
        "621": "      assertEquivalent(stats.mean(), stream(array).average().getAsDouble());\n",
        "622": "      assertEquivalent(stats.sum(), stream(array).sum());\n",
        "623": "      assertEquivalent(stats.max(), stream(array).max().getAsDouble());\n",
        "624": "      assertEquivalent(stats.min(), stream(array).min().getAsDouble());\n",
        "625": "      // static method on Stats vs on instance method on DoubleStream\n",
        "626": "      assertEquivalent(Stats.meanOf(array), stream(array).average().getAsDouble());\n",
        "627": "      // instance methods on Stats vs instance methods on DoubleSummaryStatistics\n",
        "628": "      DoubleSummaryStatistics streamStats = stream(array).summaryStatistics();\n",
        "629": "      assertThat(stats.count()).isEqualTo(streamStats.getCount());\n",
        "630": "      assertEquivalent(stats.mean(), streamStats.getAverage());\n",
        "631": "      assertEquivalent(stats.sum(), streamStats.getSum());\n",
        "632": "      assertEquivalent(stats.max(), streamStats.getMax());\n",
        "633": "      assertEquivalent(stats.min(), streamStats.getMin());\n",
        "634": "    }\n",
        "635": "  }\n",
        "636": "\n",
        "637": "  private static void assertEquivalent(double actual, double expected) {\n",
        "638": "    if (expected == POSITIVE_INFINITY) {\n",
        "639": "      assertThat(actual).isPositiveInfinity();\n",
        "640": "    } else if (expected == NEGATIVE_INFINITY) {\n",
        "641": "      assertThat(actual).isNegativeInfinity();\n",
        "642": "    } else if (Double.isNaN(expected)) {\n",
        "643": "      assertThat(actual).isNaN();\n",
        "644": "    } else {\n",
        "645": "      assertThat(actual).isWithin(ALLOWED_ERROR).of(expected);\n",
        "646": "    }\n",
        "647": "  }\n"
    },
    "removed": {}
}