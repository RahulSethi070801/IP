public final FluentIterable<T> postOrderTraversal(final T root) {
    checkNotNull(root);
    return new FluentIterable<T>() {

        @Override
        public UnmodifiableIterator<T> iterator() {
            return postOrderIterator(root);
        }

        @Override
        public void forEach(Consumer<? super T> action) {
            checkNotNull(action);
            new Consumer<T>() {

                @Override
                public void accept(T t) {
                    children(t).forEach(this);
                    action.accept(t);
                }
            }.accept(root);
        }
    };
}