public static <F, T> Iterable<T> transform(final Iterable<F> fromIterable, final Function<? super F, ? extends T> function) {
    checkNotNull(fromIterable);
    checkNotNull(function);
    return new FluentIterable<T>() {

        @Override
        public Iterator<T> iterator() {
            return Iterators.transform(fromIterable.iterator(), function);
        }

        @Override
        public void forEach(Consumer<? super T> action) {
            checkNotNull(action);
            fromIterable.forEach((F f) -> action.accept(function.apply(f)));
        }

        @Override
        public Spliterator<T> spliterator() {
            return CollectSpliterators.map(fromIterable.spliterator(), function);
        }
    };
}