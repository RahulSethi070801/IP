@GwtIncompatible
public static <T> Iterable<T> filter(final Iterable<?> unfiltered, final Class<T> desiredType) {
    checkNotNull(unfiltered);
    checkNotNull(desiredType);
    return new FluentIterable<T>() {

        @Override
        public Iterator<T> iterator() {
            return Iterators.filter(unfiltered.iterator(), desiredType);
        }

        @SuppressWarnings("unchecked")
        @Override
        public void forEach(Consumer<? super T> action) {
            checkNotNull(action);
            unfiltered.forEach((Object o) -> {
                if (desiredType.isInstance(o)) {
                    action.accept(desiredType.cast(o));
                }
            });
        }

        @SuppressWarnings("unchecked")
        @Override
        public Spliterator<T> spliterator() {
            return (Spliterator<T>) CollectSpliterators.filter(unfiltered.spliterator(), desiredType::isInstance);
        }
    };
}