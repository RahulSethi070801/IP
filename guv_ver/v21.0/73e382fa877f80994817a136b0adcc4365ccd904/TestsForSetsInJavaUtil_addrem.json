{
    "addition": {
        "19": "import static com.google.common.collect.testing.testers.CollectionSpliteratorTester.getSpliteratorNotImmutableCollectionAllowsAddMethod;\n",
        "20": "import static com.google.common.collect.testing.testers.CollectionSpliteratorTester.getSpliteratorNotImmutableCollectionAllowsRemoveMethod;\n",
        "21": "import static java.util.Arrays.asList;\n",
        "22": "\n",
        "37": "import java.util.NavigableSet;\n",
        "61": "    suite.addTest(testsForCheckedNavigableSet());\n",
        "63": "    suite.addTest(testsForEmptyNavigableSet());\n",
        "64": "    suite.addTest(testsForEmptySortedSet());\n",
        "73": "    suite.addTest(testsForUnmodifiableNavigableSet());\n",
        "84": "  protected Collection<Method> suppressForCheckedNavigableSet() {\n",
        "85": "    return Collections.emptySet();\n",
        "86": "  }\n",
        "87": "\n",
        "92": "  protected Collection<Method> suppressForEmptyNavigableSet() {\n",
        "93": "    return Collections.emptySet();\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  protected Collection<Method> suppressForEmptySortedSet() {\n",
        "97": "    return Collections.emptySet();\n",
        "98": "  }\n",
        "99": "\n",
        "125": "    return asList(\n",
        "126": "        getSpliteratorNotImmutableCollectionAllowsAddMethod(),\n",
        "127": "        getSpliteratorNotImmutableCollectionAllowsRemoveMethod());\n",
        "134": "  protected Collection<Method> suppressForUnmodifiableNavigableSet() {\n",
        "135": "    return Collections.emptySet();\n",
        "136": "  }\n",
        "137": "\n",
        "157": "  public Test testsForCheckedNavigableSet() {\n",
        "158": "    return SortedSetTestSuiteBuilder.using(\n",
        "159": "        new TestStringSortedSetGenerator() {\n",
        "160": "          @Override\n",
        "161": "          public NavigableSet<String> create(String[] elements) {\n",
        "162": "            NavigableSet<String> innerSet = new TreeSet<String>();\n",
        "163": "            Collections.addAll(innerSet, elements);\n",
        "164": "            return Collections.checkedNavigableSet(innerSet, String.class);\n",
        "165": "          }\n",
        "166": "        })\n",
        "167": "        .named(\"checkedNavigableSet/TreeSet, natural\")\n",
        "168": "        .withFeatures(\n",
        "169": "            SetFeature.GENERAL_PURPOSE,\n",
        "170": "            CollectionFeature.KNOWN_ORDER,\n",
        "171": "            CollectionFeature.SERIALIZABLE,\n",
        "172": "            CollectionFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n",
        "173": "            CollectionFeature.RESTRICTS_ELEMENTS,\n",
        "174": "            CollectionSize.ANY)\n",
        "175": "        .suppressing(suppressForCheckedNavigableSet())\n",
        "176": "        .createTestSuite();\n",
        "177": "  }\n",
        "178": "\n",
        "193": "  public Test testsForEmptyNavigableSet() {\n",
        "194": "    return SetTestSuiteBuilder.using(\n",
        "195": "        new TestStringSortedSetGenerator() {\n",
        "196": "          @Override\n",
        "197": "          public NavigableSet<String> create(String[] elements) {\n",
        "198": "            return Collections.emptyNavigableSet();\n",
        "199": "          }\n",
        "200": "        })\n",
        "201": "        .named(\"emptyNavigableSet\")\n",
        "202": "        .withFeatures(CollectionFeature.SERIALIZABLE, CollectionSize.ZERO)\n",
        "203": "        .suppressing(suppressForEmptyNavigableSet())\n",
        "204": "        .createTestSuite();\n",
        "205": "  }\n",
        "206": "\n",
        "207": "  public Test testsForEmptySortedSet() {\n",
        "208": "    return SetTestSuiteBuilder.using(\n",
        "209": "        new TestStringSortedSetGenerator() {\n",
        "210": "          @Override\n",
        "211": "          public SortedSet<String> create(String[] elements) {\n",
        "212": "            return Collections.emptySortedSet();\n",
        "213": "          }\n",
        "214": "        })\n",
        "215": "        .named(\"emptySortedSet\")\n",
        "216": "        .withFeatures(CollectionFeature.SERIALIZABLE, CollectionSize.ZERO)\n",
        "217": "        .suppressing(suppressForEmptySortedSet())\n",
        "218": "        .createTestSuite();\n",
        "219": "  }\n",
        "220": "\n",
        "379": "  public Test testsForUnmodifiableNavigableSet() {\n",
        "380": "    return SetTestSuiteBuilder.using(\n",
        "381": "        new TestStringSortedSetGenerator() {\n",
        "382": "          @Override\n",
        "383": "          public NavigableSet<String> create(String[] elements) {\n",
        "384": "            NavigableSet<String> innerSet = new TreeSet<String>();\n",
        "385": "            Collections.addAll(innerSet, elements);\n",
        "386": "            return Collections.unmodifiableNavigableSet(innerSet);\n",
        "387": "          }\n",
        "388": "        })\n",
        "389": "        .named(\"unmodifiableNavigableSet/TreeSet, natural\")\n",
        "390": "        .withFeatures(\n",
        "391": "            CollectionFeature.KNOWN_ORDER,\n",
        "392": "            CollectionFeature.RESTRICTS_ELEMENTS,\n",
        "393": "            CollectionFeature.SERIALIZABLE,\n",
        "394": "            CollectionSize.ANY)\n",
        "395": "        .suppressing(suppressForUnmodifiableNavigableSet())\n",
        "396": "        .createTestSuite();\n",
        "397": "  }\n",
        "398": "\n"
    },
    "removed": {
        "104": "    return Collections.emptySet();\n"
    }
}