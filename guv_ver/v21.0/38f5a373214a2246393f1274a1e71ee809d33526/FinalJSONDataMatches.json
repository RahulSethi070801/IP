[{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_1.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_1.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_1.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[647],"dellines":[646,647,648],"addcode":["    MutableGraph<N> copy = GraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableGraph<N> copy = GraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableGraph<N> copyOf(Graph<N> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_1.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_1.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_1.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[216,217],"dellines":[215],"addcode":["   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are\n","   * true:\n"],"delcode":["   * <p>Thus, two graphs A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Graph<?> graphA, @Nullable Graph<?> graphB)"},"id":5,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_2.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_2.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_2.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[672,673,674,675,676],"dellines":[678,679,680,681],"addcode":["    MutableNetwork<N, E> copy =\n","        NetworkBuilder.from(graph)\n","            .expectedNodeCount(graph.nodes().size())\n","            .expectedEdgeCount(graph.edges().size())\n","            .build();\n"],"delcode":["    MutableNetwork<N, E> copy = NetworkBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .expectedEdgeCount(graph.edges().size())\n","        .build();\n"],"methodSig":"public static MutableNetwork<N, E> copyOf(Network<N, E> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_2.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_2.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_2.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[216,217],"dellines":[215],"addcode":["   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are\n","   * true:\n"],"delcode":["   * <p>Thus, two graphs A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Graph<?> graphA, @Nullable Graph<?> graphB)"},"id":5,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_3.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_3.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_3.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[659,660],"dellines":[662,663,664],"addcode":["    MutableValueGraph<N, V> copy =\n","        ValueGraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableValueGraph<N, V> copy = ValueGraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_3.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_3.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_3.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[216,217],"dellines":[215],"addcode":["   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are\n","   * true:\n"],"delcode":["   * <p>Thus, two graphs A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Graph<?> graphA, @Nullable Graph<?> graphB)"},"id":5,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_4.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_4.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_4.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[647],"dellines":[646,647,648],"addcode":["    MutableGraph<N> copy = GraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableGraph<N> copy = GraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableGraph<N> copyOf(Graph<N> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_4.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_4.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_4.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[256,248,249,255],"dellines":[246,252,253],"addcode":["   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the\n","   * following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link\n","   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"delcode":["   * <p>Thus, two value graphs A and B are equivalent if <b>all</b> of the following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the\n","   *     {@link ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"methodSig":"public static boolean equivalent(@Nullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)"},"id":5,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_5.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_5.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_5.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[672,673,674,675,676],"dellines":[678,679,680,681],"addcode":["    MutableNetwork<N, E> copy =\n","        NetworkBuilder.from(graph)\n","            .expectedNodeCount(graph.nodes().size())\n","            .expectedEdgeCount(graph.edges().size())\n","            .build();\n"],"delcode":["    MutableNetwork<N, E> copy = NetworkBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .expectedEdgeCount(graph.edges().size())\n","        .build();\n"],"methodSig":"public static MutableNetwork<N, E> copyOf(Network<N, E> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_5.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_5.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_5.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[256,248,249,255],"dellines":[246,252,253],"addcode":["   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the\n","   * following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link\n","   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"delcode":["   * <p>Thus, two value graphs A and B are equivalent if <b>all</b> of the following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the\n","   *     {@link ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"methodSig":"public static boolean equivalent(@Nullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)"},"id":5,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_6.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_6.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_6.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[659,660],"dellines":[662,663,664],"addcode":["    MutableValueGraph<N, V> copy =\n","        ValueGraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableValueGraph<N, V> copy = ValueGraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_6.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_6.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_6.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[256,248,249,255],"dellines":[246,252,253],"addcode":["   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the\n","   * following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link\n","   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"delcode":["   * <p>Thus, two value graphs A and B are equivalent if <b>all</b> of the following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the\n","   *     {@link ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"methodSig":"public static boolean equivalent(@Nullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)"},"id":5,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_7.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_7.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_7.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[647],"dellines":[646,647,648],"addcode":["    MutableGraph<N> copy = GraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableGraph<N> copy = GraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableGraph<N> copyOf(Graph<N> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_7.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_7.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_7.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[282,283],"dellines":[279],"addcode":["   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following\n","   * are true:\n"],"delcode":["   * <p>Thus, two networks A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)"},"id":5,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_8.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_8.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_8.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[672,673,674,675,676],"dellines":[678,679,680,681],"addcode":["    MutableNetwork<N, E> copy =\n","        NetworkBuilder.from(graph)\n","            .expectedNodeCount(graph.nodes().size())\n","            .expectedEdgeCount(graph.edges().size())\n","            .build();\n"],"delcode":["    MutableNetwork<N, E> copy = NetworkBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .expectedEdgeCount(graph.edges().size())\n","        .build();\n"],"methodSig":"public static MutableNetwork<N, E> copyOf(Network<N, E> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_8.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_8.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_8.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[282,283],"dellines":[279],"addcode":["   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following\n","   * are true:\n"],"delcode":["   * <p>Thus, two networks A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)"},"id":5,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_9.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_9.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_9.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[659,660],"dellines":[662,663,664],"addcode":["    MutableValueGraph<N, V> copy =\n","        ValueGraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableValueGraph<N, V> copy = ValueGraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_9.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_9.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_9.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[282,283],"dellines":[279],"addcode":["   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following\n","   * are true:\n"],"delcode":["   * <p>Thus, two networks A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)"},"id":5,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_10.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_10.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_10.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[628,629],"dellines":[625,626],"addcode":["  public static <N, E> MutableNetwork<N, E> inducedSubgraph(\n","      Network<N, E> graph, Iterable<? extends N> nodes) {\n"],"delcode":["  public static <N, E> MutableNetwork<N, E> inducedSubgraph(Network<N, E> graph,\n","      Iterable<? extends N> nodes) {\n"],"methodSig":"public static MutableNetwork<N, E> inducedSubgraph(Network<N, E> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_10.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_10.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_10.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[216,217],"dellines":[215],"addcode":["   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are\n","   * true:\n"],"delcode":["   * <p>Thus, two graphs A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Graph<?> graphA, @Nullable Graph<?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_11.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_11.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_11.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[628,629],"dellines":[625,626],"addcode":["  public static <N, E> MutableNetwork<N, E> inducedSubgraph(\n","      Network<N, E> graph, Iterable<? extends N> nodes) {\n"],"delcode":["  public static <N, E> MutableNetwork<N, E> inducedSubgraph(Network<N, E> graph,\n","      Iterable<? extends N> nodes) {\n"],"methodSig":"public static MutableNetwork<N, E> inducedSubgraph(Network<N, E> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_11.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_11.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_11.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[256,248,249,255],"dellines":[246,252,253],"addcode":["   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the\n","   * following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link\n","   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"delcode":["   * <p>Thus, two value graphs A and B are equivalent if <b>all</b> of the following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the\n","   *     {@link ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"methodSig":"public static boolean equivalent(@Nullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_12.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_12.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_12.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[628,629],"dellines":[625,626],"addcode":["  public static <N, E> MutableNetwork<N, E> inducedSubgraph(\n","      Network<N, E> graph, Iterable<? extends N> nodes) {\n"],"delcode":["  public static <N, E> MutableNetwork<N, E> inducedSubgraph(Network<N, E> graph,\n","      Iterable<? extends N> nodes) {\n"],"methodSig":"public static MutableNetwork<N, E> inducedSubgraph(Network<N, E> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_12.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_12.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_12.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[282,283],"dellines":[279],"addcode":["   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following\n","   * are true:\n"],"delcode":["   * <p>Thus, two networks A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_13.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_13.txt","newdoc":" In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_13.txt","olddoc":" In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[86,87],"dellines":[86],"addcode":["    if (!network.isDirected()\n","        && network.allowsParallelEdges()\n"],"delcode":["    if (!network.isDirected() && network.allowsParallelEdges()\n"],"methodSig":"public static boolean hasCycle(Network<?, ?> network)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_13.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_13.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_13.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[216,217],"dellines":[215],"addcode":["   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are\n","   * true:\n"],"delcode":["   * <p>Thus, two graphs A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Graph<?> graphA, @Nullable Graph<?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_14.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_14.txt","newdoc":" In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_14.txt","olddoc":" In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_14.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[86,87],"dellines":[86],"addcode":["    if (!network.isDirected()\n","        && network.allowsParallelEdges()\n"],"delcode":["    if (!network.isDirected() && network.allowsParallelEdges()\n"],"methodSig":"public static boolean hasCycle(Network<?, ?> network)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_14.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_14.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_14.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_14.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[256,248,249,255],"dellines":[246,252,253],"addcode":["   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the\n","   * following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link\n","   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"delcode":["   * <p>Thus, two value graphs A and B are equivalent if <b>all</b> of the following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the\n","   *     {@link ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"methodSig":"public static boolean equivalent(@Nullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_15.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_15.txt","newdoc":" In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_15.txt","olddoc":" In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n In a directed graph, parallel edges cannot introduce a cycle in an acyclic graph.\n However, in an undirected graph, any parallel edge induces a cycle in the graph.\n","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[86,87],"dellines":[86],"addcode":["    if (!network.isDirected()\n","        && network.allowsParallelEdges()\n"],"delcode":["    if (!network.isDirected() && network.allowsParallelEdges()\n"],"methodSig":"public static boolean hasCycle(Network<?, ?> network)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_15.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_15.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_15.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[282,283],"dellines":[279],"addcode":["   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following\n","   * are true:\n"],"delcode":["   * <p>Thus, two networks A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_16.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_16.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_16.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[647],"dellines":[646,647,648],"addcode":["    MutableGraph<N> copy = GraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableGraph<N> copy = GraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableGraph<N> copyOf(Graph<N> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_16.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_16.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_16.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[216,217],"dellines":[215],"addcode":["   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are\n","   * true:\n"],"delcode":["   * <p>Thus, two graphs A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Graph<?> graphA, @Nullable Graph<?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_17.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_17.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_17.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_17.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[647],"dellines":[646,647,648],"addcode":["    MutableGraph<N> copy = GraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableGraph<N> copy = GraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableGraph<N> copyOf(Graph<N> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_17.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_17.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_17.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_17.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[256,248,249,255],"dellines":[246,252,253],"addcode":["   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the\n","   * following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link\n","   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"delcode":["   * <p>Thus, two value graphs A and B are equivalent if <b>all</b> of the following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the\n","   *     {@link ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"methodSig":"public static boolean equivalent(@Nullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_18.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_18.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_18.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_18.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[647],"dellines":[646,647,648],"addcode":["    MutableGraph<N> copy = GraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableGraph<N> copy = GraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableGraph<N> copyOf(Graph<N> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_18.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_18.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_18.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_18.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[282,283],"dellines":[279],"addcode":["   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following\n","   * are true:\n"],"delcode":["   * <p>Thus, two networks A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_19.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_19.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_19.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_19.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[672,673,674,675,676],"dellines":[678,679,680,681],"addcode":["    MutableNetwork<N, E> copy =\n","        NetworkBuilder.from(graph)\n","            .expectedNodeCount(graph.nodes().size())\n","            .expectedEdgeCount(graph.edges().size())\n","            .build();\n"],"delcode":["    MutableNetwork<N, E> copy = NetworkBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .expectedEdgeCount(graph.edges().size())\n","        .build();\n"],"methodSig":"public static MutableNetwork<N, E> copyOf(Network<N, E> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_19.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_19.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_19.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_19.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[216,217],"dellines":[215],"addcode":["   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are\n","   * true:\n"],"delcode":["   * <p>Thus, two graphs A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Graph<?> graphA, @Nullable Graph<?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_20.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_20.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_20.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_20.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[672,673,674,675,676],"dellines":[678,679,680,681],"addcode":["    MutableNetwork<N, E> copy =\n","        NetworkBuilder.from(graph)\n","            .expectedNodeCount(graph.nodes().size())\n","            .expectedEdgeCount(graph.edges().size())\n","            .build();\n"],"delcode":["    MutableNetwork<N, E> copy = NetworkBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .expectedEdgeCount(graph.edges().size())\n","        .build();\n"],"methodSig":"public static MutableNetwork<N, E> copyOf(Network<N, E> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_20.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_20.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_20.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_20.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[256,248,249,255],"dellines":[246,252,253],"addcode":["   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the\n","   * following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link\n","   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"delcode":["   * <p>Thus, two value graphs A and B are equivalent if <b>all</b> of the following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the\n","   *     {@link ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"methodSig":"public static boolean equivalent(@Nullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_21.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_21.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_21.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_21.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[672,673,674,675,676],"dellines":[678,679,680,681],"addcode":["    MutableNetwork<N, E> copy =\n","        NetworkBuilder.from(graph)\n","            .expectedNodeCount(graph.nodes().size())\n","            .expectedEdgeCount(graph.edges().size())\n","            .build();\n"],"delcode":["    MutableNetwork<N, E> copy = NetworkBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .expectedEdgeCount(graph.edges().size())\n","        .build();\n"],"methodSig":"public static MutableNetwork<N, E> copyOf(Network<N, E> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_21.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_21.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_21.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_21.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[282,283],"dellines":[279],"addcode":["   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following\n","   * are true:\n"],"delcode":["   * <p>Thus, two networks A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_22.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_22.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_22.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_22.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[583],"dellines":[579,580],"addcode":["  public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes) {\n"],"delcode":["  public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph,\n","      Iterable<? extends N> nodes) {\n"],"methodSig":"public static MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_22.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_22.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_22.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_22.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[216,217],"dellines":[215],"addcode":["   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are\n","   * true:\n"],"delcode":["   * <p>Thus, two graphs A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Graph<?> graphA, @Nullable Graph<?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_23.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_23.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_23.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_23.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[583],"dellines":[579,580],"addcode":["  public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes) {\n"],"delcode":["  public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph,\n","      Iterable<? extends N> nodes) {\n"],"methodSig":"public static MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_23.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_23.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_23.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_23.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[256,248,249,255],"dellines":[246,252,253],"addcode":["   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the\n","   * following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link\n","   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"delcode":["   * <p>Thus, two value graphs A and B are equivalent if <b>all</b> of the following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the\n","   *     {@link ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"methodSig":"public static boolean equivalent(@Nullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_24.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_24.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_24.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_24.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[583],"dellines":[579,580],"addcode":["  public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes) {\n"],"delcode":["  public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph,\n","      Iterable<? extends N> nodes) {\n"],"methodSig":"public static MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_24.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_24.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_24.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_24.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[282,283],"dellines":[279],"addcode":["   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following\n","   * are true:\n"],"delcode":["   * <p>Thus, two networks A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_25.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_25.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_25.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[605,606],"dellines":[602,603],"addcode":["  public static <N, V> MutableValueGraph<N, V> inducedSubgraph(\n","      ValueGraph<N, V> graph, Iterable<? extends N> nodes) {\n"],"delcode":["  public static <N, V> MutableValueGraph<N, V> inducedSubgraph(ValueGraph<N, V> graph,\n","      Iterable<? extends N> nodes) {\n"],"methodSig":"public static MutableValueGraph<N, V> inducedSubgraph(ValueGraph<N, V> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_25.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_25.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_25.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[216,217],"dellines":[215],"addcode":["   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are\n","   * true:\n"],"delcode":["   * <p>Thus, two graphs A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Graph<?> graphA, @Nullable Graph<?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_26.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_26.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_26.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_26.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[605,606],"dellines":[602,603],"addcode":["  public static <N, V> MutableValueGraph<N, V> inducedSubgraph(\n","      ValueGraph<N, V> graph, Iterable<? extends N> nodes) {\n"],"delcode":["  public static <N, V> MutableValueGraph<N, V> inducedSubgraph(ValueGraph<N, V> graph,\n","      Iterable<? extends N> nodes) {\n"],"methodSig":"public static MutableValueGraph<N, V> inducedSubgraph(ValueGraph<N, V> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_26.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_26.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_26.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_26.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[256,248,249,255],"dellines":[246,252,253],"addcode":["   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the\n","   * following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link\n","   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"delcode":["   * <p>Thus, two value graphs A and B are equivalent if <b>all</b> of the following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the\n","   *     {@link ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"methodSig":"public static boolean equivalent(@Nullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_27.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_27.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_27.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_27.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[605,606],"dellines":[602,603],"addcode":["  public static <N, V> MutableValueGraph<N, V> inducedSubgraph(\n","      ValueGraph<N, V> graph, Iterable<? extends N> nodes) {\n"],"delcode":["  public static <N, V> MutableValueGraph<N, V> inducedSubgraph(ValueGraph<N, V> graph,\n","      Iterable<? extends N> nodes) {\n"],"methodSig":"public static MutableValueGraph<N, V> inducedSubgraph(ValueGraph<N, V> graph, Iterable<? extends N> nodes)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_27.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_27.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_27.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_27.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[282,283],"dellines":[279],"addcode":["   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following\n","   * are true:\n"],"delcode":["   * <p>Thus, two networks A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_28.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_28.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_28.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_28.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[659,660],"dellines":[662,663,664],"addcode":["    MutableValueGraph<N, V> copy =\n","        ValueGraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableValueGraph<N, V> copy = ValueGraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_28.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_28.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_28.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_28.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[216,217],"dellines":[215],"addcode":["   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are\n","   * true:\n"],"delcode":["   * <p>Thus, two graphs A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Graph<?> graphA, @Nullable Graph<?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_29.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_29.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_29.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_29.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[659,660],"dellines":[662,663,664],"addcode":["    MutableValueGraph<N, V> copy =\n","        ValueGraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableValueGraph<N, V> copy = ValueGraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_29.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_29.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_29.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_29.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[256,248,249,255],"dellines":[246,252,253],"addcode":["   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the\n","   * following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link\n","   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"delcode":["   * <p>Thus, two value graphs A and B are equivalent if <b>all</b> of the following are true:\n","   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the\n","   *     {@link ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B.\n"],"methodSig":"public static boolean equivalent(@Nullable ValueGraph<?, ?> graphA, @Nullable ValueGraph<?, ?> graphB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"},{"func":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfunccode_38f5a373214a2246393f1274a1e71ee809d33526_30.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfunccode_38f5a373214a2246393f1274a1e71ee809d33526_30.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newfuncnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_30.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_oldfuncoldJdoc_38f5a373214a2246393f1274a1e71ee809d33526_30.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[659,660],"dellines":[662,663,664],"addcode":["    MutableValueGraph<N, V> copy =\n","        ValueGraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();\n"],"delcode":["    MutableValueGraph<N, V> copy = ValueGraphBuilder.from(graph)\n","        .expectedNodeCount(graph.nodes().size())\n","        .build();\n"],"methodSig":"public static MutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph)"},"doc":{"oldfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_30.txt","newfunccode":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocfunccode_38f5a373214a2246393f1274a1e71ee809d33526_30.txt","newdoc":"","newJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_newdocnewJdoc_38f5a373214a2246393f1274a1e71ee809d33526_30.txt","olddoc":"","oldJdoc":"38f5a373214a2246393f1274a1e71ee809d33526/Codes/Match_olddocJdoc_38f5a373214a2246393f1274a1e71ee809d33526_30.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/38f5a373214a2246393f1274a1e71ee809d33526/Graphs","pathinproj":"guava/src/com/google/common/graph/Graphs.java","addlines":[282,283],"dellines":[279],"addcode":["   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following\n","   * are true:\n"],"delcode":["   * <p>Thus, two networks A and B are equivalent if <b>all</b> of the following are true:\n"],"methodSig":"public static boolean equivalent(@Nullable Network<?, ?> networkA, @Nullable Network<?, ?> networkB)"},"id":3,"flag":1,"commit":"38f5a373214a2246393f1274a1e71ee809d33526"}]