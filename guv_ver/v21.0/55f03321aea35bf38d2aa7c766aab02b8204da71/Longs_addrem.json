{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "39": " * Static utility methods pertaining to {@code long} primitives, that are not already found in\n",
        "40": " * either {@link Long} or {@link Arrays}.\n",
        "42": " * <p>See the Guava User Guide article on\n",
        "43": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "53": "   * The number of bytes required to represent a primitive {@code long} value.\n",
        "68": "   * <p>This method always return the value specified by {@link Long#hashCode()} in java, which\n",
        "69": "   * might be different from {@code ((Long) value).hashCode()} in GWT because\n",
        "70": "   * {@link Long#hashCode()} in GWT does not obey the JRE contract.\n",
        "80": "   * Compares the two specified {@code long} values. The sign of the value returned is the same as\n",
        "81": "   * that of {@code ((Long) a).compareTo(b)}.\n",
        "83": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the\n",
        "84": "   * equivalent {@link Long#compare} method instead.\n",
        "88": "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n",
        "89": "   *     greater than {@code b}; or zero if they are equal\n",
        "96": "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n",
        "113": "   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n",
        "117": "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "118": "   *     such index exists.\n",
        "138": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "139": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "140": "   * {@code target}.\n",
        "165": "   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n",
        "169": "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "170": "   *     such index exists.\n",
        "190": "   * @return the value present in {@code array} that is less than or equal to every other value in\n",
        "191": "   *     the array\n",
        "209": "   * @return the value present in {@code array} that is greater than or equal to every other value\n",
        "210": "   *     in the array\n",
        "225": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "226": "   * {@code concat(new long[] {a, b}, new long[] {}, new long[] {c}} returns the array\n",
        "227": "   * {@code {a, b, c}}.\n",
        "230": "   * @return a single array containing all the values from the source arrays, in order\n",
        "247": "   * Returns a big-endian representation of {@code value} in an 8-element byte array; equivalent to\n",
        "248": "   * {@code ByteBuffer.allocate(8).putLong(value).array()}. For example, the input value\n",
        "249": "   * {@code 0x1213141516171819L} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16,\n",
        "250": "   * 0x17, 0x18, 0x19}}.\n",
        "251": "   *\n",
        "252": "   * <p>If you need to convert and concatenate several values (possibly even of different types),\n",
        "253": "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "254": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n",
        "268": "   * Returns the {@code long} value whose big-endian representation is stored in the first 8 bytes\n",
        "269": "   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getLong()}. For example, the\n",
        "270": "   * input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the\n",
        "273": "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n",
        "274": "   * flexibility at little cost in readability.\n",
        "276": "   * @throws IllegalArgumentException if {@code bytes} has fewer than 8 elements\n",
        "285": "   * Returns the {@code long} value whose byte representation is the given 8 bytes, in big-endian\n",
        "286": "   * order; equivalent to {@code Longs.fromByteArray(new byte[] {b1, b2, b3, b4, b5, b6, b7, b8})}.\n",
        "322": "   * Parses the specified string as a signed decimal long value. The ASCII character {@code '-'}\n",
        "323": "   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n",
        "325": "   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing\n",
        "326": "   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns\n",
        "329": "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite\n",
        "330": "   * the change to {@link Long#parseLong(String)} for that version.\n",
        "333": "   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a\n",
        "334": "   *     length of zero or cannot be parsed as a long value\n",
        "345": "   * Parses the specified string as a signed long value using the specified radix. The ASCII\n",
        "346": "   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n",
        "348": "   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of\n",
        "349": "   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,\n",
        "350": "   * and returns {@code null} if non-ASCII digits are present in the string.\n",
        "352": "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite\n",
        "353": "   * the change to {@link Long#parseLong(String, int)} for that version.\n",
        "357": "   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if\n",
        "358": "   *     {@code string} has a length of zero or cannot be parsed as a long value\n",
        "434": "   * Returns a serializable converter object that converts between strings and longs using\n",
        "435": "   * {@link Long#decode} and {@link Long#toString()}. The returned converter throws\n",
        "436": "   * {@link NumberFormatException} if the input string is invalid.\n",
        "450": "   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n",
        "451": "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n",
        "452": "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n",
        "453": "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n",
        "457": "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n",
        "458": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n",
        "459": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "460": "   *     {@code minLength}\n",
        "469": "   * Returns a string containing the supplied {@code long} values separated by {@code separator}.\n",
        "470": "   * For example, {@code join(\"-\", 1L, 2L, 3L)} returns the string {@code \"1-2-3\"}.\n",
        "472": "   * @param separator the text that should appear between consecutive values in the resulting string\n",
        "473": "   *     (but not at the start or end)\n",
        "492": "   * Returns a comparator that compares two {@code long} arrays <a\n",
        "493": "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n",
        "494": "   * compares, using {@link #compare(long, long)}), the first pair of values that follow any common\n",
        "495": "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n",
        "496": "   * example, {@code [] < [1L] < [1L, 2L] < [2L]}.\n",
        "497": "   *\n",
        "498": "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n",
        "499": "   * support only identity equality), but it is consistent with\n",
        "500": "   * {@link Arrays#equals(long[], long[])}.\n",
        "501": "   *\n",
        "530": "   * Returns an array containing each value of {@code collection}, converted to a {@code long} value\n",
        "531": "   * in the manner of {@link Number#longValue}.\n",
        "534": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "537": "   * @return an array containing the same values as {@code collection}, in the same order, converted\n",
        "538": "   *     to primitives\n",
        "539": "   * @throws NullPointerException if {@code collection} or any of its elements is null\n",
        "558": "   * Returns a fixed-size list backed by the specified array, similar to\n",
        "559": "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n",
        "560": "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n",
        "561": "   *\n",
        "562": "   * <p>The returned list maintains the values, but not the identities, of {@code Long} objects\n",
        "563": "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n",
        "564": "   * the returned list is unspecified.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "41": " * Static utility methods pertaining to {@code long} primitives, that are not\n",
        "42": " * already found in either {@link Long} or {@link Arrays}.\n",
        "44": " * <p>See the Guava User Guide article on <a href=\n",
        "45": " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n",
        "46": " * primitive utilities</a>.\n",
        "56": "   * The number of bytes required to represent a primitive {@code long}\n",
        "57": "   * value.\n",
        "72": "   * <p>This method always return the value specified by {@link\n",
        "73": "   * Long#hashCode()} in java, which might be different from\n",
        "74": "   * {@code ((Long) value).hashCode()} in GWT because {@link Long#hashCode()}\n",
        "75": "   * in GWT does not obey the JRE contract.\n",
        "85": "   * Compares the two specified {@code long} values. The sign of the value\n",
        "86": "   * returned is the same as that of {@code ((Long) a).compareTo(b)}.\n",
        "88": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n",
        "89": "   * deprecated; use the equivalent {@link Long#compare} method instead.\n",
        "93": "   * @return a negative value if {@code a} is less than {@code b}; a positive\n",
        "94": "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n",
        "101": "   * Returns {@code true} if {@code target} is present as an element anywhere in\n",
        "102": "   * {@code array}.\n",
        "119": "   * Returns the index of the first appearance of the value {@code target} in\n",
        "120": "   * {@code array}.\n",
        "124": "   * @return the least index {@code i} for which {@code array[i] == target}, or\n",
        "125": "   *     {@code -1} if no such index exists.\n",
        "145": "   * <p>More formally, returns the lowest index {@code i} such that {@code\n",
        "146": "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n",
        "147": "   * the same elements as {@code target}.\n",
        "172": "   * Returns the index of the last appearance of the value {@code target} in\n",
        "173": "   * {@code array}.\n",
        "177": "   * @return the greatest index {@code i} for which {@code array[i] == target},\n",
        "178": "   *     or {@code -1} if no such index exists.\n",
        "198": "   * @return the value present in {@code array} that is less than or equal to\n",
        "199": "   *     every other value in the array\n",
        "217": "   * @return the value present in {@code array} that is greater than or equal to\n",
        "218": "   *     every other value in the array\n",
        "233": "   * Returns the values from each provided array combined into a single array.\n",
        "234": "   * For example, {@code concat(new long[] {a, b}, new long[] {}, new\n",
        "235": "   * long[] {c}} returns the array {@code {a, b, c}}.\n",
        "238": "   * @return a single array containing all the values from the source arrays, in\n",
        "239": "   *     order\n",
        "256": "   * Returns a big-endian representation of {@code value} in an 8-element byte\n",
        "257": "   * array; equivalent to {@code ByteBuffer.allocate(8).putLong(value).array()}.\n",
        "258": "   * For example, the input value {@code 0x1213141516171819L} would yield the\n",
        "259": "   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}}.\n",
        "260": "   *\n",
        "261": "   * <p>If you need to convert and concatenate several values (possibly even of\n",
        "262": "   * different types), use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "263": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable\n",
        "264": "   * buffer.\n",
        "278": "   * Returns the {@code long} value whose big-endian representation is\n",
        "279": "   * stored in the first 8 bytes of {@code bytes}; equivalent to {@code\n",
        "280": "   * ByteBuffer.wrap(bytes).getLong()}. For example, the input byte array\n",
        "281": "   * {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the\n",
        "284": "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that\n",
        "285": "   * library exposes much more flexibility at little cost in readability.\n",
        "287": "   * @throws IllegalArgumentException if {@code bytes} has fewer than 8\n",
        "288": "   *     elements\n",
        "297": "   * Returns the {@code long} value whose byte representation is the given 8\n",
        "298": "   * bytes, in big-endian order; equivalent to {@code Longs.fromByteArray(new\n",
        "299": "   * byte[] {b1, b2, b3, b4, b5, b6, b7, b8})}.\n",
        "335": "   * Parses the specified string as a signed decimal long value. The ASCII\n",
        "336": "   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the\n",
        "337": "   * minus sign.\n",
        "339": "   * <p>Unlike {@link Long#parseLong(String)}, this method returns\n",
        "340": "   * {@code null} instead of throwing an exception if parsing fails.\n",
        "341": "   * Additionally, this method only accepts ASCII digits, and returns\n",
        "344": "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even\n",
        "345": "   * under JDK 7, despite the change to {@link Long#parseLong(String)} for\n",
        "346": "   * that version.\n",
        "349": "   * @return the long value represented by {@code string}, or {@code null} if\n",
        "350": "   *     {@code string} has a length of zero or cannot be parsed as a long\n",
        "351": "   *     value\n",
        "362": "   * Parses the specified string as a signed long value using the specified\n",
        "363": "   * radix. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is\n",
        "364": "   * recognized as the minus sign.\n",
        "366": "   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns\n",
        "367": "   * {@code null} instead of throwing an exception if parsing fails.\n",
        "368": "   * Additionally, this method only accepts ASCII digits, and returns\n",
        "369": "   * {@code null} if non-ASCII digits are present in the string.\n",
        "371": "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even\n",
        "372": "   * under JDK 7, despite the change to {@link Long#parseLong(String, int)}\n",
        "373": "   * for that version.\n",
        "377": "   * @return the long value represented by {@code string} using\n",
        "378": "   *     {@code radix}, or {@code null} if {@code string} has a length of zero\n",
        "379": "   *     or cannot be parsed as a long value\n",
        "455": "   * Returns a serializable converter object that converts between strings and longs using {@link\n",
        "456": "   * Long#decode} and {@link Long#toString()}. The returned converter throws {@link\n",
        "457": "   * NumberFormatException} if the input string is invalid.\n",
        "471": "   * Returns an array containing the same values as {@code array}, but\n",
        "472": "   * guaranteed to be of a specified minimum length. If {@code array} already\n",
        "473": "   * has a length of at least {@code minLength}, it is returned directly.\n",
        "474": "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n",
        "475": "   * containing the values of {@code array}, and zeroes in the remaining places.\n",
        "479": "   * @param padding an extra amount to \"grow\" the array by if growth is\n",
        "480": "   *     necessary\n",
        "481": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n",
        "482": "   *     negative\n",
        "483": "   * @return an array containing the values of {@code array}, with guaranteed\n",
        "484": "   *     minimum length {@code minLength}\n",
        "493": "   * Returns a string containing the supplied {@code long} values separated\n",
        "494": "   * by {@code separator}. For example, {@code join(\"-\", 1L, 2L, 3L)} returns\n",
        "495": "   * the string {@code \"1-2-3\"}.\n",
        "497": "   * @param separator the text that should appear between consecutive values in\n",
        "498": "   *     the resulting string (but not at the start or end)\n",
        "517": "   * Returns a comparator that compares two {@code long} arrays\n",
        "518": "   * lexicographically. That is, it compares, using {@link\n",
        "519": "   * #compare(long, long)}), the first pair of values that follow any\n",
        "520": "   * common prefix, or when one array is a prefix of the other, treats the\n",
        "521": "   * shorter array as the lesser. For example,\n",
        "522": "   * {@code [] < [1L] < [1L, 2L] < [2L]}.\n",
        "523": "   *\n",
        "524": "   * <p>The returned comparator is inconsistent with {@link\n",
        "525": "   * Object#equals(Object)} (since arrays support only identity equality), but\n",
        "526": "   * it is consistent with {@link Arrays#equals(long[], long[])}.\n",
        "527": "   *\n",
        "528": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n",
        "529": "   *     Lexicographical order article at Wikipedia</a>\n",
        "558": "   * Returns an array containing each value of {@code collection}, converted to\n",
        "559": "   * a {@code long} value in the manner of {@link Number#longValue}.\n",
        "562": "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n",
        "563": "   * that method.\n",
        "566": "   * @return an array containing the same values as {@code collection}, in the\n",
        "567": "   *     same order, converted to primitives\n",
        "568": "   * @throws NullPointerException if {@code collection} or any of its elements\n",
        "569": "   *     is null\n",
        "588": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "589": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n",
        "590": "   * but any attempt to set a value to {@code null} will result in a {@link\n",
        "591": "   * NullPointerException}.\n",
        "592": "   *\n",
        "593": "   * <p>The returned list maintains the values, but not the identities, of\n",
        "594": "   * {@code Long} objects written to or read from it.  For example, whether\n",
        "595": "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n",
        "596": "   * unspecified.\n"
    }
}