{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "25": " * Static utility methods pertaining to {@code byte} primitives that interpret values as signed. The\n",
        "26": " * corresponding methods that treat the values as unsigned are found in {@link UnsignedBytes}, and\n",
        "27": " * the methods for which signedness is not an issue are in {@link Bytes}.\n",
        "29": " * <p>See the Guava User Guide article on\n",
        "30": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "53": "   * @throws IllegalArgumentException if {@code value} is greater than {@link Byte#MAX_VALUE} or\n",
        "54": "   *     less than {@link Byte#MIN_VALUE}\n",
        "69": "   * @return the same value cast to {@code byte} if it is in the range of the {@code byte} type,\n",
        "70": "   *     {@link Byte#MAX_VALUE} if it is too large, or {@link Byte#MIN_VALUE} if it is too small\n",
        "83": "   * Compares the two specified {@code byte} values. The sign of the value returned is the same as\n",
        "84": "   * that of {@code ((Byte) a).compareTo(b)}.\n",
        "86": "   * <p><b>Note:</b> this method behaves identically to the JDK 7 method {@link Byte#compare}.\n",
        "90": "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n",
        "91": "   *     greater than {@code b}; or zero if they are equal\n",
        "103": "   * @return the value present in {@code array} that is less than or equal to every other value in\n",
        "104": "   *     the array\n",
        "122": "   * @return the value present in {@code array} that is greater than or equal to every other value\n",
        "123": "   *     in the array\n",
        "138": "   * Returns a string containing the supplied {@code byte} values separated by {@code separator}.\n",
        "139": "   * For example, {@code join(\":\", 0x01, 0x02, -0x01)} returns the string {@code \"1:2:-1\"}.\n",
        "141": "   * @param separator the text that should appear between consecutive values in the resulting string\n",
        "142": "   *     (but not at the start or end)\n",
        "161": "   * Returns a comparator that compares two {@code byte} arrays <a\n",
        "162": "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n",
        "163": "   * compares, using {@link #compare(byte, byte)}), the first pair of values that follow any common\n",
        "164": "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n",
        "165": "   * example, {@code [] < [0x01] < [0x01, 0x80] < [0x01, 0x7F] < [0x02]}. Values are treated as\n",
        "166": "   * signed.\n",
        "168": "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n",
        "169": "   * support only identity equality), but it is consistent with\n",
        "170": "   * {@link java.util.Arrays#equals(byte[], byte[])}.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "27": " * Static utility methods pertaining to {@code byte} primitives that\n",
        "28": " * interpret values as signed. The corresponding methods that treat the values\n",
        "29": " * as unsigned are found in {@link UnsignedBytes}, and the methods for which\n",
        "30": " * signedness is not an issue are in {@link Bytes}.\n",
        "32": " * <p>See the Guava User Guide article on <a href=\n",
        "33": " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n",
        "34": " * primitive utilities</a>.\n",
        "57": "   * @throws IllegalArgumentException if {@code value} is greater than {@link\n",
        "58": "   *     Byte#MAX_VALUE} or less than {@link Byte#MIN_VALUE}\n",
        "73": "   * @return the same value cast to {@code byte} if it is in the range of the\n",
        "74": "   *     {@code byte} type, {@link Byte#MAX_VALUE} if it is too large,\n",
        "75": "   *     or {@link Byte#MIN_VALUE} if it is too small\n",
        "88": "   * Compares the two specified {@code byte} values. The sign of the value\n",
        "89": "   * returned is the same as that of {@code ((Byte) a).compareTo(b)}.\n",
        "91": "   * <p><b>Note:</b> this method behaves identically to the JDK 7 method {@link\n",
        "92": "   * Byte#compare}.\n",
        "96": "   * @return a negative value if {@code a} is less than {@code b}; a positive\n",
        "97": "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n",
        "109": "   * @return the value present in {@code array} that is less than or equal to\n",
        "110": "   *     every other value in the array\n",
        "128": "   * @return the value present in {@code array} that is greater than or equal to\n",
        "129": "   *     every other value in the array\n",
        "144": "   * Returns a string containing the supplied {@code byte} values separated\n",
        "145": "   * by {@code separator}. For example, {@code join(\":\", 0x01, 0x02, -0x01)}\n",
        "146": "   * returns the string {@code \"1:2:-1\"}.\n",
        "148": "   * @param separator the text that should appear between consecutive values in\n",
        "149": "   *     the resulting string (but not at the start or end)\n",
        "168": "   * Returns a comparator that compares two {@code byte} arrays\n",
        "169": "   * lexicographically. That is, it compares, using {@link\n",
        "170": "   * #compare(byte, byte)}), the first pair of values that follow any common\n",
        "171": "   * prefix, or when one array is a prefix of the other, treats the shorter\n",
        "172": "   * array as the lesser. For example, {@code [] < [0x01] < [0x01, 0x80] <\n",
        "173": "   * [0x01, 0x7F] < [0x02]}. Values are treated as signed.\n",
        "175": "   * <p>The returned comparator is inconsistent with {@link\n",
        "176": "   * Object#equals(Object)} (since arrays support only identity equality), but\n",
        "177": "   * it is consistent with {@link java.util.Arrays#equals(byte[], byte[])}.\n",
        "179": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n",
        "180": "   *     Lexicographical order article at Wikipedia</a>\n"
    }
}