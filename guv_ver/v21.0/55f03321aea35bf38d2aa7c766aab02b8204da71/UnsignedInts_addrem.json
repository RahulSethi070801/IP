{
    "addition": {
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "41": " * <p>See the Guava User Guide article on\n",
        "42": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n",
        "43": " * primitive utilities</a>.\n",
        "66": "   *     greater than {@code b}; or zero if they are equal\n",
        "84": "   *     the array according to {@link #compare}\n",
        "104": "   *     in the array according to {@link #compare}\n",
        "123": "   * @param separator the text that should appear between consecutive values in the resulting string\n",
        "124": "   *     (but not at the start or end)\n",
        "143": "   * Returns a comparator that compares two arrays of unsigned {@code int} values <a\n",
        "144": "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n",
        "145": "   * compares, using {@link #compare(int, int)}), the first pair of values that follow any common\n",
        "146": "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n",
        "147": "   * example, {@code [] < [1] < [1, 2] < [2] < [1 << 31]}.\n",
        "233": "   * @throws NullPointerException if {@code s} is null (in contrast to\n",
        "234": "   *     {@link Integer#parseInt(String)})\n",
        "246": "   *     {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.\n",
        "248": "   *     if supplied radix is invalid.\n",
        "249": "   * @throws NullPointerException if {@code s} is null (in contrast to\n",
        "250": "   *     {@link Integer#parseInt(String)})\n",
        "271": "   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated as\n",
        "272": "   * unsigned.\n",
        "277": "   *     and {@link Character#MAX_RADIX}.\n"
    },
    "removed": {
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the\n",
        "10": " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n",
        "11": " * express or implied. See the License for the specific language governing permissions and\n",
        "12": " * limitations under the License.\n",
        "41": " * <p>See the Guava User Guide article on <a href=\n",
        "42": " * \"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">\n",
        "43": " * unsigned primitive utilities</a>.\n",
        "66": "   *         greater than {@code b}; or zero if they are equal\n",
        "84": "   *         the array according to {@link #compare}\n",
        "104": "   *         in the array according to {@link #compare}\n",
        "123": "   * @param separator the text that should appear between consecutive values in the resulting\n",
        "124": "   *        string (but not at the start or end)\n",
        "143": "   * Returns a comparator that compares two arrays of unsigned {@code int} values lexicographically.\n",
        "144": "   * That is, it compares, using {@link #compare(int, int)}), the first pair of values that follow\n",
        "145": "   * any common prefix, or when one array is a prefix of the other, treats the shorter array as the\n",
        "146": "   * lesser. For example, {@code [] < [1] < [1, 2] < [2] < [1 << 31]}.\n",
        "150": "   *\n",
        "151": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\"> Lexicographical order\n",
        "152": "   *      article at Wikipedia</a>\n",
        "235": "   * @throws NullPointerException if {@code s} is null\n",
        "236": "   *         (in contrast to {@link Integer#parseInt(String)})\n",
        "248": "   *        {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.\n",
        "250": "   *         if supplied radix is invalid.\n",
        "251": "   * @throws NullPointerException if {@code s} is null\n",
        "252": "   *         (in contrast to {@link Integer#parseInt(String)})\n",
        "273": "   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated\n",
        "274": "   * as unsigned.\n",
        "279": "   *         and {@link Character#MAX_RADIX}.\n"
    }
}