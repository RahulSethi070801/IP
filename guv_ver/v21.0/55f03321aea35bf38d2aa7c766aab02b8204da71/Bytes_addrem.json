{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "35": " * Static utility methods pertaining to {@code byte} primitives, that are not already found in\n",
        "36": " * either {@link Byte} or {@link Arrays}, <i>and interpret bytes as neither signed nor unsigned</i>.\n",
        "37": " * The methods which specifically treat bytes as signed or unsigned are found in {@link SignedBytes}\n",
        "38": " * and {@link UnsignedBytes}.\n",
        "40": " * <p>See the Guava User Guide article on\n",
        "41": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "64": "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n",
        "81": "   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n",
        "85": "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "86": "   *     such index exists.\n",
        "106": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "107": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "108": "   * {@code target}.\n",
        "133": "   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n",
        "137": "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "138": "   *     such index exists.\n",
        "155": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "156": "   * {@code concat(new byte[] {a, b}, new byte[] {}, new byte[] {c}} returns the array {@code {a, b,\n",
        "157": "   * c}}.\n",
        "160": "   * @return a single array containing all the values from the source arrays, in order\n",
        "177": "   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n",
        "178": "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n",
        "179": "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n",
        "180": "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n",
        "184": "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n",
        "185": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n",
        "186": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "187": "   *     {@code minLength}\n",
        "196": "   * Returns an array containing each value of {@code collection}, converted to a {@code byte} value\n",
        "197": "   * in the manner of {@link Number#byteValue}.\n",
        "200": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "203": "   * @return an array containing the same values as {@code collection}, in the same order, converted\n",
        "204": "   *     to primitives\n",
        "205": "   * @throws NullPointerException if {@code collection} or any of its elements is null\n",
        "224": "   * Returns a fixed-size list backed by the specified array, similar to\n",
        "225": "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n",
        "226": "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n",
        "228": "   * <p>The returned list maintains the values, but not the identities, of {@code Byte} objects\n",
        "229": "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n",
        "230": "   * the returned list is unspecified.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "37": " * Static utility methods pertaining to {@code byte} primitives, that are not\n",
        "38": " * already found in either {@link Byte} or {@link Arrays}, <i>and interpret\n",
        "39": " * bytes as neither signed nor unsigned</i>. The methods which specifically\n",
        "40": " * treat bytes as signed or unsigned are found in {@link SignedBytes} and {@link\n",
        "41": " * UnsignedBytes}.\n",
        "43": " * <p>See the Guava User Guide article on <a href=\n",
        "44": " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n",
        "45": " * primitive utilities</a>.\n",
        "68": "   * Returns {@code true} if {@code target} is present as an element anywhere in\n",
        "69": "   * {@code array}.\n",
        "86": "   * Returns the index of the first appearance of the value {@code target} in\n",
        "87": "   * {@code array}.\n",
        "91": "   * @return the least index {@code i} for which {@code array[i] == target}, or\n",
        "92": "   *     {@code -1} if no such index exists.\n",
        "112": "   * <p>More formally, returns the lowest index {@code i} such that {@code\n",
        "113": "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n",
        "114": "   * the same elements as {@code target}.\n",
        "139": "   * Returns the index of the last appearance of the value {@code target} in\n",
        "140": "   * {@code array}.\n",
        "144": "   * @return the greatest index {@code i} for which {@code array[i] == target},\n",
        "145": "   *     or {@code -1} if no such index exists.\n",
        "162": "   * Returns the values from each provided array combined into a single array.\n",
        "163": "   * For example, {@code concat(new byte[] {a, b}, new byte[] {}, new\n",
        "164": "   * byte[] {c}} returns the array {@code {a, b, c}}.\n",
        "167": "   * @return a single array containing all the values from the source arrays, in\n",
        "168": "   *     order\n",
        "185": "   * Returns an array containing the same values as {@code array}, but\n",
        "186": "   * guaranteed to be of a specified minimum length. If {@code array} already\n",
        "187": "   * has a length of at least {@code minLength}, it is returned directly.\n",
        "188": "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n",
        "189": "   * containing the values of {@code array}, and zeroes in the remaining places.\n",
        "193": "   * @param padding an extra amount to \"grow\" the array by if growth is\n",
        "194": "   *     necessary\n",
        "195": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n",
        "196": "   *     negative\n",
        "197": "   * @return an array containing the values of {@code array}, with guaranteed\n",
        "198": "   *     minimum length {@code minLength}\n",
        "207": "   * Returns an array containing each value of {@code collection}, converted to\n",
        "208": "   * a {@code byte} value in the manner of {@link Number#byteValue}.\n",
        "211": "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n",
        "212": "   * that method.\n",
        "215": "   * @return an array containing the same values as {@code collection}, in the\n",
        "216": "   *     same order, converted to primitives\n",
        "217": "   * @throws NullPointerException if {@code collection} or any of its elements\n",
        "218": "   *     is null\n",
        "237": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "238": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n",
        "239": "   * but any attempt to set a value to {@code null} will result in a {@link\n",
        "240": "   * NullPointerException}.\n",
        "242": "   * <p>The returned list maintains the values, but not the identities, of\n",
        "243": "   * {@code Byte} objects written to or read from it.  For example, whether\n",
        "244": "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n",
        "245": "   * unspecified.\n"
    }
}