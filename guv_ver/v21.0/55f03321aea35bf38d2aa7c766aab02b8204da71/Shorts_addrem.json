{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "37": " * Static utility methods pertaining to {@code short} primitives, that are not already found in\n",
        "38": " * either {@link Short} or {@link Arrays}.\n",
        "40": " * <p>See the Guava User Guide article on\n",
        "41": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "51": "   * The number of bytes required to represent a primitive {@code short} value.\n",
        "74": "   * Returns the {@code short} value that is equal to {@code value}, if possible.\n",
        "78": "   * @throws IllegalArgumentException if {@code value} is greater than {@link Short#MAX_VALUE} or\n",
        "79": "   *     less than {@link Short#MIN_VALUE}\n",
        "94": "   * @return the same value cast to {@code short} if it is in the range of the {@code short} type,\n",
        "95": "   *     {@link Short#MAX_VALUE} if it is too large, or {@link Short#MIN_VALUE} if it is too small\n",
        "108": "   * Compares the two specified {@code short} values. The sign of the value returned is the same as\n",
        "109": "   * that of {@code ((Short) a).compareTo(b)}.\n",
        "111": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the\n",
        "112": "   * equivalent {@link Short#compare} method instead.\n",
        "116": "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n",
        "117": "   *     greater than {@code b}; or zero if they are equal\n",
        "124": "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n",
        "141": "   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n",
        "145": "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "146": "   *     such index exists.\n",
        "166": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "167": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "168": "   * {@code target}.\n",
        "193": "   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n",
        "197": "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "198": "   *     such index exists.\n",
        "218": "   * @return the value present in {@code array} that is less than or equal to every other value in\n",
        "219": "   *     the array\n",
        "237": "   * @return the value present in {@code array} that is greater than or equal to every other value\n",
        "238": "   *     in the array\n",
        "253": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "254": "   * {@code concat(new short[] {a, b}, new short[] {}, new short[] {c}} returns the array\n",
        "255": "   * {@code {a, b, c}}.\n",
        "258": "   * @return a single array containing all the values from the source arrays, in order\n",
        "275": "   * Returns a big-endian representation of {@code value} in a 2-element byte array; equivalent to\n",
        "276": "   * {@code ByteBuffer.allocate(2).putShort(value).array()}. For example, the input value {@code\n",
        "277": "   * (short) 0x1234} would yield the byte array {@code {0x12, 0x34}}.\n",
        "279": "   * <p>If you need to convert and concatenate several values (possibly even of different types),\n",
        "280": "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "281": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n",
        "285": "    return new byte[] {(byte) (value >> 8), (byte) value};\n",
        "289": "   * Returns the {@code short} value whose big-endian representation is stored in the first 2 bytes\n",
        "290": "   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getShort()}. For example, the\n",
        "291": "   * input byte array {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}.\n",
        "293": "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n",
        "294": "   * flexibility at little cost in readability.\n",
        "296": "   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements\n",
        "305": "   * Returns the {@code short} value whose byte representation is the given 2 bytes, in big-endian\n",
        "306": "   * order; equivalent to {@code Shorts.fromByteArray(new byte[] {b1, b2})}.\n",
        "342": "   * Returns a serializable converter object that converts between strings and shorts using\n",
        "343": "   * {@link Short#decode} and {@link Short#toString()}. The returned converter throws\n",
        "344": "   * {@link NumberFormatException} if the input string is invalid.\n",
        "358": "   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n",
        "359": "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n",
        "360": "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n",
        "361": "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n",
        "365": "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n",
        "366": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n",
        "367": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "368": "   *     {@code minLength}\n",
        "377": "   * Returns a string containing the supplied {@code short} values separated by {@code separator}.\n",
        "378": "   * For example, {@code join(\"-\", (short) 1, (short) 2,\n",
        "381": "   * @param separator the text that should appear between consecutive values in the resulting string\n",
        "382": "   *     (but not at the start or end)\n",
        "401": "   * Returns a comparator that compares two {@code short} arrays <a\n",
        "402": "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n",
        "403": "   * compares, using {@link #compare(short, short)}), the first pair of values that follow any\n",
        "404": "   * common prefix, or when one array is a prefix of the other, treats the shorter array as the\n",
        "405": "   * lesser. For example, {@code [] < [(short) 1] < [(short) 1, (short) 2] < [(short) 2]}.\n",
        "407": "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n",
        "408": "   * support only identity equality), but it is consistent with\n",
        "409": "   * {@link Arrays#equals(short[], short[])}.\n",
        "439": "   * Returns an array containing each value of {@code collection}, converted to a {@code short}\n",
        "440": "   * value in the manner of {@link Number#shortValue}.\n",
        "443": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "446": "   * @return an array containing the same values as {@code collection}, in the same order, converted\n",
        "447": "   *     to primitives\n",
        "448": "   * @throws NullPointerException if {@code collection} or any of its elements is null\n",
        "467": "   * Returns a fixed-size list backed by the specified array, similar to\n",
        "468": "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n",
        "469": "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n",
        "471": "   * <p>The returned list maintains the values, but not the identities, of {@code Short} objects\n",
        "472": "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n",
        "473": "   * the returned list is unspecified.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "39": " * Static utility methods pertaining to {@code short} primitives, that are not\n",
        "40": " * already found in either {@link Short} or {@link Arrays}.\n",
        "42": " * <p>See the Guava User Guide article on <a href=\n",
        "43": " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n",
        "44": " * primitive utilities</a>.\n",
        "54": "   * The number of bytes required to represent a primitive {@code short}\n",
        "55": "   * value.\n",
        "78": "   * Returns the {@code short} value that is equal to {@code value}, if\n",
        "79": "   * possible.\n",
        "83": "   * @throws IllegalArgumentException if {@code value} is greater than {@link\n",
        "84": "   *     Short#MAX_VALUE} or less than {@link Short#MIN_VALUE}\n",
        "99": "   * @return the same value cast to {@code short} if it is in the range of the\n",
        "100": "   *     {@code short} type, {@link Short#MAX_VALUE} if it is too large,\n",
        "101": "   *     or {@link Short#MIN_VALUE} if it is too small\n",
        "114": "   * Compares the two specified {@code short} values. The sign of the value\n",
        "115": "   * returned is the same as that of {@code ((Short) a).compareTo(b)}.\n",
        "117": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n",
        "118": "   * deprecated; use the equivalent {@link Short#compare} method instead.\n",
        "122": "   * @return a negative value if {@code a} is less than {@code b}; a positive\n",
        "123": "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n",
        "130": "   * Returns {@code true} if {@code target} is present as an element anywhere in\n",
        "131": "   * {@code array}.\n",
        "148": "   * Returns the index of the first appearance of the value {@code target} in\n",
        "149": "   * {@code array}.\n",
        "153": "   * @return the least index {@code i} for which {@code array[i] == target}, or\n",
        "154": "   *     {@code -1} if no such index exists.\n",
        "174": "   * <p>More formally, returns the lowest index {@code i} such that {@code\n",
        "175": "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n",
        "176": "   * the same elements as {@code target}.\n",
        "201": "   * Returns the index of the last appearance of the value {@code target} in\n",
        "202": "   * {@code array}.\n",
        "206": "   * @return the greatest index {@code i} for which {@code array[i] == target},\n",
        "207": "   *     or {@code -1} if no such index exists.\n",
        "227": "   * @return the value present in {@code array} that is less than or equal to\n",
        "228": "   *     every other value in the array\n",
        "246": "   * @return the value present in {@code array} that is greater than or equal to\n",
        "247": "   *     every other value in the array\n",
        "262": "   * Returns the values from each provided array combined into a single array.\n",
        "263": "   * For example, {@code concat(new short[] {a, b}, new short[] {}, new\n",
        "264": "   * short[] {c}} returns the array {@code {a, b, c}}.\n",
        "267": "   * @return a single array containing all the values from the source arrays, in\n",
        "268": "   *     order\n",
        "285": "   * Returns a big-endian representation of {@code value} in a 2-element byte\n",
        "286": "   * array; equivalent to {@code\n",
        "287": "   * ByteBuffer.allocate(2).putShort(value).array()}.  For example, the input\n",
        "288": "   * value {@code (short) 0x1234} would yield the byte array {@code {0x12,\n",
        "289": "   * 0x34}}.\n",
        "291": "   * <p>If you need to convert and concatenate several values (possibly even of\n",
        "292": "   * different types), use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "293": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable\n",
        "294": "   * buffer.\n",
        "298": "    return new byte[] {\n",
        "299": "      (byte) (value >> 8),\n",
        "300": "      (byte) value\n",
        "301": "    };\n",
        "305": "   * Returns the {@code short} value whose big-endian representation is\n",
        "306": "   * stored in the first 2 bytes of {@code bytes}; equivalent to {@code\n",
        "307": "   * ByteBuffer.wrap(bytes).getShort()}. For example, the input byte array\n",
        "308": "   * {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}.\n",
        "310": "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that\n",
        "311": "   * library exposes much more flexibility at little cost in readability.\n",
        "313": "   * @throws IllegalArgumentException if {@code bytes} has fewer than 2\n",
        "314": "   *     elements\n",
        "323": "   * Returns the {@code short} value whose byte representation is the given 2\n",
        "324": "   * bytes, in big-endian order; equivalent to {@code Shorts.fromByteArray(new\n",
        "325": "   * byte[] {b1, b2})}.\n",
        "361": "   * Returns a serializable converter object that converts between strings and shorts using {@link\n",
        "362": "   * Short#decode} and {@link Short#toString()}. The returned converter throws {@link\n",
        "363": "   * NumberFormatException} if the input string is invalid.\n",
        "377": "   * Returns an array containing the same values as {@code array}, but\n",
        "378": "   * guaranteed to be of a specified minimum length. If {@code array} already\n",
        "379": "   * has a length of at least {@code minLength}, it is returned directly.\n",
        "380": "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n",
        "381": "   * containing the values of {@code array}, and zeroes in the remaining places.\n",
        "385": "   * @param padding an extra amount to \"grow\" the array by if growth is\n",
        "386": "   *     necessary\n",
        "387": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n",
        "388": "   *     negative\n",
        "389": "   * @return an array containing the values of {@code array}, with guaranteed\n",
        "390": "   *     minimum length {@code minLength}\n",
        "399": "   * Returns a string containing the supplied {@code short} values separated\n",
        "400": "   * by {@code separator}. For example, {@code join(\"-\", (short) 1, (short) 2,\n",
        "403": "   * @param separator the text that should appear between consecutive values in\n",
        "404": "   *     the resulting string (but not at the start or end)\n",
        "423": "   * Returns a comparator that compares two {@code short} arrays\n",
        "424": "   * lexicographically. That is, it compares, using {@link\n",
        "425": "   * #compare(short, short)}), the first pair of values that follow any\n",
        "426": "   * common prefix, or when one array is a prefix of the other, treats the\n",
        "427": "   * shorter array as the lesser. For example, {@code [] < [(short) 1] <\n",
        "428": "   * [(short) 1, (short) 2] < [(short) 2]}.\n",
        "430": "   * <p>The returned comparator is inconsistent with {@link\n",
        "431": "   * Object#equals(Object)} (since arrays support only identity equality), but\n",
        "432": "   * it is consistent with {@link Arrays#equals(short[], short[])}.\n",
        "434": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n",
        "435": "   *     Lexicographical order article at Wikipedia</a>\n",
        "464": "   * Returns an array containing each value of {@code collection}, converted to\n",
        "465": "   * a {@code short} value in the manner of {@link Number#shortValue}.\n",
        "468": "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n",
        "469": "   * that method.\n",
        "472": "   * @return an array containing the same values as {@code collection}, in the\n",
        "473": "   *     same order, converted to primitives\n",
        "474": "   * @throws NullPointerException if {@code collection} or any of its elements\n",
        "475": "   *     is null\n",
        "494": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "495": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n",
        "496": "   * but any attempt to set a value to {@code null} will result in a {@link\n",
        "497": "   * NullPointerException}.\n",
        "499": "   * <p>The returned list maintains the values, but not the identities, of\n",
        "500": "   * {@code Short} objects written to or read from it.  For example, whether\n",
        "501": "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n",
        "502": "   * unspecified.\n"
    }
}