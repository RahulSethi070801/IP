{
    "addition": {
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "36": " * <p>See the Guava User Guide article on\n",
        "37": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n",
        "38": " * primitive utilities</a>.\n",
        "57": "   * Returns an {@code UnsignedInteger} corresponding to a given bit representation. The argument is\n",
        "58": "   * interpreted as an unsigned 32-bit value. Specifically, the sign bit of {@code bits} is\n",
        "59": "   * interpreted as a normal bit, and all other bits are treated as usual.\n",
        "73": "   * Returns an {@code UnsignedInteger} that is equal to {@code value}, if possible. The inverse\n",
        "74": "   * operation of {@link #longValue()}.\n",
        "100": "   * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as\n",
        "101": "   * an unsigned {@code int} value.\n",
        "104": "   *     value\n",
        "111": "   * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as\n",
        "112": "   * an unsigned {@code int} value in the specified radix.\n",
        "115": "   *     value\n",
        "219": "   * Compares this unsigned integer to another unsigned integer. Returns {@code 0} if they are\n",
        "220": "   * equal, a negative number if {@code this < other}, and a positive number if\n",
        "221": "   * {@code this > other}.\n",
        "252": "   * Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}. If\n",
        "253": "   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix\n"
    },
    "removed": {
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the\n",
        "10": " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n",
        "11": " * express or implied. See the License for the specific language governing permissions and\n",
        "12": " * limitations under the License.\n",
        "36": " * <p>See the Guava User Guide article on <a href=\n",
        "37": " * \"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">\n",
        "38": " * unsigned primitive utilities</a>.\n",
        "57": "   * Returns an {@code UnsignedInteger} corresponding to a given bit representation.\n",
        "58": "   * The argument is interpreted as an unsigned 32-bit value. Specifically, the sign bit\n",
        "59": "   * of {@code bits} is interpreted as a normal bit, and all other bits are treated as usual.\n",
        "73": "   * Returns an {@code UnsignedInteger} that is equal to {@code value},\n",
        "74": "   * if possible.  The inverse operation of {@link #longValue()}.\n",
        "100": "   * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed\n",
        "101": "   * as an unsigned {@code int} value.\n",
        "104": "   *         value\n",
        "111": "   * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed\n",
        "112": "   * as an unsigned {@code int} value in the specified radix.\n",
        "115": "   *         value\n",
        "219": "   * Compares this unsigned integer to another unsigned integer.\n",
        "220": "   * Returns {@code 0} if they are equal, a negative number if {@code this < other},\n",
        "221": "   * and a positive number if {@code this > other}.\n",
        "252": "   * Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}.\n",
        "253": "   * If {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix\n"
    }
}