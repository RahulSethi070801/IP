{"id": "55f03321aea35bf38d2aa7c766aab02b8204da71", "code": [{"0": "guava/src/com/google/common/primitives/Booleans.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code boolean} primitives, that are not already found in\n", " * either {@link Boolean} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "3": ["   * Compares the two specified {@code boolean} values in the standard way ({@code false} is\n", "   * considered less than {@code true}). The sign of the value returned is the same as that of\n", "   * {@code ((Boolean) a).compareTo(b)}.\n", "   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the\n", "   * equivalent {@link Boolean#compare} method instead.\n", "   * @return a positive number if only {@code a} is {@code true}, a negative number if only\n", "   *     {@code b} is true, or zero if {@code a == b}\n", "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n", "   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead,\n", "   * replacing {@code Booleans.contains(array, true)} with {@code !bitSet.isEmpty()} and\n", "   * {@code Booleans.contains(array, false)} with {@code bitSet.nextClearBit(0) == sizeOfBitSet}.\n"], "4": ["   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n", "   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and\n", "   * using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "5": ["   * Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n", "   * {@code target}.\n"], "6": ["   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "7": ["   * Returns the values from each provided array combined into a single array. For example,\n", "   * {@code concat(new boolean[] {a, b}, new boolean[] {}, new boolean[] {c}} returns the array\n", "   * {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in order\n"], "8": ["   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n", "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n", "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n", "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n", "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n", "   *     {@code minLength}\n"], "9": ["   * Returns a string containing the supplied {@code boolean} values separated by {@code separator}.\n", "   * For example, {@code join(\"-\", false, true, false)} returns the string\n", "   * {@code \"false-true-false\"}.\n", "   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "10": ["   * Returns a comparator that compares two {@code boolean} arrays <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(boolean, boolean)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the shorter array as the\n", "   * lesser. For example, {@code [] < [false] < [false, true] < [true]}.\n", "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n", "   * support only identity equality), but it is consistent with\n", "   * {@link Arrays#equals(boolean[], boolean[])}.\n"], "11": ["   * Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean}\n", "   * values.\n", "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n", "   * <p><b>Note:</b> consider representing the collection as a {@link java.util.BitSet} instead.\n", "   * @return an array containing the same values as {@code collection}, in the same order, converted\n", "   *     to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements is null\n"], "12": ["   * Returns a fixed-size list backed by the specified array, similar to\n", "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n", "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of {@code Boolean} objects\n", "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n", "   * the returned list is unspecified.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code boolean} primitives, that are not\n", " * already found in either {@link Boolean} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "3": ["   * Compares the two specified {@code boolean} values in the standard way\n", "   * ({@code false} is considered less than {@code true}). The sign of the\n", "   * value returned is the same as that of {@code ((Boolean) a).compareTo(b)}.\n", "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n", "   * deprecated; use the equivalent {@link Boolean#compare} method instead.\n", "   * @return a positive number if only {@code a} is {@code true}, a negative\n", "   *     number if only {@code b} is true, or zero if {@code a == b}\n", "   * Returns {@code true} if {@code target} is present as an element anywhere in\n", "   * {@code array}.\n", "   * <p><b>Note:</b> consider representing the array as a {@link\n", "   * java.util.BitSet} instead, replacing {@code Booleans.contains(array, true)}\n", "   * with {@code !bitSet.isEmpty()} and {@code Booleans.contains(array, false)}\n", "   * with {@code bitSet.nextClearBit(0) == sizeOfBitSet}.\n"], "4": ["   * Returns the index of the first appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * <p><b>Note:</b> consider representing the array as a {@link\n", "   * java.util.BitSet} instead, and using {@link\n", "   * java.util.BitSet#nextSetBit(int)} or {@link\n", "   * java.util.BitSet#nextClearBit(int)}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or\n", "   *     {@code -1} if no such index exists.\n"], "5": ["   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n", "   * the same elements as {@code target}.\n"], "6": ["   * Returns the index of the last appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target},\n", "   *     or {@code -1} if no such index exists.\n"], "7": ["   * Returns the values from each provided array combined into a single array.\n", "   * For example, {@code concat(new boolean[] {a, b}, new boolean[] {}, new\n", "   * boolean[] {c}} returns the array {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in\n", "   *     order\n"], "8": ["   * Returns an array containing the same values as {@code array}, but\n", "   * guaranteed to be of a specified minimum length. If {@code array} already\n", "   * has a length of at least {@code minLength}, it is returned directly.\n", "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n", "   * containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is\n", "   *     necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n", "   *     negative\n", "   * @return an array containing the values of {@code array}, with guaranteed\n", "   *     minimum length {@code minLength}\n"], "9": ["   * Returns a string containing the supplied {@code boolean} values separated\n", "   * by {@code separator}. For example, {@code join(\"-\", false, true, false)}\n", "   * returns the string {@code \"false-true-false\"}.\n", "   * @param separator the text that should appear between consecutive values in\n", "   *     the resulting string (but not at the start or end)\n"], "10": ["   * Returns a comparator that compares two {@code boolean} arrays\n", "   * lexicographically. That is, it compares, using {@link\n", "   * #compare(boolean, boolean)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the\n", "   * shorter array as the lesser. For example,\n", "   * {@code [] < [false] < [false, true] < [true]}.\n", "   * <p>The returned comparator is inconsistent with {@link\n", "   * Object#equals(Object)} (since arrays support only identity equality), but\n", "   * it is consistent with {@link Arrays#equals(boolean[], boolean[])}.\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n", "   *     Lexicographical order article at Wikipedia</a>\n"], "11": ["   * Copies a collection of {@code Boolean} instances into a new array of\n", "   * primitive {@code boolean} values.\n", "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n", "   * that method.\n", "   * <p><b>Note:</b> consider representing the collection as a {@link\n", "   * java.util.BitSet} instead.\n", "   * @return an array containing the same values as {@code collection}, in the\n", "   *     same order, converted to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements\n", "   *     is null\n"], "12": ["   * Returns a fixed-size list backed by the specified array, similar to {@link\n", "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n", "   * but any attempt to set a value to {@code null} will result in a {@link\n", "   * NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of\n", "   * {@code Boolean} objects written to or read from it.  For example, whether\n", "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n", "   * unspecified.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [37, 38, 40, 41], "3": [62, 63, 64, 66, 67, 71, 72, 79, 81, 82, 83], "4": [100, 102, 103, 107, 108], "5": [129, 130], "6": [155, 159, 160], "7": [177, 178, 179, 182], "8": [199, 200, 201, 202, 206, 207, 208, 209], "9": [218, 219, 220, 222, 223], "10": [242, 243, 244, 245, 246, 248, 249, 250], "11": [280, 281, 284, 286, 289, 290, 291], "12": [309, 310, 311, 313, 314, 315]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [39, 40, 42, 43, 44], "3": [65, 66, 67, 69, 70, 74, 75, 82, 83, 85, 86, 87, 88], "4": [105, 106, 108, 109, 110, 111, 115, 116], "5": [137, 138], "6": [163, 164, 168, 169], "7": [186, 187, 188, 191, 192], "8": [209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222], "9": [231, 232, 233, 235, 236], "10": [255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267], "11": [296, 297, 300, 301, 303, 304, 307, 308, 309, 310], "12": [328, 329, 330, 331, 333, 334, 335, 336]}}, {"1": "guava/src/com/google/common/primitives/Bytes.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code byte} primitives, that are not already found in\n", " * either {@link Byte} or {@link Arrays}, <i>and interpret bytes as neither signed nor unsigned</i>.\n", " * The methods which specifically treat bytes as signed or unsigned are found in {@link SignedBytes}\n", " * and {@link UnsignedBytes}.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "3": ["   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n"], "4": ["   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "5": ["   * <p>More formally, returns the lowest index {@code i} such that\n", "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n", "   * {@code target}.\n"], "6": ["   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "7": ["   * Returns the values from each provided array combined into a single array. For example,\n", "   * {@code concat(new byte[] {a, b}, new byte[] {}, new byte[] {c}} returns the array {@code {a, b,\n", "   * c}}.\n", "   * @return a single array containing all the values from the source arrays, in order\n"], "8": ["   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n", "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n", "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n", "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n", "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n", "   *     {@code minLength}\n"], "9": ["   * Returns an array containing each value of {@code collection}, converted to a {@code byte} value\n", "   * in the manner of {@link Number#byteValue}.\n", "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n", "   * @return an array containing the same values as {@code collection}, in the same order, converted\n", "   *     to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements is null\n"], "10": ["   * Returns a fixed-size list backed by the specified array, similar to\n", "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n", "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of {@code Byte} objects\n", "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n", "   * the returned list is unspecified.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code byte} primitives, that are not\n", " * already found in either {@link Byte} or {@link Arrays}, <i>and interpret\n", " * bytes as neither signed nor unsigned</i>. The methods which specifically\n", " * treat bytes as signed or unsigned are found in {@link SignedBytes} and {@link\n", " * UnsignedBytes}.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "3": ["   * Returns {@code true} if {@code target} is present as an element anywhere in\n", "   * {@code array}.\n"], "4": ["   * Returns the index of the first appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or\n", "   *     {@code -1} if no such index exists.\n"], "5": ["   * <p>More formally, returns the lowest index {@code i} such that {@code\n", "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n", "   * the same elements as {@code target}.\n"], "6": ["   * Returns the index of the last appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target},\n", "   *     or {@code -1} if no such index exists.\n"], "7": ["   * Returns the values from each provided array combined into a single array.\n", "   * For example, {@code concat(new byte[] {a, b}, new byte[] {}, new\n", "   * byte[] {c}} returns the array {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in\n", "   *     order\n"], "8": ["   * Returns an array containing the same values as {@code array}, but\n", "   * guaranteed to be of a specified minimum length. If {@code array} already\n", "   * has a length of at least {@code minLength}, it is returned directly.\n", "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n", "   * containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is\n", "   *     necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n", "   *     negative\n", "   * @return an array containing the values of {@code array}, with guaranteed\n", "   *     minimum length {@code minLength}\n"], "9": ["   * Returns an array containing each value of {@code collection}, converted to\n", "   * a {@code byte} value in the manner of {@link Number#byteValue}.\n", "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n", "   * that method.\n", "   * @return an array containing the same values as {@code collection}, in the\n", "   *     same order, converted to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements\n", "   *     is null\n"], "10": ["   * Returns a fixed-size list backed by the specified array, similar to {@link\n", "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n", "   * but any attempt to set a value to {@code null} will result in a {@link\n", "   * NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of\n", "   * {@code Byte} objects written to or read from it.  For example, whether\n", "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n", "   * unspecified.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [35, 36, 37, 38, 40, 41], "3": [64], "4": [81, 85, 86], "5": [106, 107, 108], "6": [133, 137, 138], "7": [155, 156, 157, 160], "8": [177, 178, 179, 180, 184, 185, 186, 187], "9": [196, 197, 200, 203, 204, 205], "10": [224, 225, 226, 228, 229, 230]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [37, 38, 39, 40, 41, 43, 44, 45], "3": [68, 69], "4": [86, 87, 91, 92], "5": [112, 113, 114], "6": [139, 140, 144, 145], "7": [162, 163, 164, 167, 168], "8": [185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198], "9": [207, 208, 211, 212, 215, 216, 217, 218], "10": [237, 238, 239, 240, 242, 243, 244, 245]}}, {"2": "guava/src/com/google/common/primitives/Chars.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code char} primitives, that are not already found in\n", " * either {@link Character} or {@link Arrays}.\n", " * <p>All the operations in this class treat {@code char} values strictly numerically; they are\n", " * neither Unicode-aware nor locale-dependent.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code char} value.\n"], "4": ["   * @throws IllegalArgumentException if {@code value} is greater than {@link Character#MAX_VALUE}\n", "   *     or less than {@link Character#MIN_VALUE}\n"], "5": ["   * @return the same value cast to {@code char} if it is in the range of the {@code char} type,\n", "   *     {@link Character#MAX_VALUE} if it is too large, or {@link Character#MIN_VALUE} if it is too\n", "   *     small\n"], "6": ["   * Compares the two specified {@code char} values. The sign of the value returned is the same as\n", "   * that of {@code ((Character) a).compareTo(b)}.\n", "   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the\n", "   * equivalent {@link Character#compare} method instead.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n", "   *     greater than {@code b}; or zero if they are equal\n", "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n"], "7": ["   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "8": ["   * <p>More formally, returns the lowest index {@code i} such that\n", "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n", "   * {@code target}.\n"], "9": ["   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "10": ["   * @return the value present in {@code array} that is less than or equal to every other value in\n", "   *     the array\n"], "11": ["   * @return the value present in {@code array} that is greater than or equal to every other value\n", "   *     in the array\n"], "12": ["   * Returns the values from each provided array combined into a single array. For example,\n", "   * {@code concat(new char[] {a, b}, new char[] {}, new char[] {c}} returns the array\n", "   * {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in order\n"], "13": ["   * Returns a big-endian representation of {@code value} in a 2-element byte array; equivalent to\n", "   * {@code ByteBuffer.allocate(2).putChar(value).array()}. For example, the input value\n", "   * {@code '\\\\u5432'} would yield the byte array {@code {0x54, 0x32}}.\n", "   * <p>If you need to convert and concatenate several values (possibly even of different types),\n", "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n", "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n"], "14": ["   * Returns the {@code char} value whose big-endian representation is stored in the first 2 bytes\n", "   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getChar()}. For example, the\n", "   * input byte array {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\\\u5432'}.\n", "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n", "   * flexibility at little cost in readability.\n", "   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements\n"], "15": ["   * Returns the {@code char} value whose byte representation is the given 2 bytes, in big-endian\n", "   * order; equivalent to {@code Chars.fromByteArray(new byte[] {b1, b2})}.\n"], "16": ["   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n", "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n", "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n", "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n", "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n", "   *     {@code minLength}\n"], "17": ["   * Returns a string containing the supplied {@code char} values separated by {@code separator}.\n", "   * For example, {@code join(\"-\", '1', '2', '3')} returns the string {@code \"1-2-3\"}.\n", "   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "18": ["   * Returns a comparator that compares two {@code char} arrays <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(char, char)}), the first pair of values that follow any common\n", "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n", "   * example, {@code [] < ['a'] < ['a', 'b'] < ['b']}.\n", "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n", "   * support only identity equality), but it is consistent with\n", "   * {@link Arrays#equals(char[], char[])}.\n"], "19": ["   * Copies a collection of {@code Character} instances into a new array of primitive {@code char}\n", "   * values.\n", "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n", "   * @return an array containing the same values as {@code collection}, in the same order, converted\n", "   *     to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements is null\n"], "20": ["   * Returns a fixed-size list backed by the specified array, similar to\n", "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n", "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of {@code Character} objects\n", "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n", "   * the returned list is unspecified.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code char} primitives, that are not\n", " * already found in either {@link Character} or {@link Arrays}.\n", " * <p>All the operations in this class treat {@code char} values strictly\n", " * numerically; they are neither Unicode-aware nor locale-dependent.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code char}\n", "   * value.\n"], "4": ["   * @throws IllegalArgumentException if {@code value} is greater than {@link\n", "   *     Character#MAX_VALUE} or less than {@link Character#MIN_VALUE}\n"], "5": ["   * @return the same value cast to {@code char} if it is in the range of the\n", "   *     {@code char} type, {@link Character#MAX_VALUE} if it is too large,\n", "   *     or {@link Character#MIN_VALUE} if it is too small\n"], "6": ["   * Compares the two specified {@code char} values. The sign of the value\n", "   * returned is the same as that of {@code ((Character) a).compareTo(b)}.\n", "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n", "   * deprecated; use the equivalent {@link Character#compare} method instead.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive\n", "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n", "   * Returns {@code true} if {@code target} is present as an element anywhere in\n", "   * {@code array}.\n"], "7": ["   * Returns the index of the first appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or\n", "   *     {@code -1} if no such index exists.\n"], "8": ["   * <p>More formally, returns the lowest index {@code i} such that {@code\n", "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n", "   * the same elements as {@code target}.\n"], "9": ["   * Returns the index of the last appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target},\n", "   *     or {@code -1} if no such index exists.\n"], "10": ["   * @return the value present in {@code array} that is less than or equal to\n", "   *     every other value in the array\n"], "11": ["   * @return the value present in {@code array} that is greater than or equal to\n", "   *     every other value in the array\n"], "12": ["   * Returns the values from each provided array combined into a single array.\n", "   * For example, {@code concat(new char[] {a, b}, new char[] {}, new\n", "   * char[] {c}} returns the array {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in\n", "   *     order\n"], "13": ["   * Returns a big-endian representation of {@code value} in a 2-element byte\n", "   * array; equivalent to {@code\n", "   * ByteBuffer.allocate(2).putChar(value).array()}.  For example, the input\n", "   * value {@code '\\\\u5432'} would yield the byte array {@code {0x54, 0x32}}.\n", "   * <p>If you need to convert and concatenate several values (possibly even of\n", "   * different types), use a shared {@link java.nio.ByteBuffer} instance, or use\n", "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable\n", "   * buffer.\n"], "14": ["   * Returns the {@code char} value whose big-endian representation is\n", "   * stored in the first 2 bytes of {@code bytes}; equivalent to {@code\n", "   * ByteBuffer.wrap(bytes).getChar()}. For example, the input byte array\n", "   * {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\\\u5432'}.\n", "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that\n", "   * library exposes much more flexibility at little cost in readability.\n", "   * @throws IllegalArgumentException if {@code bytes} has fewer than 2\n", "   *     elements\n"], "15": ["   * Returns the {@code char} value whose byte representation is the given 2\n", "   * bytes, in big-endian order; equivalent to {@code Chars.fromByteArray(new\n", "   * byte[] {b1, b2})}.\n"], "16": ["   * Returns an array containing the same values as {@code array}, but\n", "   * guaranteed to be of a specified minimum length. If {@code array} already\n", "   * has a length of at least {@code minLength}, it is returned directly.\n", "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n", "   * containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is\n", "   *     necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n", "   *     negative\n", "   * @return an array containing the values of {@code array}, with guaranteed\n", "   *     minimum length {@code minLength}\n"], "17": ["   * Returns a string containing the supplied {@code char} values separated\n", "   * by {@code separator}. For example, {@code join(\"-\", '1', '2', '3')} returns\n", "   * the string {@code \"1-2-3\"}.\n", "   * @param separator the text that should appear between consecutive values in\n", "   *     the resulting string (but not at the start or end)\n"], "18": ["   * Returns a comparator that compares two {@code char} arrays\n", "   * lexicographically. That is, it compares, using {@link\n", "   * #compare(char, char)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the\n", "   * shorter array as the lesser. For example,\n", "   * {@code [] < ['a'] < ['a', 'b'] < ['b']}.\n", "   * <p>The returned comparator is inconsistent with {@link\n", "   * Object#equals(Object)} (since arrays support only identity equality), but\n", "   * it is consistent with {@link Arrays#equals(char[], char[])}.\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n", "   *     Lexicographical order article at Wikipedia</a>\n"], "19": ["   * Copies a collection of {@code Character} instances into a new array of\n", "   * primitive {@code char} values.\n", "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n", "   * that method.\n", "   * @return an array containing the same values as {@code collection}, in the\n", "   *     same order, converted to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements\n", "   *     is null\n"], "20": ["   * Returns a fixed-size list backed by the specified array, similar to {@link\n", "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n", "   * but any attempt to set a value to {@code null} will result in a {@link\n", "   * NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of\n", "   * {@code Character} objects written to or read from it.  For example, whether\n", "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n", "   * unspecified.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [37, 38, 40, 41, 43, 44], "3": [54], "4": [74, 75], "5": [90, 91, 92], "6": [105, 106, 108, 109, 113, 114, 121], "7": [138, 142, 143], "8": [163, 164, 165], "9": [190, 194, 195], "10": [215, 216], "11": [234, 235], "12": [250, 251, 252, 255], "13": [272, 273, 274, 276, 277, 278], "14": [286, 287, 288, 290, 291, 293], "15": [302, 303], "16": [313, 314, 315, 316, 320, 321, 322, 323], "17": [332, 333, 335, 336], "18": [355, 356, 357, 358, 359, 361, 362, 363], "19": [393, 394, 397, 400, 401, 402], "20": [420, 421, 422, 424, 425, 426]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [39, 40, 42, 43, 45, 46, 47], "3": [57, 58], "4": [78, 79], "5": [94, 95, 96], "6": [109, 110, 112, 113, 117, 118, 125, 126], "7": [143, 144, 148, 149], "8": [169, 170, 171], "9": [196, 197, 201, 202], "10": [222, 223], "11": [241, 242], "12": [257, 258, 259, 262, 263], "13": [280, 281, 282, 283, 285, 286, 287, 288], "14": [296, 297, 298, 299, 301, 302, 304, 305], "15": [314, 315, 316], "16": [326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "17": [348, 349, 350, 352, 353], "18": [372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384], "19": [413, 414, 417, 418, 421, 422, 423, 424], "20": [442, 443, 444, 445, 447, 448, 449, 450]}}, {"3": "guava/src/com/google/common/primitives/Doubles.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code double} primitives, that are not already found in\n", " * either {@link Double} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code double} value.\n"], "4": ["   * Compares the two specified {@code double} values. The sign of the value returned is the same as\n", "   * that of <code>((Double) a).{@linkplain Double#compareTo compareTo}(b)</code>. As with that\n", "   * method, {@code NaN} is treated as greater than all other values, and {@code 0.0 > -0.0}.\n", "   * <p><b>Note:</b> this method simply delegates to the JDK method {@link Double#compare}. It is\n", "   * provided for consistency with the other primitive types, whose compare methods were not added\n", "   * to the JDK until JDK 7.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n", "   *     greater than {@code b}; or zero if they are equal\n", "   * Returns {@code true} if {@code value} represents a real number. This is equivalent to, but not\n", "   * necessarily implemented as, {@code !(Double.isInfinite(value) || Double.isNaN(value))}.\n"], "5": ["   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}. Note\n", "   * that this always returns {@code false} when {@code target} is {@code NaN}.\n"], "6": ["   * Returns the index of the first appearance of the value {@code target} in {@code array}. Note\n", "   * that this always returns {@code -1} when {@code target} is {@code NaN}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "7": ["   * <p>More formally, returns the lowest index {@code i} such that\n", "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n", "   * {@code target}.\n", "   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.\n"], "8": ["   * Returns the index of the last appearance of the value {@code target} in {@code array}. Note\n", "   * that this always returns {@code -1} when {@code target} is {@code NaN}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "9": ["   * Returns the least value present in {@code array}, using the same rules of comparison as\n", "   * {@link Math#min(double, double)}.\n", "   * @return the value present in {@code array} that is less than or equal to every other value in\n", "   *     the array\n"], "10": ["   * Returns the greatest value present in {@code array}, using the same rules of comparison as\n", "   * {@link Math#max(double, double)}.\n", "   * @return the value present in {@code array} that is greater than or equal to every other value\n", "   *     in the array\n"], "11": ["   * Returns the values from each provided array combined into a single array. For example,\n", "   * {@code concat(new double[] {a, b}, new double[] {}, new double[] {c}} returns the array\n", "   * {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in order\n"], "12": ["   * Returns a serializable converter object that converts between strings and doubles using\n", "   * {@link Double#valueOf} and {@link Double#toString()}.\n"], "13": ["   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n", "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n", "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n", "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n", "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n", "   *     {@code minLength}\n"], "14": ["   * Returns a string containing the supplied {@code double} values, converted to strings as\n", "   * specified by {@link Double#toString(double)}, and separated by {@code separator}. For example,\n", "   * {@code join(\"-\", 1.0, 2.0, 3.0)} returns the string {@code \"1.0-2.0-3.0\"}.\n", "   * <p>Note that {@link Double#toString(double)} formats {@code double} differently in GWT\n", "   * sometimes. In the previous example, it returns the string {@code \"1-2-3\"}.\n", "   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "15": ["   * Returns a comparator that compares two {@code double} arrays <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(double, double)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the shorter array as the\n", "   * lesser. For example, {@code [] < [1.0] < [1.0, 2.0] < [2.0]}.\n", "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n", "   * support only identity equality), but it is consistent with\n", "   * {@link Arrays#equals(double[], double[])}.\n"], "16": ["   * Returns an array containing each value of {@code collection}, converted to a {@code double}\n", "   * value in the manner of {@link Number#doubleValue}.\n", "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n", "   * @return an array containing the same values as {@code collection}, in the same order, converted\n", "   *     to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements is null\n"], "17": ["   * Returns a fixed-size list backed by the specified array, similar to\n", "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n", "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of {@code Double} objects\n", "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n", "   * the returned list is unspecified.\n"], "18": ["   * This is adapted from the regex suggested by {@link Double#valueOf(String)} for prevalidating\n", "   * inputs. All valid inputs must pass this regex, but it's semantically fine if not all inputs\n", "   * that pass this regex are valid -- only a performance hit is incurred, not a semantics bug.\n"], "19": ["   * Parses the specified string as a double-precision floating point value. The ASCII character\n", "   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n", "   * <p>Unlike {@link Double#parseDouble(String)}, this method returns {@code null} instead of\n", "   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by\n", "   * {@link Double#valueOf(String)}, except that leading and trailing whitespace is not permitted.\n", "   * @return the floating point value represented by {@code string}, or {@code null} if\n", "   *     {@code string} has a length of zero or cannot be parsed as a {@code double} value\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code double} primitives, that are not\n", " * already found in either {@link Double} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code double}\n", "   * value.\n"], "4": ["   * Compares the two specified {@code double} values. The sign of the value\n", "   * returned is the same as that of <code>((Double) a).{@linkplain\n", "   * Double#compareTo compareTo}(b)</code>. As with that method, {@code NaN} is\n", "   * treated as greater than all other values, and {@code 0.0 > -0.0}.\n", "   * <p><b>Note:</b> this method simply delegates to the JDK method {@link\n", "   * Double#compare}. It is provided for consistency with the other primitive\n", "   * types, whose compare methods were not added to the JDK until JDK 7.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive\n", "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n", "   * Returns {@code true} if {@code value} represents a real number. This is\n", "   * equivalent to, but not necessarily implemented as,\n", "   * {@code !(Double.isInfinite(value) || Double.isNaN(value))}.\n"], "5": ["   * Returns {@code true} if {@code target} is present as an element anywhere in\n", "   * {@code array}. Note that this always returns {@code false} when {@code\n", "   * target} is {@code NaN}.\n"], "6": ["   * Returns the index of the first appearance of the value {@code target} in\n", "   * {@code array}. Note that this always returns {@code -1} when {@code target}\n", "   * is {@code NaN}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or\n", "   *     {@code -1} if no such index exists.\n"], "7": ["   * <p>More formally, returns the lowest index {@code i} such that {@code\n", "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n", "   * the same elements as {@code target}.\n", "   * <p>Note that this always returns {@code -1} when {@code target} contains\n", "   * {@code NaN}.\n"], "8": ["   * Returns the index of the last appearance of the value {@code target} in\n", "   * {@code array}. Note that this always returns {@code -1} when {@code target}\n", "   * is {@code NaN}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target},\n", "   *     or {@code -1} if no such index exists.\n"], "9": ["   * Returns the least value present in {@code array}, using the same rules of\n", "   * comparison as {@link Math#min(double, double)}.\n", "   * @return the value present in {@code array} that is less than or equal to\n", "   *     every other value in the array\n"], "10": ["   * Returns the greatest value present in {@code array}, using the same rules\n", "   * of comparison as {@link Math#max(double, double)}.\n", "   * @return the value present in {@code array} that is greater than or equal to\n", "   *     every other value in the array\n"], "11": ["   * Returns the values from each provided array combined into a single array.\n", "   * For example, {@code concat(new double[] {a, b}, new double[] {}, new\n", "   * double[] {c}} returns the array {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in\n", "   *     order\n"], "12": ["   * Returns a serializable converter object that converts between strings and\n", "   * doubles using {@link Double#valueOf} and {@link Double#toString()}.\n"], "13": ["   * Returns an array containing the same values as {@code array}, but\n", "   * guaranteed to be of a specified minimum length. If {@code array} already\n", "   * has a length of at least {@code minLength}, it is returned directly.\n", "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n", "   * containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is\n", "   *     necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n", "   *     negative\n", "   * @return an array containing the values of {@code array}, with guaranteed\n", "   *     minimum length {@code minLength}\n"], "14": ["   * Returns a string containing the supplied {@code double} values, converted\n", "   * to strings as specified by {@link Double#toString(double)}, and separated\n", "   * by {@code separator}. For example, {@code join(\"-\", 1.0, 2.0, 3.0)} returns\n", "   * the string {@code \"1.0-2.0-3.0\"}.\n", "   * <p>Note that {@link Double#toString(double)} formats {@code double}\n", "   * differently in GWT sometimes.  In the previous example, it returns the\n", "   * string {@code \"1-2-3\"}.\n", "   * @param separator the text that should appear between consecutive values in\n", "   *     the resulting string (but not at the start or end)\n"], "15": ["   * Returns a comparator that compares two {@code double} arrays\n", "   * lexicographically. That is, it compares, using {@link\n", "   * #compare(double, double)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the\n", "   * shorter array as the lesser. For example,\n", "   * {@code [] < [1.0] < [1.0, 2.0] < [2.0]}.\n", "   * <p>The returned comparator is inconsistent with {@link\n", "   * Object#equals(Object)} (since arrays support only identity equality), but\n", "   * it is consistent with {@link Arrays#equals(double[], double[])}.\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n", "   *     Lexicographical order article at Wikipedia</a>\n"], "16": ["   * Returns an array containing each value of {@code collection}, converted to\n", "   * a {@code double} value in the manner of {@link Number#doubleValue}.\n", "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n", "   * that method.\n", "   * @return an array containing the same values as {@code collection}, in the\n", "   *     same order, converted to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements\n", "   *     is null\n"], "17": ["   * Returns a fixed-size list backed by the specified array, similar to {@link\n", "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n", "   * but any attempt to set a value to {@code null} will result in a {@link\n", "   * NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of\n", "   * {@code Double} objects written to or read from it.  For example, whether\n", "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n", "   * unspecified.\n"], "18": ["   * This is adapted from the regex suggested by {@link Double#valueOf(String)}\n", "   * for prevalidating inputs.  All valid inputs must pass this regex, but it's\n", "   * semantically fine if not all inputs that pass this regex are valid --\n", "   * only a performance hit is incurred, not a semantics bug.\n"], "19": ["   * Parses the specified string as a double-precision floating point value.\n", "   * The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is recognized\n", "   * as the minus sign.\n", "   * <p>Unlike {@link Double#parseDouble(String)}, this method returns\n", "   * {@code null} instead of throwing an exception if parsing fails.\n", "   * Valid inputs are exactly those accepted by {@link Double#valueOf(String)},\n", "   * except that leading and trailing whitespace is not permitted.\n", "   * @return the floating point value represented by {@code string}, or\n", "   *     {@code null} if {@code string} has a length of zero or cannot be\n", "   *     parsed as a {@code double} value\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [43, 44, 46, 47], "3": [57], "4": [78, 79, 80, 82, 83, 84, 88, 89, 96, 97], "5": [106, 107], "6": [124, 125, 129, 130], "7": [150, 151, 152, 154], "8": [179, 180, 184, 185], "9": [202, 203, 206, 207], "10": [220, 221, 224, 225], "11": [238, 239, 240, 243], "12": [286, 287], "13": [297, 298, 299, 300, 304, 305, 306, 307], "14": [316, 317, 318, 320, 321, 323, 324], "15": [343, 344, 345, 346, 347, 349, 350, 351], "16": [381, 382, 385, 388, 389, 390], "17": [409, 410, 411, 413, 414, 415], "18": [565, 566, 567], "19": [583, 584, 586, 587, 588, 594, 595]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [45, 46, 48, 49, 50], "3": [60, 61], "4": [82, 83, 84, 85, 87, 88, 89, 93, 94, 101, 102, 103], "5": [112, 113, 114], "6": [131, 132, 133, 137, 138], "7": [158, 159, 160, 162, 163], "8": [188, 189, 190, 194, 195], "9": [212, 213, 216, 217], "10": [230, 231, 234, 235], "11": [248, 249, 250, 253, 254], "12": [297, 298], "13": [308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321], "14": [330, 331, 332, 333, 335, 336, 337, 339, 340], "15": [359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371], "16": [400, 401, 404, 405, 408, 409, 410, 411], "17": [430, 431, 432, 433, 435, 436, 437, 438], "18": [588, 589, 590, 591], "19": [607, 608, 609, 611, 612, 613, 614, 620, 621, 622]}}, {"4": "guava/src/com/google/common/primitives/Floats.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code float} primitives, that are not already found in\n", " * either {@link Float} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code float} value.\n"], "4": ["   * Compares the two specified {@code float} values using {@link Float#compare(float, float)}. You\n", "   * may prefer to invoke that method directly; this method exists only for consistency with the\n", "   * other utilities in this package.\n", "   * <p><b>Note:</b> this method simply delegates to the JDK method {@link Float#compare}. It is\n", "   * provided for consistency with the other primitive types, whose compare methods were not added\n", "   * to the JDK until JDK 7.\n"], "5": ["   * Returns {@code true} if {@code value} represents a real number. This is equivalent to, but not\n", "   * necessarily implemented as, {@code !(Float.isInfinite(value) || Float.isNaN(value))}.\n"], "6": ["   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}. Note\n", "   * that this always returns {@code false} when {@code\n"], "7": ["   * Returns the index of the first appearance of the value {@code target} in {@code array}. Note\n", "   * that this always returns {@code -1} when {@code target} is {@code NaN}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "8": ["   * <p>More formally, returns the lowest index {@code i} such that\n", "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n", "   * {@code target}.\n", "   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.\n"], "9": ["   * Returns the index of the last appearance of the value {@code target} in {@code array}. Note\n", "   * that this always returns {@code -1} when {@code target} is {@code NaN}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "10": ["   * Returns the least value present in {@code array}, using the same rules of comparison as\n", "   * {@link Math#min(float, float)}.\n", "   * @return the value present in {@code array} that is less than or equal to every other value in\n", "   *     the array\n"], "11": ["   * Returns the greatest value present in {@code array}, using the same rules of comparison as\n", "   * {@link Math#max(float, float)}.\n", "   * @return the value present in {@code array} that is greater than or equal to every other value\n", "   *     in the array\n"], "12": ["   * Returns the values from each provided array combined into a single array. For example,\n", "   * {@code concat(new float[] {a, b}, new float[] {}, new float[] {c}} returns the array {@code {a,\n", "   * b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in order\n"], "13": ["   * Returns a serializable converter object that converts between strings and floats using\n", "   * {@link Float#valueOf} and {@link Float#toString()}.\n"], "14": ["   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n", "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n", "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n", "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n", "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n", "   *     {@code minLength}\n"], "15": ["   * Returns a string containing the supplied {@code float} values, converted to strings as\n", "   * specified by {@link Float#toString(float)}, and separated by {@code separator}. For example,\n", "   * {@code join(\"-\", 1.0f, 2.0f, 3.0f)} returns the string {@code \"1.0-2.0-3.0\"}.\n", "   * <p>Note that {@link Float#toString(float)} formats {@code float} differently in GWT. In the\n", "   * previous example, it returns the string {@code\n", "   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "16": ["   * Returns a comparator that compares two {@code float} arrays <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(float, float)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the shorter array as the\n", "   * lesser. For example, {@code [] < [1.0f] < [1.0f, 2.0f] < [2.0f]}.\n", "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n", "   * support only identity equality), but it is consistent with\n", "   * {@link Arrays#equals(float[], float[])}.\n"], "17": ["   * Returns an array containing each value of {@code collection}, converted to a {@code float}\n", "   * value in the manner of {@link Number#floatValue}.\n", "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n", "   * @return an array containing the same values as {@code collection}, in the same order, converted\n", "   *     to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements is null\n"], "18": ["   * Returns a fixed-size list backed by the specified array, similar to\n", "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n", "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of {@code Float} objects\n", "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n", "   * the returned list is unspecified.\n"], "19": ["   * Parses the specified string as a single-precision floating point value. The ASCII character\n", "   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n", "   * <p>Unlike {@link Float#parseFloat(String)}, this method returns {@code null} instead of\n", "   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by\n", "   * {@link Float#valueOf(String)}, except that leading and trailing whitespace is not permitted.\n", "   * @return the floating point value represented by {@code string}, or {@code null} if\n", "   *     {@code string} has a length of zero or cannot be parsed as a {@code float} value\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code float} primitives, that are not\n", " * already found in either {@link Float} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code float}\n", "   * value.\n"], "4": ["   * Compares the two specified {@code float} values using {@link\n", "   * Float#compare(float, float)}. You may prefer to invoke that method\n", "   * directly; this method exists only for consistency with the other utilities\n", "   * in this package.\n", "   * <p><b>Note:</b> this method simply delegates to the JDK method {@link\n", "   * Float#compare}. It is provided for consistency with the other primitive\n", "   * types, whose compare methods were not added to the JDK until JDK 7.\n"], "5": ["   * Returns {@code true} if {@code value} represents a real number. This is\n", "   * equivalent to, but not necessarily implemented as,\n", "   * {@code !(Float.isInfinite(value) || Float.isNaN(value))}.\n"], "6": ["   * Returns {@code true} if {@code target} is present as an element anywhere in\n", "   * {@code array}. Note that this always returns {@code false} when {@code\n"], "7": ["   * Returns the index of the first appearance of the value {@code target} in\n", "   * {@code array}. Note that this always returns {@code -1} when {@code target}\n", "   * is {@code NaN}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or\n", "   *     {@code -1} if no such index exists.\n"], "8": ["   * <p>More formally, returns the lowest index {@code i} such that {@code\n", "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n", "   * the same elements as {@code target}.\n", "   * <p>Note that this always returns {@code -1} when {@code target} contains\n", "   * {@code NaN}.\n"], "9": ["   * Returns the index of the last appearance of the value {@code target} in\n", "   * {@code array}. Note that this always returns {@code -1} when {@code target}\n", "   * is {@code NaN}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target},\n", "   *     or {@code -1} if no such index exists.\n"], "10": ["   * Returns the least value present in {@code array}, using the same rules of\n", "   * comparison as {@link Math#min(float, float)}.\n", "   * @return the value present in {@code array} that is less than or equal to\n", "   *     every other value in the array\n"], "11": ["   * Returns the greatest value present in {@code array}, using the same rules\n", "   * of comparison as {@link Math#max(float, float)}.\n", "   * @return the value present in {@code array} that is greater than or equal to\n", "   *     every other value in the array\n"], "12": ["   * Returns the values from each provided array combined into a single array.\n", "   * For example, {@code concat(new float[] {a, b}, new float[] {}, new\n", "   * float[] {c}} returns the array {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in\n", "   *     order\n"], "13": ["   * Returns a serializable converter object that converts between strings and\n", "   * floats using {@link Float#valueOf} and {@link Float#toString()}.\n"], "14": ["   * Returns an array containing the same values as {@code array}, but\n", "   * guaranteed to be of a specified minimum length. If {@code array} already\n", "   * has a length of at least {@code minLength}, it is returned directly.\n", "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n", "   * containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is\n", "   *     necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n", "   *     negative\n", "   * @return an array containing the values of {@code array}, with guaranteed\n", "   *     minimum length {@code minLength}\n"], "15": ["   * Returns a string containing the supplied {@code float} values, converted\n", "   * to strings as specified by {@link Float#toString(float)}, and separated by\n", "   * {@code separator}. For example, {@code join(\"-\", 1.0f, 2.0f, 3.0f)}\n", "   * returns the string {@code \"1.0-2.0-3.0\"}.\n", "   * <p>Note that {@link Float#toString(float)} formats {@code float}\n", "   * differently in GWT.  In the previous example, it returns the string {@code\n", "   * @param separator the text that should appear between consecutive values in\n", "   *     the resulting string (but not at the start or end)\n"], "16": ["   * Returns a comparator that compares two {@code float} arrays\n", "   * lexicographically. That is, it compares, using {@link\n", "   * #compare(float, float)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the\n", "   * shorter array as the lesser. For example, {@code [] < [1.0f] < [1.0f, 2.0f]\n", "   * < [2.0f]}.\n", "   * <p>The returned comparator is inconsistent with {@link\n", "   * Object#equals(Object)} (since arrays support only identity equality), but\n", "   * it is consistent with {@link Arrays#equals(float[], float[])}.\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n", "   *     Lexicographical order article at Wikipedia</a>\n"], "17": ["   * Returns an array containing each value of {@code collection}, converted to\n", "   * a {@code float} value in the manner of {@link Number#floatValue}.\n", "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n", "   * that method.\n", "   * @return an array containing the same values as {@code collection}, in the\n", "   *     same order, converted to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements\n", "   *     is null\n"], "18": ["   * Returns a fixed-size list backed by the specified array, similar to {@link\n", "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n", "   * but any attempt to set a value to {@code null} will result in a {@link\n", "   * NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of\n", "   * {@code Float} objects written to or read from it.  For example, whether\n", "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n", "   * unspecified.\n"], "19": ["   * Parses the specified string as a single-precision floating point value.\n", "   * The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is recognized\n", "   * as the minus sign.\n", "   * <p>Unlike {@link Float#parseFloat(String)}, this method returns\n", "   * {@code null} instead of throwing an exception if parsing fails.\n", "   * Valid inputs are exactly those accepted by {@link Float#valueOf(String)},\n", "   * except that leading and trailing whitespace is not permitted.\n", "   * @return the floating point value represented by {@code string}, or\n", "   *     {@code null} if {@code string} has a length of zero or cannot be\n", "   *     parsed as a {@code float} value\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [42, 43, 45, 46], "3": [56], "4": [75, 76, 77, 79, 80, 81], "5": [92, 93], "6": [102, 103], "7": [121, 122, 126, 127], "8": [147, 148, 149, 151], "9": [176, 177, 181, 182], "10": [199, 200, 203, 204], "11": [217, 218, 221, 222], "12": [235, 236, 237, 240], "13": [283, 284], "14": [294, 295, 296, 297, 301, 302, 303, 304], "15": [313, 314, 315, 317, 318, 321, 322], "16": [341, 342, 343, 344, 345, 347, 348, 349], "17": [379, 380, 383, 386, 387, 388], "18": [407, 408, 409, 411, 412, 413], "19": [562, 563, 565, 566, 567, 573, 574]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [44, 45, 47, 48, 49], "3": [59, 60], "4": [79, 80, 81, 82, 84, 85, 86], "5": [97, 98, 99], "6": [108, 109], "7": [127, 128, 129, 133, 134], "8": [154, 155, 156, 158, 159], "9": [184, 185, 186, 190, 191], "10": [208, 209, 212, 213], "11": [226, 227, 230, 231], "12": [244, 245, 246, 249, 250], "13": [293, 294], "14": [304, 305, 306, 307, 308, 312, 313, 314, 315, 316, 317], "15": [326, 327, 328, 329, 331, 332, 335, 336], "16": [355, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367], "17": [396, 397, 400, 401, 404, 405, 406, 407], "18": [426, 427, 428, 429, 431, 432, 433, 434], "19": [583, 584, 585, 587, 588, 589, 590, 596, 597, 598]}}, {"5": "guava/src/com/google/common/primitives/Ints.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code int} primitives, that are not already found in either\n", " * {@link Integer} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code int} value.\n"], "4": ["   * @throws IllegalArgumentException if {@code value} is greater than {@link Integer#MAX_VALUE} or\n", "   *     less than {@link Integer#MIN_VALUE}\n"], "5": ["   * @return the same value cast to {@code int} if it is in the range of the {@code int} type,\n", "   *     {@link Integer#MAX_VALUE} if it is too large, or {@link Integer#MIN_VALUE} if it is too\n", "   *     small\n"], "6": ["   * Compares the two specified {@code int} values. The sign of the value returned is the same as\n", "   * that of {@code ((Integer) a).compareTo(b)}.\n", "   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the\n", "   * equivalent {@link Integer#compare} method instead.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n", "   *     greater than {@code b}; or zero if they are equal\n", "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n"], "7": ["   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "8": ["   * <p>More formally, returns the lowest index {@code i} such that\n", "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n", "   * {@code target}.\n"], "9": ["   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "10": ["   * @return the value present in {@code array} that is less than or equal to every other value in\n", "   *     the array\n"], "11": ["   * @return the value present in {@code array} that is greater than or equal to every other value\n", "   *     in the array\n"], "12": ["   * Returns the values from each provided array combined into a single array. For example,\n", "   * {@code concat(new int[] {a, b}, new int[] {}, new int[] {c}} returns the array {@code {a, b,\n", "   * c}}.\n", "   * @return a single array containing all the values from the source arrays, in order\n"], "13": ["   * Returns a big-endian representation of {@code value} in a 4-element byte array; equivalent to\n", "   * {@code ByteBuffer.allocate(4).putInt(value).array()}. For example, the input value\n", "   * {@code 0x12131415} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15}}.\n", "   *\n", "   * <p>If you need to convert and concatenate several values (possibly even of different types),\n", "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n", "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n", "      (byte) (value >> 24), (byte) (value >> 16), (byte) (value >> 8), (byte) value\n", "   * Returns the {@code int} value whose big-endian representation is stored in the first 4 bytes of\n", "   * {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getInt()}. For example, the input\n", "   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value\n", "   * {@code 0x12131415}.\n", "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n", "   * flexibility at little cost in readability.\n"], "14": ["   * Returns the {@code int} value whose byte representation is the given 4 bytes, in big-endian\n", "   * order; equivalent to {@code Ints.fromByteArray(new byte[] {b1, b2, b3, b4})}.\n"], "15": ["   * Returns a serializable converter object that converts between strings and integers using\n", "   * {@link Integer#decode} and {@link Integer#toString()}. The returned converter throws\n", "   * {@link NumberFormatException} if the input string is invalid.\n"], "16": ["   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n", "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n", "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n", "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n", "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n", "   *     {@code minLength}\n"], "17": ["   * Returns a string containing the supplied {@code int} values separated by {@code separator}. For\n", "   * example, {@code join(\"-\", 1, 2, 3)} returns the string {@code \"1-2-3\"}.\n", "   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "18": ["   * Returns a comparator that compares two {@code int} arrays <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(int, int)}), the first pair of values that follow any common\n", "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n", "   * example, {@code [] < [1] < [1, 2] < [2]}.\n", "   *\n", "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n", "   * support only identity equality), but it is consistent with {@link Arrays#equals(int[], int[])}.\n", "   *\n"], "19": ["   * Returns an array containing each value of {@code collection}, converted to a {@code int} value\n", "   * in the manner of {@link Number#intValue}.\n", "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n", "   * @return an array containing the same values as {@code collection}, in the same order, converted\n", "   *     to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements is null\n"], "20": ["   * Returns a fixed-size list backed by the specified array, similar to\n", "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n", "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of {@code Integer} objects\n", "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n", "   * the returned list is unspecified.\n"], "21": ["   * Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}\n", "   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n", "   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of\n", "   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,\n", "   * and returns {@code null} if non-ASCII digits are present in the string.\n", "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite\n", "   * the change to {@link Integer#parseInt(String)} for that version.\n", "   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has\n", "   *     a length of zero or cannot be parsed as an integer value\n"], "22": ["   * Parses the specified string as a signed integer value using the specified radix. The ASCII\n", "   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n", "   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of\n", "   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,\n", "   * and returns {@code null} if non-ASCII digits are present in the string.\n", "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite\n", "   * the change to {@link Integer#parseInt(String, int)} for that version.\n", "   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if\n", "   *     {@code string} has a length of zero or cannot be parsed as an integer value\n"], "23": ["  public static Integer tryParse(String string, int radix) {\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code int} primitives, that are not\n", " * already found in either {@link Integer} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code int}\n", "   * value.\n"], "4": ["   * @throws IllegalArgumentException if {@code value} is greater than {@link\n", "   *     Integer#MAX_VALUE} or less than {@link Integer#MIN_VALUE}\n"], "5": ["   * @return the same value cast to {@code int} if it is in the range of the\n", "   *     {@code int} type, {@link Integer#MAX_VALUE} if it is too large,\n", "   *     or {@link Integer#MIN_VALUE} if it is too small\n"], "6": ["   * Compares the two specified {@code int} values. The sign of the value\n", "   * returned is the same as that of {@code ((Integer) a).compareTo(b)}.\n", "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n", "   * deprecated; use the equivalent {@link Integer#compare} method instead.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive\n", "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n", "   * Returns {@code true} if {@code target} is present as an element anywhere in\n", "   * {@code array}.\n"], "7": ["   * Returns the index of the first appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or\n", "   *     {@code -1} if no such index exists.\n"], "8": ["   * <p>More formally, returns the lowest index {@code i} such that {@code\n", "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n", "   * the same elements as {@code target}.\n"], "9": ["   * Returns the index of the last appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target},\n", "   *     or {@code -1} if no such index exists.\n"], "10": ["   * @return the value present in {@code array} that is less than or equal to\n", "   *     every other value in the array\n"], "11": ["   * @return the value present in {@code array} that is greater than or equal to\n", "   *     every other value in the array\n"], "12": ["   * Returns the values from each provided array combined into a single array.\n", "   * For example, {@code concat(new int[] {a, b}, new int[] {}, new\n", "   * int[] {c}} returns the array {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in\n", "   *     order\n"], "13": ["   * Returns a big-endian representation of {@code value} in a 4-element byte\n", "   * array; equivalent to {@code ByteBuffer.allocate(4).putInt(value).array()}.\n", "   * For example, the input value {@code 0x12131415} would yield the byte array\n", "   * {@code {0x12, 0x13, 0x14, 0x15}}.\n", "   *\n", "   * <p>If you need to convert and concatenate several values (possibly even of\n", "   * different types), use a shared {@link java.nio.ByteBuffer} instance, or use\n", "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable\n", "   * buffer.\n", "      (byte) (value >> 24),\n", "      (byte) (value >> 16),\n", "      (byte) (value >> 8),\n", "      (byte) value\n", "   * Returns the {@code int} value whose big-endian representation is stored in\n", "   * the first 4 bytes of {@code bytes}; equivalent to {@code\n", "   * ByteBuffer.wrap(bytes).getInt()}. For example, the input byte array {@code\n", "   * {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value {@code\n", "   * 0x12131415}.\n", "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that\n", "   * library exposes much more flexibility at little cost in readability.\n"], "14": ["   * Returns the {@code int} value whose byte representation is the given 4\n", "   * bytes, in big-endian order; equivalent to {@code Ints.fromByteArray(new\n", "   * byte[] {b1, b2, b3, b4})}.\n"], "15": ["   * Returns a serializable converter object that converts between strings and integers using {@link\n", "   * Integer#decode} and {@link Integer#toString()}. The returned converter throws {@link\n", "   * NumberFormatException} if the input string is invalid.\n"], "16": ["   * Returns an array containing the same values as {@code array}, but\n", "   * guaranteed to be of a specified minimum length. If {@code array} already\n", "   * has a length of at least {@code minLength}, it is returned directly.\n", "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n", "   * containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is\n", "   *     necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n", "   *     negative\n", "   * @return an array containing the values of {@code array}, with guaranteed\n", "   *     minimum length {@code minLength}\n"], "17": ["   * Returns a string containing the supplied {@code int} values separated\n", "   * by {@code separator}. For example, {@code join(\"-\", 1, 2, 3)} returns\n", "   * the string {@code \"1-2-3\"}.\n", "   * @param separator the text that should appear between consecutive values in\n", "   *     the resulting string (but not at the start or end)\n"], "18": ["   * Returns a comparator that compares two {@code int} arrays\n", "   * lexicographically. That is, it compares, using {@link\n", "   * #compare(int, int)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the\n", "   * shorter array as the lesser. For example, {@code [] < [1] < [1, 2] < [2]}.\n", "   *\n", "   * <p>The returned comparator is inconsistent with {@link\n", "   * Object#equals(Object)} (since arrays support only identity equality), but\n", "   * it is consistent with {@link Arrays#equals(int[], int[])}.\n", "   *\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n", "   *     Lexicographical order article at Wikipedia</a>\n"], "19": ["   * Returns an array containing each value of {@code collection}, converted to\n", "   * a {@code int} value in the manner of {@link Number#intValue}.\n", "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n", "   * that method.\n", "   * @return an array containing the same values as {@code collection}, in the\n", "   *     same order, converted to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements\n", "   *     is null\n"], "20": ["   * Returns a fixed-size list backed by the specified array, similar to {@link\n", "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n", "   * but any attempt to set a value to {@code null} will result in a {@link\n", "   * NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of\n", "   * {@code Integer} objects written to or read from it.  For example, whether\n", "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n", "   * unspecified.\n"], "21": ["   * Parses the specified string as a signed decimal integer value. The ASCII\n", "   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the\n", "   * minus sign.\n", "   * <p>Unlike {@link Integer#parseInt(String)}, this method returns\n", "   * {@code null} instead of throwing an exception if parsing fails.\n", "   * Additionally, this method only accepts ASCII digits, and returns\n", "   * {@code null} if non-ASCII digits are present in the string.\n", "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even\n", "   * under JDK 7, despite the change to {@link Integer#parseInt(String)} for\n", "   * that version.\n", "   * @return the integer value represented by {@code string}, or {@code null} if\n", "   *     {@code string} has a length of zero or cannot be parsed as an integer\n", "   *     value\n"], "22": ["   * Parses the specified string as a signed integer value using the specified\n", "   * radix. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is\n", "   * recognized as the minus sign.\n", "   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns\n", "   * {@code null} instead of throwing an exception if parsing fails.\n", "   * Additionally, this method only accepts ASCII digits, and returns\n", "   * {@code null} if non-ASCII digits are present in the string.\n", "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even\n", "   * under JDK 7, despite the change to {@link Integer#parseInt(String, int)}\n", "   * for that version.\n", "   * @return the integer value represented by {@code string} using\n", "   *     {@code radix}, or {@code null} if {@code string} has a length of zero\n", "   *     or cannot be parsed as an integer value\n"], "23": ["  public static Integer tryParse(\n", "      String string, int radix) {\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [40, 41, 43, 44], "3": [54], "4": [81, 82], "5": [97, 98, 99], "6": [112, 113, 115, 116, 120, 121, 128], "7": [145, 149, 150], "8": [170, 171, 172], "9": [197, 201, 202], "10": [222, 223], "11": [241, 242], "12": [257, 258, 259, 262], "13": [279, 280, 281, 282, 283, 284, 285, 290, 295, 296, 297, 298, 300, 301], "14": [312, 313], "15": [349, 350, 351], "16": [365, 366, 367, 368, 372, 373, 374, 375], "17": [384, 385, 387, 388], "18": [407, 408, 409, 410, 411, 412, 413, 414, 415], "19": [444, 445, 448, 451, 452, 453], "20": [472, 473, 474, 476, 477, 478], "21": [624, 625, 627, 628, 629, 631, 632, 635, 636], "22": [647, 648, 650, 651, 652, 654, 655, 659, 660], "23": [668]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [42, 43, 45, 46, 47], "3": [57, 58], "4": [85, 86], "5": [101, 102, 103], "6": [116, 117, 119, 120, 124, 125, 132, 133], "7": [150, 151, 155, 156], "8": [176, 177, 178], "9": [203, 204, 208, 209], "10": [229, 230], "11": [248, 249], "12": [264, 265, 266, 269, 270], "13": [287, 288, 289, 290, 291, 292, 293, 294, 295, 300, 301, 302, 303, 308, 309, 310, 311, 312, 314, 315], "14": [326, 327, 328], "15": [364, 365, 366], "16": [380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393], "17": [402, 403, 404, 406, 407], "18": [426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "19": [466, 467, 470, 471, 474, 475, 476, 477], "20": [496, 497, 498, 499, 501, 502, 503, 504], "21": [650, 651, 652, 654, 655, 656, 657, 659, 660, 661, 664, 665, 666], "22": [677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 692, 693, 694], "23": [702, 703]}}, {"6": "guava/src/com/google/common/primitives/Longs.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code long} primitives, that are not already found in\n", " * either {@link Long} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code long} value.\n"], "4": ["   * <p>This method always return the value specified by {@link Long#hashCode()} in java, which\n", "   * might be different from {@code ((Long) value).hashCode()} in GWT because\n", "   * {@link Long#hashCode()} in GWT does not obey the JRE contract.\n"], "5": ["   * Compares the two specified {@code long} values. The sign of the value returned is the same as\n", "   * that of {@code ((Long) a).compareTo(b)}.\n", "   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the\n", "   * equivalent {@link Long#compare} method instead.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n", "   *     greater than {@code b}; or zero if they are equal\n", "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n"], "6": ["   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "7": ["   * <p>More formally, returns the lowest index {@code i} such that\n", "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n", "   * {@code target}.\n"], "8": ["   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "9": ["   * @return the value present in {@code array} that is less than or equal to every other value in\n", "   *     the array\n"], "10": ["   * @return the value present in {@code array} that is greater than or equal to every other value\n", "   *     in the array\n"], "11": ["   * Returns the values from each provided array combined into a single array. For example,\n", "   * {@code concat(new long[] {a, b}, new long[] {}, new long[] {c}} returns the array\n", "   * {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in order\n"], "12": ["   * Returns a big-endian representation of {@code value} in an 8-element byte array; equivalent to\n", "   * {@code ByteBuffer.allocate(8).putLong(value).array()}. For example, the input value\n", "   * {@code 0x1213141516171819L} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16,\n", "   * 0x17, 0x18, 0x19}}.\n", "   *\n", "   * <p>If you need to convert and concatenate several values (possibly even of different types),\n", "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n", "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n"], "13": ["   * Returns the {@code long} value whose big-endian representation is stored in the first 8 bytes\n", "   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getLong()}. For example, the\n", "   * input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the\n", "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n", "   * flexibility at little cost in readability.\n", "   * @throws IllegalArgumentException if {@code bytes} has fewer than 8 elements\n"], "14": ["   * Returns the {@code long} value whose byte representation is the given 8 bytes, in big-endian\n", "   * order; equivalent to {@code Longs.fromByteArray(new byte[] {b1, b2, b3, b4, b5, b6, b7, b8})}.\n"], "15": ["   * Parses the specified string as a signed decimal long value. The ASCII character {@code '-'}\n", "   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n", "   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing\n", "   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns\n", "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite\n", "   * the change to {@link Long#parseLong(String)} for that version.\n", "   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a\n", "   *     length of zero or cannot be parsed as a long value\n"], "16": ["   * Parses the specified string as a signed long value using the specified radix. The ASCII\n", "   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n", "   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of\n", "   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,\n", "   * and returns {@code null} if non-ASCII digits are present in the string.\n", "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite\n", "   * the change to {@link Long#parseLong(String, int)} for that version.\n", "   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if\n", "   *     {@code string} has a length of zero or cannot be parsed as a long value\n"], "17": ["   * Returns a serializable converter object that converts between strings and longs using\n", "   * {@link Long#decode} and {@link Long#toString()}. The returned converter throws\n", "   * {@link NumberFormatException} if the input string is invalid.\n"], "18": ["   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n", "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n", "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n", "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n", "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n", "   *     {@code minLength}\n"], "19": ["   * Returns a string containing the supplied {@code long} values separated by {@code separator}.\n", "   * For example, {@code join(\"-\", 1L, 2L, 3L)} returns the string {@code \"1-2-3\"}.\n", "   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "20": ["   * Returns a comparator that compares two {@code long} arrays <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(long, long)}), the first pair of values that follow any common\n", "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n", "   * example, {@code [] < [1L] < [1L, 2L] < [2L]}.\n", "   *\n", "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n", "   * support only identity equality), but it is consistent with\n", "   * {@link Arrays#equals(long[], long[])}.\n", "   *\n"], "21": ["   * Returns an array containing each value of {@code collection}, converted to a {@code long} value\n", "   * in the manner of {@link Number#longValue}.\n", "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n", "   * @return an array containing the same values as {@code collection}, in the same order, converted\n", "   *     to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements is null\n"], "22": ["   * Returns a fixed-size list backed by the specified array, similar to\n", "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n", "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n", "   *\n", "   * <p>The returned list maintains the values, but not the identities, of {@code Long} objects\n", "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n", "   * the returned list is unspecified.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code long} primitives, that are not\n", " * already found in either {@link Long} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code long}\n", "   * value.\n"], "4": ["   * <p>This method always return the value specified by {@link\n", "   * Long#hashCode()} in java, which might be different from\n", "   * {@code ((Long) value).hashCode()} in GWT because {@link Long#hashCode()}\n", "   * in GWT does not obey the JRE contract.\n"], "5": ["   * Compares the two specified {@code long} values. The sign of the value\n", "   * returned is the same as that of {@code ((Long) a).compareTo(b)}.\n", "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n", "   * deprecated; use the equivalent {@link Long#compare} method instead.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive\n", "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n", "   * Returns {@code true} if {@code target} is present as an element anywhere in\n", "   * {@code array}.\n"], "6": ["   * Returns the index of the first appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or\n", "   *     {@code -1} if no such index exists.\n"], "7": ["   * <p>More formally, returns the lowest index {@code i} such that {@code\n", "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n", "   * the same elements as {@code target}.\n"], "8": ["   * Returns the index of the last appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target},\n", "   *     or {@code -1} if no such index exists.\n"], "9": ["   * @return the value present in {@code array} that is less than or equal to\n", "   *     every other value in the array\n"], "10": ["   * @return the value present in {@code array} that is greater than or equal to\n", "   *     every other value in the array\n"], "11": ["   * Returns the values from each provided array combined into a single array.\n", "   * For example, {@code concat(new long[] {a, b}, new long[] {}, new\n", "   * long[] {c}} returns the array {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in\n", "   *     order\n"], "12": ["   * Returns a big-endian representation of {@code value} in an 8-element byte\n", "   * array; equivalent to {@code ByteBuffer.allocate(8).putLong(value).array()}.\n", "   * For example, the input value {@code 0x1213141516171819L} would yield the\n", "   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}}.\n", "   *\n", "   * <p>If you need to convert and concatenate several values (possibly even of\n", "   * different types), use a shared {@link java.nio.ByteBuffer} instance, or use\n", "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable\n", "   * buffer.\n"], "13": ["   * Returns the {@code long} value whose big-endian representation is\n", "   * stored in the first 8 bytes of {@code bytes}; equivalent to {@code\n", "   * ByteBuffer.wrap(bytes).getLong()}. For example, the input byte array\n", "   * {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the\n", "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that\n", "   * library exposes much more flexibility at little cost in readability.\n", "   * @throws IllegalArgumentException if {@code bytes} has fewer than 8\n", "   *     elements\n"], "14": ["   * Returns the {@code long} value whose byte representation is the given 8\n", "   * bytes, in big-endian order; equivalent to {@code Longs.fromByteArray(new\n", "   * byte[] {b1, b2, b3, b4, b5, b6, b7, b8})}.\n"], "15": ["   * Parses the specified string as a signed decimal long value. The ASCII\n", "   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the\n", "   * minus sign.\n", "   * <p>Unlike {@link Long#parseLong(String)}, this method returns\n", "   * {@code null} instead of throwing an exception if parsing fails.\n", "   * Additionally, this method only accepts ASCII digits, and returns\n", "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even\n", "   * under JDK 7, despite the change to {@link Long#parseLong(String)} for\n", "   * that version.\n", "   * @return the long value represented by {@code string}, or {@code null} if\n", "   *     {@code string} has a length of zero or cannot be parsed as a long\n", "   *     value\n"], "16": ["   * Parses the specified string as a signed long value using the specified\n", "   * radix. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is\n", "   * recognized as the minus sign.\n", "   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns\n", "   * {@code null} instead of throwing an exception if parsing fails.\n", "   * Additionally, this method only accepts ASCII digits, and returns\n", "   * {@code null} if non-ASCII digits are present in the string.\n", "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even\n", "   * under JDK 7, despite the change to {@link Long#parseLong(String, int)}\n", "   * for that version.\n", "   * @return the long value represented by {@code string} using\n", "   *     {@code radix}, or {@code null} if {@code string} has a length of zero\n", "   *     or cannot be parsed as a long value\n"], "17": ["   * Returns a serializable converter object that converts between strings and longs using {@link\n", "   * Long#decode} and {@link Long#toString()}. The returned converter throws {@link\n", "   * NumberFormatException} if the input string is invalid.\n"], "18": ["   * Returns an array containing the same values as {@code array}, but\n", "   * guaranteed to be of a specified minimum length. If {@code array} already\n", "   * has a length of at least {@code minLength}, it is returned directly.\n", "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n", "   * containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is\n", "   *     necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n", "   *     negative\n", "   * @return an array containing the values of {@code array}, with guaranteed\n", "   *     minimum length {@code minLength}\n"], "19": ["   * Returns a string containing the supplied {@code long} values separated\n", "   * by {@code separator}. For example, {@code join(\"-\", 1L, 2L, 3L)} returns\n", "   * the string {@code \"1-2-3\"}.\n", "   * @param separator the text that should appear between consecutive values in\n", "   *     the resulting string (but not at the start or end)\n"], "20": ["   * Returns a comparator that compares two {@code long} arrays\n", "   * lexicographically. That is, it compares, using {@link\n", "   * #compare(long, long)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the\n", "   * shorter array as the lesser. For example,\n", "   * {@code [] < [1L] < [1L, 2L] < [2L]}.\n", "   *\n", "   * <p>The returned comparator is inconsistent with {@link\n", "   * Object#equals(Object)} (since arrays support only identity equality), but\n", "   * it is consistent with {@link Arrays#equals(long[], long[])}.\n", "   *\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n", "   *     Lexicographical order article at Wikipedia</a>\n"], "21": ["   * Returns an array containing each value of {@code collection}, converted to\n", "   * a {@code long} value in the manner of {@link Number#longValue}.\n", "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n", "   * that method.\n", "   * @return an array containing the same values as {@code collection}, in the\n", "   *     same order, converted to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements\n", "   *     is null\n"], "22": ["   * Returns a fixed-size list backed by the specified array, similar to {@link\n", "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n", "   * but any attempt to set a value to {@code null} will result in a {@link\n", "   * NullPointerException}.\n", "   *\n", "   * <p>The returned list maintains the values, but not the identities, of\n", "   * {@code Long} objects written to or read from it.  For example, whether\n", "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n", "   * unspecified.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [39, 40, 42, 43], "3": [53], "4": [68, 69, 70], "5": [80, 81, 83, 84, 88, 89, 96], "6": [113, 117, 118], "7": [138, 139, 140], "8": [165, 169, 170], "9": [190, 191], "10": [209, 210], "11": [225, 226, 227, 230], "12": [247, 248, 249, 250, 251, 252, 253, 254], "13": [268, 269, 270, 273, 274, 276], "14": [285, 286], "15": [322, 323, 325, 326, 329, 330, 333, 334], "16": [345, 346, 348, 349, 350, 352, 353, 357, 358], "17": [434, 435, 436], "18": [450, 451, 452, 453, 457, 458, 459, 460], "19": [469, 470, 472, 473], "20": [492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "21": [530, 531, 534, 537, 538, 539], "22": [558, 559, 560, 561, 562, 563, 564]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [41, 42, 44, 45, 46], "3": [56, 57], "4": [72, 73, 74, 75], "5": [85, 86, 88, 89, 93, 94, 101, 102], "6": [119, 120, 124, 125], "7": [145, 146, 147], "8": [172, 173, 177, 178], "9": [198, 199], "10": [217, 218], "11": [233, 234, 235, 238, 239], "12": [256, 257, 258, 259, 260, 261, 262, 263, 264], "13": [278, 279, 280, 281, 284, 285, 287, 288], "14": [297, 298, 299], "15": [335, 336, 337, 339, 340, 341, 344, 345, 346, 349, 350, 351], "16": [362, 363, 364, 366, 367, 368, 369, 371, 372, 373, 377, 378, 379], "17": [455, 456, 457], "18": [471, 472, 473, 474, 475, 479, 480, 481, 482, 483, 484], "19": [493, 494, 495, 497, 498], "20": [517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529], "21": [558, 559, 562, 563, 566, 567, 568, 569], "22": [588, 589, 590, 591, 592, 593, 594, 595, 596]}}, {"7": "guava/src/com/google/common/primitives/ParseRequest.java", "added": {"1": [" * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"]}, "removed": {"1": [" * Unless required by applicable law or agreed to in writing, software distributed under the\n", " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n", " * express or implied. See the License for the specific language governing permissions and\n", " * limitations under the License.\n"]}, "added_lines": {"1": [9, 10, 11, 12]}, "removed_lines": {"1": [9, 10, 11, 12]}}, {"8": "guava/src/com/google/common/primitives/Primitives.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Contains static utility methods pertaining to primitive types and their corresponding wrapper\n", " * types.\n"], "3": ["   * void}). Note that a simpler way to test whether a {@code Class} instance is a member of this\n", "   * set is to call {@link Class#isPrimitive}.\n"], "4": ["   * Returns an immutable set of all nine primitive-wrapper types (including {@link Void}).\n"], "5": ["   * Returns {@code true} if {@code type} is one of the nine primitive-wrapper types, such as\n", "   * {@link Integer}.\n"], "6": ["   * Returns the corresponding wrapper type of {@code type} if it is a primitive type; otherwise\n", "   * returns {@code type} itself. Idempotent.\n", "   *\n"], "7": ["   * Returns the corresponding primitive type of {@code type} if it is a wrapper type; otherwise\n", "   * returns {@code type} itself. Idempotent.\n", "   *\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Contains static utility methods pertaining to primitive types and their\n", " * corresponding wrapper types.\n"], "3": ["   * void}). Note that a simpler way to test whether a {@code Class} instance\n", "   * is a member of this set is to call {@link Class#isPrimitive}.\n"], "4": ["   * Returns an immutable set of all nine primitive-wrapper types (including\n", "   * {@link Void}).\n"], "5": ["   * Returns {@code true} if {@code type} is one of the nine\n", "   * primitive-wrapper types, such as {@link Integer}.\n"], "6": ["   * Returns the corresponding wrapper type of {@code type} if it is a primitive\n", "   * type; otherwise returns {@code type} itself. Idempotent.\n"], "7": ["   * Returns the corresponding primitive type of {@code type} if it is a\n", "   * wrapper type; otherwise returns {@code type} itself. Idempotent.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [27, 28], "3": [74, 75], "4": [84], "5": [93, 94], "6": [103, 104, 105], "7": [122, 123, 124]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [29, 30], "3": [76, 77], "4": [86, 87], "5": [96, 97], "6": [106, 107], "7": [124, 125]}}, {"9": "guava/src/com/google/common/primitives/Shorts.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code short} primitives, that are not already found in\n", " * either {@link Short} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code short} value.\n"], "4": ["   * Returns the {@code short} value that is equal to {@code value}, if possible.\n", "   * @throws IllegalArgumentException if {@code value} is greater than {@link Short#MAX_VALUE} or\n", "   *     less than {@link Short#MIN_VALUE}\n"], "5": ["   * @return the same value cast to {@code short} if it is in the range of the {@code short} type,\n", "   *     {@link Short#MAX_VALUE} if it is too large, or {@link Short#MIN_VALUE} if it is too small\n"], "6": ["   * Compares the two specified {@code short} values. The sign of the value returned is the same as\n", "   * that of {@code ((Short) a).compareTo(b)}.\n", "   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the\n", "   * equivalent {@link Short#compare} method instead.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n", "   *     greater than {@code b}; or zero if they are equal\n", "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n"], "7": ["   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "8": ["   * <p>More formally, returns the lowest index {@code i} such that\n", "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n", "   * {@code target}.\n"], "9": ["   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n", "   *     such index exists.\n"], "10": ["   * @return the value present in {@code array} that is less than or equal to every other value in\n", "   *     the array\n"], "11": ["   * @return the value present in {@code array} that is greater than or equal to every other value\n", "   *     in the array\n"], "12": ["   * Returns the values from each provided array combined into a single array. For example,\n", "   * {@code concat(new short[] {a, b}, new short[] {}, new short[] {c}} returns the array\n", "   * {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in order\n"], "13": ["   * Returns a big-endian representation of {@code value} in a 2-element byte array; equivalent to\n", "   * {@code ByteBuffer.allocate(2).putShort(value).array()}. For example, the input value {@code\n", "   * (short) 0x1234} would yield the byte array {@code {0x12, 0x34}}.\n", "   * <p>If you need to convert and concatenate several values (possibly even of different types),\n", "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n", "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n", "    return new byte[] {(byte) (value >> 8), (byte) value};\n", "   * Returns the {@code short} value whose big-endian representation is stored in the first 2 bytes\n", "   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getShort()}. For example, the\n", "   * input byte array {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}.\n", "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n", "   * flexibility at little cost in readability.\n", "   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements\n"], "14": ["   * Returns the {@code short} value whose byte representation is the given 2 bytes, in big-endian\n", "   * order; equivalent to {@code Shorts.fromByteArray(new byte[] {b1, b2})}.\n"], "15": ["   * Returns a serializable converter object that converts between strings and shorts using\n", "   * {@link Short#decode} and {@link Short#toString()}. The returned converter throws\n", "   * {@link NumberFormatException} if the input string is invalid.\n"], "16": ["   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n", "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n", "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n", "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n", "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n", "   *     {@code minLength}\n"], "17": ["   * Returns a string containing the supplied {@code short} values separated by {@code separator}.\n", "   * For example, {@code join(\"-\", (short) 1, (short) 2,\n", "   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "18": ["   * Returns a comparator that compares two {@code short} arrays <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(short, short)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the shorter array as the\n", "   * lesser. For example, {@code [] < [(short) 1] < [(short) 1, (short) 2] < [(short) 2]}.\n", "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n", "   * support only identity equality), but it is consistent with\n", "   * {@link Arrays#equals(short[], short[])}.\n"], "19": ["   * Returns an array containing each value of {@code collection}, converted to a {@code short}\n", "   * value in the manner of {@link Number#shortValue}.\n", "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n", "   * @return an array containing the same values as {@code collection}, in the same order, converted\n", "   *     to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements is null\n"], "20": ["   * Returns a fixed-size list backed by the specified array, similar to\n", "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n", "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of {@code Short} objects\n", "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n", "   * the returned list is unspecified.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code short} primitives, that are not\n", " * already found in either {@link Short} or {@link Arrays}.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "3": ["   * The number of bytes required to represent a primitive {@code short}\n", "   * value.\n"], "4": ["   * Returns the {@code short} value that is equal to {@code value}, if\n", "   * possible.\n", "   * @throws IllegalArgumentException if {@code value} is greater than {@link\n", "   *     Short#MAX_VALUE} or less than {@link Short#MIN_VALUE}\n"], "5": ["   * @return the same value cast to {@code short} if it is in the range of the\n", "   *     {@code short} type, {@link Short#MAX_VALUE} if it is too large,\n", "   *     or {@link Short#MIN_VALUE} if it is too small\n"], "6": ["   * Compares the two specified {@code short} values. The sign of the value\n", "   * returned is the same as that of {@code ((Short) a).compareTo(b)}.\n", "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n", "   * deprecated; use the equivalent {@link Short#compare} method instead.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive\n", "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n", "   * Returns {@code true} if {@code target} is present as an element anywhere in\n", "   * {@code array}.\n"], "7": ["   * Returns the index of the first appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the least index {@code i} for which {@code array[i] == target}, or\n", "   *     {@code -1} if no such index exists.\n"], "8": ["   * <p>More formally, returns the lowest index {@code i} such that {@code\n", "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n", "   * the same elements as {@code target}.\n"], "9": ["   * Returns the index of the last appearance of the value {@code target} in\n", "   * {@code array}.\n", "   * @return the greatest index {@code i} for which {@code array[i] == target},\n", "   *     or {@code -1} if no such index exists.\n"], "10": ["   * @return the value present in {@code array} that is less than or equal to\n", "   *     every other value in the array\n"], "11": ["   * @return the value present in {@code array} that is greater than or equal to\n", "   *     every other value in the array\n"], "12": ["   * Returns the values from each provided array combined into a single array.\n", "   * For example, {@code concat(new short[] {a, b}, new short[] {}, new\n", "   * short[] {c}} returns the array {@code {a, b, c}}.\n", "   * @return a single array containing all the values from the source arrays, in\n", "   *     order\n"], "13": ["   * Returns a big-endian representation of {@code value} in a 2-element byte\n", "   * array; equivalent to {@code\n", "   * ByteBuffer.allocate(2).putShort(value).array()}.  For example, the input\n", "   * value {@code (short) 0x1234} would yield the byte array {@code {0x12,\n", "   * 0x34}}.\n", "   * <p>If you need to convert and concatenate several values (possibly even of\n", "   * different types), use a shared {@link java.nio.ByteBuffer} instance, or use\n", "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable\n", "   * buffer.\n", "    return new byte[] {\n", "      (byte) (value >> 8),\n", "      (byte) value\n", "    };\n", "   * Returns the {@code short} value whose big-endian representation is\n", "   * stored in the first 2 bytes of {@code bytes}; equivalent to {@code\n", "   * ByteBuffer.wrap(bytes).getShort()}. For example, the input byte array\n", "   * {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}.\n", "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that\n", "   * library exposes much more flexibility at little cost in readability.\n", "   * @throws IllegalArgumentException if {@code bytes} has fewer than 2\n", "   *     elements\n"], "14": ["   * Returns the {@code short} value whose byte representation is the given 2\n", "   * bytes, in big-endian order; equivalent to {@code Shorts.fromByteArray(new\n", "   * byte[] {b1, b2})}.\n"], "15": ["   * Returns a serializable converter object that converts between strings and shorts using {@link\n", "   * Short#decode} and {@link Short#toString()}. The returned converter throws {@link\n", "   * NumberFormatException} if the input string is invalid.\n"], "16": ["   * Returns an array containing the same values as {@code array}, but\n", "   * guaranteed to be of a specified minimum length. If {@code array} already\n", "   * has a length of at least {@code minLength}, it is returned directly.\n", "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n", "   * containing the values of {@code array}, and zeroes in the remaining places.\n", "   * @param padding an extra amount to \"grow\" the array by if growth is\n", "   *     necessary\n", "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n", "   *     negative\n", "   * @return an array containing the values of {@code array}, with guaranteed\n", "   *     minimum length {@code minLength}\n"], "17": ["   * Returns a string containing the supplied {@code short} values separated\n", "   * by {@code separator}. For example, {@code join(\"-\", (short) 1, (short) 2,\n", "   * @param separator the text that should appear between consecutive values in\n", "   *     the resulting string (but not at the start or end)\n"], "18": ["   * Returns a comparator that compares two {@code short} arrays\n", "   * lexicographically. That is, it compares, using {@link\n", "   * #compare(short, short)}), the first pair of values that follow any\n", "   * common prefix, or when one array is a prefix of the other, treats the\n", "   * shorter array as the lesser. For example, {@code [] < [(short) 1] <\n", "   * [(short) 1, (short) 2] < [(short) 2]}.\n", "   * <p>The returned comparator is inconsistent with {@link\n", "   * Object#equals(Object)} (since arrays support only identity equality), but\n", "   * it is consistent with {@link Arrays#equals(short[], short[])}.\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n", "   *     Lexicographical order article at Wikipedia</a>\n"], "19": ["   * Returns an array containing each value of {@code collection}, converted to\n", "   * a {@code short} value in the manner of {@link Number#shortValue}.\n", "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n", "   * that method.\n", "   * @return an array containing the same values as {@code collection}, in the\n", "   *     same order, converted to primitives\n", "   * @throws NullPointerException if {@code collection} or any of its elements\n", "   *     is null\n"], "20": ["   * Returns a fixed-size list backed by the specified array, similar to {@link\n", "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n", "   * but any attempt to set a value to {@code null} will result in a {@link\n", "   * NullPointerException}.\n", "   * <p>The returned list maintains the values, but not the identities, of\n", "   * {@code Short} objects written to or read from it.  For example, whether\n", "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n", "   * unspecified.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [37, 38, 40, 41], "3": [51], "4": [74, 78, 79], "5": [94, 95], "6": [108, 109, 111, 112, 116, 117, 124], "7": [141, 145, 146], "8": [166, 167, 168], "9": [193, 197, 198], "10": [218, 219], "11": [237, 238], "12": [253, 254, 255, 258], "13": [275, 276, 277, 279, 280, 281, 285, 289, 290, 291, 293, 294, 296], "14": [305, 306], "15": [342, 343, 344], "16": [358, 359, 360, 361, 365, 366, 367, 368], "17": [377, 378, 381, 382], "18": [401, 402, 403, 404, 405, 407, 408, 409], "19": [439, 440, 443, 446, 447, 448], "20": [467, 468, 469, 471, 472, 473]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [39, 40, 42, 43, 44], "3": [54, 55], "4": [78, 79, 83, 84], "5": [99, 100, 101], "6": [114, 115, 117, 118, 122, 123, 130, 131], "7": [148, 149, 153, 154], "8": [174, 175, 176], "9": [201, 202, 206, 207], "10": [227, 228], "11": [246, 247], "12": [262, 263, 264, 267, 268], "13": [285, 286, 287, 288, 289, 291, 292, 293, 294, 298, 299, 300, 301, 305, 306, 307, 308, 310, 311, 313, 314], "14": [323, 324, 325], "15": [361, 362, 363], "16": [377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390], "17": [399, 400, 403, 404], "18": [423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 435], "19": [464, 465, 468, 469, 472, 473, 474, 475], "20": [494, 495, 496, 497, 499, 500, 501, 502]}}, {"10": "guava/src/com/google/common/primitives/SignedBytes.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code byte} primitives that interpret values as signed. The\n", " * corresponding methods that treat the values as unsigned are found in {@link UnsignedBytes}, and\n", " * the methods for which signedness is not an issue are in {@link Bytes}.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "3": ["   * @throws IllegalArgumentException if {@code value} is greater than {@link Byte#MAX_VALUE} or\n", "   *     less than {@link Byte#MIN_VALUE}\n"], "4": ["   * @return the same value cast to {@code byte} if it is in the range of the {@code byte} type,\n", "   *     {@link Byte#MAX_VALUE} if it is too large, or {@link Byte#MIN_VALUE} if it is too small\n"], "5": ["   * Compares the two specified {@code byte} values. The sign of the value returned is the same as\n", "   * that of {@code ((Byte) a).compareTo(b)}.\n", "   * <p><b>Note:</b> this method behaves identically to the JDK 7 method {@link Byte#compare}.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n", "   *     greater than {@code b}; or zero if they are equal\n"], "6": ["   * @return the value present in {@code array} that is less than or equal to every other value in\n", "   *     the array\n"], "7": ["   * @return the value present in {@code array} that is greater than or equal to every other value\n", "   *     in the array\n"], "8": ["   * Returns a string containing the supplied {@code byte} values separated by {@code separator}.\n", "   * For example, {@code join(\":\", 0x01, 0x02, -0x01)} returns the string {@code \"1:2:-1\"}.\n", "   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "9": ["   * Returns a comparator that compares two {@code byte} arrays <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(byte, byte)}), the first pair of values that follow any common\n", "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n", "   * example, {@code [] < [0x01] < [0x01, 0x80] < [0x01, 0x7F] < [0x02]}. Values are treated as\n", "   * signed.\n", "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n", "   * support only identity equality), but it is consistent with\n", "   * {@link java.util.Arrays#equals(byte[], byte[])}.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code byte} primitives that\n", " * interpret values as signed. The corresponding methods that treat the values\n", " * as unsigned are found in {@link UnsignedBytes}, and the methods for which\n", " * signedness is not an issue are in {@link Bytes}.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "3": ["   * @throws IllegalArgumentException if {@code value} is greater than {@link\n", "   *     Byte#MAX_VALUE} or less than {@link Byte#MIN_VALUE}\n"], "4": ["   * @return the same value cast to {@code byte} if it is in the range of the\n", "   *     {@code byte} type, {@link Byte#MAX_VALUE} if it is too large,\n", "   *     or {@link Byte#MIN_VALUE} if it is too small\n"], "5": ["   * Compares the two specified {@code byte} values. The sign of the value\n", "   * returned is the same as that of {@code ((Byte) a).compareTo(b)}.\n", "   * <p><b>Note:</b> this method behaves identically to the JDK 7 method {@link\n", "   * Byte#compare}.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive\n", "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n"], "6": ["   * @return the value present in {@code array} that is less than or equal to\n", "   *     every other value in the array\n"], "7": ["   * @return the value present in {@code array} that is greater than or equal to\n", "   *     every other value in the array\n"], "8": ["   * Returns a string containing the supplied {@code byte} values separated\n", "   * by {@code separator}. For example, {@code join(\":\", 0x01, 0x02, -0x01)}\n", "   * returns the string {@code \"1:2:-1\"}.\n", "   * @param separator the text that should appear between consecutive values in\n", "   *     the resulting string (but not at the start or end)\n"], "9": ["   * Returns a comparator that compares two {@code byte} arrays\n", "   * lexicographically. That is, it compares, using {@link\n", "   * #compare(byte, byte)}), the first pair of values that follow any common\n", "   * prefix, or when one array is a prefix of the other, treats the shorter\n", "   * array as the lesser. For example, {@code [] < [0x01] < [0x01, 0x80] <\n", "   * [0x01, 0x7F] < [0x02]}. Values are treated as signed.\n", "   * <p>The returned comparator is inconsistent with {@link\n", "   * Object#equals(Object)} (since arrays support only identity equality), but\n", "   * it is consistent with {@link java.util.Arrays#equals(byte[], byte[])}.\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n", "   *     Lexicographical order article at Wikipedia</a>\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [25, 26, 27, 29, 30], "3": [53, 54], "4": [69, 70], "5": [83, 84, 86, 90, 91], "6": [103, 104], "7": [122, 123], "8": [138, 139, 141, 142], "9": [161, 162, 163, 164, 165, 166, 168, 169, 170]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [27, 28, 29, 30, 32, 33, 34], "3": [57, 58], "4": [73, 74, 75], "5": [88, 89, 91, 92, 96, 97], "6": [109, 110], "7": [128, 129], "8": [144, 145, 146, 148, 149], "9": [168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180]}}, {"11": "guava/src/com/google/common/primitives/UnsignedBytes.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * Static utility methods pertaining to {@code byte} primitives that interpret values as\n", " * <i>unsigned</i> (that is, any negative value {@code b} is treated as the positive value\n", " * {@code 256 + b}). The corresponding methods that treat the values as signed are found in\n", " * {@link SignedBytes}, and the methods for which signedness is not an issue are in {@link Bytes}.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "3": ["   * Returns the value of the given byte as an integer, when treated as unsigned. That is, returns\n", "   * {@code value + 256} if {@code value} is negative; {@code value} itself otherwise.\n"], "4": ["   * Returns the {@code byte} value that, when treated as unsigned, is equal to {@code value}, if\n", "   * possible.\n", "   * @return the {@code byte} value that, when treated as unsigned, equals {@code value}\n", "   * @throws IllegalArgumentException if {@code value} is negative or greater than 255\n"], "5": ["   * Returns the {@code byte} value that, when treated as unsigned, is nearest in value to\n", "   * {@code value}.\n", "   * @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if {@code value <= 0}, and\n", "   *     {@code value} cast to {@code byte} otherwise\n"], "6": ["   * Compares the two specified {@code byte} values, treating them as unsigned values between 0 and\n", "   * 255 inclusive. For example, {@code (byte) -127} is considered greater than {@code (byte) 127}\n", "   * because it is seen as having the value of positive {@code 129}.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n", "   *     greater than {@code b}; or zero if they are equal\n"], "7": ["   * @return the value present in {@code array} that is less than or equal to every other value in\n", "   *     the array\n"], "8": ["   * @return the value present in {@code array} that is greater than or equal to every other value\n", "   *     in the array\n"], "9": ["   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated as\n", "   * unsigned.\n", "   *     and {@link Character#MAX_RADIX}.\n"], "10": ["   *     value\n", "   * @throws NullPointerException if {@code string} is null (in contrast to\n", "   *     {@link Byte#parseByte(String)})\n"], "11": ["   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} with\n", "   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and\n", "   *     {@link Character#MAX_RADIX}.\n", "   * @throws NullPointerException if {@code string} is null (in contrast to\n", "   *     {@link Byte#parseByte(String)})\n"], "12": ["   * Returns a string containing the supplied {@code byte} values separated by {@code separator}.\n", "   * For example, {@code join(\":\", (byte) 1, (byte) 2,\n", "   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "13": ["   * Returns a comparator that compares two {@code byte} arrays <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(byte, byte)}), the first pair of values that follow any common\n", "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n", "   * example, {@code [] < [0x01] < [0x01, 0x7F] < [0x01, 0x80] < [0x02]}. Values are treated as\n", "   * unsigned.\n", "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n", "   * support only identity equality), but it is consistent with\n", "   * {@link java.util.Arrays#equals(byte[], byte[])}.\n"], "14": ["   * Provides a lexicographical comparator implementation; either a Java implementation or a faster\n", "   * implementation based on {@link Unsafe}.\n", "   * <p>Uses reflection to gracefully fall back to the Java implementation if {@code Unsafe} isn't\n", "   * available.\n"], "15": ["       * In UnsignedBytesBenchmark, accessing the following objects via static final fields is the\n", "       * fastest (more than twice as fast as the Java implementation, vs ~1.5x with non-final static\n", "       * fields, on x86_32) under the Hotspot server compiler. The reason is obviously that the\n", "       * And, no, defining (final or not) local variables out of the loop still isn't as good\n", "       * because the null check on the theUnsafe object remains inside the loop and\n", "       * BYTE_ARRAY_BASE_OFFSET doesn't get constant-folded.\n", "       * The compiler can treat static final fields as compile-time constants and can constant-fold\n", "       * them while (final or not) local variables are run time values.\n"], "16": ["       * Returns a sun.misc.Unsafe. Suitable for use in a 3rd party package. Replace with a simple\n", "       * call to Unsafe.getUnsafe when integrating into a jdk.\n"], "17": ["                @Override\n"], "18": ["         * Compare 8 bytes at a time. Benchmarking shows comparing 8 bytes at a time is no slower\n", "         * than comparing 4 bytes at a time even on 32-bit. On the other hand, it is substantially\n", "         * faster on 64-bit.\n"], "19": ["             * We want to compare only the first index where left[index] != right[index]. This\n", "             * corresponds to the least significant nonzero byte in lw ^ rw, since lw and rw are\n", "             * little-endian. Long.numberOfTrailingZeros(diff) tells us the least significant\n", "             * nonzero bit, and zeroing out the first three bits of L.nTZ gives us the shift to get\n", "             * that least significant nonzero byte.\n"], "20": ["     * Returns the Unsafe-using Comparator, or falls back to the pure-Java implementation if unable\n", "     * to do so.\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * Static utility methods pertaining to {@code byte} primitives that interpret\n", " * values as <i>unsigned</i> (that is, any negative value {@code b} is treated\n", " * as the positive value {@code 256 + b}). The corresponding methods that treat\n", " * the values as signed are found in {@link SignedBytes}, and the methods for\n", " * which signedness is not an issue are in {@link Bytes}.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "3": ["   * Returns the value of the given byte as an integer, when treated as\n", "   * unsigned. That is, returns {@code value + 256} if {@code value} is\n", "   * negative; {@code value} itself otherwise.\n"], "4": ["   * Returns the {@code byte} value that, when treated as unsigned, is equal to\n", "   * {@code value}, if possible.\n", "   * @return the {@code byte} value that, when treated as unsigned, equals\n", "   *     {@code value}\n", "   * @throws IllegalArgumentException if {@code value} is negative or greater\n", "   *     than 255\n"], "5": ["   * Returns the {@code byte} value that, when treated as unsigned, is nearest\n", "   * in value to {@code value}.\n", "   * @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if\n", "   *     {@code value <= 0}, and {@code value} cast to {@code byte} otherwise\n"], "6": ["   * Compares the two specified {@code byte} values, treating them as unsigned\n", "   * values between 0 and 255 inclusive. For example, {@code (byte) -127} is\n", "   * considered greater than {@code (byte) 127} because it is seen as having\n", "   * the value of positive {@code 129}.\n", "   * @return a negative value if {@code a} is less than {@code b}; a positive\n", "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n"], "7": ["   * @return the value present in {@code array} that is less than or equal to\n", "   *     every other value in the array\n"], "8": ["   * @return the value present in {@code array} that is greater than or equal\n", "   *     to every other value in the array\n"], "9": ["   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated\n", "   * as unsigned.\n", "   *         and {@link Character#MAX_RADIX}.\n"], "10": ["   *         value\n", "   * @throws NullPointerException if {@code string} is null\n", "   *         (in contrast to {@link Byte#parseByte(String)})\n"], "11": ["   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}\n", "   *         with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX}\n", "   *         and {@link Character#MAX_RADIX}.\n", "   * @throws NullPointerException if {@code string} is null\n", "   *         (in contrast to {@link Byte#parseByte(String)})\n"], "12": ["   * Returns a string containing the supplied {@code byte} values separated by\n", "   * {@code separator}. For example, {@code join(\":\", (byte) 1, (byte) 2,\n", "   * @param separator the text that should appear between consecutive values in\n", "   *     the resulting string (but not at the start or end)\n"], "13": ["   * Returns a comparator that compares two {@code byte} arrays\n", "   * lexicographically. That is, it compares, using {@link\n", "   * #compare(byte, byte)}), the first pair of values that follow any common\n", "   * prefix, or when one array is a prefix of the other, treats the shorter\n", "   * array as the lesser. For example, {@code [] < [0x01] < [0x01, 0x7F] <\n", "   * [0x01, 0x80] < [0x02]}. Values are treated as unsigned.\n", "   * <p>The returned comparator is inconsistent with {@link\n", "   * Object#equals(Object)} (since arrays support only identity equality), but\n", "   * it is consistent with {@link java.util.Arrays#equals(byte[], byte[])}.\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n", "   *     Lexicographical order article at Wikipedia</a>\n"], "14": ["   * Provides a lexicographical comparator implementation; either a Java\n", "   * implementation or a faster implementation based on {@link Unsafe}.\n", "   * <p>Uses reflection to gracefully fall back to the Java implementation if\n", "   * {@code Unsafe} isn't available.\n"], "15": ["       * In UnsignedBytesBenchmark, accessing the following objects via static\n", "       * final fields is the fastest (more than twice as fast as the Java\n", "       * implementation, vs ~1.5x with non-final static fields, on x86_32)\n", "       * under the Hotspot server compiler. The reason is obviously that the\n", "       * And, no, defining (final or not) local variables out of the loop still\n", "       * isn't as good because the null check on the theUnsafe object remains\n", "       * inside the loop and BYTE_ARRAY_BASE_OFFSET doesn't get\n", "       * constant-folded.\n", "       * The compiler can treat static final fields as compile-time constants\n", "       * and can constant-fold them while (final or not) local variables are\n", "       * run time values.\n"], "16": ["       * Returns a sun.misc.Unsafe.  Suitable for use in a 3rd party package.\n", "       * Replace with a simple call to Unsafe.getUnsafe when integrating\n", "       * into a jdk.\n"], "18": ["         * Compare 8 bytes at a time. Benchmarking shows comparing 8 bytes at a\n", "         * time is no slower than comparing 4 bytes at a time even on 32-bit.\n", "         * On the other hand, it is substantially faster on 64-bit.\n"], "19": ["             * We want to compare only the first index where left[index] != right[index].\n", "             * This corresponds to the least significant nonzero byte in lw ^ rw, since lw\n", "             * and rw are little-endian.  Long.numberOfTrailingZeros(diff) tells us the least\n", "             * significant nonzero bit, and zeroing out the first three bits of L.nTZ gives us the\n", "             * shift to get that least significant nonzero byte.\n"], "20": ["     * Returns the Unsafe-using Comparator, or falls back to the pure-Java\n", "     * implementation if unable to do so.\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12], "2": [31, 32, 33, 34, 36, 37], "3": [67, 68], "4": [77, 78, 81, 82], "5": [94, 95, 98, 99], "6": [112, 113, 114, 118, 119], "7": [129, 130], "8": [149, 150], "9": [176, 177, 182], "10": [199, 200, 201], "11": [215, 216, 217, 218, 219], "12": [235, 236, 239, 240], "13": [259, 260, 261, 262, 263, 264, 266, 267, 268], "14": [282, 283, 285, 286], "15": [304, 305, 306, 309, 310, 311, 313, 314], "16": [334, 335], "17": [348], "18": [372, 373, 374], "19": [385, 386, 387, 388, 389], "20": [434, 435]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14], "2": [33, 34, 35, 36, 37, 39, 40, 41], "3": [71, 72, 73], "4": [82, 83, 86, 87, 88, 89], "5": [101, 102, 105, 106], "6": [119, 120, 121, 122, 126, 127], "7": [137, 138], "8": [157, 158], "9": [184, 185, 190], "10": [207, 208, 209], "11": [223, 224, 225, 226, 227], "12": [243, 244, 247, 248], "13": [267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279], "14": [292, 293, 295, 296], "15": [314, 315, 316, 317, 320, 321, 322, 323, 325, 326, 327], "16": [347, 348, 349], "18": [385, 386, 387], "19": [398, 399, 400, 401, 402], "20": [447, 448]}}, {"12": "guava/src/com/google/common/primitives/UnsignedInteger.java", "added": {"1": [" * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n", " * primitive utilities</a>.\n"], "3": ["   * Returns an {@code UnsignedInteger} corresponding to a given bit representation. The argument is\n", "   * interpreted as an unsigned 32-bit value. Specifically, the sign bit of {@code bits} is\n", "   * interpreted as a normal bit, and all other bits are treated as usual.\n"], "4": ["   * Returns an {@code UnsignedInteger} that is equal to {@code value}, if possible. The inverse\n", "   * operation of {@link #longValue()}.\n"], "5": ["   * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as\n", "   * an unsigned {@code int} value.\n", "   *     value\n", "   * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as\n", "   * an unsigned {@code int} value in the specified radix.\n", "   *     value\n"], "6": ["   * Compares this unsigned integer to another unsigned integer. Returns {@code 0} if they are\n", "   * equal, a negative number if {@code this < other}, and a positive number if\n", "   * {@code this > other}.\n"], "7": ["   * Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}. If\n", "   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix\n"]}, "removed": {"1": [" * Unless required by applicable law or agreed to in writing, software distributed under the\n", " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n", " * express or implied. See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">\n", " * unsigned primitive utilities</a>.\n"], "3": ["   * Returns an {@code UnsignedInteger} corresponding to a given bit representation.\n", "   * The argument is interpreted as an unsigned 32-bit value. Specifically, the sign bit\n", "   * of {@code bits} is interpreted as a normal bit, and all other bits are treated as usual.\n"], "4": ["   * Returns an {@code UnsignedInteger} that is equal to {@code value},\n", "   * if possible.  The inverse operation of {@link #longValue()}.\n"], "5": ["   * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed\n", "   * as an unsigned {@code int} value.\n", "   *         value\n", "   * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed\n", "   * as an unsigned {@code int} value in the specified radix.\n", "   *         value\n"], "6": ["   * Compares this unsigned integer to another unsigned integer.\n", "   * Returns {@code 0} if they are equal, a negative number if {@code this < other},\n", "   * and a positive number if {@code this > other}.\n"], "7": ["   * Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}.\n", "   * If {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix\n"]}, "added_lines": {"1": [9, 10, 11, 12], "2": [36, 37, 38], "3": [57, 58, 59], "4": [73, 74], "5": [100, 101, 104, 111, 112, 115], "6": [219, 220, 221], "7": [252, 253]}, "removed_lines": {"1": [9, 10, 11, 12], "2": [36, 37, 38], "3": [57, 58, 59], "4": [73, 74], "5": [100, 101, 104, 111, 112, 115], "6": [219, 220, 221], "7": [252, 253]}}, {"13": "guava/src/com/google/common/primitives/UnsignedInts.java", "added": {"1": [" * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n", " * primitive utilities</a>.\n"], "3": ["   *     greater than {@code b}; or zero if they are equal\n"], "4": ["   *     the array according to {@link #compare}\n"], "5": ["   *     in the array according to {@link #compare}\n"], "6": ["   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "7": ["   * Returns a comparator that compares two arrays of unsigned {@code int} values <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(int, int)}), the first pair of values that follow any common\n", "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n", "   * example, {@code [] < [1] < [1, 2] < [2] < [1 << 31]}.\n"], "8": ["   * @throws NullPointerException if {@code s} is null (in contrast to\n", "   *     {@link Integer#parseInt(String)})\n"], "9": ["   *     {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.\n", "   *     if supplied radix is invalid.\n", "   * @throws NullPointerException if {@code s} is null (in contrast to\n", "   *     {@link Integer#parseInt(String)})\n"], "10": ["   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated as\n", "   * unsigned.\n", "   *     and {@link Character#MAX_RADIX}.\n"]}, "removed": {"1": [" * Unless required by applicable law or agreed to in writing, software distributed under the\n", " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n", " * express or implied. See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">\n", " * unsigned primitive utilities</a>.\n"], "3": ["   *         greater than {@code b}; or zero if they are equal\n"], "4": ["   *         the array according to {@link #compare}\n"], "5": ["   *         in the array according to {@link #compare}\n"], "6": ["   * @param separator the text that should appear between consecutive values in the resulting\n", "   *        string (but not at the start or end)\n"], "7": ["   * Returns a comparator that compares two arrays of unsigned {@code int} values lexicographically.\n", "   * That is, it compares, using {@link #compare(int, int)}), the first pair of values that follow\n", "   * any common prefix, or when one array is a prefix of the other, treats the shorter array as the\n", "   * lesser. For example, {@code [] < [1] < [1, 2] < [2] < [1 << 31]}.\n", "   *\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\"> Lexicographical order\n", "   *      article at Wikipedia</a>\n"], "8": ["   * @throws NullPointerException if {@code s} is null\n", "   *         (in contrast to {@link Integer#parseInt(String)})\n"], "9": ["   *        {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.\n", "   *         if supplied radix is invalid.\n", "   * @throws NullPointerException if {@code s} is null\n", "   *         (in contrast to {@link Integer#parseInt(String)})\n"], "10": ["   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated\n", "   * as unsigned.\n", "   *         and {@link Character#MAX_RADIX}.\n"]}, "added_lines": {"1": [9, 10, 11, 12], "2": [41, 42, 43], "3": [66], "4": [84], "5": [104], "6": [123, 124], "7": [143, 144, 145, 146, 147], "8": [233, 234], "9": [246, 248, 249, 250], "10": [271, 272, 277]}, "removed_lines": {"1": [9, 10, 11, 12], "2": [41, 42, 43], "3": [66], "4": [84], "5": [104], "6": [123, 124], "7": [143, 144, 145, 146, 150, 151, 152], "8": [235, 236], "9": [248, 250, 251, 252], "10": [273, 274, 279]}}, {"14": "guava/src/com/google/common/primitives/UnsignedLong.java", "added": {"1": [" * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n", " * primitive utilities</a>.\n"], "3": ["   * Returns an {@code UnsignedLong} corresponding to a given bit representation. The argument is\n", "   * interpreted as an unsigned 64-bit value. Specifically, the sign bit of {@code bits} is\n", "   * interpreted as a normal bit, and all other bits are treated as usual.\n"], "4": ["   * Returns a {@code UnsignedLong} representing the same value as the specified {@code BigInteger}.\n", "   * This is the inverse operation of {@link #bigIntegerValue()}.\n"], "5": ["   * Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an\n", "   * unsigned {@code long} value.\n"], "6": ["   * Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an\n", "   * unsigned {@code long} value in the specified radix.\n"]}, "removed": {"1": [" * Unless required by applicable law or agreed to in writing, software distributed under the\n", " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n", " * express or implied. See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">\n", " * unsigned primitive utilities</a>.\n"], "3": ["   * Returns an {@code UnsignedLong} corresponding to a given bit representation.\n", "   * The argument is interpreted as an unsigned 64-bit value. Specifically, the sign bit\n", "   * of {@code bits} is interpreted as a normal bit, and all other bits are treated as usual.\n"], "4": ["   * Returns a {@code UnsignedLong} representing the same value as the specified\n", "   * {@code BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}.\n"], "5": ["   * Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as\n", "   * an unsigned {@code long} value.\n"], "6": ["   * Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as\n", "   * an unsigned {@code long} value in the specified radix.\n"]}, "added_lines": {"1": [9, 10, 11, 12], "2": [34, 35, 36], "3": [58, 59, 60], "4": [88, 89], "5": [104, 105], "6": [116, 117]}, "removed_lines": {"1": [9, 10, 11, 12], "2": [34, 35, 36], "3": [58, 59, 60], "4": [88, 89], "5": [104, 105], "6": [116, 117]}}, {"15": "guava/src/com/google/common/primitives/UnsignedLongs.java", "added": {"1": [" * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n"], "2": [" * {@code 2^64 + x}). The methods for which signedness is not an issue are in {@link Longs}, as well\n", " * as signed versions of methods for which signedness is an issue.\n", " * {@code long} values. When possible, it is recommended that the {@link UnsignedLong} wrapper class\n", " * be used, at a small efficiency penalty, to enforce the distinction in the type system.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n", " * primitive utilities</a>.\n"], "3": ["   * longs, that is, {@code a <= b} as unsigned longs if and only if {@code flip(a) <= flip(b)} as\n", "   * signed longs.\n"], "4": ["   *     greater than {@code b}; or zero if they are equal\n"], "5": ["   *     the array according to {@link #compare}\n"], "6": ["   *     in the array according to {@link #compare}\n"], "7": ["   * @param separator the text that should appear between consecutive values in the resulting string\n", "   *     (but not at the start or end)\n"], "8": ["   * Returns a comparator that compares two arrays of unsigned {@code long} values <a\n", "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n", "   * compares, using {@link #compare(long, long)}), the first pair of values that follow any common\n", "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n", "   * example, {@code [] < [1L] < [1L, 2L] < [2L] < [1L << 63]}.\n"], "9": ["     * guaranteed to be either exact or one less than the correct value. This follows from fact that\n", "     * floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not quite\n", "     * trivial.\n"], "10": ["     * guaranteed to be either exact or one less than the correct value. This follows from fact that\n", "     * floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not quite\n", "     * trivial.\n"], "11": ["   *     value\n", "   * @throws NullPointerException if {@code string} is null (in contrast to\n", "   *     {@link Long#parseLong(String)})\n"], "12": ["   *     value\n"], "13": ["   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long} with\n", "   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and\n", "   *     {@link Character#MAX_RADIX}.\n", "   * @throws NullPointerException if {@code string} is null (in contrast to\n", "   *     {@link Long#parseLong(String)})\n"], "14": ["    int maxSafePos = maxSafeDigits[radix] - 1;\n", "      if (pos > maxSafePos && overflowInParse(value, digit, radix)) {\n"], "15": ["   * unsigned long. This is useful for detecting overflow while parsing a string representation of a\n", "   * number. Does not verify whether supplied radix is valid, passing an invalid radix will give\n"], "16": ["   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated as\n", "   * unsigned.\n", "   *     and {@link Character#MAX_RADIX}.\n"]}, "removed": {"1": [" * Unless required by applicable law or agreed to in writing, software distributed under the\n", " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n", " * express or implied. See the License for the specific language governing permissions and\n", " * limitations under the License.\n"], "2": [" * {@code 2^64 + x}). The methods for which signedness is not an issue are in {@link Longs}, as\n", " * well as signed versions of methods for which signedness is an issue.\n", " * {@code long} values. When possible, it is recommended that the {@link UnsignedLong} wrapper\n", " * class be used, at a small efficiency penalty, to enforce the distinction in the type system.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">\n", " * unsigned primitive utilities</a>.\n"], "3": ["   * longs, that is, {@code a <= b} as unsigned longs if and only if {@code flip(a) <= flip(b)}\n", "   * as signed longs.\n"], "4": ["   *         greater than {@code b}; or zero if they are equal\n"], "5": ["   *         the array according to {@link #compare}\n"], "6": ["   *         in the array according to {@link #compare}\n"], "7": ["   * @param separator the text that should appear between consecutive values in the resulting\n", "   *        string (but not at the start or end)\n"], "8": ["   * Returns a comparator that compares two arrays of unsigned {@code long} values\n", "   * lexicographically. That is, it compares, using {@link #compare(long, long)}), the first pair of\n", "   * values that follow any common prefix, or when one array is a prefix of the other, treats the\n", "   * shorter array as the lesser. For example, {@code [] < [1L] < [1L, 2L] < [2L] < [1L << 63]}.\n", "   *\n", "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">Lexicographical order\n", "   *      article at Wikipedia</a>\n"], "9": ["     * guaranteed to be either exact or one less than the correct value. This follows from fact\n", "     * that floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not\n", "     * quite trivial.\n"], "10": ["     * guaranteed to be either exact or one less than the correct value. This follows from fact\n", "     * that floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not\n", "     * quite trivial.\n"], "11": ["   *         value\n", "   * @throws NullPointerException if {@code string} is null\n", "   *         (in contrast to {@link Long#parseLong(String)})\n"], "12": ["   *         value\n"], "13": ["   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}\n", "   *         with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX}\n", "   *         and {@link Character#MAX_RADIX}.\n", "   * @throws NullPointerException if {@code string} is null\n", "   *         (in contrast to {@link Long#parseLong(String)})\n"], "14": ["    int max_safe_pos = maxSafeDigits[radix] - 1;\n", "      if (pos > max_safe_pos && overflowInParse(value, digit, radix)) {\n"], "15": ["   * unsigned long. This is useful for detecting overflow while parsing a string representation of\n", "   * a number. Does not verify whether supplied radix is valid, passing an invalid radix will give\n"], "16": ["   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated\n", "   * as unsigned.\n", "   *         and {@link Character#MAX_RADIX}.\n"]}, "added_lines": {"1": [9, 10, 11, 12], "2": [31, 32, 39, 40, 42, 43, 44], "3": [60, 61], "4": [74], "5": [85], "6": [105], "7": [124, 125], "8": [144, 145, 146, 147, 148], "9": [202, 203, 204], "10": [236, 237, 238], "11": [249, 250, 251], "12": [271], "13": [293, 294, 295, 296, 297], "14": [309, 316], "15": [327, 328], "16": [355, 356, 361]}, "removed_lines": {"1": [9, 10, 11, 12], "2": [31, 32, 39, 40, 42, 43, 44], "3": [60, 61], "4": [74], "5": [85], "6": [105], "7": [124, 125], "8": [144, 145, 146, 147, 152, 153, 154], "9": [204, 205, 206], "10": [238, 239, 240], "11": [251, 252, 253], "12": [273], "13": [295, 296, 297, 298, 299], "14": [311, 318], "15": [329, 330], "16": [357, 358, 363]}}, {"16": "guava/src/com/google/common/primitives/package-info.java", "added": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n", " * in compliance with the License. You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License\n", " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n", " * or implied. See the License for the specific language governing permissions and limitations under\n", " * the License.\n", " * Static utilities for working with the eight primitive types and {@code void}, and value types for\n", " * treating them as unsigned.\n", " * <p>This package is a part of the open-source <a href=\"http://github.com/google/guava\">Guava</a>\n", " * library.\n", " * <p>See the Guava User Guide article on\n", " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n"], "2": [" *     <ul>\n", " *     </ul>\n", " *     <ul>\n", " *     </ul>\n", " *     <ul>\n", " *     </ul>\n", " * <li>{@link com.google.common.primitives.UnsignedInteger}\n", " * <li>{@link com.google.common.primitives.UnsignedLong}\n"]}, "removed": {"1": [" * Licensed under the Apache License, Version 2.0 (the \"License\");\n", " * you may not use this file except in compliance with the License.\n", " * You may obtain a copy of the License at\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " * Static utilities for working with the eight primitive types and {@code void},\n", " * and value types for treating them as unsigned.\n", " * <p>This package is a part of the open-source\n", " * <a href=\"http://github.com/google/guava\">Guava</a> library.\n", " * <p>See the Guava User Guide article on <a href=\n", " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n", " * primitive utilities</a>.\n"], "2": [" *   <ul>\n", " *   </ul>\n", " *   <ul>\n", " *   </ul>\n", " *   <ul>\n", " *   </ul>\n", " *   <li>{@link com.google.common.primitives.UnsignedInteger}\n", " *   <li>{@link com.google.common.primitives.UnsignedLong}\n"]}, "added_lines": {"1": [4, 5, 9, 10, 11, 12, 16, 17, 19, 20, 22, 23], "2": [38, 41, 46, 48, 50, 52, 58, 59]}, "removed_lines": {"1": [4, 5, 6, 10, 11, 12, 13, 14, 18, 19, 21, 22, 24, 25, 26], "2": [41, 44, 49, 51, 53, 55, 61, 62]}}]}
