{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "37": " * Static utility methods pertaining to {@code char} primitives, that are not already found in\n",
        "38": " * either {@link Character} or {@link Arrays}.\n",
        "40": " * <p>All the operations in this class treat {@code char} values strictly numerically; they are\n",
        "41": " * neither Unicode-aware nor locale-dependent.\n",
        "43": " * <p>See the Guava User Guide article on\n",
        "44": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "54": "   * The number of bytes required to represent a primitive {@code char} value.\n",
        "74": "   * @throws IllegalArgumentException if {@code value} is greater than {@link Character#MAX_VALUE}\n",
        "75": "   *     or less than {@link Character#MIN_VALUE}\n",
        "90": "   * @return the same value cast to {@code char} if it is in the range of the {@code char} type,\n",
        "91": "   *     {@link Character#MAX_VALUE} if it is too large, or {@link Character#MIN_VALUE} if it is too\n",
        "92": "   *     small\n",
        "105": "   * Compares the two specified {@code char} values. The sign of the value returned is the same as\n",
        "106": "   * that of {@code ((Character) a).compareTo(b)}.\n",
        "108": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the\n",
        "109": "   * equivalent {@link Character#compare} method instead.\n",
        "113": "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n",
        "114": "   *     greater than {@code b}; or zero if they are equal\n",
        "121": "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n",
        "138": "   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n",
        "142": "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "143": "   *     such index exists.\n",
        "163": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "164": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "165": "   * {@code target}.\n",
        "190": "   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n",
        "194": "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "195": "   *     such index exists.\n",
        "215": "   * @return the value present in {@code array} that is less than or equal to every other value in\n",
        "216": "   *     the array\n",
        "234": "   * @return the value present in {@code array} that is greater than or equal to every other value\n",
        "235": "   *     in the array\n",
        "250": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "251": "   * {@code concat(new char[] {a, b}, new char[] {}, new char[] {c}} returns the array\n",
        "252": "   * {@code {a, b, c}}.\n",
        "255": "   * @return a single array containing all the values from the source arrays, in order\n",
        "272": "   * Returns a big-endian representation of {@code value} in a 2-element byte array; equivalent to\n",
        "273": "   * {@code ByteBuffer.allocate(2).putChar(value).array()}. For example, the input value\n",
        "274": "   * {@code '\\\\u5432'} would yield the byte array {@code {0x54, 0x32}}.\n",
        "276": "   * <p>If you need to convert and concatenate several values (possibly even of different types),\n",
        "277": "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "278": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n",
        "286": "   * Returns the {@code char} value whose big-endian representation is stored in the first 2 bytes\n",
        "287": "   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getChar()}. For example, the\n",
        "288": "   * input byte array {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\\\u5432'}.\n",
        "290": "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n",
        "291": "   * flexibility at little cost in readability.\n",
        "293": "   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements\n",
        "302": "   * Returns the {@code char} value whose byte representation is the given 2 bytes, in big-endian\n",
        "303": "   * order; equivalent to {@code Chars.fromByteArray(new byte[] {b1, b2})}.\n",
        "313": "   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n",
        "314": "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n",
        "315": "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n",
        "316": "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n",
        "320": "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n",
        "321": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n",
        "322": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "323": "   *     {@code minLength}\n",
        "332": "   * Returns a string containing the supplied {@code char} values separated by {@code separator}.\n",
        "333": "   * For example, {@code join(\"-\", '1', '2', '3')} returns the string {@code \"1-2-3\"}.\n",
        "335": "   * @param separator the text that should appear between consecutive values in the resulting string\n",
        "336": "   *     (but not at the start or end)\n",
        "355": "   * Returns a comparator that compares two {@code char} arrays <a\n",
        "356": "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n",
        "357": "   * compares, using {@link #compare(char, char)}), the first pair of values that follow any common\n",
        "358": "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n",
        "359": "   * example, {@code [] < ['a'] < ['a', 'b'] < ['b']}.\n",
        "361": "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n",
        "362": "   * support only identity equality), but it is consistent with\n",
        "363": "   * {@link Arrays#equals(char[], char[])}.\n",
        "393": "   * Copies a collection of {@code Character} instances into a new array of primitive {@code char}\n",
        "394": "   * values.\n",
        "397": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "400": "   * @return an array containing the same values as {@code collection}, in the same order, converted\n",
        "401": "   *     to primitives\n",
        "402": "   * @throws NullPointerException if {@code collection} or any of its elements is null\n",
        "420": "   * Returns a fixed-size list backed by the specified array, similar to\n",
        "421": "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n",
        "422": "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n",
        "424": "   * <p>The returned list maintains the values, but not the identities, of {@code Character} objects\n",
        "425": "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n",
        "426": "   * the returned list is unspecified.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "39": " * Static utility methods pertaining to {@code char} primitives, that are not\n",
        "40": " * already found in either {@link Character} or {@link Arrays}.\n",
        "42": " * <p>All the operations in this class treat {@code char} values strictly\n",
        "43": " * numerically; they are neither Unicode-aware nor locale-dependent.\n",
        "45": " * <p>See the Guava User Guide article on <a href=\n",
        "46": " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n",
        "47": " * primitive utilities</a>.\n",
        "57": "   * The number of bytes required to represent a primitive {@code char}\n",
        "58": "   * value.\n",
        "78": "   * @throws IllegalArgumentException if {@code value} is greater than {@link\n",
        "79": "   *     Character#MAX_VALUE} or less than {@link Character#MIN_VALUE}\n",
        "94": "   * @return the same value cast to {@code char} if it is in the range of the\n",
        "95": "   *     {@code char} type, {@link Character#MAX_VALUE} if it is too large,\n",
        "96": "   *     or {@link Character#MIN_VALUE} if it is too small\n",
        "109": "   * Compares the two specified {@code char} values. The sign of the value\n",
        "110": "   * returned is the same as that of {@code ((Character) a).compareTo(b)}.\n",
        "112": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n",
        "113": "   * deprecated; use the equivalent {@link Character#compare} method instead.\n",
        "117": "   * @return a negative value if {@code a} is less than {@code b}; a positive\n",
        "118": "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n",
        "125": "   * Returns {@code true} if {@code target} is present as an element anywhere in\n",
        "126": "   * {@code array}.\n",
        "143": "   * Returns the index of the first appearance of the value {@code target} in\n",
        "144": "   * {@code array}.\n",
        "148": "   * @return the least index {@code i} for which {@code array[i] == target}, or\n",
        "149": "   *     {@code -1} if no such index exists.\n",
        "169": "   * <p>More formally, returns the lowest index {@code i} such that {@code\n",
        "170": "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n",
        "171": "   * the same elements as {@code target}.\n",
        "196": "   * Returns the index of the last appearance of the value {@code target} in\n",
        "197": "   * {@code array}.\n",
        "201": "   * @return the greatest index {@code i} for which {@code array[i] == target},\n",
        "202": "   *     or {@code -1} if no such index exists.\n",
        "222": "   * @return the value present in {@code array} that is less than or equal to\n",
        "223": "   *     every other value in the array\n",
        "241": "   * @return the value present in {@code array} that is greater than or equal to\n",
        "242": "   *     every other value in the array\n",
        "257": "   * Returns the values from each provided array combined into a single array.\n",
        "258": "   * For example, {@code concat(new char[] {a, b}, new char[] {}, new\n",
        "259": "   * char[] {c}} returns the array {@code {a, b, c}}.\n",
        "262": "   * @return a single array containing all the values from the source arrays, in\n",
        "263": "   *     order\n",
        "280": "   * Returns a big-endian representation of {@code value} in a 2-element byte\n",
        "281": "   * array; equivalent to {@code\n",
        "282": "   * ByteBuffer.allocate(2).putChar(value).array()}.  For example, the input\n",
        "283": "   * value {@code '\\\\u5432'} would yield the byte array {@code {0x54, 0x32}}.\n",
        "285": "   * <p>If you need to convert and concatenate several values (possibly even of\n",
        "286": "   * different types), use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "287": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable\n",
        "288": "   * buffer.\n",
        "296": "   * Returns the {@code char} value whose big-endian representation is\n",
        "297": "   * stored in the first 2 bytes of {@code bytes}; equivalent to {@code\n",
        "298": "   * ByteBuffer.wrap(bytes).getChar()}. For example, the input byte array\n",
        "299": "   * {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\\\u5432'}.\n",
        "301": "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that\n",
        "302": "   * library exposes much more flexibility at little cost in readability.\n",
        "304": "   * @throws IllegalArgumentException if {@code bytes} has fewer than 2\n",
        "305": "   *     elements\n",
        "314": "   * Returns the {@code char} value whose byte representation is the given 2\n",
        "315": "   * bytes, in big-endian order; equivalent to {@code Chars.fromByteArray(new\n",
        "316": "   * byte[] {b1, b2})}.\n",
        "326": "   * Returns an array containing the same values as {@code array}, but\n",
        "327": "   * guaranteed to be of a specified minimum length. If {@code array} already\n",
        "328": "   * has a length of at least {@code minLength}, it is returned directly.\n",
        "329": "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n",
        "330": "   * containing the values of {@code array}, and zeroes in the remaining places.\n",
        "334": "   * @param padding an extra amount to \"grow\" the array by if growth is\n",
        "335": "   *     necessary\n",
        "336": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n",
        "337": "   *     negative\n",
        "338": "   * @return an array containing the values of {@code array}, with guaranteed\n",
        "339": "   *     minimum length {@code minLength}\n",
        "348": "   * Returns a string containing the supplied {@code char} values separated\n",
        "349": "   * by {@code separator}. For example, {@code join(\"-\", '1', '2', '3')} returns\n",
        "350": "   * the string {@code \"1-2-3\"}.\n",
        "352": "   * @param separator the text that should appear between consecutive values in\n",
        "353": "   *     the resulting string (but not at the start or end)\n",
        "372": "   * Returns a comparator that compares two {@code char} arrays\n",
        "373": "   * lexicographically. That is, it compares, using {@link\n",
        "374": "   * #compare(char, char)}), the first pair of values that follow any\n",
        "375": "   * common prefix, or when one array is a prefix of the other, treats the\n",
        "376": "   * shorter array as the lesser. For example,\n",
        "377": "   * {@code [] < ['a'] < ['a', 'b'] < ['b']}.\n",
        "379": "   * <p>The returned comparator is inconsistent with {@link\n",
        "380": "   * Object#equals(Object)} (since arrays support only identity equality), but\n",
        "381": "   * it is consistent with {@link Arrays#equals(char[], char[])}.\n",
        "383": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n",
        "384": "   *     Lexicographical order article at Wikipedia</a>\n",
        "413": "   * Copies a collection of {@code Character} instances into a new array of\n",
        "414": "   * primitive {@code char} values.\n",
        "417": "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n",
        "418": "   * that method.\n",
        "421": "   * @return an array containing the same values as {@code collection}, in the\n",
        "422": "   *     same order, converted to primitives\n",
        "423": "   * @throws NullPointerException if {@code collection} or any of its elements\n",
        "424": "   *     is null\n",
        "442": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "443": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n",
        "444": "   * but any attempt to set a value to {@code null} will result in a {@link\n",
        "445": "   * NullPointerException}.\n",
        "447": "   * <p>The returned list maintains the values, but not the identities, of\n",
        "448": "   * {@code Character} objects written to or read from it.  For example, whether\n",
        "449": "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n",
        "450": "   * unspecified.\n"
    }
}