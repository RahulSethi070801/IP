{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "31": " * Static utility methods pertaining to {@code byte} primitives that interpret values as\n",
        "32": " * <i>unsigned</i> (that is, any negative value {@code b} is treated as the positive value\n",
        "33": " * {@code 256 + b}). The corresponding methods that treat the values as signed are found in\n",
        "34": " * {@link SignedBytes}, and the methods for which signedness is not an issue are in {@link Bytes}.\n",
        "36": " * <p>See the Guava User Guide article on\n",
        "37": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "67": "   * Returns the value of the given byte as an integer, when treated as unsigned. That is, returns\n",
        "68": "   * {@code value + 256} if {@code value} is negative; {@code value} itself otherwise.\n",
        "77": "   * Returns the {@code byte} value that, when treated as unsigned, is equal to {@code value}, if\n",
        "78": "   * possible.\n",
        "81": "   * @return the {@code byte} value that, when treated as unsigned, equals {@code value}\n",
        "82": "   * @throws IllegalArgumentException if {@code value} is negative or greater than 255\n",
        "94": "   * Returns the {@code byte} value that, when treated as unsigned, is nearest in value to\n",
        "95": "   * {@code value}.\n",
        "98": "   * @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if {@code value <= 0}, and\n",
        "99": "   *     {@code value} cast to {@code byte} otherwise\n",
        "112": "   * Compares the two specified {@code byte} values, treating them as unsigned values between 0 and\n",
        "113": "   * 255 inclusive. For example, {@code (byte) -127} is considered greater than {@code (byte) 127}\n",
        "114": "   * because it is seen as having the value of positive {@code 129}.\n",
        "118": "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n",
        "119": "   *     greater than {@code b}; or zero if they are equal\n",
        "129": "   * @return the value present in {@code array} that is less than or equal to every other value in\n",
        "130": "   *     the array\n",
        "149": "   * @return the value present in {@code array} that is greater than or equal to every other value\n",
        "150": "   *     in the array\n",
        "176": "   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated as\n",
        "177": "   * unsigned.\n",
        "182": "   *     and {@link Character#MAX_RADIX}.\n",
        "199": "   *     value\n",
        "200": "   * @throws NullPointerException if {@code string} is null (in contrast to\n",
        "201": "   *     {@link Byte#parseByte(String)})\n",
        "215": "   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} with\n",
        "216": "   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and\n",
        "217": "   *     {@link Character#MAX_RADIX}.\n",
        "218": "   * @throws NullPointerException if {@code string} is null (in contrast to\n",
        "219": "   *     {@link Byte#parseByte(String)})\n",
        "235": "   * Returns a string containing the supplied {@code byte} values separated by {@code separator}.\n",
        "236": "   * For example, {@code join(\":\", (byte) 1, (byte) 2,\n",
        "239": "   * @param separator the text that should appear between consecutive values in the resulting string\n",
        "240": "   *     (but not at the start or end)\n",
        "259": "   * Returns a comparator that compares two {@code byte} arrays <a\n",
        "260": "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n",
        "261": "   * compares, using {@link #compare(byte, byte)}), the first pair of values that follow any common\n",
        "262": "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n",
        "263": "   * example, {@code [] < [0x01] < [0x01, 0x7F] < [0x01, 0x80] < [0x02]}. Values are treated as\n",
        "264": "   * unsigned.\n",
        "266": "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n",
        "267": "   * support only identity equality), but it is consistent with\n",
        "268": "   * {@link java.util.Arrays#equals(byte[], byte[])}.\n",
        "282": "   * Provides a lexicographical comparator implementation; either a Java implementation or a faster\n",
        "283": "   * implementation based on {@link Unsafe}.\n",
        "285": "   * <p>Uses reflection to gracefully fall back to the Java implementation if {@code Unsafe} isn't\n",
        "286": "   * available.\n",
        "304": "       * In UnsignedBytesBenchmark, accessing the following objects via static final fields is the\n",
        "305": "       * fastest (more than twice as fast as the Java implementation, vs ~1.5x with non-final static\n",
        "306": "       * fields, on x86_32) under the Hotspot server compiler. The reason is obviously that the\n",
        "309": "       * And, no, defining (final or not) local variables out of the loop still isn't as good\n",
        "310": "       * because the null check on the theUnsafe object remains inside the loop and\n",
        "311": "       * BYTE_ARRAY_BASE_OFFSET doesn't get constant-folded.\n",
        "313": "       * The compiler can treat static final fields as compile-time constants and can constant-fold\n",
        "314": "       * them while (final or not) local variables are run time values.\n",
        "334": "       * Returns a sun.misc.Unsafe. Suitable for use in a 3rd party package. Replace with a simple\n",
        "335": "       * call to Unsafe.getUnsafe when integrating into a jdk.\n",
        "348": "                @Override\n",
        "372": "         * Compare 8 bytes at a time. Benchmarking shows comparing 8 bytes at a time is no slower\n",
        "373": "         * than comparing 4 bytes at a time even on 32-bit. On the other hand, it is substantially\n",
        "374": "         * faster on 64-bit.\n",
        "385": "             * We want to compare only the first index where left[index] != right[index]. This\n",
        "386": "             * corresponds to the least significant nonzero byte in lw ^ rw, since lw and rw are\n",
        "387": "             * little-endian. Long.numberOfTrailingZeros(diff) tells us the least significant\n",
        "388": "             * nonzero bit, and zeroing out the first three bits of L.nTZ gives us the shift to get\n",
        "389": "             * that least significant nonzero byte.\n",
        "434": "     * Returns the Unsafe-using Comparator, or falls back to the pure-Java implementation if unable\n",
        "435": "     * to do so.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "33": " * Static utility methods pertaining to {@code byte} primitives that interpret\n",
        "34": " * values as <i>unsigned</i> (that is, any negative value {@code b} is treated\n",
        "35": " * as the positive value {@code 256 + b}). The corresponding methods that treat\n",
        "36": " * the values as signed are found in {@link SignedBytes}, and the methods for\n",
        "37": " * which signedness is not an issue are in {@link Bytes}.\n",
        "39": " * <p>See the Guava User Guide article on <a href=\n",
        "40": " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n",
        "41": " * primitive utilities</a>.\n",
        "71": "   * Returns the value of the given byte as an integer, when treated as\n",
        "72": "   * unsigned. That is, returns {@code value + 256} if {@code value} is\n",
        "73": "   * negative; {@code value} itself otherwise.\n",
        "82": "   * Returns the {@code byte} value that, when treated as unsigned, is equal to\n",
        "83": "   * {@code value}, if possible.\n",
        "86": "   * @return the {@code byte} value that, when treated as unsigned, equals\n",
        "87": "   *     {@code value}\n",
        "88": "   * @throws IllegalArgumentException if {@code value} is negative or greater\n",
        "89": "   *     than 255\n",
        "101": "   * Returns the {@code byte} value that, when treated as unsigned, is nearest\n",
        "102": "   * in value to {@code value}.\n",
        "105": "   * @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if\n",
        "106": "   *     {@code value <= 0}, and {@code value} cast to {@code byte} otherwise\n",
        "119": "   * Compares the two specified {@code byte} values, treating them as unsigned\n",
        "120": "   * values between 0 and 255 inclusive. For example, {@code (byte) -127} is\n",
        "121": "   * considered greater than {@code (byte) 127} because it is seen as having\n",
        "122": "   * the value of positive {@code 129}.\n",
        "126": "   * @return a negative value if {@code a} is less than {@code b}; a positive\n",
        "127": "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n",
        "137": "   * @return the value present in {@code array} that is less than or equal to\n",
        "138": "   *     every other value in the array\n",
        "157": "   * @return the value present in {@code array} that is greater than or equal\n",
        "158": "   *     to every other value in the array\n",
        "184": "   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated\n",
        "185": "   * as unsigned.\n",
        "190": "   *         and {@link Character#MAX_RADIX}.\n",
        "207": "   *         value\n",
        "208": "   * @throws NullPointerException if {@code string} is null\n",
        "209": "   *         (in contrast to {@link Byte#parseByte(String)})\n",
        "223": "   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}\n",
        "224": "   *         with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX}\n",
        "225": "   *         and {@link Character#MAX_RADIX}.\n",
        "226": "   * @throws NullPointerException if {@code string} is null\n",
        "227": "   *         (in contrast to {@link Byte#parseByte(String)})\n",
        "243": "   * Returns a string containing the supplied {@code byte} values separated by\n",
        "244": "   * {@code separator}. For example, {@code join(\":\", (byte) 1, (byte) 2,\n",
        "247": "   * @param separator the text that should appear between consecutive values in\n",
        "248": "   *     the resulting string (but not at the start or end)\n",
        "267": "   * Returns a comparator that compares two {@code byte} arrays\n",
        "268": "   * lexicographically. That is, it compares, using {@link\n",
        "269": "   * #compare(byte, byte)}), the first pair of values that follow any common\n",
        "270": "   * prefix, or when one array is a prefix of the other, treats the shorter\n",
        "271": "   * array as the lesser. For example, {@code [] < [0x01] < [0x01, 0x7F] <\n",
        "272": "   * [0x01, 0x80] < [0x02]}. Values are treated as unsigned.\n",
        "274": "   * <p>The returned comparator is inconsistent with {@link\n",
        "275": "   * Object#equals(Object)} (since arrays support only identity equality), but\n",
        "276": "   * it is consistent with {@link java.util.Arrays#equals(byte[], byte[])}.\n",
        "278": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n",
        "279": "   *     Lexicographical order article at Wikipedia</a>\n",
        "292": "   * Provides a lexicographical comparator implementation; either a Java\n",
        "293": "   * implementation or a faster implementation based on {@link Unsafe}.\n",
        "295": "   * <p>Uses reflection to gracefully fall back to the Java implementation if\n",
        "296": "   * {@code Unsafe} isn't available.\n",
        "314": "       * In UnsignedBytesBenchmark, accessing the following objects via static\n",
        "315": "       * final fields is the fastest (more than twice as fast as the Java\n",
        "316": "       * implementation, vs ~1.5x with non-final static fields, on x86_32)\n",
        "317": "       * under the Hotspot server compiler. The reason is obviously that the\n",
        "320": "       * And, no, defining (final or not) local variables out of the loop still\n",
        "321": "       * isn't as good because the null check on the theUnsafe object remains\n",
        "322": "       * inside the loop and BYTE_ARRAY_BASE_OFFSET doesn't get\n",
        "323": "       * constant-folded.\n",
        "325": "       * The compiler can treat static final fields as compile-time constants\n",
        "326": "       * and can constant-fold them while (final or not) local variables are\n",
        "327": "       * run time values.\n",
        "347": "       * Returns a sun.misc.Unsafe.  Suitable for use in a 3rd party package.\n",
        "348": "       * Replace with a simple call to Unsafe.getUnsafe when integrating\n",
        "349": "       * into a jdk.\n",
        "385": "         * Compare 8 bytes at a time. Benchmarking shows comparing 8 bytes at a\n",
        "386": "         * time is no slower than comparing 4 bytes at a time even on 32-bit.\n",
        "387": "         * On the other hand, it is substantially faster on 64-bit.\n",
        "398": "             * We want to compare only the first index where left[index] != right[index].\n",
        "399": "             * This corresponds to the least significant nonzero byte in lw ^ rw, since lw\n",
        "400": "             * and rw are little-endian.  Long.numberOfTrailingZeros(diff) tells us the least\n",
        "401": "             * significant nonzero bit, and zeroing out the first three bits of L.nTZ gives us the\n",
        "402": "             * shift to get that least significant nonzero byte.\n",
        "447": "     * Returns the Unsafe-using Comparator, or falls back to the pure-Java\n",
        "448": "     * implementation if unable to do so.\n"
    }
}