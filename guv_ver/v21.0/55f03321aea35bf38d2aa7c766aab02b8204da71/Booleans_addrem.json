{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "37": " * Static utility methods pertaining to {@code boolean} primitives, that are not already found in\n",
        "38": " * either {@link Boolean} or {@link Arrays}.\n",
        "40": " * <p>See the Guava User Guide article on\n",
        "41": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "62": "   * Compares the two specified {@code boolean} values in the standard way ({@code false} is\n",
        "63": "   * considered less than {@code true}). The sign of the value returned is the same as that of\n",
        "64": "   * {@code ((Boolean) a).compareTo(b)}.\n",
        "66": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the\n",
        "67": "   * equivalent {@link Boolean#compare} method instead.\n",
        "71": "   * @return a positive number if only {@code a} is {@code true}, a negative number if only\n",
        "72": "   *     {@code b} is true, or zero if {@code a == b}\n",
        "79": "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n",
        "81": "   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead,\n",
        "82": "   * replacing {@code Booleans.contains(array, true)} with {@code !bitSet.isEmpty()} and\n",
        "83": "   * {@code Booleans.contains(array, false)} with {@code bitSet.nextClearBit(0) == sizeOfBitSet}.\n",
        "100": "   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n",
        "102": "   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and\n",
        "103": "   * using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}.\n",
        "107": "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "108": "   *     such index exists.\n",
        "129": "   * Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "130": "   * {@code target}.\n",
        "155": "   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n",
        "159": "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "160": "   *     such index exists.\n",
        "177": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "178": "   * {@code concat(new boolean[] {a, b}, new boolean[] {}, new boolean[] {c}} returns the array\n",
        "179": "   * {@code {a, b, c}}.\n",
        "182": "   * @return a single array containing all the values from the source arrays, in order\n",
        "199": "   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n",
        "200": "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n",
        "201": "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n",
        "202": "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n",
        "206": "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n",
        "207": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n",
        "208": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "209": "   *     {@code minLength}\n",
        "218": "   * Returns a string containing the supplied {@code boolean} values separated by {@code separator}.\n",
        "219": "   * For example, {@code join(\"-\", false, true, false)} returns the string\n",
        "220": "   * {@code \"false-true-false\"}.\n",
        "222": "   * @param separator the text that should appear between consecutive values in the resulting string\n",
        "223": "   *     (but not at the start or end)\n",
        "242": "   * Returns a comparator that compares two {@code boolean} arrays <a\n",
        "243": "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n",
        "244": "   * compares, using {@link #compare(boolean, boolean)}), the first pair of values that follow any\n",
        "245": "   * common prefix, or when one array is a prefix of the other, treats the shorter array as the\n",
        "246": "   * lesser. For example, {@code [] < [false] < [false, true] < [true]}.\n",
        "248": "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n",
        "249": "   * support only identity equality), but it is consistent with\n",
        "250": "   * {@link Arrays#equals(boolean[], boolean[])}.\n",
        "280": "   * Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean}\n",
        "281": "   * values.\n",
        "284": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "286": "   * <p><b>Note:</b> consider representing the collection as a {@link java.util.BitSet} instead.\n",
        "289": "   * @return an array containing the same values as {@code collection}, in the same order, converted\n",
        "290": "   *     to primitives\n",
        "291": "   * @throws NullPointerException if {@code collection} or any of its elements is null\n",
        "309": "   * Returns a fixed-size list backed by the specified array, similar to\n",
        "310": "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n",
        "311": "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n",
        "313": "   * <p>The returned list maintains the values, but not the identities, of {@code Boolean} objects\n",
        "314": "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n",
        "315": "   * the returned list is unspecified.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "39": " * Static utility methods pertaining to {@code boolean} primitives, that are not\n",
        "40": " * already found in either {@link Boolean} or {@link Arrays}.\n",
        "42": " * <p>See the Guava User Guide article on <a href=\n",
        "43": " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n",
        "44": " * primitive utilities</a>.\n",
        "65": "   * Compares the two specified {@code boolean} values in the standard way\n",
        "66": "   * ({@code false} is considered less than {@code true}). The sign of the\n",
        "67": "   * value returned is the same as that of {@code ((Boolean) a).compareTo(b)}.\n",
        "69": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n",
        "70": "   * deprecated; use the equivalent {@link Boolean#compare} method instead.\n",
        "74": "   * @return a positive number if only {@code a} is {@code true}, a negative\n",
        "75": "   *     number if only {@code b} is true, or zero if {@code a == b}\n",
        "82": "   * Returns {@code true} if {@code target} is present as an element anywhere in\n",
        "83": "   * {@code array}.\n",
        "85": "   * <p><b>Note:</b> consider representing the array as a {@link\n",
        "86": "   * java.util.BitSet} instead, replacing {@code Booleans.contains(array, true)}\n",
        "87": "   * with {@code !bitSet.isEmpty()} and {@code Booleans.contains(array, false)}\n",
        "88": "   * with {@code bitSet.nextClearBit(0) == sizeOfBitSet}.\n",
        "105": "   * Returns the index of the first appearance of the value {@code target} in\n",
        "106": "   * {@code array}.\n",
        "108": "   * <p><b>Note:</b> consider representing the array as a {@link\n",
        "109": "   * java.util.BitSet} instead, and using {@link\n",
        "110": "   * java.util.BitSet#nextSetBit(int)} or {@link\n",
        "111": "   * java.util.BitSet#nextClearBit(int)}.\n",
        "115": "   * @return the least index {@code i} for which {@code array[i] == target}, or\n",
        "116": "   *     {@code -1} if no such index exists.\n",
        "137": "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n",
        "138": "   * the same elements as {@code target}.\n",
        "163": "   * Returns the index of the last appearance of the value {@code target} in\n",
        "164": "   * {@code array}.\n",
        "168": "   * @return the greatest index {@code i} for which {@code array[i] == target},\n",
        "169": "   *     or {@code -1} if no such index exists.\n",
        "186": "   * Returns the values from each provided array combined into a single array.\n",
        "187": "   * For example, {@code concat(new boolean[] {a, b}, new boolean[] {}, new\n",
        "188": "   * boolean[] {c}} returns the array {@code {a, b, c}}.\n",
        "191": "   * @return a single array containing all the values from the source arrays, in\n",
        "192": "   *     order\n",
        "209": "   * Returns an array containing the same values as {@code array}, but\n",
        "210": "   * guaranteed to be of a specified minimum length. If {@code array} already\n",
        "211": "   * has a length of at least {@code minLength}, it is returned directly.\n",
        "212": "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n",
        "213": "   * containing the values of {@code array}, and zeroes in the remaining places.\n",
        "217": "   * @param padding an extra amount to \"grow\" the array by if growth is\n",
        "218": "   *     necessary\n",
        "219": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n",
        "220": "   *     negative\n",
        "221": "   * @return an array containing the values of {@code array}, with guaranteed\n",
        "222": "   *     minimum length {@code minLength}\n",
        "231": "   * Returns a string containing the supplied {@code boolean} values separated\n",
        "232": "   * by {@code separator}. For example, {@code join(\"-\", false, true, false)}\n",
        "233": "   * returns the string {@code \"false-true-false\"}.\n",
        "235": "   * @param separator the text that should appear between consecutive values in\n",
        "236": "   *     the resulting string (but not at the start or end)\n",
        "255": "   * Returns a comparator that compares two {@code boolean} arrays\n",
        "256": "   * lexicographically. That is, it compares, using {@link\n",
        "257": "   * #compare(boolean, boolean)}), the first pair of values that follow any\n",
        "258": "   * common prefix, or when one array is a prefix of the other, treats the\n",
        "259": "   * shorter array as the lesser. For example,\n",
        "260": "   * {@code [] < [false] < [false, true] < [true]}.\n",
        "262": "   * <p>The returned comparator is inconsistent with {@link\n",
        "263": "   * Object#equals(Object)} (since arrays support only identity equality), but\n",
        "264": "   * it is consistent with {@link Arrays#equals(boolean[], boolean[])}.\n",
        "266": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n",
        "267": "   *     Lexicographical order article at Wikipedia</a>\n",
        "296": "   * Copies a collection of {@code Boolean} instances into a new array of\n",
        "297": "   * primitive {@code boolean} values.\n",
        "300": "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n",
        "301": "   * that method.\n",
        "303": "   * <p><b>Note:</b> consider representing the collection as a {@link\n",
        "304": "   * java.util.BitSet} instead.\n",
        "307": "   * @return an array containing the same values as {@code collection}, in the\n",
        "308": "   *     same order, converted to primitives\n",
        "309": "   * @throws NullPointerException if {@code collection} or any of its elements\n",
        "310": "   *     is null\n",
        "328": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "329": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n",
        "330": "   * but any attempt to set a value to {@code null} will result in a {@link\n",
        "331": "   * NullPointerException}.\n",
        "333": "   * <p>The returned list maintains the values, but not the identities, of\n",
        "334": "   * {@code Boolean} objects written to or read from it.  For example, whether\n",
        "335": "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n",
        "336": "   * unspecified.\n"
    }
}