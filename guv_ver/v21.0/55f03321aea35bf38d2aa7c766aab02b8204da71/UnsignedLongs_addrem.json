{
    "addition": {
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "31": " * {@code 2^64 + x}). The methods for which signedness is not an issue are in {@link Longs}, as well\n",
        "32": " * as signed versions of methods for which signedness is an issue.\n",
        "39": " * {@code long} values. When possible, it is recommended that the {@link UnsignedLong} wrapper class\n",
        "40": " * be used, at a small efficiency penalty, to enforce the distinction in the type system.\n",
        "42": " * <p>See the Guava User Guide article on\n",
        "43": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">unsigned\n",
        "44": " * primitive utilities</a>.\n",
        "60": "   * longs, that is, {@code a <= b} as unsigned longs if and only if {@code flip(a) <= flip(b)} as\n",
        "61": "   * signed longs.\n",
        "74": "   *     greater than {@code b}; or zero if they are equal\n",
        "85": "   *     the array according to {@link #compare}\n",
        "105": "   *     in the array according to {@link #compare}\n",
        "124": "   * @param separator the text that should appear between consecutive values in the resulting string\n",
        "125": "   *     (but not at the start or end)\n",
        "144": "   * Returns a comparator that compares two arrays of unsigned {@code long} values <a\n",
        "145": "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n",
        "146": "   * compares, using {@link #compare(long, long)}), the first pair of values that follow any common\n",
        "147": "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n",
        "148": "   * example, {@code [] < [1L] < [1L, 2L] < [2L] < [1L << 63]}.\n",
        "202": "     * guaranteed to be either exact or one less than the correct value. This follows from fact that\n",
        "203": "     * floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not quite\n",
        "204": "     * trivial.\n",
        "236": "     * guaranteed to be either exact or one less than the correct value. This follows from fact that\n",
        "237": "     * floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not quite\n",
        "238": "     * trivial.\n",
        "249": "   *     value\n",
        "250": "   * @throws NullPointerException if {@code string} is null (in contrast to\n",
        "251": "   *     {@link Long#parseLong(String)})\n",
        "271": "   *     value\n",
        "293": "   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long} with\n",
        "294": "   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and\n",
        "295": "   *     {@link Character#MAX_RADIX}.\n",
        "296": "   * @throws NullPointerException if {@code string} is null (in contrast to\n",
        "297": "   *     {@link Long#parseLong(String)})\n",
        "309": "    int maxSafePos = maxSafeDigits[radix] - 1;\n",
        "316": "      if (pos > maxSafePos && overflowInParse(value, digit, radix)) {\n",
        "327": "   * unsigned long. This is useful for detecting overflow while parsing a string representation of a\n",
        "328": "   * number. Does not verify whether supplied radix is valid, passing an invalid radix will give\n",
        "355": "   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated as\n",
        "356": "   * unsigned.\n",
        "361": "   *     and {@link Character#MAX_RADIX}.\n"
    },
    "removed": {
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the\n",
        "10": " * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n",
        "11": " * express or implied. See the License for the specific language governing permissions and\n",
        "12": " * limitations under the License.\n",
        "31": " * {@code 2^64 + x}). The methods for which signedness is not an issue are in {@link Longs}, as\n",
        "32": " * well as signed versions of methods for which signedness is an issue.\n",
        "39": " * {@code long} values. When possible, it is recommended that the {@link UnsignedLong} wrapper\n",
        "40": " * class be used, at a small efficiency penalty, to enforce the distinction in the type system.\n",
        "42": " * <p>See the Guava User Guide article on <a href=\n",
        "43": " * \"https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support\">\n",
        "44": " * unsigned primitive utilities</a>.\n",
        "60": "   * longs, that is, {@code a <= b} as unsigned longs if and only if {@code flip(a) <= flip(b)}\n",
        "61": "   * as signed longs.\n",
        "74": "   *         greater than {@code b}; or zero if they are equal\n",
        "85": "   *         the array according to {@link #compare}\n",
        "105": "   *         in the array according to {@link #compare}\n",
        "124": "   * @param separator the text that should appear between consecutive values in the resulting\n",
        "125": "   *        string (but not at the start or end)\n",
        "144": "   * Returns a comparator that compares two arrays of unsigned {@code long} values\n",
        "145": "   * lexicographically. That is, it compares, using {@link #compare(long, long)}), the first pair of\n",
        "146": "   * values that follow any common prefix, or when one array is a prefix of the other, treats the\n",
        "147": "   * shorter array as the lesser. For example, {@code [] < [1L] < [1L, 2L] < [2L] < [1L << 63]}.\n",
        "152": "   *\n",
        "153": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">Lexicographical order\n",
        "154": "   *      article at Wikipedia</a>\n",
        "204": "     * guaranteed to be either exact or one less than the correct value. This follows from fact\n",
        "205": "     * that floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not\n",
        "206": "     * quite trivial.\n",
        "238": "     * guaranteed to be either exact or one less than the correct value. This follows from fact\n",
        "239": "     * that floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not\n",
        "240": "     * quite trivial.\n",
        "251": "   *         value\n",
        "252": "   * @throws NullPointerException if {@code string} is null\n",
        "253": "   *         (in contrast to {@link Long#parseLong(String)})\n",
        "273": "   *         value\n",
        "295": "   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}\n",
        "296": "   *         with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX}\n",
        "297": "   *         and {@link Character#MAX_RADIX}.\n",
        "298": "   * @throws NullPointerException if {@code string} is null\n",
        "299": "   *         (in contrast to {@link Long#parseLong(String)})\n",
        "311": "    int max_safe_pos = maxSafeDigits[radix] - 1;\n",
        "318": "      if (pos > max_safe_pos && overflowInParse(value, digit, radix)) {\n",
        "329": "   * unsigned long. This is useful for detecting overflow while parsing a string representation of\n",
        "330": "   * a number. Does not verify whether supplied radix is valid, passing an invalid radix will give\n",
        "357": "   * Returns a string representation of {@code x} for the given radix, where {@code x} is treated\n",
        "358": "   * as unsigned.\n",
        "363": "   *         and {@link Character#MAX_RADIX}.\n"
    }
}