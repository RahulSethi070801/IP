{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "40": " * Static utility methods pertaining to {@code int} primitives, that are not already found in either\n",
        "41": " * {@link Integer} or {@link Arrays}.\n",
        "43": " * <p>See the Guava User Guide article on\n",
        "44": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "54": "   * The number of bytes required to represent a primitive {@code int} value.\n",
        "81": "   * @throws IllegalArgumentException if {@code value} is greater than {@link Integer#MAX_VALUE} or\n",
        "82": "   *     less than {@link Integer#MIN_VALUE}\n",
        "97": "   * @return the same value cast to {@code int} if it is in the range of the {@code int} type,\n",
        "98": "   *     {@link Integer#MAX_VALUE} if it is too large, or {@link Integer#MIN_VALUE} if it is too\n",
        "99": "   *     small\n",
        "112": "   * Compares the two specified {@code int} values. The sign of the value returned is the same as\n",
        "113": "   * that of {@code ((Integer) a).compareTo(b)}.\n",
        "115": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the\n",
        "116": "   * equivalent {@link Integer#compare} method instead.\n",
        "120": "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n",
        "121": "   *     greater than {@code b}; or zero if they are equal\n",
        "128": "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}.\n",
        "145": "   * Returns the index of the first appearance of the value {@code target} in {@code array}.\n",
        "149": "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "150": "   *     such index exists.\n",
        "170": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "171": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "172": "   * {@code target}.\n",
        "197": "   * Returns the index of the last appearance of the value {@code target} in {@code array}.\n",
        "201": "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "202": "   *     such index exists.\n",
        "222": "   * @return the value present in {@code array} that is less than or equal to every other value in\n",
        "223": "   *     the array\n",
        "241": "   * @return the value present in {@code array} that is greater than or equal to every other value\n",
        "242": "   *     in the array\n",
        "257": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "258": "   * {@code concat(new int[] {a, b}, new int[] {}, new int[] {c}} returns the array {@code {a, b,\n",
        "259": "   * c}}.\n",
        "262": "   * @return a single array containing all the values from the source arrays, in order\n",
        "279": "   * Returns a big-endian representation of {@code value} in a 4-element byte array; equivalent to\n",
        "280": "   * {@code ByteBuffer.allocate(4).putInt(value).array()}. For example, the input value\n",
        "281": "   * {@code 0x12131415} would yield the byte array {@code {0x12, 0x13, 0x14, 0x15}}.\n",
        "282": "   *\n",
        "283": "   * <p>If you need to convert and concatenate several values (possibly even of different types),\n",
        "284": "   * use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "285": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable buffer.\n",
        "290": "      (byte) (value >> 24), (byte) (value >> 16), (byte) (value >> 8), (byte) value\n",
        "295": "   * Returns the {@code int} value whose big-endian representation is stored in the first 4 bytes of\n",
        "296": "   * {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getInt()}. For example, the input\n",
        "297": "   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value\n",
        "298": "   * {@code 0x12131415}.\n",
        "300": "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more\n",
        "301": "   * flexibility at little cost in readability.\n",
        "312": "   * Returns the {@code int} value whose byte representation is the given 4 bytes, in big-endian\n",
        "313": "   * order; equivalent to {@code Ints.fromByteArray(new byte[] {b1, b2, b3, b4})}.\n",
        "349": "   * Returns a serializable converter object that converts between strings and integers using\n",
        "350": "   * {@link Integer#decode} and {@link Integer#toString()}. The returned converter throws\n",
        "351": "   * {@link NumberFormatException} if the input string is invalid.\n",
        "365": "   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n",
        "366": "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n",
        "367": "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n",
        "368": "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n",
        "372": "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n",
        "373": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n",
        "374": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "375": "   *     {@code minLength}\n",
        "384": "   * Returns a string containing the supplied {@code int} values separated by {@code separator}. For\n",
        "385": "   * example, {@code join(\"-\", 1, 2, 3)} returns the string {@code \"1-2-3\"}.\n",
        "387": "   * @param separator the text that should appear between consecutive values in the resulting string\n",
        "388": "   *     (but not at the start or end)\n",
        "407": "   * Returns a comparator that compares two {@code int} arrays <a\n",
        "408": "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n",
        "409": "   * compares, using {@link #compare(int, int)}), the first pair of values that follow any common\n",
        "410": "   * prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For\n",
        "411": "   * example, {@code [] < [1] < [1, 2] < [2]}.\n",
        "412": "   *\n",
        "413": "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n",
        "414": "   * support only identity equality), but it is consistent with {@link Arrays#equals(int[], int[])}.\n",
        "415": "   *\n",
        "444": "   * Returns an array containing each value of {@code collection}, converted to a {@code int} value\n",
        "445": "   * in the manner of {@link Number#intValue}.\n",
        "448": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "451": "   * @return an array containing the same values as {@code collection}, in the same order, converted\n",
        "452": "   *     to primitives\n",
        "453": "   * @throws NullPointerException if {@code collection} or any of its elements is null\n",
        "472": "   * Returns a fixed-size list backed by the specified array, similar to\n",
        "473": "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n",
        "474": "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n",
        "476": "   * <p>The returned list maintains the values, but not the identities, of {@code Integer} objects\n",
        "477": "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n",
        "478": "   * the returned list is unspecified.\n",
        "624": "   * Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}\n",
        "625": "   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n",
        "627": "   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of\n",
        "628": "   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,\n",
        "629": "   * and returns {@code null} if non-ASCII digits are present in the string.\n",
        "631": "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite\n",
        "632": "   * the change to {@link Integer#parseInt(String)} for that version.\n",
        "635": "   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has\n",
        "636": "   *     a length of zero or cannot be parsed as an integer value\n",
        "647": "   * Parses the specified string as a signed integer value using the specified radix. The ASCII\n",
        "648": "   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n",
        "650": "   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of\n",
        "651": "   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,\n",
        "652": "   * and returns {@code null} if non-ASCII digits are present in the string.\n",
        "654": "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even under JDK 7, despite\n",
        "655": "   * the change to {@link Integer#parseInt(String, int)} for that version.\n",
        "659": "   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if\n",
        "660": "   *     {@code string} has a length of zero or cannot be parsed as an integer value\n",
        "668": "  public static Integer tryParse(String string, int radix) {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "42": " * Static utility methods pertaining to {@code int} primitives, that are not\n",
        "43": " * already found in either {@link Integer} or {@link Arrays}.\n",
        "45": " * <p>See the Guava User Guide article on <a href=\n",
        "46": " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n",
        "47": " * primitive utilities</a>.\n",
        "57": "   * The number of bytes required to represent a primitive {@code int}\n",
        "58": "   * value.\n",
        "85": "   * @throws IllegalArgumentException if {@code value} is greater than {@link\n",
        "86": "   *     Integer#MAX_VALUE} or less than {@link Integer#MIN_VALUE}\n",
        "101": "   * @return the same value cast to {@code int} if it is in the range of the\n",
        "102": "   *     {@code int} type, {@link Integer#MAX_VALUE} if it is too large,\n",
        "103": "   *     or {@link Integer#MIN_VALUE} if it is too small\n",
        "116": "   * Compares the two specified {@code int} values. The sign of the value\n",
        "117": "   * returned is the same as that of {@code ((Integer) a).compareTo(b)}.\n",
        "119": "   * <p><b>Note for Java 7 and later:</b> this method should be treated as\n",
        "120": "   * deprecated; use the equivalent {@link Integer#compare} method instead.\n",
        "124": "   * @return a negative value if {@code a} is less than {@code b}; a positive\n",
        "125": "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n",
        "132": "   * Returns {@code true} if {@code target} is present as an element anywhere in\n",
        "133": "   * {@code array}.\n",
        "150": "   * Returns the index of the first appearance of the value {@code target} in\n",
        "151": "   * {@code array}.\n",
        "155": "   * @return the least index {@code i} for which {@code array[i] == target}, or\n",
        "156": "   *     {@code -1} if no such index exists.\n",
        "176": "   * <p>More formally, returns the lowest index {@code i} such that {@code\n",
        "177": "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n",
        "178": "   * the same elements as {@code target}.\n",
        "203": "   * Returns the index of the last appearance of the value {@code target} in\n",
        "204": "   * {@code array}.\n",
        "208": "   * @return the greatest index {@code i} for which {@code array[i] == target},\n",
        "209": "   *     or {@code -1} if no such index exists.\n",
        "229": "   * @return the value present in {@code array} that is less than or equal to\n",
        "230": "   *     every other value in the array\n",
        "248": "   * @return the value present in {@code array} that is greater than or equal to\n",
        "249": "   *     every other value in the array\n",
        "264": "   * Returns the values from each provided array combined into a single array.\n",
        "265": "   * For example, {@code concat(new int[] {a, b}, new int[] {}, new\n",
        "266": "   * int[] {c}} returns the array {@code {a, b, c}}.\n",
        "269": "   * @return a single array containing all the values from the source arrays, in\n",
        "270": "   *     order\n",
        "287": "   * Returns a big-endian representation of {@code value} in a 4-element byte\n",
        "288": "   * array; equivalent to {@code ByteBuffer.allocate(4).putInt(value).array()}.\n",
        "289": "   * For example, the input value {@code 0x12131415} would yield the byte array\n",
        "290": "   * {@code {0x12, 0x13, 0x14, 0x15}}.\n",
        "291": "   *\n",
        "292": "   * <p>If you need to convert and concatenate several values (possibly even of\n",
        "293": "   * different types), use a shared {@link java.nio.ByteBuffer} instance, or use\n",
        "294": "   * {@link com.google.common.io.ByteStreams#newDataOutput()} to get a growable\n",
        "295": "   * buffer.\n",
        "300": "      (byte) (value >> 24),\n",
        "301": "      (byte) (value >> 16),\n",
        "302": "      (byte) (value >> 8),\n",
        "303": "      (byte) value\n",
        "308": "   * Returns the {@code int} value whose big-endian representation is stored in\n",
        "309": "   * the first 4 bytes of {@code bytes}; equivalent to {@code\n",
        "310": "   * ByteBuffer.wrap(bytes).getInt()}. For example, the input byte array {@code\n",
        "311": "   * {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value {@code\n",
        "312": "   * 0x12131415}.\n",
        "314": "   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that\n",
        "315": "   * library exposes much more flexibility at little cost in readability.\n",
        "326": "   * Returns the {@code int} value whose byte representation is the given 4\n",
        "327": "   * bytes, in big-endian order; equivalent to {@code Ints.fromByteArray(new\n",
        "328": "   * byte[] {b1, b2, b3, b4})}.\n",
        "364": "   * Returns a serializable converter object that converts between strings and integers using {@link\n",
        "365": "   * Integer#decode} and {@link Integer#toString()}. The returned converter throws {@link\n",
        "366": "   * NumberFormatException} if the input string is invalid.\n",
        "380": "   * Returns an array containing the same values as {@code array}, but\n",
        "381": "   * guaranteed to be of a specified minimum length. If {@code array} already\n",
        "382": "   * has a length of at least {@code minLength}, it is returned directly.\n",
        "383": "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n",
        "384": "   * containing the values of {@code array}, and zeroes in the remaining places.\n",
        "388": "   * @param padding an extra amount to \"grow\" the array by if growth is\n",
        "389": "   *     necessary\n",
        "390": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n",
        "391": "   *     negative\n",
        "392": "   * @return an array containing the values of {@code array}, with guaranteed\n",
        "393": "   *     minimum length {@code minLength}\n",
        "402": "   * Returns a string containing the supplied {@code int} values separated\n",
        "403": "   * by {@code separator}. For example, {@code join(\"-\", 1, 2, 3)} returns\n",
        "404": "   * the string {@code \"1-2-3\"}.\n",
        "406": "   * @param separator the text that should appear between consecutive values in\n",
        "407": "   *     the resulting string (but not at the start or end)\n",
        "426": "   * Returns a comparator that compares two {@code int} arrays\n",
        "427": "   * lexicographically. That is, it compares, using {@link\n",
        "428": "   * #compare(int, int)}), the first pair of values that follow any\n",
        "429": "   * common prefix, or when one array is a prefix of the other, treats the\n",
        "430": "   * shorter array as the lesser. For example, {@code [] < [1] < [1, 2] < [2]}.\n",
        "431": "   *\n",
        "432": "   * <p>The returned comparator is inconsistent with {@link\n",
        "433": "   * Object#equals(Object)} (since arrays support only identity equality), but\n",
        "434": "   * it is consistent with {@link Arrays#equals(int[], int[])}.\n",
        "435": "   *\n",
        "436": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n",
        "437": "   *     Lexicographical order article at Wikipedia</a>\n",
        "466": "   * Returns an array containing each value of {@code collection}, converted to\n",
        "467": "   * a {@code int} value in the manner of {@link Number#intValue}.\n",
        "470": "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n",
        "471": "   * that method.\n",
        "474": "   * @return an array containing the same values as {@code collection}, in the\n",
        "475": "   *     same order, converted to primitives\n",
        "476": "   * @throws NullPointerException if {@code collection} or any of its elements\n",
        "477": "   *     is null\n",
        "496": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "497": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n",
        "498": "   * but any attempt to set a value to {@code null} will result in a {@link\n",
        "499": "   * NullPointerException}.\n",
        "501": "   * <p>The returned list maintains the values, but not the identities, of\n",
        "502": "   * {@code Integer} objects written to or read from it.  For example, whether\n",
        "503": "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n",
        "504": "   * unspecified.\n",
        "650": "   * Parses the specified string as a signed decimal integer value. The ASCII\n",
        "651": "   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the\n",
        "652": "   * minus sign.\n",
        "654": "   * <p>Unlike {@link Integer#parseInt(String)}, this method returns\n",
        "655": "   * {@code null} instead of throwing an exception if parsing fails.\n",
        "656": "   * Additionally, this method only accepts ASCII digits, and returns\n",
        "657": "   * {@code null} if non-ASCII digits are present in the string.\n",
        "659": "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even\n",
        "660": "   * under JDK 7, despite the change to {@link Integer#parseInt(String)} for\n",
        "661": "   * that version.\n",
        "664": "   * @return the integer value represented by {@code string}, or {@code null} if\n",
        "665": "   *     {@code string} has a length of zero or cannot be parsed as an integer\n",
        "666": "   *     value\n",
        "677": "   * Parses the specified string as a signed integer value using the specified\n",
        "678": "   * radix. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is\n",
        "679": "   * recognized as the minus sign.\n",
        "681": "   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns\n",
        "682": "   * {@code null} instead of throwing an exception if parsing fails.\n",
        "683": "   * Additionally, this method only accepts ASCII digits, and returns\n",
        "684": "   * {@code null} if non-ASCII digits are present in the string.\n",
        "686": "   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even\n",
        "687": "   * under JDK 7, despite the change to {@link Integer#parseInt(String, int)}\n",
        "688": "   * for that version.\n",
        "692": "   * @return the integer value represented by {@code string} using\n",
        "693": "   *     {@code radix}, or {@code null} if {@code string} has a length of zero\n",
        "694": "   *     or cannot be parsed as an integer value\n",
        "702": "  public static Integer tryParse(\n",
        "703": "      String string, int radix) {\n"
    }
}