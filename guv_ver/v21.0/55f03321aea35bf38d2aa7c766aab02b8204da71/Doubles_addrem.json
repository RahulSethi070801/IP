{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "43": " * Static utility methods pertaining to {@code double} primitives, that are not already found in\n",
        "44": " * either {@link Double} or {@link Arrays}.\n",
        "46": " * <p>See the Guava User Guide article on\n",
        "47": " * <a href=\"https://github.com/google/guava/wiki/PrimitivesExplained\">primitive utilities</a>.\n",
        "57": "   * The number of bytes required to represent a primitive {@code double} value.\n",
        "78": "   * Compares the two specified {@code double} values. The sign of the value returned is the same as\n",
        "79": "   * that of <code>((Double) a).{@linkplain Double#compareTo compareTo}(b)</code>. As with that\n",
        "80": "   * method, {@code NaN} is treated as greater than all other values, and {@code 0.0 > -0.0}.\n",
        "82": "   * <p><b>Note:</b> this method simply delegates to the JDK method {@link Double#compare}. It is\n",
        "83": "   * provided for consistency with the other primitive types, whose compare methods were not added\n",
        "84": "   * to the JDK until JDK 7.\n",
        "88": "   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is\n",
        "89": "   *     greater than {@code b}; or zero if they are equal\n",
        "96": "   * Returns {@code true} if {@code value} represents a real number. This is equivalent to, but not\n",
        "97": "   * necessarily implemented as, {@code !(Double.isInfinite(value) || Double.isNaN(value))}.\n",
        "106": "   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}. Note\n",
        "107": "   * that this always returns {@code false} when {@code target} is {@code NaN}.\n",
        "124": "   * Returns the index of the first appearance of the value {@code target} in {@code array}. Note\n",
        "125": "   * that this always returns {@code -1} when {@code target} is {@code NaN}.\n",
        "129": "   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "130": "   *     such index exists.\n",
        "150": "   * <p>More formally, returns the lowest index {@code i} such that\n",
        "151": "   * {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as\n",
        "152": "   * {@code target}.\n",
        "154": "   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.\n",
        "179": "   * Returns the index of the last appearance of the value {@code target} in {@code array}. Note\n",
        "180": "   * that this always returns {@code -1} when {@code target} is {@code NaN}.\n",
        "184": "   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no\n",
        "185": "   *     such index exists.\n",
        "202": "   * Returns the least value present in {@code array}, using the same rules of comparison as\n",
        "203": "   * {@link Math#min(double, double)}.\n",
        "206": "   * @return the value present in {@code array} that is less than or equal to every other value in\n",
        "207": "   *     the array\n",
        "220": "   * Returns the greatest value present in {@code array}, using the same rules of comparison as\n",
        "221": "   * {@link Math#max(double, double)}.\n",
        "224": "   * @return the value present in {@code array} that is greater than or equal to every other value\n",
        "225": "   *     in the array\n",
        "238": "   * Returns the values from each provided array combined into a single array. For example,\n",
        "239": "   * {@code concat(new double[] {a, b}, new double[] {}, new double[] {c}} returns the array\n",
        "240": "   * {@code {a, b, c}}.\n",
        "243": "   * @return a single array containing all the values from the source arrays, in order\n",
        "286": "   * Returns a serializable converter object that converts between strings and doubles using\n",
        "287": "   * {@link Double#valueOf} and {@link Double#toString()}.\n",
        "297": "   * Returns an array containing the same values as {@code array}, but guaranteed to be of a\n",
        "298": "   * specified minimum length. If {@code array} already has a length of at least {@code minLength},\n",
        "299": "   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is\n",
        "300": "   * returned, containing the values of {@code array}, and zeroes in the remaining places.\n",
        "304": "   * @param padding an extra amount to \"grow\" the array by if growth is necessary\n",
        "305": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative\n",
        "306": "   * @return an array containing the values of {@code array}, with guaranteed minimum length\n",
        "307": "   *     {@code minLength}\n",
        "316": "   * Returns a string containing the supplied {@code double} values, converted to strings as\n",
        "317": "   * specified by {@link Double#toString(double)}, and separated by {@code separator}. For example,\n",
        "318": "   * {@code join(\"-\", 1.0, 2.0, 3.0)} returns the string {@code \"1.0-2.0-3.0\"}.\n",
        "320": "   * <p>Note that {@link Double#toString(double)} formats {@code double} differently in GWT\n",
        "321": "   * sometimes. In the previous example, it returns the string {@code \"1-2-3\"}.\n",
        "323": "   * @param separator the text that should appear between consecutive values in the resulting string\n",
        "324": "   *     (but not at the start or end)\n",
        "343": "   * Returns a comparator that compares two {@code double} arrays <a\n",
        "344": "   * href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">lexicographically</a>. That is, it\n",
        "345": "   * compares, using {@link #compare(double, double)}), the first pair of values that follow any\n",
        "346": "   * common prefix, or when one array is a prefix of the other, treats the shorter array as the\n",
        "347": "   * lesser. For example, {@code [] < [1.0] < [1.0, 2.0] < [2.0]}.\n",
        "349": "   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays\n",
        "350": "   * support only identity equality), but it is consistent with\n",
        "351": "   * {@link Arrays#equals(double[], double[])}.\n",
        "381": "   * Returns an array containing each value of {@code collection}, converted to a {@code double}\n",
        "382": "   * value in the manner of {@link Number#doubleValue}.\n",
        "385": "   * collection.toArray()}. Calling this method is as thread-safe as calling that method.\n",
        "388": "   * @return an array containing the same values as {@code collection}, in the same order, converted\n",
        "389": "   *     to primitives\n",
        "390": "   * @throws NullPointerException if {@code collection} or any of its elements is null\n",
        "409": "   * Returns a fixed-size list backed by the specified array, similar to\n",
        "410": "   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any\n",
        "411": "   * attempt to set a value to {@code null} will result in a {@link NullPointerException}.\n",
        "413": "   * <p>The returned list maintains the values, but not the identities, of {@code Double} objects\n",
        "414": "   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for\n",
        "415": "   * the returned list is unspecified.\n",
        "565": "   * This is adapted from the regex suggested by {@link Double#valueOf(String)} for prevalidating\n",
        "566": "   * inputs. All valid inputs must pass this regex, but it's semantically fine if not all inputs\n",
        "567": "   * that pass this regex are valid -- only a performance hit is incurred, not a semantics bug.\n",
        "583": "   * Parses the specified string as a double-precision floating point value. The ASCII character\n",
        "584": "   * {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.\n",
        "586": "   * <p>Unlike {@link Double#parseDouble(String)}, this method returns {@code null} instead of\n",
        "587": "   * throwing an exception if parsing fails. Valid inputs are exactly those accepted by\n",
        "588": "   * {@link Double#valueOf(String)}, except that leading and trailing whitespace is not permitted.\n",
        "594": "   * @return the floating point value represented by {@code string}, or {@code null} if\n",
        "595": "   *     {@code string} has a length of zero or cannot be parsed as a {@code double} value\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "45": " * Static utility methods pertaining to {@code double} primitives, that are not\n",
        "46": " * already found in either {@link Double} or {@link Arrays}.\n",
        "48": " * <p>See the Guava User Guide article on <a href=\n",
        "49": " * \"https://github.com/google/guava/wiki/PrimitivesExplained\">\n",
        "50": " * primitive utilities</a>.\n",
        "60": "   * The number of bytes required to represent a primitive {@code double}\n",
        "61": "   * value.\n",
        "82": "   * Compares the two specified {@code double} values. The sign of the value\n",
        "83": "   * returned is the same as that of <code>((Double) a).{@linkplain\n",
        "84": "   * Double#compareTo compareTo}(b)</code>. As with that method, {@code NaN} is\n",
        "85": "   * treated as greater than all other values, and {@code 0.0 > -0.0}.\n",
        "87": "   * <p><b>Note:</b> this method simply delegates to the JDK method {@link\n",
        "88": "   * Double#compare}. It is provided for consistency with the other primitive\n",
        "89": "   * types, whose compare methods were not added to the JDK until JDK 7.\n",
        "93": "   * @return a negative value if {@code a} is less than {@code b}; a positive\n",
        "94": "   *     value if {@code a} is greater than {@code b}; or zero if they are equal\n",
        "101": "   * Returns {@code true} if {@code value} represents a real number. This is\n",
        "102": "   * equivalent to, but not necessarily implemented as,\n",
        "103": "   * {@code !(Double.isInfinite(value) || Double.isNaN(value))}.\n",
        "112": "   * Returns {@code true} if {@code target} is present as an element anywhere in\n",
        "113": "   * {@code array}. Note that this always returns {@code false} when {@code\n",
        "114": "   * target} is {@code NaN}.\n",
        "131": "   * Returns the index of the first appearance of the value {@code target} in\n",
        "132": "   * {@code array}. Note that this always returns {@code -1} when {@code target}\n",
        "133": "   * is {@code NaN}.\n",
        "137": "   * @return the least index {@code i} for which {@code array[i] == target}, or\n",
        "138": "   *     {@code -1} if no such index exists.\n",
        "158": "   * <p>More formally, returns the lowest index {@code i} such that {@code\n",
        "159": "   * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly\n",
        "160": "   * the same elements as {@code target}.\n",
        "162": "   * <p>Note that this always returns {@code -1} when {@code target} contains\n",
        "163": "   * {@code NaN}.\n",
        "188": "   * Returns the index of the last appearance of the value {@code target} in\n",
        "189": "   * {@code array}. Note that this always returns {@code -1} when {@code target}\n",
        "190": "   * is {@code NaN}.\n",
        "194": "   * @return the greatest index {@code i} for which {@code array[i] == target},\n",
        "195": "   *     or {@code -1} if no such index exists.\n",
        "212": "   * Returns the least value present in {@code array}, using the same rules of\n",
        "213": "   * comparison as {@link Math#min(double, double)}.\n",
        "216": "   * @return the value present in {@code array} that is less than or equal to\n",
        "217": "   *     every other value in the array\n",
        "230": "   * Returns the greatest value present in {@code array}, using the same rules\n",
        "231": "   * of comparison as {@link Math#max(double, double)}.\n",
        "234": "   * @return the value present in {@code array} that is greater than or equal to\n",
        "235": "   *     every other value in the array\n",
        "248": "   * Returns the values from each provided array combined into a single array.\n",
        "249": "   * For example, {@code concat(new double[] {a, b}, new double[] {}, new\n",
        "250": "   * double[] {c}} returns the array {@code {a, b, c}}.\n",
        "253": "   * @return a single array containing all the values from the source arrays, in\n",
        "254": "   *     order\n",
        "297": "   * Returns a serializable converter object that converts between strings and\n",
        "298": "   * doubles using {@link Double#valueOf} and {@link Double#toString()}.\n",
        "308": "   * Returns an array containing the same values as {@code array}, but\n",
        "309": "   * guaranteed to be of a specified minimum length. If {@code array} already\n",
        "310": "   * has a length of at least {@code minLength}, it is returned directly.\n",
        "311": "   * Otherwise, a new array of size {@code minLength + padding} is returned,\n",
        "312": "   * containing the values of {@code array}, and zeroes in the remaining places.\n",
        "316": "   * @param padding an extra amount to \"grow\" the array by if growth is\n",
        "317": "   *     necessary\n",
        "318": "   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is\n",
        "319": "   *     negative\n",
        "320": "   * @return an array containing the values of {@code array}, with guaranteed\n",
        "321": "   *     minimum length {@code minLength}\n",
        "330": "   * Returns a string containing the supplied {@code double} values, converted\n",
        "331": "   * to strings as specified by {@link Double#toString(double)}, and separated\n",
        "332": "   * by {@code separator}. For example, {@code join(\"-\", 1.0, 2.0, 3.0)} returns\n",
        "333": "   * the string {@code \"1.0-2.0-3.0\"}.\n",
        "335": "   * <p>Note that {@link Double#toString(double)} formats {@code double}\n",
        "336": "   * differently in GWT sometimes.  In the previous example, it returns the\n",
        "337": "   * string {@code \"1-2-3\"}.\n",
        "339": "   * @param separator the text that should appear between consecutive values in\n",
        "340": "   *     the resulting string (but not at the start or end)\n",
        "359": "   * Returns a comparator that compares two {@code double} arrays\n",
        "360": "   * lexicographically. That is, it compares, using {@link\n",
        "361": "   * #compare(double, double)}), the first pair of values that follow any\n",
        "362": "   * common prefix, or when one array is a prefix of the other, treats the\n",
        "363": "   * shorter array as the lesser. For example,\n",
        "364": "   * {@code [] < [1.0] < [1.0, 2.0] < [2.0]}.\n",
        "366": "   * <p>The returned comparator is inconsistent with {@link\n",
        "367": "   * Object#equals(Object)} (since arrays support only identity equality), but\n",
        "368": "   * it is consistent with {@link Arrays#equals(double[], double[])}.\n",
        "370": "   * @see <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\">\n",
        "371": "   *     Lexicographical order article at Wikipedia</a>\n",
        "400": "   * Returns an array containing each value of {@code collection}, converted to\n",
        "401": "   * a {@code double} value in the manner of {@link Number#doubleValue}.\n",
        "404": "   * collection.toArray()}.  Calling this method is as thread-safe as calling\n",
        "405": "   * that method.\n",
        "408": "   * @return an array containing the same values as {@code collection}, in the\n",
        "409": "   *     same order, converted to primitives\n",
        "410": "   * @throws NullPointerException if {@code collection} or any of its elements\n",
        "411": "   *     is null\n",
        "430": "   * Returns a fixed-size list backed by the specified array, similar to {@link\n",
        "431": "   * Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)},\n",
        "432": "   * but any attempt to set a value to {@code null} will result in a {@link\n",
        "433": "   * NullPointerException}.\n",
        "435": "   * <p>The returned list maintains the values, but not the identities, of\n",
        "436": "   * {@code Double} objects written to or read from it.  For example, whether\n",
        "437": "   * {@code list.get(0) == list.get(0)} is true for the returned list is\n",
        "438": "   * unspecified.\n",
        "588": "   * This is adapted from the regex suggested by {@link Double#valueOf(String)}\n",
        "589": "   * for prevalidating inputs.  All valid inputs must pass this regex, but it's\n",
        "590": "   * semantically fine if not all inputs that pass this regex are valid --\n",
        "591": "   * only a performance hit is incurred, not a semantics bug.\n",
        "607": "   * Parses the specified string as a double-precision floating point value.\n",
        "608": "   * The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is recognized\n",
        "609": "   * as the minus sign.\n",
        "611": "   * <p>Unlike {@link Double#parseDouble(String)}, this method returns\n",
        "612": "   * {@code null} instead of throwing an exception if parsing fails.\n",
        "613": "   * Valid inputs are exactly those accepted by {@link Double#valueOf(String)},\n",
        "614": "   * except that leading and trailing whitespace is not permitted.\n",
        "620": "   * @return the floating point value represented by {@code string}, or\n",
        "621": "   *     {@code null} if {@code string} has a length of zero or cannot be\n",
        "622": "   *     parsed as a {@code double} value\n"
    }
}