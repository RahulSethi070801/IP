{
    "addition": {
        "19": "import static com.google.common.graph.GraphConstants.GRAPH_STRING_FORMAT;\n",
        "21": "import com.google.common.annotations.Beta;\n",
        "22": "import com.google.common.base.Function;\n",
        "23": "import com.google.common.collect.Maps;\n",
        "24": "import java.util.Set;\n",
        "56": "  public boolean equals(@Nullable Object obj) {\n",
        "57": "    if (obj == this) {\n",
        "58": "      return true;\n",
        "59": "    }\n",
        "60": "    if (!(obj instanceof Network)) {\n",
        "61": "      return false;\n",
        "62": "    }\n",
        "63": "    Network<?, ?> other = (Network<?, ?>) obj;\n",
        "64": "\n",
        "65": "    if (isDirected() != other.isDirected()) {\n",
        "68": "\n",
        "69": "    if (!nodes().equals(other.nodes()) || !edges().equals(other.edges())) {\n",
        "70": "      return false;\n",
        "71": "    }\n",
        "72": "\n",
        "73": "    for (Object edge : edges()) {\n",
        "74": "      if (!incidentNodes(edge).equals(other.incidentNodes(edge))) {\n",
        "75": "        return false;\n",
        "76": "      }\n",
        "77": "    }\n",
        "78": "\n",
        "79": "    return true;\n",
        "84": "    return Maps.asMap(nodes(), new Function<N, Set<E>>() {\n",
        "85": "      @Override\n",
        "86": "      public Set<E> apply(N node) {\n",
        "87": "        return outEdges(node);\n",
        "88": "      }\n",
        "89": "    }).hashCode();\n",
        "92": "  /**\n",
        "93": "   * Returns a string representation of this graph. Encodes edge direction if any.\n",
        "94": "   */\n",
        "97": "    return String.format(GRAPH_STRING_FORMAT,\n",
        "98": "        getPropertiesString(),\n",
        "99": "        nodes(),\n",
        "100": "        Maps.asMap(edges(), edgeToEndpointsString()));\n",
        "102": "\n",
        "103": "  private String getPropertiesString() {\n",
        "104": "    return String.format(\"isDirected: %s, allowsParallelEdges: %s, allowsSelfLoops: %s\",\n",
        "105": "        isDirected(), allowsParallelEdges(), allowsSelfLoops());\n",
        "106": "  }\n",
        "107": "\n",
        "108": "  private Function<Object, String> edgeToEndpointsString() {\n",
        "109": "    return new Function<Object, String>() {\n",
        "110": "      @Override\n",
        "111": "      public String apply(Object edge) {\n",
        "112": "        return incidentNodes(edge).toString();\n",
        "113": "      }\n",
        "114": "    };\n",
        "115": " }\n"
    },
    "removed": {
        "19": "import com.google.common.annotations.Beta;\n",
        "52": "  public boolean equals(@Nullable Object object) {\n",
        "53": "    if (!(object instanceof Network)) {\n",
        "56": "    return Graphs.equal(this, (Network<?, ?>) object);\n",
        "61": "    return Graphs.hashCode(this);\n",
        "66": "    return Graphs.toString(this);\n"
    }
}