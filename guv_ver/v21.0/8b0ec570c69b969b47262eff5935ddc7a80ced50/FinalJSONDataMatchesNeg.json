[{"func":{"oldfunccode":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_oldfunccode_8b0ec570c69b969b47262eff5935ddc7a80ced50_1.txt","newfunccode":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_newfunccode_8b0ec570c69b969b47262eff5935ddc7a80ced50_1.txt","newdoc":"","newJdoc":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_newfuncnewJdoc_8b0ec570c69b969b47262eff5935ddc7a80ced50_1.txt","olddoc":"","oldJdoc":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_oldfuncoldJdoc_8b0ec570c69b969b47262eff5935ddc7a80ced50_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/8b0ec570c69b969b47262eff5935ddc7a80ced50/IncidenceSetDirectedGraph","pathinproj":"guava/src/com/google/common/graph/IncidenceSetDirectedGraph.java","addlines":[272,273,274,276,277,262,266,267,268,269,270,271],"dellines":[352,320,354,324,325,326,347],"addcode":["    } else if (!config.isMultigraph() && nodes().contains(node1) && nodes().contains(node2)) {\n","    NodeConnections<N, E> connectionsN1 = nodeConnections.get(node1);\n","    connectionsN1.addSuccessor(node2, edge);\n","    NodeConnections<N, E> connectionsN2 = nodeConnections.get(node2);\n","    connectionsN2.addPredecessor(node1, edge);\n","    } else if (!config.isMultigraph() && nodes().contains(node1) && nodes().contains(node2)) {\n","    addNode(node1);\n","    NodeConnections<N, E> connectionsN1 = nodeConnections.get(node1);\n","    connectionsN1.addSuccessor(node2, edge);\n","    if (!incidentNodes.isSelfLoop()) {\n","      addNode(node2);\n","      NodeConnections<N, E> connectionsN2 = nodeConnections.get(node2);\n","      connectionsN2.addPredecessor(node1, edge);\n"],"delcode":["    } else if (!config.isMultigraph() && containsNode(node1) && containsNode(node2)) {\n","    nodeToIncidentEdges.get(node1).outEdges().add(edge);\n","    nodeToIncidentEdges.get(node2).inEdges().add(edge);\n","    } else if (!config.isMultigraph() && containsNode(node1) && containsNode(node2)) {\n","    for (N node : incidentNodes) {\n","      addNode(node);\n","      nodeToIncidentEdges.get(node).add(edge);\n"],"methodSig":"public boolean addEdge(E edge, N node1, N node2)"},"doc":{"oldfunccode":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_olddocfunccode_8b0ec570c69b969b47262eff5935ddc7a80ced50_1.txt","newfunccode":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_newdocfunccode_8b0ec570c69b969b47262eff5935ddc7a80ced50_1.txt","newdoc":"","newJdoc":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_newdocnewJdoc_8b0ec570c69b969b47262eff5935ddc7a80ced50_1.txt","olddoc":"","oldJdoc":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_olddocJdoc_8b0ec570c69b969b47262eff5935ddc7a80ced50_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/8b0ec570c69b969b47262eff5935ddc7a80ced50/AbstractImmutableGraph","pathinproj":"guava/src/com/google/common/graph/AbstractImmutableGraph.java","addlines":[76],"dellines":[76],"addcode":["     * @see Graph#addEdge\n"],"delcode":["     * @see Graph#addEdge(E, N, N)\n"],"methodSig":" Builder<N, E> addEdge(E e, N n1, N n2)"},"id":1,"flag":1,"commit":"8b0ec570c69b969b47262eff5935ddc7a80ced50"},{"func":{"oldfunccode":"","newfunccode":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_newfunccode_8b0ec570c69b969b47262eff5935ddc7a80ced50_2.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/8b0ec570c69b969b47262eff5935ddc7a80ced50/DirectedNodeConnections","pathinproj":"guava/src/com/google/common/graph/DirectedNodeConnections.java","addlines":[96,97,98,99,100,101,89,90,91,92,93],"dellines":[],"addcode":["  @Override\n","  public void removeNode(Object node) {\n","    checkNotNull(node, \"node\");\n","    predecessors.remove(node);\n","    successors.remove(node);\n","  }\n","  @Override\n","  public void removeNode(Object node) {\n","    checkNotNull(node, \"node\");\n","    adjacentNodes.remove(node);\n","  }\n"],"delcode":[],"methodSig":"public void removeNode(Object node)"},"doc":{"oldfunccode":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_olddocfunccode_8b0ec570c69b969b47262eff5935ddc7a80ced50_2.txt","newfunccode":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_newdocfunccode_8b0ec570c69b969b47262eff5935ddc7a80ced50_2.txt","newdoc":"","newJdoc":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_newdocnewJdoc_8b0ec570c69b969b47262eff5935ddc7a80ced50_2.txt","olddoc":"","oldJdoc":"8b0ec570c69b969b47262eff5935ddc7a80ced50/Codes_neg/Match_olddocJdoc_8b0ec570c69b969b47262eff5935ddc7a80ced50_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/8b0ec570c69b969b47262eff5935ddc7a80ced50/AbstractImmutableGraph","pathinproj":"guava/src/com/google/common/graph/AbstractImmutableGraph.java","addlines":[76],"dellines":[76],"addcode":["     * @see Graph#addEdge\n"],"delcode":["     * @see Graph#addEdge(E, N, N)\n"],"methodSig":" Builder<N, E> addEdge(E e, N n1, N n2)"},"id":1,"flag":1,"commit":"8b0ec570c69b969b47262eff5935ddc7a80ced50"}]