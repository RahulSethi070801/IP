{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.base.MoreObjects;\n",
        "22": "import com.google.common.base.Objects;\n",
        "23": "import com.google.common.collect.ImmutableSet;\n",
        "24": "import com.google.common.collect.Sets;\n",
        "25": "\n",
        "26": "import java.util.Collections;\n",
        "27": "import java.util.Set;\n",
        "28": "\n",
        "29": "import javax.annotation.Nullable;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * A class representing an origin node's adjacent nodes and incident edges in an undirected graph.\n",
        "33": " *\n",
        "34": " * @author James Sexton\n",
        "35": " * @param <N> Node parameter type\n",
        "36": " * @param <E> Edge parameter type\n",
        "37": " */\n",
        "38": "final class UndirectedNodeConnections<N, E> implements NodeConnections<N, E> {\n",
        "39": "  private final Set<N> adjacentNodes;\n",
        "40": "  private final Set<E> incidentEdges;\n",
        "41": "\n",
        "42": "  private UndirectedNodeConnections(Set<N> adjacentNodes, Set<E> incidentEdges) {\n",
        "43": "    this.adjacentNodes = checkNotNull(adjacentNodes, \"adjacentNodes\");\n",
        "44": "    this.incidentEdges = checkNotNull(incidentEdges, \"incidentEdges\");\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  static <N, E> UndirectedNodeConnections<N, E> of() {\n",
        "48": "    // TODO(user): Enable users to specify the expected number of neighbors of a new node.\n",
        "49": "    return new UndirectedNodeConnections<N, E>(\n",
        "50": "        Sets.<N>newLinkedHashSet(), Sets.<E>newLinkedHashSet());\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  static <N, E> UndirectedNodeConnections<N, E> ofImmutable(\n",
        "54": "      Set<N> adjacentNodes, Set<E> incidentEdges) {\n",
        "55": "    return new UndirectedNodeConnections<N, E>(\n",
        "56": "        ImmutableSet.copyOf(adjacentNodes), ImmutableSet.copyOf(incidentEdges));\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  @Override\n",
        "60": "  public Set<N> adjacentNodes() {\n",
        "61": "    return Collections.unmodifiableSet(adjacentNodes);\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  @Override\n",
        "65": "  public Set<N> predecessors() {\n",
        "66": "    return adjacentNodes();\n",
        "67": "  }\n",
        "68": "\n",
        "69": "  @Override\n",
        "70": "  public Set<N> successors() {\n",
        "71": "    return adjacentNodes();\n",
        "72": "  }\n",
        "73": "\n",
        "74": "  @Override\n",
        "75": "  public Set<E> incidentEdges() {\n",
        "76": "    return Collections.unmodifiableSet(incidentEdges);\n",
        "77": "  }\n",
        "78": "\n",
        "79": "  @Override\n",
        "80": "  public Set<E> inEdges() {\n",
        "81": "    return incidentEdges();\n",
        "82": "  }\n",
        "83": "\n",
        "84": "  @Override\n",
        "85": "  public Set<E> outEdges() {\n",
        "86": "    return incidentEdges();\n",
        "87": "  }\n",
        "88": "\n",
        "89": "  @Override\n",
        "90": "  public void removeNode(Object node) {\n",
        "91": "    checkNotNull(node, \"node\");\n",
        "92": "    adjacentNodes.remove(node);\n",
        "93": "  }\n",
        "94": "\n",
        "95": "  @Override\n",
        "96": "  public void removeEdge(Object edge) {\n",
        "97": "    checkNotNull(edge, \"edge\");\n",
        "98": "    incidentEdges.remove(edge);\n",
        "99": "  }\n",
        "100": "\n",
        "101": "  @Override\n",
        "102": "  public void addPredecessor(N node, E edge) {\n",
        "103": "    addSuccessor(node, edge);\n",
        "104": "  }\n",
        "105": "\n",
        "106": "  @Override\n",
        "107": "  public void addSuccessor(N node, E edge) {\n",
        "108": "    checkNotNull(node, \"node\");\n",
        "109": "    checkNotNull(edge, \"edge\");\n",
        "110": "    adjacentNodes.add(node);\n",
        "111": "    incidentEdges.add(edge);\n",
        "112": "  }\n",
        "113": "\n",
        "114": "  @Override\n",
        "115": "  public int hashCode() {\n",
        "116": "    return Objects.hashCode(adjacentNodes, incidentEdges);\n",
        "117": "  }\n",
        "118": "\n",
        "119": "  @Override\n",
        "120": "  public boolean equals(@Nullable Object object) {\n",
        "121": "    if (object instanceof UndirectedNodeConnections) {\n",
        "122": "      UndirectedNodeConnections<?, ?> that = (UndirectedNodeConnections<?, ?>) object;\n",
        "123": "      return this.adjacentNodes.equals(that.adjacentNodes)\n",
        "124": "          && this.incidentEdges.equals(that.incidentEdges);\n",
        "125": "    }\n",
        "126": "    return false;\n",
        "127": "  }\n",
        "128": "\n",
        "129": "  @Override\n",
        "130": "  public String toString() {\n",
        "131": "    return MoreObjects.toStringHelper(this)\n",
        "132": "        .add(\"adjacentNodes\", adjacentNodes)\n",
        "133": "        .add(\"incidentEdges\", incidentEdges)\n",
        "134": "        .toString();\n",
        "135": "  }\n",
        "136": "}"
    },
    "removed": {}
}