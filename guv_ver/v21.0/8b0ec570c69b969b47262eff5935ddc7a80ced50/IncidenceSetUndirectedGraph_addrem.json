{
    "addition": {
        "27": "import com.google.common.base.Objects;\n",
        "28": "import com.google.common.collect.ImmutableList;\n",
        "81": " * are returning views.\n",
        "90": " *     (does not support parallel edges), then this method is O(min(d_node1, d_node2)).\n",
        "91": " * <li>{@code removeNode(node)}: O(d_node).\n",
        "93": " * where d_node is the degree of node.\n",
        "105": "  private final Map<N, NodeConnections<N, E>> nodeConnections;\n",
        "112": "    this.nodeConnections =\n",
        "121": "    return Collections.unmodifiableSet(nodeConnections.keySet());\n",
        "136": "    return checkedConnections(node).incidentEdges();\n",
        "148": "  public Set<N> adjacentNodes(Object node) {\n",
        "149": "    return checkedConnections(node).adjacentNodes();\n",
        "154": "    Iterator<N> incidentNodesIterator = incidentNodes(edge).iterator();\n",
        "157": "      endpointsIncidentEdges =\n",
        "158": "          Sets.union(incidentEdges(incidentNodesIterator.next()), endpointsIncidentEdges);\n",
        "164": "   * If {@code node1} is equal to {@code node2}, the set of self-loop edges is returned.\n",
        "165": "   * Otherwise, returns the intersection of these two sets, using {@link Sets#intersection}:\n",
        "172": "  public Set<E> edgesConnecting(Object node1, Object node2) {\n",
        "173": "    Set<E> incidentEdgesN1 = incidentEdges(node1);\n",
        "178": "      Set<E> selfLoopEdges = Sets.filter(incidentEdgesN1, Graphs.selfLoopPredicate(this));\n",
        "179": "      return Collections.unmodifiableSet(selfLoopEdges);\n",
        "181": "    Set<E> incidentEdgesN2 = incidentEdges(node2);\n",
        "182": "    return (incidentEdgesN1.size() <= incidentEdgesN2.size())\n",
        "209": "    return incidentEdges(node).size();\n",
        "228": "    if (nodes().contains(node)) {\n",
        "231": "    nodeConnections.put(node, UndirectedNodeConnections.<N, E>of());\n",
        "262": "    } else if (!config.isMultigraph() && nodes().contains(node1) && nodes().contains(node2)) {\n",
        "266": "    addNode(node1);\n",
        "267": "    NodeConnections<N, E> connectionsN1 = nodeConnections.get(node1);\n",
        "268": "    connectionsN1.addSuccessor(node2, edge);\n",
        "269": "    if (!incidentNodes.isSelfLoop()) {\n",
        "270": "      addNode(node2);\n",
        "271": "      NodeConnections<N, E> connectionsN2 = nodeConnections.get(node2);\n",
        "272": "      connectionsN2.addPredecessor(node1, edge);\n",
        "283": "    NodeConnections<N, E> connections = nodeConnections.get(node);\n",
        "284": "    if (connections == null) {\n",
        "287": "    // Since views are returned, we need to copy the nodes and edges that will be removed.\n",
        "288": "    // Thus we avoid modifying the underlying views while iterating over them.\n",
        "289": "    for (E edge : ImmutableList.copyOf(incidentEdges(node))) {\n",
        "292": "    for (N adjacentNode : ImmutableList.copyOf(connections.adjacentNodes())) {\n",
        "293": "      nodeConnections.get(adjacentNode).removeNode(node);\n",
        "294": "    }\n",
        "295": "    nodeConnections.remove(node);\n",
        "309": "      nodeConnections.get(node).removeEdge(edge);\n",
        "317": "    return (object instanceof UndirectedGraph)\n",
        "318": "        && Graphs.equal(this, (UndirectedGraph<?, ?>) object);\n",
        "323": "    // The node set is included in the hash to differentiate between graphs with isolated nodes.\n",
        "324": "    return Objects.hashCode(nodes(), edgeToIncidentNodes);\n",
        "331": "        nodes(),\n",
        "335": "  private NodeConnections<N, E> checkedConnections(Object node) {\n",
        "336": "    checkNotNull(node, \"node\");\n",
        "337": "    NodeConnections<N, E> connections = nodeConnections.get(node);\n",
        "338": "    checkArgument(connections != null, NODE_NOT_IN_GRAPH, node);\n",
        "339": "    return connections;\n"
    },
    "removed": {
        "26": "import static com.google.common.graph.Graphs.oppositeNode;\n",
        "36": "import java.util.LinkedHashSet;\n",
        "81": " * are returning views. It should be noted that for the following methods:\n",
        "82": " * <ul>\n",
        "83": " * <li>Methods that ask for adjacent nodes (e.g. {@code adjacentNodes}).\n",
        "84": " * <li>{@code adjacentEdges}.\n",
        "85": " * <li>{@code edgesConnecting}.\n",
        "86": " * </ul>\n",
        "87": " * the view is calculated lazily and the backing set is <b>not</b> cached, so every time the user\n",
        "88": " * accesses the returned view, the backing set will be reconstructed again. If the user wants\n",
        "89": " * to avoid this, they should either use {@code ImmutableUndirectedGraph}\n",
        "90": " * (if their input is not changing) or make a copy of the return value.\n",
        "99": " * (does not support parallel edges). In such case, this method may call\n",
        "100": " * {@code edgesConnecting(node1, node2)}.\n",
        "101": " * <li>{@code removeNode(node)} O(d), where d is the degree of {@code node}.\n",
        "114": "  private final Map<N, Set<E>> nodeToIncidentEdges;\n",
        "121": "    this.nodeToIncidentEdges =\n",
        "130": "    return Collections.unmodifiableSet(nodeToIncidentEdges.keySet());\n",
        "145": "    checkNotNull(node, \"node\");\n",
        "146": "    Set<E> incidentEdges = nodeToIncidentEdges.get(node);\n",
        "147": "    checkArgument(incidentEdges != null, NODE_NOT_IN_GRAPH, node);\n",
        "148": "    return Collections.unmodifiableSet(incidentEdges);\n",
        "160": "  public Set<N> adjacentNodes(final Object node) {\n",
        "161": "    checkNotNull(node, \"node\");\n",
        "162": "    final Set<E> incidentEdges = nodeToIncidentEdges.get(node);\n",
        "163": "    checkArgument(incidentEdges != null, NODE_NOT_IN_GRAPH, node);\n",
        "164": "    return new SetView<N>() {\n",
        "165": "      @Override\n",
        "166": "      public boolean isEmpty() {\n",
        "167": "        return incidentEdges.isEmpty();\n",
        "168": "      }\n",
        "169": "\n",
        "170": "      @Override\n",
        "171": "      Set<N> elements() {\n",
        "172": "        Set<N> nodes = Sets.newLinkedHashSetWithExpectedSize(incidentEdges.size());\n",
        "173": "        for (E edge : incidentEdges) {\n",
        "174": "          nodes.add(oppositeNode(IncidenceSetUndirectedGraph.this, edge, node));\n",
        "175": "        }\n",
        "176": "        return nodes;\n",
        "177": "      }\n",
        "178": "    };\n",
        "183": "    checkNotNull(edge, \"edge\");\n",
        "184": "    UndirectedIncidentNodes<N> incidentNodes = edgeToIncidentNodes.get(edge);\n",
        "185": "    checkArgument(incidentNodes != null, EDGE_NOT_IN_GRAPH, edge);\n",
        "186": "    Iterator<N> incidentNodesIterator = incidentNodes.iterator();\n",
        "189": "      endpointsIncidentEdges = Sets.union(incidentEdges(incidentNodesIterator.next()),\n",
        "190": "          endpointsIncidentEdges);\n",
        "196": "   * If {@code node1} is equal to {@code node2} and self-loops are allowed (if self-loops\n",
        "197": "   * are not allowed, this would be a trivial case and an empty set is returned),\n",
        "198": "   * a {@code SetView} instance is returned, calculating the set of self-loop edges.\n",
        "199": "   * Otherwise, this method returns the intersection of these two sets,\n",
        "200": "   * using {@code Sets.intersection}:\n",
        "205": "   * The first argument passed to {@code Sets.intersection} is the smaller of\n",
        "206": "   * the two sets.\n",
        "207": "   *\n",
        "208": "   * @see Sets#intersection\n",
        "211": "  public Set<E> edgesConnecting(final Object node1, Object node2) {\n",
        "212": "    checkNotNull(node1, \"node1\");\n",
        "213": "    checkNotNull(node2, \"node2\");\n",
        "214": "    final Set<E> incidentEdgesN1 = nodeToIncidentEdges.get(node1);\n",
        "215": "    checkArgument(incidentEdgesN1 != null, NODE_NOT_IN_GRAPH, node1);\n",
        "220": "      return new SetView<E>() {\n",
        "221": "        @Override\n",
        "222": "        Set<E> elements() {\n",
        "223": "          Set<E> selfLoopEdges = Sets.newLinkedHashSet();\n",
        "224": "          for (E edge : incidentEdgesN1) {\n",
        "225": "            if (edgeToIncidentNodes.get(edge).isSelfLoop()) {\n",
        "226": "              selfLoopEdges.add(edge);\n",
        "227": "            }\n",
        "228": "          }\n",
        "229": "          return selfLoopEdges;\n",
        "230": "        }\n",
        "231": "      };\n",
        "233": "    final Set<E> incidentEdgesN2 = nodeToIncidentEdges.get(node2);\n",
        "234": "    checkArgument(incidentEdgesN2 != null, NODE_NOT_IN_GRAPH, node2);\n",
        "235": "    return incidentEdgesN1.size() <= incidentEdgesN2.size()\n",
        "262": "    checkNotNull(node, \"node\");\n",
        "263": "    Set<E> incidentEdges = nodeToIncidentEdges.get(node);\n",
        "264": "    checkArgument(incidentEdges != null, NODE_NOT_IN_GRAPH, node);\n",
        "265": "    return incidentEdges.size();\n",
        "284": "    if (containsNode(node)) {\n",
        "287": "    // TODO(user): Enable users to specify expected number of neighbors for\n",
        "288": "    // a node.\n",
        "289": "    nodeToIncidentEdges.put(node, new LinkedHashSet<E>());\n",
        "320": "    } else if (!config.isMultigraph() && containsNode(node1) && containsNode(node2)) {\n",
        "324": "    for (N node : incidentNodes) {\n",
        "325": "      addNode(node);\n",
        "326": "      nodeToIncidentEdges.get(node).add(edge);\n",
        "337": "    Set<E> incidentEdges = nodeToIncidentEdges.get(node);\n",
        "338": "    if (incidentEdges == null) {\n",
        "341": "    // Since views are returned, we need to copy the set of incident edges\n",
        "342": "    // to an equivalent collection to avoid removing the edges we are looping on.\n",
        "343": "    for (Object edge : incidentEdges.toArray()) {\n",
        "346": "    nodeToIncidentEdges.remove(node);\n",
        "360": "      nodeToIncidentEdges.get(node).remove(edge);\n",
        "368": "    return (object instanceof UndirectedGraph) && Graphs.equal(this, (UndirectedGraph) object);\n",
        "373": "    // This map encapsulates all of the structural relationships of this graph, so its hash code\n",
        "374": "    // is consistent with the above definition of equals().\n",
        "375": "    return nodeToIncidentEdges.hashCode();\n",
        "382": "        nodeToIncidentEdges.keySet(),\n",
        "386": "  private boolean containsNode(Object node) {\n",
        "387": "    return nodeToIncidentEdges.containsKey(node);\n"
    }
}