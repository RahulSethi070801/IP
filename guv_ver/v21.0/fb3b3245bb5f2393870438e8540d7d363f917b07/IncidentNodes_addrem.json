{
    "addition": {
        "29": " * An immutable set representing the nodes incident to an origin edge in a graph.\n",
        "34": "abstract class IncidentNodes<N> extends AbstractSet<N> {\n",
        "36": "  static <N> IncidentNodes<N> of(N node1, N node2) {\n",
        "44": "  static <N> IncidentNodes<N> of(Set<N> nodes) {\n",
        "52": "        throw new IllegalArgumentException(\"Hypergraphs are not currently supported. An edge in a\"\n",
        "53": "            + \" non-hypergraph cannot be incident to \" + nodes.size() + \" nodes: \" + nodes);\n",
        "61": "  /**\n",
        "62": "   * In the case of a directed graph, returns the source node of the origin edge. In the case of\n",
        "63": "   * an undirected graph, returns an arbitrary (but consistent) endpoint of the origin edge.\n",
        "64": "   */\n",
        "65": "  abstract N node1();\n",
        "67": "  /**\n",
        "68": "   * Returns the node opposite to {@link #node1} along the origin edge. In the case of a directed\n",
        "69": "   * graph, this will always be the target node of the origin edge.\n",
        "70": "   */\n",
        "71": "  abstract N node2();\n",
        "72": "\n",
        "73": "  private static final class OneNode<N> extends IncidentNodes<N> {\n",
        "90": "    @Override\n",
        "91": "    N node1() {\n",
        "92": "      return node;\n",
        "93": "    }\n",
        "94": "\n",
        "95": "    @Override\n",
        "96": "    N node2() {\n",
        "97": "      return node;\n",
        "98": "    }\n",
        "99": "  }\n",
        "101": "  private static final class TwoNodes<N> extends IncidentNodes<N> {\n",
        "120": "\n",
        "121": "    @Override\n",
        "122": "    N node1() {\n",
        "123": "      return node1;\n",
        "124": "    }\n",
        "125": "\n",
        "126": "    @Override\n",
        "127": "    N node2() {\n",
        "128": "      return node2;\n",
        "129": "    }\n"
    },
    "removed": {
        "29": " * An immutable set representing the nodes incident to an undirected edge.\n",
        "34": "abstract class UndirectedIncidentNodes<N> extends AbstractSet<N> {\n",
        "36": "  static <N> UndirectedIncidentNodes<N> of(N node1, N node2) {\n",
        "44": "  static <N> UndirectedIncidentNodes<N> of(Set<N> nodes) {\n",
        "52": "        throw new IllegalArgumentException(\"An edge in an undirected graph cannot be incident to \"\n",
        "53": "            + nodes.size() + \" nodes: \" + nodes);\n",
        "61": "  private static final class OneNode<N> extends UndirectedIncidentNodes<N> {\n",
        "78": "  }\n",
        "80": "  private static final class TwoNodes<N> extends UndirectedIncidentNodes<N> {\n"
    }
}