{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "\n",
        "21": "import com.google.common.base.Objects;\n",
        "22": "import com.google.common.collect.ImmutableSet;\n",
        "23": "\n",
        "24": "import javax.annotation.Nullable;\n",
        "25": "\n",
        "26": "/**\n",
        "27": " * An immutable pair representing the incident nodes (source and target) on a directed edge.\n",
        "28": " *\n",
        "29": " * @author Joshua O'Madadhain\n",
        "30": " * @param <N> Node parameter type\n",
        "31": " */\n",
        "32": "final class DirectedIncidentNodes<N> {\n",
        "33": "\n",
        "34": "  private final N source;\n",
        "35": "  private final N target;\n",
        "36": "\n",
        "37": "  private DirectedIncidentNodes(N source, N target) {\n",
        "38": "    this.source = checkNotNull(source, \"source\");\n",
        "39": "    this.target = checkNotNull(target, \"target\");\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  static <N> DirectedIncidentNodes<N> of(N source, N target) {\n",
        "43": "    return new DirectedIncidentNodes<N>(source, target);\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  N source() {\n",
        "47": "    return source;\n",
        "48": "  }\n",
        "49": "\n",
        "50": "  N target() {\n",
        "51": "    return target;\n",
        "52": "  }\n",
        "53": "\n",
        "54": "  boolean isSelfLoop() {\n",
        "55": "    return source.equals(target);\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  ImmutableSet<N> asImmutableSet() {\n",
        "59": "    return ImmutableSet.of(source, target);\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  @Override\n",
        "63": "  public int hashCode() {\n",
        "64": "    return Objects.hashCode(source, target);\n",
        "65": "  }\n",
        "66": "\n",
        "67": "  @Override\n",
        "68": "  public boolean equals(@Nullable Object object) {\n",
        "69": "    if (object instanceof DirectedIncidentNodes<?>) {\n",
        "70": "      DirectedIncidentNodes<?> that = (DirectedIncidentNodes<?>) object;\n",
        "71": "      return this.source.equals(that.source)\n",
        "72": "          && this.target.equals(that.target);\n",
        "73": "    }\n",
        "74": "    return false;\n",
        "75": "  }\n",
        "76": "\n",
        "77": "  @Override\n",
        "78": "  public String toString() {\n",
        "79": "    return String.format(\"<%s -> %s>\", source, target);\n",
        "80": "  }\n",
        "81": "}\n"
    }
}