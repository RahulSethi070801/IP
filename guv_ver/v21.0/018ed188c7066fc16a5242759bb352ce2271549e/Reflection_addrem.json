{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "61": "   * @throws ExceptionInInitializerError if an exception is thrown during initialization of a class\n",
        "74": "   * Returns a proxy instance that implements {@code interfaceType} by dispatching method\n",
        "75": "   * invocations to {@code handler}. The class loader of {@code interfaceType} will be used to\n",
        "76": "   * define the proxy class. To implement multiple interfaces or specify a class loader, use\n",
        "79": "   * @throws IllegalArgumentException if {@code interfaceType} does not specify the type of a Java\n",
        "80": "   *     interface\n",
        "82": "  public static <T> T newProxy(Class<T> interfaceType, InvocationHandler handler) {\n",
        "85": "    Object object =\n",
        "86": "        Proxy.newProxyInstance(\n",
        "87": "            interfaceType.getClassLoader(), new Class<?>[] {interfaceType}, handler);\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "63": "   * @throws ExceptionInInitializerError if an exception is thrown during\n",
        "64": "   *   initialization of a class\n",
        "77": "   * Returns a proxy instance that implements {@code interfaceType} by\n",
        "78": "   * dispatching method invocations to {@code handler}. The class loader of\n",
        "79": "   * {@code interfaceType} will be used to define the proxy class. To implement\n",
        "80": "   * multiple interfaces or specify a class loader, use\n",
        "83": "   * @throws IllegalArgumentException if {@code interfaceType} does not specify\n",
        "84": "   *     the type of a Java interface\n",
        "86": "  public static <T> T newProxy(\n",
        "87": "      Class<T> interfaceType, InvocationHandler handler) {\n",
        "90": "    Object object = Proxy.newProxyInstance(\n",
        "91": "        interfaceType.getClassLoader(),\n",
        "92": "        new Class<?>[] { interfaceType },\n",
        "93": "        handler);\n"
    }
}