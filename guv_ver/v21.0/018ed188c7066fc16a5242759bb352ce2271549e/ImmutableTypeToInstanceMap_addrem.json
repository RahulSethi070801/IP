{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "25": " * A type-to-instance map backed by an {@link ImmutableMap}. See also\n",
        "26": " * {@link MutableTypeToInstanceMap}.\n",
        "55": "   * <p>After invoking {@link #build()} it is still possible to add more entries and build again.\n",
        "56": "   * Thus each map generated by this builder will be a superset of any map generated before it.\n",
        "62": "    private final ImmutableMap.Builder<TypeToken<? extends B>, B> mapBuilder =\n",
        "63": "        ImmutableMap.builder();\n",
        "68": "     * Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,\n",
        "69": "     * and will cause {@link #build} to fail.\n",
        "78": "     * Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,\n",
        "79": "     * and will cause {@link #build} to fail.\n",
        "88": "     * Returns a new immutable type-to-instance map containing the entries provided to this builder.\n",
        "103": "  @Override\n",
        "104": "  public <T extends B> T getInstance(TypeToken<T> type) {\n",
        "116": "  @Override\n",
        "117": "  public <T extends B> T putInstance(TypeToken<T> type, T value) {\n",
        "121": "  @Override\n",
        "122": "  public <T extends B> T getInstance(Class<T> type) {\n",
        "134": "  @Override\n",
        "135": "  public <T extends B> T putInstance(Class<T> type, T value) {\n",
        "147": "  @Override\n",
        "148": "  public B put(TypeToken<? extends B> key, B value) {\n",
        "159": "  @Override\n",
        "160": "  public void putAll(Map<? extends TypeToken<? extends B>, ? extends B> map) {\n",
        "164": "  @Override\n",
        "165": "  protected Map<TypeToken<? extends B>, B> delegate() {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "27": " * A type-to-instance map backed by an {@link ImmutableMap}. See also {@link\n",
        "28": " * MutableTypeToInstanceMap}.\n",
        "57": "   * <p>After invoking {@link #build()} it is still possible to add more entries\n",
        "58": "   * and build again. Thus each map generated by this builder will be a superset\n",
        "59": "   * of any map generated before it.\n",
        "65": "    private final ImmutableMap.Builder<TypeToken<? extends B>, B> mapBuilder\n",
        "66": "        = ImmutableMap.builder();\n",
        "71": "     * Associates {@code key} with {@code value} in the built map. Duplicate\n",
        "72": "     * keys are not allowed, and will cause {@link #build} to fail.\n",
        "81": "     * Associates {@code key} with {@code value} in the built map. Duplicate\n",
        "82": "     * keys are not allowed, and will cause {@link #build} to fail.\n",
        "91": "     * Returns a new immutable type-to-instance map containing the entries\n",
        "92": "     * provided to this builder.\n",
        "107": "  @Override public <T extends B> T getInstance(TypeToken<T> type) {\n",
        "119": "  @Override public <T extends B> T putInstance(TypeToken<T> type, T value) {\n",
        "123": "  @Override public <T extends B> T getInstance(Class<T> type) {\n",
        "135": "  @Override public <T extends B> T putInstance(Class<T> type, T value) {\n",
        "147": "  @Override public B put(TypeToken<? extends B> key, B value) {\n",
        "158": "  @Override public void putAll(Map<? extends TypeToken<? extends B>, ? extends B> map) {\n",
        "162": "  @Override protected Map<TypeToken<? extends B>, B> delegate() {\n"
    }
}