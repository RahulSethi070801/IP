{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "60": "        @Override\n",
        "61": "        public String apply(Type from) {\n",
        "86": "   * Returns a type where {@code rawType} is parameterized by {@code arguments} and is owned by\n",
        "87": "   * {@code ownerType}.\n",
        "101": "   * Returns a type where {@code rawType} is parameterized by {@code arguments}.\n",
        "104": "    return new ParameterizedTypeImpl(\n",
        "105": "        ClassOwnership.JVM_BEHAVIOR.getOwnerType(rawType), rawType, arguments);\n",
        "129": "    @Nullable\n",
        "130": "    abstract Class<?> getOwnerType(Class<?> rawType);\n",
        "137": "      ParameterizedType parameterizedType = (ParameterizedType) subclass.getGenericSuperclass();\n",
        "148": "   * Returns a new {@link TypeVariable} that belongs to {@code declaration} with {@code name} and\n",
        "149": "   * {@code bounds}.\n",
        "154": "        declaration, name, (bounds.length == 0) ? new Type[] {Object.class} : bounds);\n",
        "158": "  @VisibleForTesting\n",
        "159": "  static WildcardType subtypeOf(Type upperBound) {\n",
        "160": "    return new WildcardTypeImpl(new Type[0], new Type[] {upperBound});\n",
        "164": "  @VisibleForTesting\n",
        "165": "  static WildcardType supertypeOf(Type lowerBound) {\n",
        "166": "    return new WildcardTypeImpl(new Type[] {lowerBound}, new Type[] {Object.class});\n",
        "172": "   * <li>For array type {@code Foo[]}, {@code \"com.mypackage.Foo[]\"} are returned.\n",
        "173": "   * <li>For any class, {@code theClass.getName()} are returned.\n",
        "174": "   * <li>For all other types, {@code type.toString()} are returned.\n",
        "178": "    return (type instanceof Class) ? ((Class<?>) type).getName() : type.toString();\n",
        "181": "  @Nullable\n",
        "182": "  static Type getComponentType(Type type) {\n",
        "186": "      @Override\n",
        "187": "      void visitTypeVariable(TypeVariable<?> t) {\n",
        "190": "\n",
        "191": "      @Override\n",
        "192": "      void visitWildcardType(WildcardType t) {\n",
        "195": "\n",
        "196": "      @Override\n",
        "197": "      void visitGenericArrayType(GenericArrayType t) {\n",
        "200": "\n",
        "201": "      @Override\n",
        "202": "      void visitClass(Class<?> t) {\n",
        "213": "  @Nullable\n",
        "214": "  private static Type subtypeOfComponentType(Type[] bounds) {\n",
        "232": "  private static final class GenericArrayTypeImpl implements GenericArrayType, Serializable {\n",
        "240": "    @Override\n",
        "241": "    public Type getGenericComponentType() {\n",
        "245": "    @Override\n",
        "246": "    public String toString() {\n",
        "250": "    @Override\n",
        "251": "    public int hashCode() {\n",
        "255": "    @Override\n",
        "256": "    public boolean equals(Object obj) {\n",
        "259": "        return Objects.equal(getGenericComponentType(), that.getGenericComponentType());\n",
        "267": "  private static final class ParameterizedTypeImpl implements ParameterizedType, Serializable {\n",
        "273": "    ParameterizedTypeImpl(@Nullable Type ownerType, Class<?> rawType, Type[] typeArguments) {\n",
        "282": "    @Override\n",
        "283": "    public Type[] getActualTypeArguments() {\n",
        "287": "    @Override\n",
        "288": "    public Type getRawType() {\n",
        "292": "    @Override\n",
        "293": "    public Type getOwnerType() {\n",
        "297": "    @Override\n",
        "298": "    public String toString() {\n",
        "303": "      return builder\n",
        "304": "          .append(rawType.getName())\n",
        "307": "          .append('>')\n",
        "308": "          .toString();\n",
        "311": "    @Override\n",
        "312": "    public int hashCode() {\n",
        "314": "          ^ argumentsList.hashCode()\n",
        "315": "          ^ rawType.hashCode();\n",
        "318": "    @Override\n",
        "319": "    public boolean equals(Object other) {\n",
        "326": "          && Arrays.equals(getActualTypeArguments(), that.getActualTypeArguments());\n",
        "337": "    TypeVariable<D> typeVariable =\n",
        "338": "        Reflection.newProxy(\n",
        "339": "            TypeVariable.class, new TypeVariableInvocationHandler(typeVariableImpl));\n",
        "349": "   * Java 8. If we include the {@code getAnnotatedBounds()} method then its return type means it\n",
        "350": "   * won't compile on Java 7, while if we don't include the method then the compiler will complain\n",
        "351": "   * that an abstract method is unimplemented. So instead we use a dynamic proxy to get an\n",
        "352": "   * implementation. If the method being called on the {@code TypeVariable} instance has the same\n",
        "353": "   * name as one of the public methods of {@link TypeVariableImpl}, the proxy calls the same method\n",
        "354": "   * on its instance of {@code TypeVariableImpl}. Otherwise it throws\n",
        "355": "   * {@link UnsupportedOperationException}; this should only apply to {@code getAnnotatedBounds()}.\n",
        "356": "   * This does mean that users on Java 8 who obtain an instance of {@code TypeVariable} from\n",
        "357": "   * {@link TypeResolver#resolveType} will not be able to call {@code getAnnotatedBounds()} on it,\n",
        "358": "   * but that should hopefully be rare.\n",
        "388": "    @Override\n",
        "389": "    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n",
        "433": "    @Override\n",
        "434": "    public String toString() {\n",
        "438": "    @Override\n",
        "439": "    public int hashCode() {\n",
        "443": "    @Override\n",
        "444": "    public boolean equals(Object obj) {\n",
        "482": "    @Override\n",
        "483": "    public Type[] getLowerBounds() {\n",
        "487": "    @Override\n",
        "488": "    public Type[] getUpperBounds() {\n",
        "492": "    @Override\n",
        "493": "    public boolean equals(Object obj) {\n",
        "502": "    @Override\n",
        "503": "    public int hashCode() {\n",
        "507": "    @Override\n",
        "508": "    public String toString() {\n",
        "527": "    return Iterables.filter(bounds, Predicates.not(Predicates.<Type>equalTo(Object.class)));\n",
        "534": "        checkArgument(!cls.isPrimitive(), \"Primitive type '%s' used as %s\", cls, usedAs);\n",
        "550": "      @Override\n",
        "551": "      GenericArrayType newArrayType(Type componentType) {\n",
        "554": "\n",
        "555": "      @Override\n",
        "556": "      Type usedInGenericType(Type type) {\n",
        "568": "      @Override\n",
        "569": "      Type newArrayType(Type componentType) {\n",
        "576": "\n",
        "577": "      @Override\n",
        "578": "      Type usedInGenericType(Type type) {\n",
        "583": "      @Override\n",
        "584": "      Type newArrayType(Type componentType) {\n",
        "587": "\n",
        "588": "      @Override\n",
        "589": "      Type usedInGenericType(Type type) {\n",
        "592": "\n",
        "593": "      @Override\n",
        "594": "      String typeName(Type type) {\n",
        "606": "    };\n",
        "609": "\n",
        "638": "   * Per https://code.google.com/p/guava-libraries/issues/detail?id=1635, In JDK 1.7.0_51-b13,\n",
        "639": "   * TypeVariableImpl.equals() is changed to no longer be equal to custom TypeVariable\n",
        "640": "   * implementations. As a result, we need to make sure our TypeVariable implementation respects\n",
        "641": "   * symmetry. Moreover, we don't want to reconstruct a native type variable <A> using our\n",
        "642": "   * implementation unless some of its bounds have changed in resolution. This avoids creating\n",
        "643": "   * unequal TypeVariable implementation unnecessarily. When the bounds do change, however, it's\n",
        "644": "   * fine for the synthetic TypeVariable to be unequal to any native TypeVariable anyway.\n",
        "648": "        !NativeTypeVariableEquals.class.getTypeParameters()[0]\n",
        "649": "            .equals(newArtificialTypeVariable(NativeTypeVariableEquals.class, \"X\"));\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "62": "        @Override public String apply(Type from) {\n",
        "87": "   * Returns a type where {@code rawType} is parameterized by\n",
        "88": "   * {@code arguments} and is owned by {@code ownerType}.\n",
        "102": "   * Returns a type where {@code rawType} is parameterized by\n",
        "103": "   * {@code arguments}.\n",
        "106": "      return new ParameterizedTypeImpl(\n",
        "107": "          ClassOwnership.JVM_BEHAVIOR.getOwnerType(rawType), rawType, arguments);\n",
        "132": "    @Nullable abstract Class<?> getOwnerType(Class<?> rawType);\n",
        "139": "      ParameterizedType parameterizedType = (ParameterizedType)\n",
        "140": "          subclass.getGenericSuperclass();\n",
        "151": "   * Returns a new {@link TypeVariable} that belongs to {@code declaration} with\n",
        "152": "   * {@code name} and {@code bounds}.\n",
        "157": "        declaration,\n",
        "158": "        name,\n",
        "159": "        (bounds.length == 0)\n",
        "160": "            ? new Type[] { Object.class }\n",
        "161": "            : bounds);\n",
        "165": "  @VisibleForTesting static WildcardType subtypeOf(Type upperBound) {\n",
        "166": "    return new WildcardTypeImpl(new Type[0], new Type[] { upperBound });\n",
        "170": "  @VisibleForTesting static WildcardType supertypeOf(Type lowerBound) {\n",
        "171": "    return new WildcardTypeImpl(new Type[] { lowerBound }, new Type[] { Object.class });\n",
        "177": "   * <li> For array type {@code Foo[]}, {@code \"com.mypackage.Foo[]\"} are\n",
        "178": "   * returned.\n",
        "179": "   * <li> For any class, {@code theClass.getName()} are returned.\n",
        "180": "   * <li> For all other types, {@code type.toString()} are returned.\n",
        "184": "    return (type instanceof Class)\n",
        "185": "        ? ((Class<?>) type).getName()\n",
        "186": "        : type.toString();\n",
        "189": "  @Nullable static Type getComponentType(Type type) {\n",
        "193": "      @Override void visitTypeVariable(TypeVariable<?> t) {\n",
        "196": "      @Override void visitWildcardType(WildcardType t) {\n",
        "199": "      @Override void visitGenericArrayType(GenericArrayType t) {\n",
        "202": "      @Override void visitClass(Class<?> t) {\n",
        "213": "  @Nullable private static Type subtypeOfComponentType(Type[] bounds) {\n",
        "231": "  private static final class GenericArrayTypeImpl\n",
        "232": "      implements GenericArrayType, Serializable {\n",
        "240": "    @Override public Type getGenericComponentType() {\n",
        "244": "    @Override public String toString() {\n",
        "248": "    @Override public int hashCode() {\n",
        "252": "    @Override public boolean equals(Object obj) {\n",
        "255": "        return Objects.equal(\n",
        "256": "            getGenericComponentType(), that.getGenericComponentType());\n",
        "264": "  private static final class ParameterizedTypeImpl\n",
        "265": "      implements ParameterizedType, Serializable {\n",
        "271": "    ParameterizedTypeImpl(\n",
        "272": "        @Nullable Type ownerType, Class<?> rawType, Type[] typeArguments) {\n",
        "281": "    @Override public Type[] getActualTypeArguments() {\n",
        "285": "    @Override public Type getRawType() {\n",
        "289": "    @Override public Type getOwnerType() {\n",
        "293": "    @Override public String toString() {\n",
        "298": "      builder.append(rawType.getName())\n",
        "301": "          .append('>');\n",
        "302": "      return builder.toString();\n",
        "305": "    @Override public int hashCode() {\n",
        "307": "          ^ argumentsList.hashCode() ^ rawType.hashCode();\n",
        "310": "    @Override public boolean equals(Object other) {\n",
        "317": "          && Arrays.equals(\n",
        "318": "              getActualTypeArguments(), that.getActualTypeArguments());\n",
        "329": "    TypeVariable<D> typeVariable = Reflection.newProxy(\n",
        "330": "        TypeVariable.class, new TypeVariableInvocationHandler(typeVariableImpl));\n",
        "340": "   * Java 8. If we include the {@code getAnnotatedBounds()} method then its return type means\n",
        "341": "   * it won't compile on Java 7, while if we don't include the method then the compiler will\n",
        "342": "   * complain that an abstract method is unimplemented. So instead we use a dynamic proxy to\n",
        "343": "   * get an implementation. If the method being called on the {@code TypeVariable} instance has\n",
        "344": "   * the same name as one of the public methods of {@link TypeVariableImpl}, the proxy calls\n",
        "345": "   * the same method on its instance of {@code TypeVariableImpl}. Otherwise it throws {@link\n",
        "346": "   * UnsupportedOperationException}; this should only apply to {@code getAnnotatedBounds()}. This\n",
        "347": "   * does mean that users on Java 8 who obtain an instance of {@code TypeVariable} from {@link\n",
        "348": "   * TypeResolver#resolveType} will not be able to call {@code getAnnotatedBounds()} on it, but that\n",
        "349": "   * should hopefully be rare.\n",
        "378": "    @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n",
        "422": "    @Override public String toString() {\n",
        "426": "    @Override public int hashCode() {\n",
        "430": "    @Override public boolean equals(Object obj) {\n",
        "468": "    @Override public Type[] getLowerBounds() {\n",
        "472": "    @Override public Type[] getUpperBounds() {\n",
        "476": "    @Override public boolean equals(Object obj) {\n",
        "485": "    @Override public int hashCode() {\n",
        "489": "    @Override public String toString() {\n",
        "508": "    return Iterables.filter(\n",
        "509": "        bounds, Predicates.not(Predicates.<Type>equalTo(Object.class)));\n",
        "516": "        checkArgument(!cls.isPrimitive(),\n",
        "517": "            \"Primitive type '%s' used as %s\", cls, usedAs);\n",
        "532": "\n",
        "534": "      @Override GenericArrayType newArrayType(Type componentType) {\n",
        "537": "      @Override Type usedInGenericType(Type type) {\n",
        "549": "      @Override Type newArrayType(Type componentType) {\n",
        "556": "      @Override Type usedInGenericType(Type type) {\n",
        "561": "      @Override Type newArrayType(Type componentType) {\n",
        "564": "      @Override Type usedInGenericType(Type type) {\n",
        "567": "      @Override String typeName(Type type) {\n",
        "579": "    }\n",
        "580": "    ;\n",
        "609": "   * Per https://code.google.com/p/guava-libraries/issues/detail?id=1635,\n",
        "610": "   * In JDK 1.7.0_51-b13, TypeVariableImpl.equals() is changed to no longer be equal to custom\n",
        "611": "   * TypeVariable implementations. As a result, we need to make sure our TypeVariable implementation\n",
        "612": "   * respects symmetry.\n",
        "613": "   * Moreover, we don't want to reconstruct a native type variable <A> using our implementation\n",
        "614": "   * unless some of its bounds have changed in resolution. This avoids creating unequal TypeVariable\n",
        "615": "   * implementation unnecessarily. When the bounds do change, however, it's fine for the synthetic\n",
        "616": "   * TypeVariable to be unequal to any native TypeVariable anyway.\n",
        "620": "        !NativeTypeVariableEquals.class.getTypeParameters()[0].equals(\n",
        "621": "            newArtificialTypeVariable(NativeTypeVariableEquals.class, \"X\"));\n"
    }
}