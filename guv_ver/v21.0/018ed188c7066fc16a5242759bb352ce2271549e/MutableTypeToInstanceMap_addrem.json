{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "35": " * A mutable type-to-instance map. See also {@link ImmutableTypeToInstanceMap}.\n",
        "80": "  @Override\n",
        "81": "  public B put(TypeToken<? extends B> key, B value) {\n",
        "92": "  @Override\n",
        "93": "  public void putAll(Map<? extends TypeToken<? extends B>, ? extends B> map) {\n",
        "97": "  @Override\n",
        "98": "  public Set<Entry<TypeToken<? extends B>, B>> entrySet() {\n",
        "102": "  @Override\n",
        "103": "  protected Map<TypeToken<? extends B>, B> delegate() {\n",
        "125": "        @Override\n",
        "126": "        protected Set<Entry<K, V>> delegate() {\n",
        "129": "\n",
        "130": "        @Override\n",
        "131": "        public Iterator<Entry<K, V>> iterator() {\n",
        "134": "\n",
        "135": "        @Override\n",
        "136": "        public Object[] toArray() {\n",
        "139": "\n",
        "140": "        @Override\n",
        "141": "        public <T> T[] toArray(T[] array) {\n",
        "148": "      return Iterators.transform(\n",
        "149": "          entries,\n",
        "150": "          new Function<Entry<K, V>, Entry<K, V>>() {\n",
        "151": "            @Override\n",
        "152": "            public Entry<K, V> apply(Entry<K, V> entry) {\n",
        "153": "              return new UnmodifiableEntry<K, V>(entry);\n",
        "154": "            }\n",
        "155": "          });\n",
        "162": "    @Override\n",
        "163": "    protected Entry<K, V> delegate() {\n",
        "167": "    @Override\n",
        "168": "    public V setValue(V value) {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "37": " * A mutable type-to-instance map.\n",
        "38": " * See also {@link ImmutableTypeToInstanceMap}.\n",
        "83": "  @Override public B put(TypeToken<? extends B> key, B value) {\n",
        "94": "  @Override public void putAll(Map<? extends TypeToken<? extends B>, ? extends B> map) {\n",
        "98": "  @Override public Set<Entry<TypeToken<? extends B>, B>> entrySet() {\n",
        "102": "  @Override protected Map<TypeToken<? extends B>, B> delegate() {\n",
        "124": "        @Override protected Set<Entry<K, V>> delegate() {\n",
        "127": "        @Override public Iterator<Entry<K, V>> iterator() {\n",
        "130": "        @Override public Object[] toArray() {\n",
        "133": "        @Override public <T> T[] toArray(T[] array) {\n",
        "140": "      return Iterators.transform(entries, new Function<Entry<K, V>, Entry<K, V>>() {\n",
        "141": "        @Override public Entry<K, V> apply(Entry<K, V> entry) {\n",
        "142": "          return new UnmodifiableEntry<K, V>(entry);\n",
        "143": "        }\n",
        "144": "      });\n",
        "151": "    @Override protected Entry<K, V> delegate() {\n",
        "155": "    @Override public V setValue(V value) {\n"
    }
}