{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "67": "  private static final Predicate<ClassInfo> IS_TOP_LEVEL =\n",
        "68": "      new Predicate<ClassInfo>() {\n",
        "69": "        @Override\n",
        "70": "        public boolean apply(ClassInfo info) {\n",
        "71": "          return info.className.indexOf('$') == -1;\n",
        "72": "        }\n",
        "73": "      };\n",
        "95": "   *     failed.\n",
        "173": "    ResourceInfo(String resourceName, ClassLoader loader) {\n",
        "222": "    @Override\n",
        "223": "    public int hashCode() {\n",
        "227": "    @Override\n",
        "228": "    public boolean equals(Object obj) {\n",
        "231": "        return resourceName.equals(that.resourceName) && loader == that.loader;\n",
        "237": "    @Override\n",
        "238": "    public String toString() {\n",
        "304": "     *     For example, {@link NoClassDefFoundError}.\n",
        "315": "    @Override\n",
        "316": "    public String toString() {\n",
        "339": "    protected abstract void scanDirectory(ClassLoader loader, File directory) throws IOException;\n",
        "344": "    @VisibleForTesting\n",
        "345": "    final void scan(File file, ClassLoader classloader) throws IOException {\n",
        "378": "        } catch (IOException ignored) {\n",
        "379": "        }\n",
        "390": "    @VisibleForTesting\n",
        "391": "    static ImmutableSet<File> getClassPathFromManifest(File jarFile, @Nullable Manifest manifest) {\n",
        "396": "      String classpathAttribute =\n",
        "397": "          manifest.getMainAttributes().getValue(Attributes.Name.CLASS_PATH.toString());\n",
        "416": "    @VisibleForTesting\n",
        "417": "    static ImmutableMap<File, ClassLoader> getClassPathEntries(ClassLoader classloader) {\n",
        "444": "    @VisibleForTesting\n",
        "445": "    static URL getClassPathEntry(File jarFile, String path) throws MalformedURLException {\n",
        "450": "  @VisibleForTesting\n",
        "451": "  static final class DefaultScanner extends Scanner {\n",
        "463": "    @Override\n",
        "464": "    protected void scanJarFile(ClassLoader classloader, JarFile file) {\n",
        "475": "    @Override\n",
        "476": "    protected void scanDirectory(ClassLoader classloader, File directory) throws IOException {\n",
        "480": "    private void scanDirectory(File directory, ClassLoader classloader, String packagePrefix)\n",
        "481": "        throws IOException {\n",
        "502": "  @VisibleForTesting\n",
        "503": "  static String getClassName(String filename) {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "69": "  private static final Predicate<ClassInfo> IS_TOP_LEVEL = new Predicate<ClassInfo>() {\n",
        "70": "    @Override public boolean apply(ClassInfo info) {\n",
        "71": "      return info.className.indexOf('$') == -1;\n",
        "72": "    }\n",
        "73": "  };\n",
        "95": "   *         failed.\n",
        "173": "    ResourceInfo(String resourceName,  ClassLoader loader) {\n",
        "222": "    @Override public int hashCode() {\n",
        "226": "    @Override public boolean equals(Object obj) {\n",
        "229": "        return resourceName.equals(that.resourceName)\n",
        "230": "            && loader == that.loader;\n",
        "236": "    @Override public String toString() {\n",
        "302": "     *         For example, {@link NoClassDefFoundError}.\n",
        "313": "    @Override public String toString() {\n",
        "336": "    protected abstract void scanDirectory(ClassLoader loader, File directory)\n",
        "337": "        throws IOException;\n",
        "342": "    @VisibleForTesting final void scan(File file, ClassLoader classloader) throws IOException {\n",
        "375": "        } catch (IOException ignored) {}\n",
        "386": "    @VisibleForTesting static ImmutableSet<File> getClassPathFromManifest(\n",
        "387": "        File jarFile, @Nullable Manifest manifest) {\n",
        "392": "      String classpathAttribute = manifest.getMainAttributes()\n",
        "393": "          .getValue(Attributes.Name.CLASS_PATH.toString());\n",
        "412": "    @VisibleForTesting static ImmutableMap<File, ClassLoader> getClassPathEntries(\n",
        "413": "        ClassLoader classloader) {\n",
        "440": "    @VisibleForTesting static URL getClassPathEntry(File jarFile, String path)\n",
        "441": "        throws MalformedURLException {\n",
        "446": "  @VisibleForTesting static final class DefaultScanner extends Scanner {\n",
        "458": "    @Override protected void scanJarFile(ClassLoader classloader, JarFile file) {\n",
        "469": "    @Override protected void scanDirectory(ClassLoader classloader, File directory)\n",
        "470": "        throws IOException {\n",
        "474": "    private void scanDirectory(\n",
        "475": "        File directory, ClassLoader classloader, String packagePrefix) throws IOException {\n",
        "496": "  @VisibleForTesting static String getClassName(String filename) {\n"
    }
}