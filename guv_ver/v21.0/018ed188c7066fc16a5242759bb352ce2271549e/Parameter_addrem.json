{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "43": "      Invokable<?, ?> declaration, int position, TypeToken<?> type, Annotation[] annotations) {\n",
        "60": "  @Override\n",
        "61": "  public boolean isAnnotationPresent(Class<? extends Annotation> annotationType) {\n",
        "77": "  @Override\n",
        "78": "  public Annotation[] getAnnotations() {\n",
        "94": "  @Override\n",
        "95": "  public Annotation[] getDeclaredAnnotations() {\n",
        "106": "    return FluentIterable.from(annotations).filter(annotationType).first().orNull();\n",
        "113": "  public <A extends Annotation> A[] getDeclaredAnnotationsByType(Class<A> annotationType) {\n",
        "114": "    return FluentIterable.from(annotations).filter(annotationType).toArray(annotationType);\n",
        "117": "  @Override\n",
        "118": "  public boolean equals(@Nullable Object obj) {\n",
        "126": "  @Override\n",
        "127": "  public int hashCode() {\n",
        "131": "  @Override\n",
        "132": "  public String toString() {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "45": "      Invokable<?, ?> declaration,\n",
        "46": "      int position,\n",
        "47": "      TypeToken<?> type,\n",
        "48": "      Annotation[] annotations) {\n",
        "65": "  @Override public boolean isAnnotationPresent(Class<? extends Annotation> annotationType) {\n",
        "81": "  @Override public Annotation[] getAnnotations() {\n",
        "97": "  @Override public Annotation[] getDeclaredAnnotations() {\n",
        "108": "    return FluentIterable.from(annotations)\n",
        "109": "        .filter(annotationType)\n",
        "110": "        .first()\n",
        "111": "        .orNull();\n",
        "118": "  public <A extends Annotation> A[]\n",
        "119": "      getDeclaredAnnotationsByType(Class<A> annotationType) {\n",
        "120": "    return FluentIterable.from(annotations)\n",
        "121": "        .filter(annotationType)\n",
        "122": "        .toArray(annotationType);\n",
        "125": "  @Override public boolean equals(@Nullable Object obj) {\n",
        "133": "  @Override public int hashCode() {\n",
        "137": "  @Override public String toString() {\n"
    }
}