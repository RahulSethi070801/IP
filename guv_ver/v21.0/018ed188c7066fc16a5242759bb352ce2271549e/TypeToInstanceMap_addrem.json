{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "25": " * A map, each entry of which maps a {@link TypeToken} to an instance of that type. In addition to\n",
        "26": " * implementing {@code Map}, the additional type-safe operations {@link #putInstance} and\n",
        "27": " * {@link #getInstance} are available.\n",
        "29": " * <p>Generally, implementations don't support {@link #put} and {@link #putAll} because there is no\n",
        "30": " * way to check an object at runtime to be an instance of a {@link TypeToken}. Instead, caller\n",
        "31": " * should use the type safe {@link #putInstance}.\n",
        "33": " * <p>Also, if caller suppresses unchecked warnings and passes in an {@code Iterable<String>} for\n",
        "34": " * type {@code Iterable<Integer>}, the map won't be able to detect and throw type error.\n",
        "36": " * <p>Like any other {@code Map<Class, Object>}, this map may contain entries for primitive types,\n",
        "37": " * and a primitive type and its corresponding wrapper type may map to different values.\n",
        "39": " * @param <B> the common supertype that all entries must share; often this is simply {@link Object}\n",
        "45": "public interface TypeToInstanceMap<B> extends Map<TypeToken<? extends B>, B> {\n",
        "48": "   * Returns the value the specified class is mapped to, or {@code null} if no entry for this class\n",
        "49": "   * is present. This will only return a value that was bound to this specific class, not a value\n",
        "50": "   * that may have been bound to a subtype.\n",
        "59": "   * Maps the specified class to the specified value. Does <i>not</i> associate this value with any\n",
        "60": "   * of the class's supertypes.\n",
        "65": "   * @return the value previously associated with this class (possibly {@code null}), or\n",
        "66": "   *     {@code null} if there was no previous entry.\n",
        "73": "   * Returns the value the specified type is mapped to, or {@code null} if no entry for this type is\n",
        "74": "   * present. This will only return a value that was bound to this specific type, not a value that\n",
        "75": "   * may have been bound to a subtype.\n",
        "81": "   * Maps the specified type to the specified value. Does <i>not</i> associate this value with any\n",
        "82": "   * of the type's supertypes.\n",
        "84": "   * @return the value previously associated with this type (possibly {@code null}), or {@code null}\n",
        "85": "   *     if there was no previous entry.\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "27": " * A map, each entry of which maps a {@link TypeToken} to an instance of that type.\n",
        "28": " * In addition to implementing {@code Map}, the additional type-safe operations\n",
        "29": " * {@link #putInstance} and {@link #getInstance} are available.\n",
        "31": " * <p>Generally, implementations don't support {@link #put} and {@link #putAll}\n",
        "32": " * because there is no way to check an object at runtime to be an instance of a\n",
        "33": " * {@link TypeToken}. Instead, caller should use the type safe {@link #putInstance}.\n",
        "35": " * <p>Also, if caller suppresses unchecked warnings and passes in an {@code Iterable<String>}\n",
        "36": " * for type {@code Iterable<Integer>}, the map won't be able to detect and throw type error.\n",
        "38": " * <p>Like any other {@code Map<Class, Object>}, this map may contain entries\n",
        "39": " * for primitive types, and a primitive type and its corresponding wrapper type\n",
        "40": " * may map to different values.\n",
        "42": " * @param <B> the common supertype that all entries must share; often this is\n",
        "43": " *     simply {@link Object}\n",
        "49": "public interface TypeToInstanceMap<B> extends Map<TypeToken<? extends B>, B>  {\n",
        "52": "   * Returns the value the specified class is mapped to, or {@code null} if no\n",
        "53": "   * entry for this class is present. This will only return a value that was\n",
        "54": "   * bound to this specific class, not a value that may have been bound to a\n",
        "55": "   * subtype.\n",
        "64": "   * Maps the specified class to the specified value. Does <i>not</i> associate\n",
        "65": "   * this value with any of the class's supertypes.\n",
        "70": "   * @return the value previously associated with this class (possibly {@code null}),\n",
        "71": "   *         or {@code null} if there was no previous entry.\n",
        "78": "   * Returns the value the specified type is mapped to, or {@code null} if no\n",
        "79": "   * entry for this type is present. This will only return a value that was\n",
        "80": "   * bound to this specific type, not a value that may have been bound to a subtype.\n",
        "86": "   * Maps the specified type to the specified value. Does <i>not</i> associate\n",
        "87": "   * this value with any of the type's supertypes.\n",
        "89": "   * @return the value previously associated with this type (possibly {@code null}),\n",
        "90": "   *         or {@code null} if there was no previous entry.\n"
    }
}