{
    "addition": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "38": " * Wrapper around either a {@link Method} or a {@link Constructor}. Convenience API is provided to\n",
        "39": " * make common reflective operation easier to deal with, such as {@link #isPublic},\n",
        "40": " * {@link #getParameters} etc.\n",
        "42": " * <p>In addition to convenience methods, {@link TypeToken#method} and {@link TypeToken#constructor}\n",
        "43": " * will resolve the type parameters of the method or constructor in the context of the owner type,\n",
        "44": " * which may be a subtype of the declaring class. For example:\n",
        "54": " *     constructor.\n",
        "85": "   * Invokes with {@code receiver} as 'this' and {@code args} passed to the underlying method and\n",
        "86": "   * returns the return value; or calls the underlying constructor with {@code args} and returns the\n",
        "87": "   * constructed instance.\n",
        "89": "   * @throws IllegalAccessException if this {@code Constructor} object enforces Java language access\n",
        "90": "   *     control and the underlying method or constructor is inaccessible.\n",
        "91": "   * @throws IllegalArgumentException if the number of actual and formal parameters differ; if an\n",
        "92": "   *     unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a\n",
        "93": "   *     parameter value cannot be converted to the corresponding formal parameter type by a method\n",
        "94": "   *     invocation conversion.\n",
        "122": "      builder.add(new Parameter(this, i, TypeToken.of(parameterTypes[i]), annotations[i]));\n",
        "131": "      // getGenericExceptionTypes() will never return a type that's not exception\n",
        "133": "      TypeToken<? extends Throwable> exceptionType =\n",
        "134": "          (TypeToken<? extends Throwable>) TypeToken.of(type);\n",
        "162": "  @Override\n",
        "163": "  public final Class<? super T> getDeclaringClass() {\n",
        "170": "  @Override\n",
        "171": "  public TypeToken<T> getOwnerType() {\n",
        "196": "    @Override\n",
        "197": "    final Object invokeInternal(@Nullable Object receiver, Object[] args)\n",
        "202": "    @Override\n",
        "203": "    Type getGenericReturnType() {\n",
        "207": "    @Override\n",
        "208": "    Type[] getGenericParameterTypes() {\n",
        "212": "    @Override\n",
        "213": "    Type[] getGenericExceptionTypes() {\n",
        "217": "    @Override\n",
        "218": "    final Annotation[][] getParameterAnnotations() {\n",
        "222": "    @Override\n",
        "223": "    public final TypeVariable<?>[] getTypeParameters() {\n",
        "227": "    @Override\n",
        "228": "    public final boolean isOverridable() {\n",
        "229": "      return !(isFinal()\n",
        "230": "          || isPrivate()\n",
        "231": "          || isStatic()\n",
        "235": "    @Override\n",
        "236": "    public final boolean isVarArgs() {\n",
        "250": "    @Override\n",
        "251": "    final Object invokeInternal(@Nullable Object receiver, Object[] args)\n",
        "261": "    @Override\n",
        "262": "    Type getGenericReturnType() {\n",
        "272": "    @Override\n",
        "273": "    Type[] getGenericParameterTypes() {\n",
        "286": "    @Override\n",
        "287": "    Type[] getGenericExceptionTypes() {\n",
        "291": "    @Override\n",
        "292": "    final Annotation[][] getParameterAnnotations() {\n",
        "302": "     * the other. From the declaration syntax, the class type parameter appears first, but the call\n",
        "303": "     * syntax may show up in opposite order such as {@code new <A>Foo<B>()}.\n",
        "305": "    @Override\n",
        "306": "    public final TypeVariable<?>[] getTypeParameters() {\n",
        "319": "    @Override\n",
        "320": "    public final boolean isOverridable() {\n",
        "324": "    @Override\n",
        "325": "    public final boolean isVarArgs() {\n"
    },
    "removed": {
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "40": " * Wrapper around either a {@link Method} or a {@link Constructor}.\n",
        "41": " * Convenience API is provided to make common reflective operation easier to deal with,\n",
        "42": " * such as {@link #isPublic}, {@link #getParameters} etc.\n",
        "44": " * <p>In addition to convenience methods, {@link TypeToken#method} and {@link\n",
        "45": " * TypeToken#constructor} will resolve the type parameters of the method or constructor in the\n",
        "46": " * context of the owner type, which may be a subtype of the declaring class. For example:\n",
        "56": " *            constructor.\n",
        "87": "   * Invokes with {@code receiver} as 'this' and {@code args} passed to the underlying method\n",
        "88": "   * and returns the return value; or calls the underlying constructor with {@code args} and returns\n",
        "89": "   * the constructed instance.\n",
        "91": "   * @throws IllegalAccessException if this {@code Constructor} object enforces Java language\n",
        "92": "   *         access control and the underlying method or constructor is inaccessible.\n",
        "93": "   * @throws IllegalArgumentException if the number of actual and formal parameters differ;\n",
        "94": "   *         if an unwrapping conversion for primitive arguments fails; or if, after possible\n",
        "95": "   *         unwrapping, a parameter value cannot be converted to the corresponding formal\n",
        "96": "   *         parameter type by a method invocation conversion.\n",
        "124": "      builder.add(new Parameter(\n",
        "125": "          this, i, TypeToken.of(parameterTypes[i]), annotations[i]));\n",
        "134": "       // getGenericExceptionTypes() will never return a type that's not exception\n",
        "136": "      TypeToken<? extends Throwable> exceptionType = (TypeToken<? extends Throwable>)\n",
        "137": "          TypeToken.of(type);\n",
        "165": "  @Override public final Class<? super T> getDeclaringClass() {\n",
        "172": "  @Override public TypeToken<T> getOwnerType() {\n",
        "197": "    @Override final Object invokeInternal(@Nullable Object receiver, Object[] args)\n",
        "202": "    @Override Type getGenericReturnType() {\n",
        "206": "    @Override Type[] getGenericParameterTypes() {\n",
        "210": "    @Override Type[] getGenericExceptionTypes() {\n",
        "214": "    @Override final Annotation[][] getParameterAnnotations() {\n",
        "218": "    @Override public final TypeVariable<?>[] getTypeParameters() {\n",
        "222": "    @Override public final boolean isOverridable() {\n",
        "223": "      return  !(isFinal() || isPrivate() || isStatic()\n",
        "227": "    @Override public final boolean isVarArgs() {\n",
        "241": "    @Override final Object invokeInternal(@Nullable Object receiver, Object[] args)\n",
        "251": "    @Override Type getGenericReturnType() {\n",
        "261": "    @Override Type[] getGenericParameterTypes() {\n",
        "274": "    @Override Type[] getGenericExceptionTypes() {\n",
        "278": "    @Override final Annotation[][] getParameterAnnotations() {\n",
        "288": "     * the other. From the declaration syntax, the class type parameter appears first, but the\n",
        "289": "     * call syntax may show up in opposite order such as {@code new <A>Foo<B>()}.\n",
        "291": "    @Override public final TypeVariable<?>[] getTypeParameters() {\n",
        "304": "    @Override public final boolean isOverridable() {\n",
        "308": "    @Override public final boolean isVarArgs() {\n"
    }
}