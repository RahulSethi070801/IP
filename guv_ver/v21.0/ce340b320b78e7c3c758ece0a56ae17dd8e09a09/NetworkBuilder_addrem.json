{
    "addition": {
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "32": " * <li>orders {@code nodes()} and {@code edges()} in the order in which the elements were added\n",
        "45": "  ElementOrder<? super N> nodeOrder = ElementOrder.insertion();\n",
        "46": "  ElementOrder<? super E> edgeOrder = ElementOrder.insertion();\n",
        "82": "    checkNotNull(graph);\n",
        "83": "    return new NetworkBuilder<Object, Object>(graph.isDirected())\n",
        "85": "        .allowsSelfLoops(graph.allowsSelfLoops())\n",
        "86": "        .orderNodes(graph.nodeOrder())\n",
        "87": "        .orderEdges(graph.edgeOrder())\n",
        "88": "        .cast();\n",
        "134": "  /**\n",
        "135": "   * Specifies the order of iteration for the elements of {@link Network#nodes()}.\n",
        "136": "   */\n",
        "137": "  public <N1 extends N> NetworkBuilder<N1, E> orderNodes(ElementOrder<N1> nodeOrder) {\n",
        "138": "    checkNotNull(nodeOrder);\n",
        "139": "    NetworkBuilder<N1, E> newBuilder = cast();\n",
        "140": "    newBuilder.nodeOrder = nodeOrder;\n",
        "141": "    return newBuilder;\n",
        "142": "  }\n",
        "143": "\n",
        "144": "  /**\n",
        "145": "   * Specifies the order of iteration for the elements of {@link Network#edges()}.\n",
        "146": "   */\n",
        "147": "  public <E1 extends E> NetworkBuilder<N, E1> orderEdges(ElementOrder<E1> edgeOrder) {\n",
        "148": "    checkNotNull(edgeOrder);\n",
        "149": "    NetworkBuilder<N, E1> newBuilder = cast();\n",
        "150": "    newBuilder.edgeOrder = edgeOrder;\n",
        "151": "    return newBuilder;\n",
        "152": "  }\n",
        "153": "\n",
        "160": "\n",
        "161": "  @SuppressWarnings(\"unchecked\")\n",
        "162": "  private <N1 extends N, E1 extends E> NetworkBuilder<N1, E1> cast() {\n",
        "163": "    return (NetworkBuilder<N1, E1>) this;\n",
        "164": "  }\n"
    },
    "removed": {
        "24": "import java.util.Comparator;\n",
        "25": "\n",
        "39": "// TODO(b/24620028): Add support for sorted nodes/edges. Use the same pattern as CacheBuilder\n",
        "40": "// to narrow the generic <N, E> type when Comparators are provided.\n",
        "47": "  Comparator<N> nodeComparator = null;\n",
        "48": "  Comparator<E> edgeComparator = null;\n",
        "84": "    return new NetworkBuilder<N, E>(graph.isDirected())\n",
        "86": "        .allowsSelfLoops(graph.allowsSelfLoops());\n"
    }
}