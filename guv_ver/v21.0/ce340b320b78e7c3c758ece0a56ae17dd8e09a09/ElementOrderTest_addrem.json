{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.graph.ElementOrder.insertion;\n",
        "20": "import static com.google.common.graph.ElementOrder.unordered;\n",
        "21": "import static com.google.common.truth.Truth.assertThat;\n",
        "22": "\n",
        "23": "import com.google.common.collect.Ordering;\n",
        "24": "\n",
        "25": "import org.junit.Test;\n",
        "26": "import org.junit.runner.RunWith;\n",
        "27": "import org.junit.runners.JUnit4;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Tests for ordering the elements of graphs.\n",
        "31": " */\n",
        "32": "@RunWith(JUnit4.class)\n",
        "33": "public final class ElementOrderTest {\n",
        "34": "  // Node order tests\n",
        "35": "\n",
        "36": "  @Test\n",
        "37": "  public void orderNodes_none() throws Exception {\n",
        "38": "    MutableGraph<Integer> graph = GraphBuilder\n",
        "39": "        .directed()\n",
        "40": "        .orderNodes(unordered())\n",
        "41": "        .build();\n",
        "42": "\n",
        "43": "    assertThat(graph.nodeOrder()).isEqualTo(unordered());\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  @Test\n",
        "47": "  public void orderNodes_insertion() throws Exception {\n",
        "48": "    MutableGraph<Integer> graph = GraphBuilder\n",
        "49": "        .directed()\n",
        "50": "        .orderNodes(insertion())\n",
        "51": "        .build();\n",
        "52": "\n",
        "53": "    addNodes(graph);\n",
        "54": "\n",
        "55": "    assertThat(graph.nodeOrder()).isEqualTo(insertion());\n",
        "56": "    assertThat(graph.nodes()).containsExactly(3, 1, 4).inOrder();\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  // The default ordering is INSERTION unless otherwise specified.\n",
        "60": "  @Test\n",
        "61": "  public void orderNodes_default() throws Exception {\n",
        "62": "    MutableGraph<Integer> graph = GraphBuilder\n",
        "63": "        .directed()\n",
        "64": "        .build();\n",
        "65": "\n",
        "66": "    addNodes(graph);\n",
        "67": "\n",
        "68": "    assertThat(graph.nodeOrder()).isEqualTo(insertion());\n",
        "69": "    assertThat(graph.nodes()).containsExactly(3, 1, 4).inOrder();\n",
        "70": "  }\n",
        "71": "\n",
        "72": "  @Test\n",
        "73": "  public void orderNodes_natural() throws Exception {\n",
        "74": "    MutableGraph<Integer> graph = GraphBuilder\n",
        "75": "        .directed()\n",
        "76": "        .orderNodes(ElementOrder.<Integer>natural())\n",
        "77": "        .build();\n",
        "78": "\n",
        "79": "    addNodes(graph);\n",
        "80": "\n",
        "81": "    assertThat(graph.nodeOrder()).isEqualTo(ElementOrder.sorted(Ordering.<Integer>natural()));\n",
        "82": "    assertThat(graph.nodes()).containsExactly(1, 3, 4).inOrder();\n",
        "83": "  }\n",
        "84": "\n",
        "85": "  @Test\n",
        "86": "  public void orderNodes_sorted() throws Exception {\n",
        "87": "    MutableGraph<Integer> graph = GraphBuilder\n",
        "88": "        .directed()\n",
        "89": "        .orderNodes(ElementOrder.sorted(Ordering.<Integer>natural().reverse()))\n",
        "90": "        .build();\n",
        "91": "\n",
        "92": "    addNodes(graph);\n",
        "93": "\n",
        "94": "    assertThat(graph.nodeOrder()).isEqualTo(\n",
        "95": "        ElementOrder.sorted(Ordering.<Integer>natural().reverse()));\n",
        "96": "    assertThat(graph.nodes()).containsExactly(4, 3, 1).inOrder();\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  // Edge order tests\n",
        "100": "\n",
        "101": "  @Test\n",
        "102": "  public void orderEdges_none() throws Exception {\n",
        "103": "    MutableNetwork<Integer, String> graph = NetworkBuilder\n",
        "104": "        .directed()\n",
        "105": "        .orderEdges(unordered())\n",
        "106": "        .build();\n",
        "107": "\n",
        "108": "    assertThat(graph.edgeOrder()).isEqualTo(unordered());\n",
        "109": "    assertThat(graph.nodeOrder()).isEqualTo(insertion()); // default\n",
        "110": "  }\n",
        "111": "\n",
        "112": "  @Test\n",
        "113": "  public void orderEdges_insertion() throws Exception {\n",
        "114": "    MutableNetwork<Integer, String> graph = NetworkBuilder\n",
        "115": "        .directed()\n",
        "116": "        .orderEdges(insertion())\n",
        "117": "        .build();\n",
        "118": "\n",
        "119": "    addEdges(graph);\n",
        "120": "\n",
        "121": "    assertThat(graph.edgeOrder()).isEqualTo(ElementOrder.insertion());\n",
        "122": "    assertThat(graph.edges()).containsExactly(\"i\", \"e\", \"p\").inOrder();\n",
        "123": "    assertThat(graph.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default\n",
        "124": "  }\n",
        "125": "\n",
        "126": "  // The default ordering is INSERTION unless otherwise specified.\n",
        "127": "  @Test\n",
        "128": "  public void orderEdges_default() throws Exception {\n",
        "129": "    MutableNetwork<Integer, String> graph = NetworkBuilder\n",
        "130": "        .directed()\n",
        "131": "        .build();\n",
        "132": "\n",
        "133": "    addEdges(graph);\n",
        "134": "\n",
        "135": "    assertThat(graph.edgeOrder()).isEqualTo(ElementOrder.insertion());\n",
        "136": "    assertThat(graph.edges()).containsExactly(\"i\", \"e\", \"p\").inOrder();\n",
        "137": "    assertThat(graph.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default\n",
        "138": "  }\n",
        "139": "\n",
        "140": "  @Test\n",
        "141": "  public void orderEdges_natural() throws Exception {\n",
        "142": "    MutableNetwork<Integer, String> graph = NetworkBuilder\n",
        "143": "        .directed()\n",
        "144": "        .orderEdges(ElementOrder.<String>natural())\n",
        "145": "        .build();\n",
        "146": "\n",
        "147": "    addEdges(graph);\n",
        "148": "\n",
        "149": "    assertThat(graph.edgeOrder()).isEqualTo(ElementOrder.sorted(Ordering.<String>natural()));\n",
        "150": "    assertThat(graph.edges()).containsExactly(\"e\", \"i\", \"p\").inOrder();\n",
        "151": "    assertThat(graph.nodeOrder()).isEqualTo(insertion()); // default\n",
        "152": "  }\n",
        "153": "\n",
        "154": "  @Test\n",
        "155": "  public void orderEdges_sorted() throws Exception {\n",
        "156": "    MutableNetwork<Integer, String> graph = NetworkBuilder\n",
        "157": "        .directed()\n",
        "158": "        .orderEdges(ElementOrder.sorted(Ordering.<String>natural().reverse()))\n",
        "159": "        .build();\n",
        "160": "\n",
        "161": "    addEdges(graph);\n",
        "162": "\n",
        "163": "    assertThat(graph.edgeOrder()).isEqualTo(\n",
        "164": "        ElementOrder.sorted(Ordering.<String>natural().reverse()));\n",
        "165": "    assertThat(graph.edges()).containsExactly(\"p\", \"i\", \"e\").inOrder();\n",
        "166": "    assertThat(graph.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default\n",
        "167": "  }\n",
        "168": "\n",
        "169": "  // Combined node and edge order tests\n",
        "170": "  @Test\n",
        "171": "  public void orderNodesUnorderedandEdgesSorted() throws Exception {\n",
        "172": "    MutableNetwork<Integer, String> graph = NetworkBuilder\n",
        "173": "        .directed()\n",
        "174": "        .orderNodes(unordered())\n",
        "175": "        .orderEdges(ElementOrder.sorted(Ordering.<String>natural().reverse()))\n",
        "176": "        .build();\n",
        "177": "\n",
        "178": "    addEdges(graph);\n",
        "179": "\n",
        "180": "    assertThat(graph.edgeOrder()).isEqualTo(\n",
        "181": "        ElementOrder.sorted(Ordering.<String>natural().reverse()));\n",
        "182": "    assertThat(graph.edges()).containsExactly(\"p\", \"i\", \"e\").inOrder();\n",
        "183": "    assertThat(graph.nodeOrder()).isEqualTo(unordered());\n",
        "184": "    assertThat(graph.nodes()).containsExactly(4, 1, 3);\n",
        "185": "  }\n",
        "186": "\n",
        "187": "  private static void addNodes(MutableGraph<Integer> graph) {\n",
        "188": "    graph.addNode(3);\n",
        "189": "    graph.addNode(1);\n",
        "190": "    graph.addNode(4);\n",
        "191": "  }\n",
        "192": "\n",
        "193": "  private static void addEdges(MutableNetwork<Integer, String> graph) {\n",
        "194": "    graph.addEdge(\"i\", 3, 1);\n",
        "195": "    graph.addEdge(\"e\", 1, 4);\n",
        "196": "    graph.addEdge(\"p\", 4, 3);\n",
        "197": "  }\n",
        "198": "}\n"
    },
    "removed": {}
}