{
    "addition": {
        "70": "  private final ElementOrder<? super N> nodeOrder;\n",
        "71": "  private final ElementOrder<? super E> edgeOrder;\n",
        "82": "        AbstractConfigurableNetwork.<N, E>getNodeMapForBuilder(builder),\n",
        "83": "        AbstractConfigurableNetwork.<N, E>getEdgeMapForBuilder(builder));\n",
        "84": "  }\n",
        "85": "\n",
        "86": "  private static <S, T> Map<S, NodeConnections<S, T>> getNodeMapForBuilder(\n",
        "87": "      NetworkBuilder<? super S, ? super T> builder) {\n",
        "88": "    int expectedNodeSize = builder.expectedNodeCount.or(DEFAULT_MAP_SIZE);\n",
        "89": "    switch (builder.nodeOrder.type()) {\n",
        "90": "        case UNORDERED:\n",
        "91": "          return Maps.newHashMapWithExpectedSize(expectedNodeSize);\n",
        "92": "        case INSERTION:\n",
        "93": "          return Maps.newLinkedHashMapWithExpectedSize(expectedNodeSize);\n",
        "94": "        case SORTED:\n",
        "95": "          return Maps.newTreeMap(builder.nodeOrder.comparator());\n",
        "96": "        default:\n",
        "97": "          throw new IllegalArgumentException(\"Unrecognized node ElementOrder type\");\n",
        "98": "    }\n",
        "99": "  }\n",
        "100": "\n",
        "101": "  private static <S, T> Map<T, S> getEdgeMapForBuilder(\n",
        "102": "      NetworkBuilder<? super S, ? super T> builder) {\n",
        "103": "    int expectedEdgeSize = builder.expectedEdgeCount.or(DEFAULT_MAP_SIZE);\n",
        "104": "    switch (builder.edgeOrder.type()) {\n",
        "105": "        case UNORDERED:\n",
        "106": "          return Maps.newHashMapWithExpectedSize(expectedEdgeSize);\n",
        "107": "        case INSERTION:\n",
        "108": "          return Maps.newLinkedHashMapWithExpectedSize(expectedEdgeSize);\n",
        "109": "        case SORTED:\n",
        "110": "          return Maps.newTreeMap(builder.edgeOrder.comparator());\n",
        "111": "        default:\n",
        "112": "          throw new IllegalArgumentException(\"Unrecognized edge ElementOrder type\");\n",
        "113": "    }\n",
        "126": "    this.nodeOrder = builder.nodeOrder;\n",
        "127": "    this.edgeOrder = builder.edgeOrder;\n",
        "132": "  /**\n",
        "133": "   * {@inheritDoc}\n",
        "134": "   *\n",
        "135": "   * <p>The order of iteration for this set is determined by the {@code ElementOrder<N>} provided\n",
        "136": "   * to the {@code GraphBuilder} that was used to create this instance.\n",
        "137": "   * By default, that order is the order in which the nodes were added to the graph.\n",
        "138": "   */\n",
        "144": "  /**\n",
        "145": "   * {@inheritDoc}\n",
        "146": "   *\n",
        "147": "   * <p>The order of iteration for this set is determined by the {@code ElementOrder<E>} provided\n",
        "148": "   * to the {@code GraphBuilder} that was used to create this instance.\n",
        "149": "   * By default, that order is the order in which the edges were added to the graph.\n",
        "150": "   */\n",
        "171": "  @Override\n",
        "172": "  public ElementOrder<? super N> nodeOrder() {\n",
        "173": "    return nodeOrder;\n",
        "174": "  }\n",
        "175": "\n",
        "176": "  @Override\n",
        "177": "  public ElementOrder<? super E> edgeOrder() {\n",
        "178": "    return edgeOrder;\n",
        "179": "  }\n",
        "180": "\n"
    },
    "removed": {
        "63": "// TODO(b/24620028): Enable this class to support sorted nodes/edges.\n",
        "81": "        Maps.<N, NodeConnections<N, E>>newLinkedHashMapWithExpectedSize(\n",
        "82": "            builder.expectedNodeCount.or(DEFAULT_MAP_SIZE)),\n",
        "83": "        Maps.<E, N>newLinkedHashMapWithExpectedSize(\n",
        "84": "            builder.expectedEdgeCount.or(DEFAULT_MAP_SIZE)));\n"
    }
}