{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.base.MoreObjects;\n",
        "20": "import com.google.common.base.MoreObjects.ToStringHelper;\n",
        "21": "import com.google.common.base.Objects;\n",
        "22": "import com.google.common.base.Preconditions;\n",
        "23": "import com.google.common.collect.Ordering;\n",
        "24": "\n",
        "25": "import java.util.Comparator;\n",
        "26": "\n",
        "27": "import javax.annotation.Nullable;\n",
        "28": "\n",
        "29": "/**\n",
        "30": " * Used to represent the order of elements in a data structure that supports different options\n",
        "31": " * for iteration order guarantees.\n",
        "32": " *\n",
        "33": " * <p>Example usage:\n",
        "34": " * <pre><code>\n",
        "35": " *   MutableGraph<Integer> graph\n",
        "36": " *       = GraphBuilder.directed().orderNodes(ElementOrder.natural()).build();\n",
        "37": " * </code></pre>\n",
        "38": " */\n",
        "39": "public class ElementOrder<T> {\n",
        "40": "  private final Type type;\n",
        "41": "  @Nullable private final Comparator<T> comparator;\n",
        "42": "\n",
        "43": "  /**\n",
        "44": "   * The type of ordering that this object specifies.\n",
        "45": "   * <ul>\n",
        "46": "   * <li>UNORDERED: no order is guaranteed.\n",
        "47": "   * <li>INSERTION: insertion ordering is guaranteed.\n",
        "48": "   * <li>SORTED: ordering according to a supplied comparator is guaranteed.\n",
        "49": "   * </ul>\n",
        "50": "   */\n",
        "51": "  public enum Type {\n",
        "52": "    UNORDERED,\n",
        "53": "    INSERTION,\n",
        "54": "    SORTED\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  private ElementOrder(Type type, @Nullable Comparator<T> comparator) {\n",
        "58": "    this.type = Preconditions.checkNotNull(type);\n",
        "59": "    Preconditions.checkArgument((type == Type.SORTED) == (comparator != null),\n",
        "60": "        \"if the type is SORTED, the comparator should be non-null; otherwise, it should be null\");\n",
        "61": "    this.comparator = comparator;\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  /**\n",
        "65": "   * Returns the type of ordering used.\n",
        "66": "   */\n",
        "67": "  public Type type() {\n",
        "68": "    return type;\n",
        "69": "  }\n",
        "70": "\n",
        "71": "  /**\n",
        "72": "   * Returns the {@link Comparator} used.\n",
        "73": "   *\n",
        "74": "   * @throws IllegalStateException if no comparator is defined\n",
        "75": "   */\n",
        "76": "  public Comparator<T> comparator() {\n",
        "77": "    if (comparator != null) {\n",
        "78": "      return comparator;\n",
        "79": "    }\n",
        "80": "    throw new IllegalStateException(\"This ordering does not define a comparator\");\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  @Override\n",
        "84": "  public boolean equals(Object o) {\n",
        "85": "    if (!(o instanceof ElementOrder)) {\n",
        "86": "      return false;\n",
        "87": "    }\n",
        "88": "\n",
        "89": "    ElementOrder<?> other = (ElementOrder<?>) o;\n",
        "90": "    return other.type == this.type\n",
        "91": "        && Objects.equal(other.comparator, this.comparator);\n",
        "92": "  }\n",
        "93": "\n",
        "94": "  @Override\n",
        "95": "  public int hashCode() {\n",
        "96": "    return Objects.hashCode(this.type, this.comparator);\n",
        "97": "  }\n",
        "98": "\n",
        "99": "  @Override\n",
        "100": "  public String toString() {\n",
        "101": "    ToStringHelper helper = MoreObjects.toStringHelper(this)\n",
        "102": "        .add(\"type\", this.type);\n",
        "103": "    if (this.comparator != null) {\n",
        "104": "      helper.add(\"comparator\", this.comparator);\n",
        "105": "    }\n",
        "106": "    return helper.toString();\n",
        "107": "  }\n",
        "108": "\n",
        "109": "  /**\n",
        "110": "   * Returns an instance which specifies that no ordering is guaranteed.\n",
        "111": "   */\n",
        "112": "  public static final <S> ElementOrder<S> unordered() {\n",
        "113": "    return new ElementOrder<S>(Type.UNORDERED, null);\n",
        "114": "  }\n",
        "115": "\n",
        "116": "  /**\n",
        "117": "   * Returns an instance which specifies that insertion ordering is guaranteed.\n",
        "118": "   */\n",
        "119": "  public static final <S> ElementOrder<S> insertion() {\n",
        "120": "    return new ElementOrder<S>(Type.INSERTION, null);\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  /**\n",
        "124": "   * Returns an instance which specifies that the natural ordering of the elements is guaranteed.\n",
        "125": "   */\n",
        "126": "  public static final <S extends Comparable<S>> ElementOrder<S> natural() {\n",
        "127": "    return new ElementOrder<S>(Type.SORTED, Ordering.<S>natural());\n",
        "128": "  }\n",
        "129": "\n",
        "130": "  /**\n",
        "131": "   * Returns an instance which specifies that the ordering of the elements is guaranteed to be\n",
        "132": "   * determined by {@code comparator}.\n",
        "133": "   */\n",
        "134": "  public static final <S extends Comparable<S>> ElementOrder<S> sorted(Comparator<S> comparator) {\n",
        "135": "    return new ElementOrder<S>(Type.SORTED, comparator);\n",
        "136": "  }\n",
        "137": "}\n"
    },
    "removed": {}
}