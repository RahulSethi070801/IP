{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import java.util.ConcurrentModificationException;\n",
        "21": "import java.util.Map;\n",
        "22": "import java.util.Set;\n",
        "23": "\n",
        "24": "/**\n",
        "25": " * An interface for <a href=\"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)\">graph</a>\n",
        "26": " * data structures. A graph is composed of a set of nodes (sometimes called vertices) and a set of\n",
        "27": " * edges connecting pairs of nodes. Graphs are useful for modeling many kinds of relations. If the\n",
        "28": " * relation to be modeled is symmetric (such as \"distance between cities\"), that can be represented\n",
        "29": " * with an undirected graph, where an edge that connects node A to node B also connects node B to\n",
        "30": " * node A. If the relation to be modeled is asymmetric (such as \"employees managed\"), that can be\n",
        "31": " * represented with a directed graph, where edges are strictly one-way.\n",
        "32": " *\n",
        "33": " * <p>There are three main interfaces provided to represent graphs. In order of increasing\n",
        "34": " * complexity they are: {@link BasicGraph}, {@link Graph}, and {@link Network}. You should generally\n",
        "35": " * prefer the simplest interface that satisfies your use case.\n",
        "36": " *\n",
        "37": " * <p>To choose the right interface, answer these questions:\n",
        "38": " *\n",
        "39": " * <ol>\n",
        "40": " * <li>Do you have data (objects) that you wish to associate with edges?\n",
        "41": " *     <p>Yes: Go to question 2. No: Use {@link BasicGraph}.\n",
        "42": " * <li>Are the objects you wish to associate with edges unique within the scope of a graph? That is,\n",
        "43": " *     no two objects would be {@link Object#equals(Object) equal} to each other. A common example\n",
        "44": " *     where this would <i>not</i> be the case is with weighted graphs.\n",
        "45": " *     <p>Yes: Go to question 3. No: Use {@link Graph}.\n",
        "46": " * <li>Do you need to be able to query the graph for an edge associated with a particular object?\n",
        "47": " *     For example, do you need to query what nodes an edge associated with a particular object\n",
        "48": " *     connects, or whether an edge associated with that object exists in the graph?\n",
        "49": " *     <p>Yes: Use {@link Network}. No: Go to question 4.\n",
        "50": " * <li>Do you need explicit support for parallel edges? For example, do you need to remove one edge\n",
        "51": " *     connecting a pair of nodes while leaving other edges connecting those same nodes intact?\n",
        "52": " *     <p>Yes: Use {@link Network}. No: Use {@link Graph}.\n",
        "53": " * </ol>\n",
        "54": " *\n",
        "55": " * <p>In all three interfaces, nodes have all the same requirements as keys in a {@link Map}.\n",
        "56": " *\n",
        "57": " * <p>All mutation methods live on the subinterface {@link MutableBasicGraph}. If you do not need to\n",
        "58": " * mutate a graph (e.g. if you write a method than runs a read-only algorithm on the graph), you\n",
        "59": " * should prefer the non-mutating {@link BasicGraph} interface.\n",
        "60": " *\n",
        "61": " * <p>The {@link BasicGraph} interface extends {@link Graph}. When storing references, it is\n",
        "62": " * preferable to store them as {@link BasicGraph}s so you do not have to worry about the value type.\n",
        "63": " * However, when writing methods that operate on graphs but do not care about edge values, it is\n",
        "64": " * preferable to accept {@code Graph<N, ?>} to allow the widest variety of valid input.\n",
        "65": " *\n",
        "66": " * <p>We provide an efficient implementation of this interface via {@link BasicGraphBuilder}. When\n",
        "67": " * using the implementation provided, all {@link Set}-returning methods provide live, unmodifiable\n",
        "68": " * views of the graph. In other words, you cannot add an element to the {@link Set}, but if an\n",
        "69": " * element is added to the {@link BasicGraph} that would affect the result of that set, it will be\n",
        "70": " * updated automatically. This also means that you cannot modify a {@link BasicGraph} in a way that\n",
        "71": " * would affect a {#link Set} while iterating over that set. For example, you cannot remove the\n",
        "72": " * nodes from a {@link BasicGraph} while iterating over {@link #nodes} (unless you first make a copy\n",
        "73": " * of the nodes), just as you could not remove the keys from a {@link Map} while iterating over its\n",
        "74": " * {@link Map#keySet()}. This will either throw a {@link ConcurrentModificationException} or risk\n",
        "75": " * undefined behavior.\n",
        "76": " *\n",
        "77": " * <p>Example of use:\n",
        "78": " *\n",
        "79": " * <pre><code>\n",
        "80": " * MutableBasicGraph<String> managementGraph = BasicGraphBuilder.directed().build();\n",
        "81": " * managementGraph.putEdge(\"Big Boss\", \"Middle Manager Jack\");\n",
        "82": " * managementGraph.putEdge(\"Big Boss\", \"Middle Manager Jill\");\n",
        "83": " * managementGraph.putEdge(\"Middle Manager Jack\", \"Joe\");\n",
        "84": " * managementGraph.putEdge(\"Middle Manager Jack\", \"Schmoe\");\n",
        "85": " * managementGraph.putEdge(\"Middle Manager Jill\", \"Jane\");\n",
        "86": " * managementGraph.putEdge(\"Middle Manager Jill\", \"Doe\");\n",
        "87": " * for (String employee : managementGraph.nodes()) {\n",
        "88": " *   Set<String> reports = managementGraph.successors(employee);\n",
        "89": " *   if (!reports.isEmpty()) {\n",
        "90": " *     System.out.format(\"%s has the following direct reports: %s%n\", employee, reports);\n",
        "91": " *   }\n",
        "92": " * }\n",
        "93": " * </code></pre>\n",
        "94": " *\n",
        "95": " * @author James Sexton\n",
        "96": " * @author Joshua O'Madadhain\n",
        "97": " * @param <N> Node parameter type\n",
        "98": " * @since 20.0\n",
        "99": " */\n",
        "100": "@Beta\n",
        "101": "public interface BasicGraph<N> extends Graph<N, BasicGraph.Presence> {\n",
        "102": "\n",
        "103": "  /**\n",
        "104": "   * A placeholder for the (generally ignored) value type of a {@link BasicGraph}. Users shouldn't\n",
        "105": "   * have to reference this enum unless they are implementing the {@link BasicGraph} interface.\n",
        "106": "   */\n",
        "107": "  public enum Presence {\n",
        "108": "    EDGE_EXISTS\n",
        "109": "  }\n",
        "110": "}\n"
    }
}