{
    "addition": {
        "26": " * A builder for constructing instances of {@link MutableValueGraph} with user-defined properties.\n",
        "38": " * MutableGraph<String, Double> graph = GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "39": " * graph.putEdgeValue(\"San Francisco\", \"San Francisco\", 0.0);\n",
        "40": " * graph.putEdgeValue(\"San Jose\", \"San Jose\", 0.0);\n",
        "41": " * graph.putEdgeValue(\"San Francisco\", \"San Jose\", 48.4);\n",
        "49": "public final class ValueGraphBuilder<N, V> extends AbstractGraphBuilder<N> {\n",
        "52": "  private ValueGraphBuilder(boolean directed) {\n",
        "56": "  /** Returns a {@link ValueGraphBuilder} for building directed graphs. */\n",
        "57": "  public static ValueGraphBuilder<Object, Object> directed() {\n",
        "58": "    return new ValueGraphBuilder<Object, Object>(true);\n",
        "61": "  /** Returns a {@link ValueGraphBuilder} for building undirected graphs. */\n",
        "62": "  public static ValueGraphBuilder<Object, Object> undirected() {\n",
        "63": "    return new ValueGraphBuilder<Object, Object>(false);\n",
        "67": "   * Returns a {@link ValueGraphBuilder} initialized with all properties queryable from {@code\n",
        "74": "  public static <N> ValueGraphBuilder<N, Object> from(Graph<N> graph) {\n",
        "76": "    return new ValueGraphBuilder<N, Object>(graph.isDirected())\n",
        "86": "  public ValueGraphBuilder<N, V> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "96": "  public ValueGraphBuilder<N, V> expectedNodeCount(int expectedNodeCount) {\n",
        "106": "  public <N1 extends N> ValueGraphBuilder<N1, V> nodeOrder(ElementOrder<N1> nodeOrder) {\n",
        "108": "    ValueGraphBuilder<N1, V> newBuilder = cast();\n",
        "114": "   * Returns an empty {@link MutableValueGraph} with the properties of this {@link\n",
        "115": "   * ValueGraphBuilder}.\n",
        "117": "  public <N1 extends N, V1 extends V> MutableValueGraph<N1, V1> build() {\n",
        "118": "    return new ConfigurableMutableValueGraph<N1, V1>(this);\n",
        "122": "  private <N1 extends N, V1 extends V> ValueGraphBuilder<N1, V1> cast() {\n",
        "123": "    return (ValueGraphBuilder<N1, V1>) this;\n"
    },
    "removed": {
        "26": " * A builder for constructing instances of {@link MutableBasicGraph} with user-defined properties.\n",
        "38": " * MutableBasicGraph<String> graph = BasicGraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "39": " * graph.putEdge(\"bread\", \"bread\");\n",
        "40": " * graph.putEdge(\"chocolate\", \"peanut butter\");\n",
        "41": " * graph.putEdge(\"peanut butter\", \"jelly\");\n",
        "49": "public final class BasicGraphBuilder<N> extends AbstractGraphBuilder<N> {\n",
        "52": "  private BasicGraphBuilder(boolean directed) {\n",
        "56": "  /** Returns a {@link BasicGraphBuilder} for building directed graphs. */\n",
        "57": "  public static BasicGraphBuilder<Object> directed() {\n",
        "58": "    return new BasicGraphBuilder<Object>(true);\n",
        "61": "  /** Returns a {@link BasicGraphBuilder} for building undirected graphs. */\n",
        "62": "  public static BasicGraphBuilder<Object> undirected() {\n",
        "63": "    return new BasicGraphBuilder<Object>(false);\n",
        "67": "   * Returns a {@link BasicGraphBuilder} initialized with all properties queryable from {@code\n",
        "74": "  public static <N> BasicGraphBuilder<N> from(Graph<N, ?> graph) {\n",
        "76": "    return new BasicGraphBuilder<Object>(graph.isDirected())\n",
        "86": "  public BasicGraphBuilder<N> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "96": "  public BasicGraphBuilder<N> expectedNodeCount(int expectedNodeCount) {\n",
        "106": "  public <N1 extends N> BasicGraphBuilder<N1> nodeOrder(ElementOrder<N1> nodeOrder) {\n",
        "108": "    BasicGraphBuilder<N1> newBuilder = cast();\n",
        "114": "   * Returns an empty {@link MutableBasicGraph} with the properties of this {@link\n",
        "115": "   * BasicGraphBuilder}.\n",
        "117": "  public <N1 extends N> MutableBasicGraph<N1> build() {\n",
        "118": "    return new ConfigurableMutableBasicGraph<N1>(this);\n",
        "122": "  private <N1 extends N> BasicGraphBuilder<N1> cast() {\n",
        "123": "    return (BasicGraphBuilder<N1>) this;\n"
    }
}