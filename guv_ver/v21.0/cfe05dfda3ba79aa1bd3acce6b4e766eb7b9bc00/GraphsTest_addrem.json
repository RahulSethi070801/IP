{
    "addition": {
        "70": "    MutableGraph<Integer> directedGraph =\n",
        "71": "        GraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "77": "    MutableGraph<Integer> expectedClosure =\n",
        "78": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "92": "    MutableGraph<Integer> undirectedGraph =\n",
        "93": "        GraphBuilder.undirected().allowsSelfLoops(false).build();\n",
        "99": "    MutableGraph<Integer> expectedClosure =\n",
        "100": "        GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "114": "    MutableGraph<Integer> directedGraph =\n",
        "115": "        GraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "120": "    MutableGraph<Integer> expectedClosure =\n",
        "121": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "138": "    MutableGraph<Integer> undirectedGraph =\n",
        "139": "        GraphBuilder.undirected().allowsSelfLoops(false).build();\n",
        "144": "    MutableGraph<Integer> expectedClosure =\n",
        "145": "        GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "162": "    MutableGraph<Integer> directedGraph =\n",
        "163": "        GraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "169": "    MutableGraph<Integer> expectedClosure =\n",
        "170": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "193": "    MutableGraph<Integer> undirectedGraph =\n",
        "194": "        GraphBuilder.undirected().allowsSelfLoops(false).build();\n",
        "200": "    MutableGraph<Integer> expectedClosure =\n",
        "201": "        GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "217": "  public void transpose_undirectedGraph() {\n",
        "218": "    MutableGraph<Integer> undirectedGraph = GraphBuilder.undirected().build();\n",
        "221": "    assertThat(transpose(undirectedGraph)).isSameAs(undirectedGraph);\n",
        "225": "  public void transpose_directedGraph() {\n",
        "226": "    MutableGraph<Integer> directedGraph =\n",
        "227": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "233": "    MutableGraph<Integer> expectedTranspose =\n",
        "234": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "240": "    Graph<Integer> transpose = Graphs.transpose(directedGraph);\n",
        "241": "    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n",
        "242": "    assertThat(transpose(transpose)).isSameAs(directedGraph);\n",
        "253": "  public void transpose_undirectedValueGraph() {\n",
        "254": "    MutableValueGraph<Integer, String> undirectedGraph = ValueGraphBuilder.undirected().build();\n",
        "257": "    assertThat(transpose(undirectedGraph)).isSameAs(undirectedGraph);\n",
        "261": "  public void transpose_directedValueGraph() {\n",
        "262": "    MutableValueGraph<Integer, String> directedGraph =\n",
        "263": "        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "269": "    MutableValueGraph<Integer, String> expectedTranspose =\n",
        "270": "        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "276": "    ValueGraph<Integer, String> transpose = Graphs.transpose(directedGraph);\n",
        "277": "    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n",
        "278": "    assertThat(transpose(transpose)).isSameAs(directedGraph);\n",
        "293": "    assertThat(transpose(undirectedGraph)).isSameAs(undirectedGraph);\n",
        "313": "    assertThat(Graphs.equivalent(transpose, expectedTranspose)).isTrue();\n",
        "314": "    assertThat(transpose(transpose)).isSameAs(directedGraph);\n",
        "325": "  public void inducedSubgraph_graph() {\n",
        "328": "    MutableGraph<Integer> directedGraph =\n",
        "329": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "336": "    MutableGraph<Integer> expectedSubgraph =\n",
        "337": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "342": "    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n",
        "343": "        .isTrue();\n",
        "347": "  public void inducedSubgraph_valueGraph() {\n",
        "350": "    MutableValueGraph<Integer, String> directedGraph =\n",
        "351": "        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "358": "    MutableValueGraph<Integer, String> expectedSubgraph =\n",
        "359": "        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "364": "    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n",
        "365": "        .isTrue();\n",
        "386": "    assertThat(Graphs.equivalent(inducedSubgraph(directedGraph, nodeSubset), expectedSubgraph))\n",
        "387": "        .isTrue();\n",
        "404": "      copyOf((Graph<?>) null);\n",
        "411": "  public void copyOf_directedGraph() {\n",
        "412": "    Graph<Integer> directedGraph = buildDirectedGraph();\n",
        "414": "    Graph<Integer> copy = copyOf(directedGraph);\n",
        "415": "    assertThat(Graphs.equivalent(copy, directedGraph)).isTrue();\n",
        "419": "  public void copyOf_undirectedGraph() {\n",
        "420": "    Graph<Integer> undirectedGraph = buildUndirectedGraph();\n",
        "422": "    Graph<Integer> copy = copyOf(undirectedGraph);\n",
        "423": "    assertThat(Graphs.equivalent(copy, undirectedGraph)).isTrue();\n",
        "427": "  public void copyOf_directedValueGraph() {\n",
        "428": "    ValueGraph<Integer, String> directedGraph = buildDirectedValueGraph();\n",
        "430": "    ValueGraph<Integer, String> copy = copyOf(directedGraph);\n",
        "431": "    assertThat(Graphs.equivalent(copy, directedGraph)).isTrue();\n",
        "435": "  public void copyOf_undirectedValueGraph() {\n",
        "436": "    ValueGraph<Integer, String> undirectedGraph = buildUndirectedValueGraph();\n",
        "438": "    ValueGraph<Integer, String> copy = copyOf(undirectedGraph);\n",
        "439": "    assertThat(Graphs.equivalent(copy, undirectedGraph)).isTrue();\n",
        "447": "    assertThat(Graphs.equivalent(copy, directedGraph)).isTrue();\n",
        "455": "    assertThat(Graphs.equivalent(copy, undirectedGraph)).isTrue();\n",
        "599": "  @Test\n",
        "600": "  public void defaultImplementations_notValueGraph() {\n",
        "601": "    assertThat(buildDirectedGraph()).isNotInstanceOf(ValueGraph.class);\n",
        "602": "    assertThat(buildUndirectedGraph()).isNotInstanceOf(ValueGraph.class);\n",
        "603": "    assertThat(ImmutableGraph.copyOf(buildDirectedGraph())).isNotInstanceOf(ValueGraph.class);\n",
        "604": "    assertThat(ImmutableGraph.copyOf(buildUndirectedGraph())).isNotInstanceOf(ValueGraph.class);\n",
        "605": "  }\n",
        "606": "\n",
        "607": "  private static <N> void checkTransitiveClosure(Graph<N> originalGraph, Graph<N> expectedClosure) {\n",
        "611": "    assertThat(Graphs.equivalent(transitiveClosure(originalGraph), expectedClosure)).isTrue();\n",
        "614": "  private static MutableGraph<Integer> buildDirectedGraph() {\n",
        "615": "    MutableGraph<Integer> directedGraph =\n",
        "616": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "624": "  private static MutableGraph<Integer> buildUndirectedGraph() {\n",
        "625": "    MutableGraph<Integer> undirectedGraph =\n",
        "626": "        GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "634": "  private static MutableValueGraph<Integer, String> buildDirectedValueGraph() {\n",
        "635": "    MutableValueGraph<Integer, String> directedGraph =\n",
        "636": "        ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "644": "  private static MutableValueGraph<Integer, String> buildUndirectedValueGraph() {\n",
        "645": "    MutableValueGraph<Integer, String> undirectedGraph =\n",
        "646": "        ValueGraphBuilder.undirected().allowsSelfLoops(true).build();\n"
    },
    "removed": {
        "19": "import static com.google.common.graph.Graphs.asBasicGraph;\n",
        "29": "import com.google.common.graph.BasicGraph.Presence;\n",
        "51": "  private static final String E23 = \"2-3\";\n",
        "73": "    MutableBasicGraph<Integer> directedGraph =\n",
        "74": "        BasicGraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "80": "    MutableBasicGraph<Integer> expectedClosure =\n",
        "81": "        BasicGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "95": "    MutableBasicGraph<Integer> undirectedGraph =\n",
        "96": "        BasicGraphBuilder.undirected().allowsSelfLoops(false).build();\n",
        "102": "    MutableBasicGraph<Integer> expectedClosure =\n",
        "103": "        BasicGraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "117": "    MutableBasicGraph<Integer> directedGraph =\n",
        "118": "        BasicGraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "123": "    MutableBasicGraph<Integer> expectedClosure =\n",
        "124": "        BasicGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "141": "    MutableBasicGraph<Integer> undirectedGraph =\n",
        "142": "        BasicGraphBuilder.undirected().allowsSelfLoops(false).build();\n",
        "147": "    MutableBasicGraph<Integer> expectedClosure =\n",
        "148": "        BasicGraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "165": "    MutableBasicGraph<Integer> directedGraph =\n",
        "166": "        BasicGraphBuilder.directed().allowsSelfLoops(false).build();\n",
        "172": "    MutableBasicGraph<Integer> expectedClosure =\n",
        "173": "        BasicGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "196": "    MutableBasicGraph<Integer> undirectedGraph =\n",
        "197": "        BasicGraphBuilder.undirected().allowsSelfLoops(false).build();\n",
        "203": "    MutableBasicGraph<Integer> expectedClosure =\n",
        "204": "        BasicGraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "219": "  @SuppressWarnings(\"deprecation\")\n",
        "220": "  @Test\n",
        "221": "  public void asBasicGraph_basicGraphOptimized() {\n",
        "222": "    BasicGraph<Integer> basicGraph = BasicGraphBuilder.undirected().build();\n",
        "223": "    assertThat(asBasicGraph(basicGraph)).isSameAs(basicGraph);\n",
        "224": "    assertThat(asBasicGraph((Graph<Integer, Presence>) basicGraph)).isSameAs(basicGraph);\n",
        "225": "  }\n",
        "226": "\n",
        "227": "  @Test\n",
        "228": "  public void asBasicGraph_graph() {\n",
        "229": "    MutableGraph<Integer, String> graph = GraphBuilder.directed().build();\n",
        "230": "    graph.putEdgeValue(N1, N2, E12);\n",
        "231": "    graph.putEdgeValue(N1, N3, E13);\n",
        "232": "\n",
        "233": "    BasicGraph<Integer> basicGraph = asBasicGraph(graph);\n",
        "234": "    assertThat(basicGraph.edgeValue(N1, N2)).isEqualTo(Presence.EDGE_EXISTS);\n",
        "235": "    assertThat(basicGraph.edgeValue(N1, N3)).isEqualTo(Presence.EDGE_EXISTS);\n",
        "236": "    assertThat(basicGraph.edgeValueOrDefault(N2, N3, null)).isEqualTo(null);\n",
        "237": "    assertThat(basicGraph.edgeValueOrDefault(N2, N3, Presence.EDGE_EXISTS))\n",
        "238": "        .isEqualTo(Presence.EDGE_EXISTS);\n",
        "239": "    try {\n",
        "240": "      basicGraph.edgeValue(N2, N3);\n",
        "241": "      fail(\"Should have rejected edgeValue() on non-existent edge\");\n",
        "242": "    } catch (IllegalArgumentException expected) {\n",
        "243": "    }\n",
        "244": "    AbstractGraphTest.validateGraph(basicGraph);\n",
        "245": "\n",
        "246": "    graph.putEdgeValue(N2, N3, E23);\n",
        "247": "    // View should be updated.\n",
        "248": "    assertThat(basicGraph.edgeValue(N2, N3)).isEqualTo(Presence.EDGE_EXISTS);\n",
        "249": "    AbstractGraphTest.validateGraph(basicGraph);\n",
        "250": "  }\n",
        "251": "\n",
        "253": "  public void transpose_undirectedBasicGraph() {\n",
        "254": "    MutableBasicGraph<Integer> undirectedGraph = BasicGraphBuilder.undirected().build();\n",
        "257": "    assertThat(transpose(undirectedGraph)).isEqualTo(undirectedGraph);\n",
        "261": "  public void transpose_directedBasicGraph() {\n",
        "262": "    MutableBasicGraph<Integer> directedGraph =\n",
        "263": "        BasicGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "269": "    MutableBasicGraph<Integer> expectedTranspose =\n",
        "270": "        BasicGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "276": "    BasicGraph<Integer> transpose = Graphs.transpose(directedGraph);\n",
        "277": "    assertThat(transpose).isEqualTo(expectedTranspose);\n",
        "278": "    assertThat(transpose(transpose)).isEqualTo(directedGraph);\n",
        "289": "  public void transpose_undirectedGraph() {\n",
        "290": "    MutableGraph<Integer, String> undirectedGraph = GraphBuilder.undirected().build();\n",
        "293": "    assertThat(transpose(undirectedGraph)).isEqualTo(undirectedGraph);\n",
        "297": "  public void transpose_directedGraph() {\n",
        "298": "    MutableGraph<Integer, String> directedGraph =\n",
        "299": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "305": "    MutableGraph<Integer, String> expectedTranspose =\n",
        "306": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "312": "    Graph<Integer, String> transpose = Graphs.transpose(directedGraph);\n",
        "313": "    assertThat(transpose).isEqualTo(expectedTranspose);\n",
        "314": "    assertThat(transpose(transpose)).isEqualTo(directedGraph);\n",
        "329": "    assertThat(transpose(undirectedGraph)).isEqualTo(undirectedGraph);\n",
        "349": "    assertThat(transpose).isEqualTo(expectedTranspose);\n",
        "350": "    assertThat(transpose(transpose)).isEqualTo(directedGraph);\n",
        "361": "  public void inducedSubgraph_basicGraph() {\n",
        "364": "    MutableBasicGraph<Integer> directedGraph =\n",
        "365": "        BasicGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "372": "    MutableBasicGraph<Integer> expectedSubgraph =\n",
        "373": "        BasicGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "378": "    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n",
        "382": "  public void inducedSubgraph_graph() {\n",
        "385": "    MutableGraph<Integer, String> directedGraph =\n",
        "386": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "393": "    MutableGraph<Integer, String> expectedSubgraph =\n",
        "394": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "399": "    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n",
        "420": "    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);\n",
        "437": "      copyOf((BasicGraph<?>) null);\n",
        "444": "  public void copyOf_directedBasicGraph() {\n",
        "445": "    BasicGraph<Integer> directedGraph = buildDirectedBasicGraph();\n",
        "447": "    BasicGraph<Integer> copy = copyOf(directedGraph);\n",
        "448": "    assertThat(copy).isEqualTo(directedGraph);\n",
        "452": "  public void copyOf_undirectedBasicGraph() {\n",
        "453": "    BasicGraph<Integer> undirectedGraph = buildUndirectedBasicGraph();\n",
        "455": "    BasicGraph<Integer> copy = copyOf(undirectedGraph);\n",
        "456": "    assertThat(copy).isEqualTo(undirectedGraph);\n",
        "460": "  public void copyOf_directedGraph() {\n",
        "461": "    Graph<Integer, String> directedGraph = buildDirectedGraph();\n",
        "463": "    Graph<Integer, String> copy = copyOf(directedGraph);\n",
        "464": "    assertThat(copy).isEqualTo(directedGraph);\n",
        "468": "  public void copyOf_undirectedGraph() {\n",
        "469": "    Graph<Integer, String> undirectedGraph = buildUndirectedGraph();\n",
        "471": "    Graph<Integer, String> copy = copyOf(undirectedGraph);\n",
        "472": "    assertThat(copy).isEqualTo(undirectedGraph);\n",
        "480": "    assertThat(copy).isEqualTo(directedGraph);\n",
        "488": "    assertThat(copy).isEqualTo(undirectedGraph);\n",
        "632": "  private static <N> void checkTransitiveClosure(\n",
        "633": "      BasicGraph<N> originalGraph, BasicGraph<N> expectedClosure) {\n",
        "637": "    assertThat(transitiveClosure(originalGraph)).isEqualTo(expectedClosure);\n",
        "640": "  private static MutableBasicGraph<Integer> buildDirectedBasicGraph() {\n",
        "641": "    MutableBasicGraph<Integer> directedGraph =\n",
        "642": "        BasicGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "650": "  private static MutableBasicGraph<Integer> buildUndirectedBasicGraph() {\n",
        "651": "    MutableBasicGraph<Integer> undirectedGraph =\n",
        "652": "        BasicGraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "660": "  private static MutableGraph<Integer, String> buildDirectedGraph() {\n",
        "661": "    MutableGraph<Integer, String> directedGraph =\n",
        "662": "        GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "670": "  private static MutableGraph<Integer, String> buildUndirectedGraph() {\n",
        "671": "    MutableGraph<Integer, String> undirectedGraph =\n",
        "672": "        GraphBuilder.undirected().allowsSelfLoops(true).build();\n"
    }
}