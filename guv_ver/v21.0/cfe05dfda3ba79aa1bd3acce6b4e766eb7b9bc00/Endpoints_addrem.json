{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "import static com.google.common.graph.GraphConstants.NOT_AVAILABLE_ON_UNDIRECTED;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.Beta;\n",
        "23": "import com.google.common.base.Objects;\n",
        "24": "import com.google.common.collect.Iterators;\n",
        "25": "import com.google.common.collect.UnmodifiableIterator;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * An immutable pair representing the two (possibly equal, in the case of a self-loop) endpoints\n",
        "29": " * of an edge in a graph. The {@link Endpoints} of a directed edge are an ordered pair of nodes\n",
        "30": " * (source and target). The {@link Endpoints} of an undirected edge are an unordered pair of nodes.\n",
        "31": " *\n",
        "32": " * @author James Sexton\n",
        "33": " * @since 20.0\n",
        "34": " */\n",
        "35": "@Beta\n",
        "36": "public abstract class Endpoints<N> implements Iterable<N> {\n",
        "37": "  private final N nodeA;\n",
        "38": "  private final N nodeB;\n",
        "39": "\n",
        "40": "  private Endpoints(N nodeA, N nodeB) {\n",
        "41": "    this.nodeA = checkNotNull(nodeA);\n",
        "42": "    this.nodeB = checkNotNull(nodeB);\n",
        "43": "  }\n",
        "44": "\n",
        "45": "  /**\n",
        "46": "   * Returns {@link Endpoints} representing the endpoints of an edge in {@code graph}.\n",
        "47": "   */\n",
        "48": "  public static <N> Endpoints<N> of(Graph<?, ?> graph, N nodeA, N nodeB) {\n",
        "49": "    return graph.isDirected() ? ofDirected(nodeA, nodeB) : ofUndirected(nodeA, nodeB);\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  /**\n",
        "53": "   * Returns {@link Endpoints} representing the endpoints of an edge in {@code network}.\n",
        "54": "   */\n",
        "55": "  public static <N> Endpoints<N> of(Network<?, ?> network, N nodeA, N nodeB) {\n",
        "56": "    return network.isDirected() ? ofDirected(nodeA, nodeB) : ofUndirected(nodeA, nodeB);\n",
        "57": "  }\n",
        "58": "\n",
        "59": "  /**\n",
        "60": "   * Returns {@link Endpoints} representing the endpoints of a directed edge.\n",
        "61": "   */\n",
        "62": "  static <N> Endpoints.Directed<N> ofDirected(N source, N target) {\n",
        "63": "    return new Directed<N>(source, target);\n",
        "64": "  }\n",
        "65": "\n",
        "66": "  /**\n",
        "67": "   * Returns {@link Endpoints} representing the endpoints of an undirected edge.\n",
        "68": "   */\n",
        "69": "  static <N> Endpoints.Undirected<N> ofUndirected(N nodeA, N nodeB) {\n",
        "70": "    return new Undirected<N>(nodeA, nodeB);\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  /**\n",
        "74": "   * If these are the {@link Endpoints} of a directed edge, returns the node which is the source of\n",
        "75": "   * that edge.\n",
        "76": "   *\n",
        "77": "   * @throws UnsupportedOperationException if these are the {@link Endpoints} of a undirected edge\n",
        "78": "   */\n",
        "79": "  public abstract N source();\n",
        "80": "\n",
        "81": "  /**\n",
        "82": "   * If these are the {@link Endpoints} of a directed edge, returns the node which is the target of\n",
        "83": "   * that edge.\n",
        "84": "   *\n",
        "85": "   * @throws UnsupportedOperationException if these are the {@link Endpoints} of a undirected edge\n",
        "86": "   */\n",
        "87": "  public abstract N target();\n",
        "88": "\n",
        "89": "  /**\n",
        "90": "   * If these are the {@link Endpoints} of a directed edge, returns the {@link #source()};\n",
        "91": "   * otherwise, returns an arbitrary (but consistent) endpoint of the origin edge.\n",
        "92": "   */\n",
        "93": "  public final N nodeA() {\n",
        "94": "    return nodeA;\n",
        "95": "  }\n",
        "96": "\n",
        "97": "  /**\n",
        "98": "   * Returns the node {@link #adjacentNode(Object) adjacent} to {@link #nodeA()} along the origin\n",
        "99": "   * edge. If these are the {@link Endpoints} of a directed edge, it is equal to {@link #target()}.\n",
        "100": "   */\n",
        "101": "  public final N nodeB() {\n",
        "102": "    return nodeB;\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  /**\n",
        "106": "   * Returns the node that is adjacent to {@code node} along the origin edge.\n",
        "107": "   *\n",
        "108": "   * @throws IllegalArgumentException if this instance does not contain {@code node}, that is, the\n",
        "109": "   *     origin edge is not incident to {@code}\n",
        "110": "   */\n",
        "111": "  public final N adjacentNode(Object node) {\n",
        "112": "    checkNotNull(node, \"node\");\n",
        "113": "    if (node.equals(nodeA)) {\n",
        "114": "      return nodeB;\n",
        "115": "    } else if (node.equals(nodeB)) {\n",
        "116": "      return nodeA;\n",
        "117": "    } else {\n",
        "118": "      throw new IllegalArgumentException(\n",
        "119": "          String.format(\"Endpoints %s does not contain node %s\", this, node));\n",
        "120": "    }\n",
        "121": "  }\n",
        "122": "\n",
        "123": "  abstract boolean isDirected();\n",
        "124": "\n",
        "125": "  /**\n",
        "126": "   * Iterates in the order {@link #nodeA()}, {@link #nodeB()}.\n",
        "127": "   */\n",
        "128": "  @Override\n",
        "129": "  public final UnmodifiableIterator<N> iterator() {\n",
        "130": "    return Iterators.forArray(nodeA, nodeB);\n",
        "131": "  }\n",
        "132": "\n",
        "133": "  /**\n",
        "134": "   * The {@link Endpoints} of two directed edges are equal if their {@link #source()} and\n",
        "135": "   * {@link #target()} are equal. The {@link Endpoints} of two undirected edges are equal if they\n",
        "136": "   * contain the same nodes. The {@link Endpoints} of a directed edge are never equal to the\n",
        "137": "   * {@link Endpoints} of an undirected edge.\n",
        "138": "   */\n",
        "139": "  @Override\n",
        "140": "  public abstract boolean equals(Object obj);\n",
        "141": "\n",
        "142": "  /**\n",
        "143": "   * The hashcode of the {@link Endpoints} of a directed edge is equal to\n",
        "144": "   * {@code Objects.hashCode(source(), target())}. The hashcode of the {@link Endpoints}\n",
        "145": "   * of an undirected edge is equal to {@code nodeA().hashCode() ^ nodeB().hashCode()}.\n",
        "146": "   */\n",
        "147": "  @Override\n",
        "148": "  public abstract int hashCode();\n",
        "149": "\n",
        "150": "  /**\n",
        "151": "   * The {@link Endpoints} of a directed edge.\n",
        "152": "   */\n",
        "153": "  private static final class Directed<N> extends Endpoints<N> {\n",
        "154": "    private Directed(N source, N target) {\n",
        "155": "      super(source, target);\n",
        "156": "    }\n",
        "157": "\n",
        "158": "    @Override\n",
        "159": "    public N source() {\n",
        "160": "      return nodeA();\n",
        "161": "    }\n",
        "162": "\n",
        "163": "    @Override\n",
        "164": "    public N target() {\n",
        "165": "      return nodeB();\n",
        "166": "    }\n",
        "167": "\n",
        "168": "    @Override\n",
        "169": "    boolean isDirected() {\n",
        "170": "      return true;\n",
        "171": "    }\n",
        "172": "\n",
        "173": "    @Override\n",
        "174": "    public boolean equals(Object obj) {\n",
        "175": "      if (obj == this) {\n",
        "176": "        return true;\n",
        "177": "      }\n",
        "178": "      if (!(obj instanceof Endpoints)) {\n",
        "179": "        return false;\n",
        "180": "      }\n",
        "181": "\n",
        "182": "      Endpoints<?> other = (Endpoints<?>) obj;\n",
        "183": "      if (isDirected() != other.isDirected()) {\n",
        "184": "        return false;\n",
        "185": "      }\n",
        "186": "\n",
        "187": "      return source().equals(other.source()) && target().equals(other.target());\n",
        "188": "    }\n",
        "189": "\n",
        "190": "    @Override\n",
        "191": "    public int hashCode() {\n",
        "192": "      return Objects.hashCode(source(), target());\n",
        "193": "    }\n",
        "194": "\n",
        "195": "    @Override\n",
        "196": "    public String toString() {\n",
        "197": "      return String.format(\"<%s -> %s>\", source(), target());\n",
        "198": "    }\n",
        "199": "  }\n",
        "200": "\n",
        "201": "  /**\n",
        "202": "   * The {@link Endpoints} of an undirected edge.\n",
        "203": "   */\n",
        "204": "  private static final class Undirected<N> extends Endpoints<N> {\n",
        "205": "    private Undirected(N nodeA, N nodeB) {\n",
        "206": "      super(nodeA, nodeB);\n",
        "207": "    }\n",
        "208": "\n",
        "209": "    @Override\n",
        "210": "    public N source() {\n",
        "211": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "212": "    }\n",
        "213": "\n",
        "214": "    @Override\n",
        "215": "    public N target() {\n",
        "216": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "217": "    }\n",
        "218": "\n",
        "219": "    @Override\n",
        "220": "    boolean isDirected() {\n",
        "221": "      return false;\n",
        "222": "    }\n",
        "223": "\n",
        "224": "    @Override\n",
        "225": "    public boolean equals(Object obj) {\n",
        "226": "      if (obj == this) {\n",
        "227": "        return true;\n",
        "228": "      }\n",
        "229": "      if (!(obj instanceof Endpoints)) {\n",
        "230": "        return false;\n",
        "231": "      }\n",
        "232": "\n",
        "233": "      Endpoints<?> other = (Endpoints<?>) obj;\n",
        "234": "      if (isDirected() != other.isDirected()) {\n",
        "235": "        return false;\n",
        "236": "      }\n",
        "237": "\n",
        "238": "      // Equivalent to the following simple implementation:\n",
        "239": "      // boolean condition1 = nodeA().equals(other.nodeA()) && nodeB().equals(other.nodeB());\n",
        "240": "      // boolean condition2 = nodeA().equals(other.nodeB()) && nodeB().equals(other.nodeA());\n",
        "241": "      // return condition1 || condition2;\n",
        "242": "      if (nodeA().equals(other.nodeA())) { // check condition1\n",
        "243": "        // Here's the tricky bit. We don't have to explicitly check for condition2 in this case.\n",
        "244": "        // Why? The second half of condition2 requires that nodeB equals other.nodeA.\n",
        "245": "        // We already know that nodeA equals other.nodeA. Combined with the earlier statement,\n",
        "246": "        // and the transitive property of equality, this implies that nodeA equals nodeB.\n",
        "247": "        // If nodeA equals nodeB, condition1 == condition2, so checking condition1 is sufficient.\n",
        "248": "        return nodeB().equals(other.nodeB());\n",
        "249": "      }\n",
        "250": "      return nodeA().equals(other.nodeB()) && nodeB().equals(other.nodeA()); // check condition2\n",
        "251": "    }\n",
        "252": "\n",
        "253": "    @Override\n",
        "254": "    public int hashCode() {\n",
        "255": "      return nodeA().hashCode() ^ nodeB().hashCode();\n",
        "256": "    }\n",
        "257": "\n",
        "258": "    @Override\n",
        "259": "    public String toString() {\n",
        "260": "      return String.format(\"[%s, %s]\", nodeA(), nodeB());\n",
        "261": "    }\n",
        "262": "  }\n",
        "263": "}\n"
    }
}