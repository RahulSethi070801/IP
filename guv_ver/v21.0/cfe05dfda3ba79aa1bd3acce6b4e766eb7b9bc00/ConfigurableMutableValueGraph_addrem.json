{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "import static com.google.common.base.Preconditions.checkState;\n",
        "22": "import static com.google.common.graph.GraphConstants.SELF_LOOPS_NOT_ALLOWED;\n",
        "23": "import static com.google.common.graph.Graphs.checkNonNegative;\n",
        "24": "import static com.google.common.graph.Graphs.checkPositive;\n",
        "25": "\n",
        "26": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "27": "\n",
        "28": "/**\n",
        "29": " * Configurable implementation of {@link MutableValueGraph} that supports both directed and\n",
        "30": " * undirected graphs. Instances of this class should be constructed with {@link ValueGraphBuilder}.\n",
        "31": " *\n",
        "32": " * <p>Time complexities for mutation methods are all O(1) except for {@code removeNode(N node)},\n",
        "33": " * which is in O(d_node) where d_node is the degree of {@code node}.\n",
        "34": " *\n",
        "35": " * @author James Sexton\n",
        "36": " * @author Joshua O'Madadhain\n",
        "37": " * @author Omar Darwish\n",
        "38": " * @param <N> Node parameter type\n",
        "39": " * @param <V> Value parameter type\n",
        "40": " */\n",
        "41": "final class ConfigurableMutableValueGraph<N, V>\n",
        "42": "    extends ConfigurableValueGraph<N, V> implements MutableValueGraph<N, V> {\n",
        "43": "\n",
        "44": "  /**\n",
        "45": "   * Constructs a mutable graph with the properties specified in {@code builder}.\n",
        "46": "   */\n",
        "47": "  ConfigurableMutableValueGraph(AbstractGraphBuilder<? super N> builder) {\n",
        "48": "    super(builder);\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  @Override\n",
        "52": "  @CanIgnoreReturnValue\n",
        "53": "  public boolean addNode(N node) {\n",
        "54": "    checkNotNull(node, \"node\");\n",
        "55": "\n",
        "56": "    if (containsNode(node)) {\n",
        "57": "      return false;\n",
        "58": "    }\n",
        "59": "\n",
        "60": "    addNodeInternal(node);\n",
        "61": "    return true;\n",
        "62": "  }\n",
        "63": "\n",
        "64": "  /**\n",
        "65": "   * Adds {@code node} to the graph and returns the associated {@link GraphConnections}.\n",
        "66": "   *\n",
        "67": "   * @throws IllegalStateException if {@code node} is already present\n",
        "68": "   */\n",
        "69": "  @CanIgnoreReturnValue\n",
        "70": "  private GraphConnections<N, V> addNodeInternal(N node) {\n",
        "71": "    GraphConnections<N, V> connections = newConnections();\n",
        "72": "    checkState(nodeConnections.put(node, connections) == null);\n",
        "73": "    return connections;\n",
        "74": "  }\n",
        "75": "\n",
        "76": "  @Override\n",
        "77": "  @CanIgnoreReturnValue\n",
        "78": "  public V putEdgeValue(N nodeU, N nodeV, V value) {\n",
        "79": "    checkNotNull(nodeU, \"nodeU\");\n",
        "80": "    checkNotNull(nodeV, \"nodeV\");\n",
        "81": "    checkNotNull(value, \"value\");\n",
        "82": "\n",
        "83": "    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n",
        "84": "    boolean isSelfLoop = nodeU.equals(nodeV);\n",
        "85": "    if (!allowsSelfLoops()) {\n",
        "86": "      checkArgument(!isSelfLoop, SELF_LOOPS_NOT_ALLOWED, nodeU);\n",
        "87": "    }\n",
        "88": "\n",
        "89": "    if (connectionsU == null) {\n",
        "90": "      connectionsU = addNodeInternal(nodeU);\n",
        "91": "    }\n",
        "92": "    V previousValue = connectionsU.addSuccessor(nodeV, value);\n",
        "93": "    GraphConnections<N, V> connectionsV = nodeConnections.get(nodeV);\n",
        "94": "    if (connectionsV == null) {\n",
        "95": "      connectionsV = addNodeInternal(nodeV);\n",
        "96": "    }\n",
        "97": "    connectionsV.addPredecessor(nodeU, value);\n",
        "98": "    if (previousValue == null) {\n",
        "99": "      checkPositive(++edgeCount);\n",
        "100": "    }\n",
        "101": "    return previousValue;\n",
        "102": "  }\n",
        "103": "\n",
        "104": "  @Override\n",
        "105": "  @CanIgnoreReturnValue\n",
        "106": "  public boolean removeNode(Object node) {\n",
        "107": "    checkNotNull(node, \"node\");\n",
        "108": "\n",
        "109": "    GraphConnections<N, V> connections = nodeConnections.get(node);\n",
        "110": "    if (connections == null) {\n",
        "111": "      return false;\n",
        "112": "    }\n",
        "113": "\n",
        "114": "    if (allowsSelfLoops()) {\n",
        "115": "      // Remove self-loop (if any) first, so we don't get CME while removing incident edges.\n",
        "116": "      if (connections.removeSuccessor(node) != null) {\n",
        "117": "        connections.removePredecessor(node);\n",
        "118": "        --edgeCount;\n",
        "119": "      }\n",
        "120": "    }\n",
        "121": "\n",
        "122": "    for (N successor : connections.successors()) {\n",
        "123": "      nodeConnections.getWithoutCaching(successor).removePredecessor(node);\n",
        "124": "      --edgeCount;\n",
        "125": "    }\n",
        "126": "    if (isDirected()) { // In undirected graphs, the successor and predecessor sets are equal.\n",
        "127": "      for (N predecessor : connections.predecessors()) {\n",
        "128": "        checkState(nodeConnections.getWithoutCaching(predecessor).removeSuccessor(node) != null);\n",
        "129": "        --edgeCount;\n",
        "130": "      }\n",
        "131": "    }\n",
        "132": "    nodeConnections.remove(node);\n",
        "133": "    checkNonNegative(edgeCount);\n",
        "134": "    return true;\n",
        "135": "  }\n",
        "136": "\n",
        "137": "  @Override\n",
        "138": "  @CanIgnoreReturnValue\n",
        "139": "  public V removeEdge(Object nodeU, Object nodeV) {\n",
        "140": "    checkNotNull(nodeU, \"nodeU\");\n",
        "141": "    checkNotNull(nodeV, \"nodeV\");\n",
        "142": "\n",
        "143": "    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);\n",
        "144": "    GraphConnections<N, V> connectionsV = nodeConnections.get(nodeV);\n",
        "145": "    if (connectionsU == null || connectionsV == null) {\n",
        "146": "      return null;\n",
        "147": "    }\n",
        "148": "\n",
        "149": "    V previousValue = connectionsU.removeSuccessor(nodeV);\n",
        "150": "    if (previousValue != null) {\n",
        "151": "      connectionsV.removePredecessor(nodeU);\n",
        "152": "      checkNonNegative(--edgeCount);\n",
        "153": "    }\n",
        "154": "    return previousValue;\n",
        "155": "  }\n",
        "156": "\n",
        "157": "  private GraphConnections<N, V> newConnections() {\n",
        "158": "    return isDirected()\n",
        "159": "        ? DirectedGraphConnections.<N, V>of()\n",
        "160": "        : UndirectedGraphConnections.<N, V>of();\n",
        "161": "  }\n",
        "162": "}\n"
    },
    "removed": {}
}