{
    "addition": {
        "151": "    assertThat(Graphs.equivalent(network, Graphs.copyOf(network))).isTrue();\n",
        "152": "    assertThat(Graphs.equivalent(network, ImmutableNetwork.copyOf(network))).isTrue();\n",
        "164": "    Graph<N> asGraph = network.asGraph();\n",
        "180": "      EndpointPair<N> endpointPair = network.incidentNodes(edge);\n",
        "181": "      N nodeU = endpointPair.nodeU();\n",
        "182": "      N nodeV = endpointPair.nodeV();\n",
        "183": "      assertThat(asGraph.edges()).contains(EndpointPair.of(network, nodeU, nodeV));\n",
        "184": "      assertThat(network.edgesConnecting(nodeU, nodeV)).contains(edge);\n",
        "185": "      assertThat(network.successors(nodeU)).contains(nodeV);\n",
        "186": "      assertThat(network.adjacentNodes(nodeU)).contains(nodeV);\n",
        "187": "      assertThat(network.outEdges(nodeU)).contains(edge);\n",
        "188": "      assertThat(network.incidentEdges(nodeU)).contains(edge);\n",
        "189": "      assertThat(network.predecessors(nodeV)).contains(nodeU);\n",
        "190": "      assertThat(network.adjacentNodes(nodeV)).contains(nodeU);\n",
        "191": "      assertThat(network.inEdges(nodeV)).contains(edge);\n",
        "192": "      assertThat(network.incidentEdges(nodeV)).contains(edge);\n",
        "195": "          network.incidentNodes(edge).nodeU(), network.incidentNodes(edge).nodeV())) {\n",
        "244": "          assertThat(network.incidentNodes(edge))\n",
        "245": "              .isEqualTo(EndpointPair.of(network, node, otherNode));\n",
        "253": "        assertTrue(network.incidentNodes(incidentEdge).nodeU().equals(node)\n",
        "254": "            || network.incidentNodes(incidentEdge).nodeV().equals(node));\n",
        "283": "        assertThat(network.edgesConnecting(node, successor)).isNotEmpty();\n",
        "643": "    EndpointPair<Integer> unused = network.incidentNodes(E12); // ensure cache (if any) is populated\n"
    },
    "removed": {
        "27": "import com.google.common.testing.EqualsTester;\n",
        "152": "    new EqualsTester().addEqualityGroup(\n",
        "153": "        network,\n",
        "154": "        Graphs.copyOf(network),\n",
        "155": "        ImmutableNetwork.copyOf(network)).testEquals();\n",
        "167": "    Graph<N, Set<E>> asGraph = network.asGraph();\n",
        "183": "      Endpoints<N> endpoints = network.incidentNodes(edge);\n",
        "184": "      N nodeA = endpoints.nodeA();\n",
        "185": "      N nodeB = endpoints.nodeB();\n",
        "186": "      assertThat(asGraph.edges()).contains(Endpoints.of(network, nodeA, nodeB));\n",
        "187": "      assertThat(network.edgesConnecting(nodeA, nodeB)).contains(edge);\n",
        "188": "      assertThat(network.successors(nodeA)).contains(nodeB);\n",
        "189": "      assertThat(network.adjacentNodes(nodeA)).contains(nodeB);\n",
        "190": "      assertThat(network.outEdges(nodeA)).contains(edge);\n",
        "191": "      assertThat(network.incidentEdges(nodeA)).contains(edge);\n",
        "192": "      assertThat(network.predecessors(nodeB)).contains(nodeA);\n",
        "193": "      assertThat(network.adjacentNodes(nodeB)).contains(nodeA);\n",
        "194": "      assertThat(network.inEdges(nodeB)).contains(edge);\n",
        "195": "      assertThat(network.incidentEdges(nodeB)).contains(edge);\n",
        "198": "          network.incidentNodes(edge).nodeA(), network.incidentNodes(edge).nodeB())) {\n",
        "247": "          assertThat(network.incidentNodes(edge)).isEqualTo(Endpoints.of(network, node, otherNode));\n",
        "255": "        assertTrue(network.incidentNodes(incidentEdge).nodeA().equals(node)\n",
        "256": "            || network.incidentNodes(incidentEdge).nodeB().equals(node));\n",
        "284": "        Set<E> edgesConnecting = network.edgesConnecting(node, successor);\n",
        "286": "        assertThat(edgesConnecting).isNotEmpty();\n",
        "287": "        assertThat(edgesConnecting).isEqualTo(asGraph.edgeValue(node, successor));\n",
        "647": "    Endpoints<Integer> unused = network.incidentNodes(E12); // ensure cache (if any) is populated\n"
    }
}