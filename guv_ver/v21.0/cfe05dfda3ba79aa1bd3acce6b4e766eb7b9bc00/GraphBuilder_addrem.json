{
    "addition": {
        "38": " * MutableGraph<String> graph = GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "39": " * graph.putEdge(\"bread\", \"bread\");\n",
        "40": " * graph.putEdge(\"chocolate\", \"peanut butter\");\n",
        "41": " * graph.putEdge(\"peanut butter\", \"jelly\");\n",
        "49": "public final class GraphBuilder<N> extends AbstractGraphBuilder<N> {\n",
        "57": "  public static GraphBuilder<Object> directed() {\n",
        "58": "    return new GraphBuilder<Object>(true);\n",
        "62": "  public static GraphBuilder<Object> undirected() {\n",
        "63": "    return new GraphBuilder<Object>(false);\n",
        "73": "  public static <N> GraphBuilder<N> from(Graph<N> graph) {\n",
        "75": "    return new GraphBuilder<Object>(graph.isDirected())\n",
        "85": "  public GraphBuilder<N> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "95": "  public GraphBuilder<N> expectedNodeCount(int expectedNodeCount) {\n",
        "105": "  public <N1 extends N> GraphBuilder<N1> nodeOrder(ElementOrder<N1> nodeOrder) {\n",
        "107": "    GraphBuilder<N1> newBuilder = cast();\n",
        "113": "  public <N1 extends N> MutableGraph<N1> build() {\n",
        "114": "    return new ConfigurableMutableGraph<N1>(this);\n",
        "118": "  private <N1 extends N> GraphBuilder<N1> cast() {\n",
        "119": "    return (GraphBuilder<N1>) this;\n"
    },
    "removed": {
        "38": " * MutableGraph<String, Double> graph = GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "39": " * graph.putEdgeValue(\"San Francisco\", \"San Francisco\", 0.0);\n",
        "40": " * graph.putEdgeValue(\"San Jose\", \"San Jose\", 0.0);\n",
        "41": " * graph.putEdgeValue(\"San Francisco\", \"San Jose\", 48.4);\n",
        "49": "public final class GraphBuilder<N, V> extends AbstractGraphBuilder<N> {\n",
        "57": "  public static GraphBuilder<Object, Object> directed() {\n",
        "58": "    return new GraphBuilder<Object, Object>(true);\n",
        "62": "  public static GraphBuilder<Object, Object> undirected() {\n",
        "63": "    return new GraphBuilder<Object, Object>(false);\n",
        "73": "  public static <N> GraphBuilder<N, Object> from(Graph<N, ?> graph) {\n",
        "75": "    return new GraphBuilder<N, Object>(graph.isDirected())\n",
        "85": "  public GraphBuilder<N, V> allowsSelfLoops(boolean allowsSelfLoops) {\n",
        "95": "  public GraphBuilder<N, V> expectedNodeCount(int expectedNodeCount) {\n",
        "105": "  public <N1 extends N> GraphBuilder<N1, V> nodeOrder(ElementOrder<N1> nodeOrder) {\n",
        "107": "    GraphBuilder<N1, V> newBuilder = cast();\n",
        "113": "  public <N1 extends N, V1 extends V> MutableGraph<N1, V1> build() {\n",
        "114": "    return new ConfigurableMutableGraph<N1, V1>(this);\n",
        "118": "  private <N1 extends N, V1 extends V> GraphBuilder<N1, V1> cast() {\n",
        "119": "    return (GraphBuilder<N1, V1>) this;\n"
    }
}