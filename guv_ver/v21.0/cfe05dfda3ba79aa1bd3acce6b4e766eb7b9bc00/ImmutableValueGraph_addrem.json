{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkArgument;\n",
        "20": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "21": "import static com.google.common.graph.GraphConstants.EDGE_CONNECTING_NOT_IN_GRAPH;\n",
        "22": "import static com.google.common.graph.GraphConstants.NODE_NOT_IN_GRAPH;\n",
        "23": "\n",
        "24": "import com.google.common.annotations.Beta;\n",
        "25": "import com.google.common.base.Function;\n",
        "26": "import com.google.common.collect.ImmutableCollection;\n",
        "27": "import com.google.common.collect.ImmutableMap;\n",
        "28": "import com.google.common.collect.Maps;\n",
        "29": "import javax.annotation.Nullable;\n",
        "30": "\n",
        "31": "/**\n",
        "32": " * A {@link ValueGraph} whose elements and structural relationships will never change. Instances of\n",
        "33": " * this class may be obtained with {@link #copyOf(ValueGraph)}.\n",
        "34": " *\n",
        "35": " * <p>This class generally provides all of the same guarantees as {@link ImmutableCollection}\n",
        "36": " * (despite not extending {@link ImmutableCollection} itself), including guaranteed thread-safety.\n",
        "37": " *\n",
        "38": " * @author James Sexton\n",
        "39": " * @param <N> Node parameter type\n",
        "40": " * @param <V> Value parameter type\n",
        "41": " * @since 20.0\n",
        "42": " */\n",
        "43": "@Beta\n",
        "44": "public final class ImmutableValueGraph<N, V> extends ImmutableGraph.ValueBackedImpl<N, V>\n",
        "45": "    implements ValueGraph<N, V> {\n",
        "46": "\n",
        "47": "  private ImmutableValueGraph(ValueGraph<N, V> graph) {\n",
        "48": "    super(ValueGraphBuilder.from(graph), getNodeConnections(graph), graph.edges().size());\n",
        "49": "  }\n",
        "50": "\n",
        "51": "  /** Returns an immutable copy of {@code graph}. */\n",
        "52": "  public static <N, V> ImmutableValueGraph<N, V> copyOf(ValueGraph<N, V> graph) {\n",
        "53": "    return (graph instanceof ImmutableValueGraph)\n",
        "54": "        ? (ImmutableValueGraph<N, V>) graph\n",
        "55": "        : new ImmutableValueGraph<N, V>(graph);\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  /**\n",
        "59": "   * Simply returns its argument.\n",
        "60": "   *\n",
        "61": "   * @deprecated no need to use this\n",
        "62": "   */\n",
        "63": "  @Deprecated\n",
        "64": "  public static <N, V> ImmutableValueGraph<N, V> copyOf(ImmutableValueGraph<N, V> graph) {\n",
        "65": "    return checkNotNull(graph);\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  private static <N, V> ImmutableMap<N, GraphConnections<N, V>> getNodeConnections(\n",
        "69": "      ValueGraph<N, V> graph) {\n",
        "70": "    // ImmutableMap.Builder maintains the order of the elements as inserted, so the map will have\n",
        "71": "    // whatever ordering the graph's nodes do, so ImmutableSortedMap is unnecessary even if the\n",
        "72": "    // input nodes are sorted.\n",
        "73": "    ImmutableMap.Builder<N, GraphConnections<N, V>> nodeConnections = ImmutableMap.builder();\n",
        "74": "    for (N node : graph.nodes()) {\n",
        "75": "      nodeConnections.put(node, connectionsOf(graph, node));\n",
        "76": "    }\n",
        "77": "    return nodeConnections.build();\n",
        "78": "  }\n",
        "79": "\n",
        "80": "  private static <N, V> GraphConnections<N, V> connectionsOf(\n",
        "81": "      final ValueGraph<N, V> graph, final N node) {\n",
        "82": "    Function<N, V> successorNodeToValueFn =\n",
        "83": "        new Function<N, V>() {\n",
        "84": "          @Override\n",
        "85": "          public V apply(N successorNode) {\n",
        "86": "            return graph.edgeValue(node, successorNode);\n",
        "87": "          }\n",
        "88": "        };\n",
        "89": "    return graph.isDirected()\n",
        "90": "        ? DirectedGraphConnections.ofImmutable(\n",
        "91": "            graph.predecessors(node), Maps.asMap(graph.successors(node), successorNodeToValueFn))\n",
        "92": "        : UndirectedGraphConnections.ofImmutable(\n",
        "93": "            Maps.asMap(graph.adjacentNodes(node), successorNodeToValueFn));\n",
        "94": "  }\n",
        "95": "\n",
        "96": "  // We can't extend ImmutableGraph AND AbstractValueGraph, so the following code is duplicated ;(\n",
        "97": "\n",
        "98": "  @Override\n",
        "99": "  public V edgeValue(Object nodeU, Object nodeV) {\n",
        "100": "    V value = edgeValueOrDefault(nodeU, nodeV, null);\n",
        "101": "    checkArgument(value != null, EDGE_CONNECTING_NOT_IN_GRAPH, nodeU, nodeV);\n",
        "102": "    return value;\n",
        "103": "  }\n",
        "104": "\n",
        "105": "  @Override\n",
        "106": "  public V edgeValueOrDefault(Object nodeU, Object nodeV, @Nullable V defaultValue) {\n",
        "107": "    V value = backingGraph.checkedConnections(nodeU).value(nodeV);\n",
        "108": "    if (value == null) {\n",
        "109": "      checkArgument(backingGraph.containsNode(nodeV), NODE_NOT_IN_GRAPH, nodeV);\n",
        "110": "      return defaultValue;\n",
        "111": "    }\n",
        "112": "    return value;\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  @Override\n",
        "116": "  public String toString() {\n",
        "117": "    return AbstractValueGraph.toString(this);\n",
        "118": "  }\n",
        "119": "}\n"
    },
    "removed": {}
}