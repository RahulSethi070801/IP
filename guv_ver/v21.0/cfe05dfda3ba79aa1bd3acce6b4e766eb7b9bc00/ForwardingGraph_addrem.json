{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.collect.ForwardingObject;\n",
        "20": "import java.util.Set;\n",
        "21": "\n",
        "22": "/**\n",
        "23": " * A class to allow {@link Graph} implementations to be backed by {@link ValueGraph}s. This is not\n",
        "24": " * currently planned to be released as a general-purpose forwarding class.\n",
        "25": " *\n",
        "26": " * @author James Sexton\n",
        "27": " */\n",
        "28": "abstract class ForwardingGraph<N> extends ForwardingObject implements Graph<N> {\n",
        "29": "\n",
        "30": "  @Override\n",
        "31": "  protected abstract Graph<N> delegate();\n",
        "32": "\n",
        "33": "  @Override\n",
        "34": "  public Set<N> nodes() {\n",
        "35": "    return delegate().nodes();\n",
        "36": "  }\n",
        "37": "\n",
        "38": "  @Override\n",
        "39": "  public Set<EndpointPair<N>> edges() {\n",
        "40": "    return delegate().edges();\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  @Override\n",
        "44": "  public boolean isDirected() {\n",
        "45": "    return delegate().isDirected();\n",
        "46": "  }\n",
        "47": "\n",
        "48": "  @Override\n",
        "49": "  public boolean allowsSelfLoops() {\n",
        "50": "    return delegate().allowsSelfLoops();\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  @Override\n",
        "54": "  public ElementOrder<N> nodeOrder() {\n",
        "55": "    return delegate().nodeOrder();\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  @Override\n",
        "59": "  public Set<N> adjacentNodes(Object node) {\n",
        "60": "    return delegate().adjacentNodes(node);\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  @Override\n",
        "64": "  public Set<N> predecessors(Object node) {\n",
        "65": "    return delegate().predecessors(node);\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  @Override\n",
        "69": "  public Set<N> successors(Object node) {\n",
        "70": "    return delegate().successors(node);\n",
        "71": "  }\n",
        "72": "\n",
        "73": "  @Override\n",
        "74": "  public int degree(Object node) {\n",
        "75": "    return delegate().degree(node);\n",
        "76": "  }\n",
        "77": "\n",
        "78": "  @Override\n",
        "79": "  public int inDegree(Object node) {\n",
        "80": "    return delegate().inDegree(node);\n",
        "81": "  }\n",
        "82": "\n",
        "83": "  @Override\n",
        "84": "  public int outDegree(Object node) {\n",
        "85": "    return delegate().outDegree(node);\n",
        "86": "  }\n",
        "87": "\n",
        "88": "  @Override\n",
        "89": "  public String toString() {\n",
        "90": "    return AbstractGraph.toString(delegate());\n",
        "91": "  }\n",
        "92": "}\n"
    },
    "removed": {}
}