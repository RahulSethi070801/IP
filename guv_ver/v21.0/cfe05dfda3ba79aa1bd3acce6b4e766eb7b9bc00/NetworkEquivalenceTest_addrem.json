{
    "addition": {
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "31": "public final class NetworkEquivalenceTest {\n",
        "55": "  public NetworkEquivalenceTest(GraphType graphType) {\n",
        "83": "  public void equivalent_nodeSetsDiffer() {\n",
        "89": "    assertThat(Graphs.equivalent(graph, g2)).isFalse();\n",
        "94": "  public void equivalent_edgeSetsDiffer() {\n",
        "100": "    assertThat(Graphs.equivalent(graph, g2)).isFalse();\n",
        "105": "  public void equivalent_directedVsUndirected() {\n",
        "111": "    assertThat(Graphs.equivalent(graph, g2)).isFalse();\n",
        "116": "  public void equivalent_selfLoop_directedVsUndirected() {\n",
        "122": "    assertThat(Graphs.equivalent(graph, g2)).isFalse();\n",
        "127": "  public void equivalent_connectionsDiffer() {\n",
        "132": "    // connect E13 to N1 and N2, and E12 to N1 and N3 => not equivalent\n",
        "136": "    assertThat(Graphs.equivalent(graph, g2)).isFalse();\n",
        "139": "  // Node/edge sets and node/edge connections are the same, but network properties differ.\n",
        "140": "  // (In this case the networks are considered equivalent; the property differences are irrelevant.)\n",
        "142": "  public void equivalent_propertiesDiffer() {\n",
        "151": "    assertThat(Graphs.equivalent(graph, g2)).isTrue();\n",
        "155": "  // (In this case the networks are considered equivalent; the edge add orderings are irrelevant.)\n",
        "157": "  public void equivalent_edgeAddOrdersDiffer() {\n",
        "170": "    assertThat(Graphs.equivalent(g1, g2)).isTrue();\n",
        "174": "  public void equivalent_edgeDirectionsDiffer() {\n",
        "182": "        assertThat(Graphs.equivalent(graph, g2)).isTrue();\n",
        "185": "        assertThat(Graphs.equivalent(graph, g2)).isFalse();\n"
    },
    "removed": {
        "19": "import com.google.common.testing.EqualsTester;\n",
        "30": "public final class NetworkEqualsTest {\n",
        "54": "  public NetworkEqualsTest(GraphType graphType) {\n",
        "82": "  public void equals_nodeSetsDiffer() {\n",
        "88": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "93": "  public void equals_edgeSetsDiffer() {\n",
        "99": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "104": "  public void equals_directedVsUndirected() {\n",
        "110": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "115": "  public void equals_selfLoop_directedVsUndirected() {\n",
        "121": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "126": "  public void equals_connectionsDiffer() {\n",
        "131": "    // connect E13 to N1 and N2, and E12 to N1 and N3 => not equal\n",
        "135": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "138": "  // Node/edge sets and node/edge connections are the same, but graph properties differ.\n",
        "139": "  // (In this case the graphs are considered equal; the property differences are irrelevant.)\n",
        "141": "  public void equals_propertiesDiffer() {\n",
        "150": "    new EqualsTester().addEqualityGroup(graph, g2).testEquals();\n",
        "154": "  // (In this case the graphs are considered equal; the edge add orderings are irrelevant.)\n",
        "156": "  public void equals_edgeAddOrdersDiffer() {\n",
        "169": "    new EqualsTester().addEqualityGroup(g1, g2).testEquals();\n",
        "173": "  public void equals_edgeDirectionsDiffer() {\n",
        "181": "        new EqualsTester().addEqualityGroup(graph, g2).testEquals();\n",
        "184": "        new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n"
    }
}