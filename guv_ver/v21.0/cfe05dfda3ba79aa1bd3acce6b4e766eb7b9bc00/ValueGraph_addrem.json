{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import java.util.ConcurrentModificationException;\n",
        "21": "import java.util.Map;\n",
        "22": "import java.util.Set;\n",
        "23": "import javax.annotation.Nullable;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * An interface for <a href=\"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)\">graph</a>\n",
        "27": " * data structures. A graph is composed of a set of nodes (sometimes called vertices) and a set of\n",
        "28": " * edges connecting pairs of nodes. Graphs are useful for modeling many kinds of relations. If the\n",
        "29": " * relation to be modeled is symmetric (such as \"distance between cities\"), that can be represented\n",
        "30": " * with an undirected graph, where an edge that connects node A to node B also connects node B to\n",
        "31": " * node A. If the relation to be modeled is asymmetric (such as \"employees managed\"), that can be\n",
        "32": " * represented with a directed graph, where edges are strictly one-way.\n",
        "33": " *\n",
        "34": " * <p>There are three main interfaces provided to represent graphs. In order of increasing\n",
        "35": " * complexity they are: {@link Graph}, {@link ValueGraph}, and {@link Network}. You should generally\n",
        "36": " * prefer the simplest interface that satisfies your use case.\n",
        "37": " *\n",
        "38": " * <p>To choose the right interface, answer these questions:\n",
        "39": " *\n",
        "40": " * <ol>\n",
        "41": " * <li>Do you have data (objects) that you wish to associate with edges?\n",
        "42": " *     <p>Yes: Go to question 2. No: Use {@link Graph}.\n",
        "43": " * <li>Are the objects you wish to associate with edges unique within the scope of a graph? That is,\n",
        "44": " *     no two objects would be {@link Object#equals(Object) equal} to each other. A common example\n",
        "45": " *     where this would <i>not</i> be the case is with weighted graphs.\n",
        "46": " *     <p>Yes: Go to question 3. No: Use {@link ValueGraph}.\n",
        "47": " * <li>Do you need to be able to query the graph for an edge associated with a particular object?\n",
        "48": " *     For example, do you need to query what nodes an edge associated with a particular object\n",
        "49": " *     connects, or whether an edge associated with that object exists in the graph?\n",
        "50": " *     <p>Yes: Use {@link Network}. No: Go to question 4.\n",
        "51": " * <li>Do you need explicit support for parallel edges? For example, do you need to remove one edge\n",
        "52": " *     connecting a pair of nodes while leaving other edges connecting those same nodes intact?\n",
        "53": " *     <p>Yes: Use {@link Network}. No: Use {@link ValueGraph}.\n",
        "54": " * </ol>\n",
        "55": " *\n",
        "56": " * <p>Although {@link MutableValueGraph} and {@link MutableNetwork} both require users to provide\n",
        "57": " * objects to associate with edges when adding them, the differentiating factor is that in {@link\n",
        "58": " * ValueGraph}s, these objects can be any arbitrary data. Like the values in a {@link Map}, they do\n",
        "59": " * not have to be unique, and can be mutated while in the graph. In a {@link Network}, these objects\n",
        "60": " * serve as keys into the data structure. Like the keys in a {@link Map}, they must be unique, and\n",
        "61": " * cannot be mutated in a way that affects their equals/hashcode or the data structure will become\n",
        "62": " * corrupted.\n",
        "63": " *\n",
        "64": " * <p>In all three interfaces, nodes have all the same requirements as keys in a {@link Map}.\n",
        "65": " *\n",
        "66": " * <p>The {@link Graph} interface does not support parallel {@link #edges()}, and forbids\n",
        "67": " * implementations or extensions with parallel edges. It is possible to encode a notion of edge\n",
        "68": " * multiplicity into the values of a {@ValueGraph} (e.g. with an integer or a list of values), but\n",
        "69": " * this will not be reflected in methods such as {@link Graph#degree(Object)}. For that\n",
        "70": " * functionality, use {@link Network}s.\n",
        "71": " *\n",
        "72": " * <p>All mutation methods live on the subinterface {@link MutableValueGraph}. If you do not need to\n",
        "73": " * mutate a graph (e.g. if you write a method than runs a read-only algorithm on the graph), you\n",
        "74": " * should prefer the non-mutating {@link ValueGraph} interface.\n",
        "75": " *\n",
        "76": " * <p>We provide an efficient implementation of this interface via {@link ValueGraphBuilder}. When\n",
        "77": " * using the implementation provided, all {@link Set}-returning methods provide live, unmodifiable\n",
        "78": " * views of the graph. In other words, you cannot add an element to the {@link Set}, but if an\n",
        "79": " * element is added to the {@link ValueGraph} that would affect the result of that set, it will be\n",
        "80": " * updated automatically. This also means that you cannot modify a {@link ValueGraph} in a way that\n",
        "81": " * would affect a {#link Set} while iterating over that set. For example, you cannot remove the\n",
        "82": " * nodes from a {@link ValueGraph} while iterating over {@link #nodes} (unless you first make a copy\n",
        "83": " * of the nodes), just as you could not remove the keys from a {@link Map} while iterating over its\n",
        "84": " * {@link Map#keySet()}. This will either throw a {@link ConcurrentModificationException} or risk\n",
        "85": " * undefined behavior.\n",
        "86": " *\n",
        "87": " * <p>Example of use:\n",
        "88": " *\n",
        "89": " * <pre><code>\n",
        "90": " * MutableGraph<String, Double> synonymGraph = GraphBuilder.undirected().build();\n",
        "91": " * synonymGraph.putEdgeValue(\"large\", \"big\", 0.9);\n",
        "92": " * synonymGraph.putEdgeValue(\"large\", \"huge\", 0.9);\n",
        "93": " * synonymGraph.putEdgeValue(\"large\", \"grand\", 0.6);\n",
        "94": " * synonymGraph.putEdgeValue(\"large\", \"cold\", 0.0);\n",
        "95": " * synonymGraph.putEdgeValue(\"large\", \"small\", -1.0);\n",
        "96": " * for (String word : synonymGraph.adjacentNodes(\"large\")) {\n",
        "97": " *   if (synonymGraph.edgeValue(word, \"large\") > 0.5) {\n",
        "98": " *     System.out.println(word + \" is a synonym for large\");\n",
        "99": " *   }\n",
        "100": " * }\n",
        "101": " * </code></pre>\n",
        "102": " *\n",
        "103": " * @author James Sexton\n",
        "104": " * @param <N> Node parameter type\n",
        "105": " * @param <V> Value parameter type\n",
        "106": " * @since 20.0\n",
        "107": " */\n",
        "108": "@Beta\n",
        "109": "public interface ValueGraph<N, V> extends Graph<N> {\n",
        "110": "\n",
        "111": "  /**\n",
        "112": "   * If there is an edge connecting {@code nodeU} to {@code nodeV}, returns the non-null value\n",
        "113": "   * associated with that edge.\n",
        "114": "   *\n",
        "115": "   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeV, nodeU)}.\n",
        "116": "   *\n",
        "117": "   * @throws IllegalArgumentException if there is no edge connecting {@code nodeU} to {@code nodeV},\n",
        "118": "   *     or if {@code nodeU} or {@code nodeV} is not an element of this graph\n",
        "119": "   */\n",
        "120": "  V edgeValue(Object nodeU, Object nodeV);\n",
        "121": "\n",
        "122": "  /**\n",
        "123": "   * If there is an edge connecting {@code nodeU} to {@code nodeV}, returns the non-null value\n",
        "124": "   * associated with that edge; otherwise, returns {@code defaultValue}.\n",
        "125": "   *\n",
        "126": "   * <p>In an undirected graph, this is equal to {@code edgeValueOrDefault(nodeV, nodeU,\n",
        "127": "   * defaultValue)}.\n",
        "128": "   *\n",
        "129": "   * @throws IllegalArgumentException if {@code nodeU} or {@code nodeV} is not an element of this\n",
        "130": "   *     graph\n",
        "131": "   */\n",
        "132": "  V edgeValueOrDefault(Object nodeU, Object nodeV, @Nullable V defaultValue);\n",
        "133": "\n",
        "134": "  //\n",
        "135": "  // ValueGraph identity\n",
        "136": "  //\n",
        "137": "\n",
        "138": "  /**\n",
        "139": "   * For the default {@link ValueGraph} implementations, returns true iff {@code this == object}\n",
        "140": "   * (i.e. reference equality). External implementations are free to define this method as they see\n",
        "141": "   * fit, as long as they satisfy the {@link Object#equals(Object)} contract.\n",
        "142": "   *\n",
        "143": "   * <p>To compare two {@link ValueGraph}s based on their contents rather than their references, see\n",
        "144": "   * {@link Graphs#equivalent(ValueGraph, ValueGraph)}.\n",
        "145": "   */\n",
        "146": "  @Override\n",
        "147": "  boolean equals(@Nullable Object object);\n",
        "148": "\n",
        "149": "  /**\n",
        "150": "   * For the default {@link ValueGraph} implementations, returns {@code\n",
        "151": "   * System.identityHashCode(this)}. External implementations are free to define this method as they\n",
        "152": "   * see fit, as long as they satisfy the {@link Object#hashCode()} contract.\n",
        "153": "   */\n",
        "154": "  @Override\n",
        "155": "  int hashCode();\n",
        "156": "}\n"
    },
    "removed": {}
}