{
    "addition": {
        "33": " * Tests for {@link EndpointPair} and {@link ValueGraph#edges()}.\n",
        "36": "public final class EndpointPairTest {\n",
        "48": "  // Test for EndpointPair class\n",
        "51": "  public void testOrderedEndpointPair() {\n",
        "52": "    EndpointPair<String> ordered = EndpointPair.ordered(\"source\", \"target\");\n",
        "53": "    assertThat(ordered.isOrdered()).isTrue();\n",
        "54": "    assertThat(ordered).containsExactly(\"source\", \"target\").inOrder();\n",
        "55": "    assertThat(ordered.source()).isEqualTo(\"source\");\n",
        "56": "    assertThat(ordered.target()).isEqualTo(\"target\");\n",
        "57": "    assertThat(ordered.nodeU()).isEqualTo(\"source\");\n",
        "58": "    assertThat(ordered.nodeV()).isEqualTo(\"target\");\n",
        "59": "    assertThat(ordered.adjacentNode(\"source\")).isEqualTo(\"target\");\n",
        "60": "    assertThat(ordered.adjacentNode(\"target\")).isEqualTo(\"source\");\n",
        "61": "    assertThat(ordered.toString()).isEqualTo(\"<source -> target>\");\n",
        "65": "  public void testUnorderedEndpointPair() {\n",
        "66": "    EndpointPair<String> unordered = EndpointPair.unordered(\"chicken\", \"egg\");\n",
        "67": "    assertThat(unordered.isOrdered()).isFalse();\n",
        "68": "    assertThat(unordered).containsExactly(\"chicken\", \"egg\");\n",
        "69": "    assertThat(ImmutableSet.of(unordered.nodeU(), unordered.nodeV()))\n",
        "71": "    assertThat(unordered.adjacentNode(unordered.nodeU())).isEqualTo(unordered.nodeV());\n",
        "72": "    assertThat(unordered.adjacentNode(unordered.nodeV())).isEqualTo(unordered.nodeU());\n",
        "73": "    assertThat(unordered.toString()).contains(\"chicken\");\n",
        "74": "    assertThat(unordered.toString()).contains(\"egg\");\n",
        "79": "    EndpointPair<String> unordered = EndpointPair.unordered(\"node\", \"node\");\n",
        "80": "    assertThat(unordered.isOrdered()).isFalse();\n",
        "81": "    assertThat(unordered).containsExactly(\"node\", \"node\");\n",
        "82": "    assertThat(unordered.nodeU()).isEqualTo(\"node\");\n",
        "83": "    assertThat(unordered.nodeV()).isEqualTo(\"node\");\n",
        "84": "    assertThat(unordered.adjacentNode(\"node\")).isEqualTo(\"node\");\n",
        "85": "    assertThat(unordered.toString()).isEqualTo(\"[node, node]\");\n",
        "95": "      EndpointPair<Integer> endpointPair = graph.incidentNodes(\"1-2\");\n",
        "97": "        endpointPair.adjacentNode(3);\n",
        "106": "    EndpointPair<String> ordered = EndpointPair.ordered(\"a\", \"b\");\n",
        "107": "    EndpointPair<String> orderedMirror = EndpointPair.ordered(\"b\", \"a\");\n",
        "108": "    EndpointPair<String> unordered = EndpointPair.unordered(\"a\", \"b\");\n",
        "109": "    EndpointPair<String> unorderedMirror = EndpointPair.unordered(\"b\", \"a\");\n",
        "112": "        .addEqualityGroup(ordered)\n",
        "113": "        .addEqualityGroup(orderedMirror)\n",
        "114": "        .addEqualityGroup(unordered, unorderedMirror)\n",
        "122": "  public void endpointPair_directedGraph() {\n",
        "123": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "131": "        EndpointPair.ordered(N1, N2),\n",
        "132": "        EndpointPair.ordered(N2, N1),\n",
        "133": "        EndpointPair.ordered(N1, N3),\n",
        "134": "        EndpointPair.ordered(N4, N4));\n",
        "138": "  public void endpointPair_undirectedGraph() {\n",
        "139": "    MutableGraph<Integer> undirectedGraph = GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "147": "        EndpointPair.unordered(N1, N2),\n",
        "148": "        EndpointPair.unordered(N1, N3),\n",
        "149": "        EndpointPair.unordered(N4, N4));\n",
        "153": "  public void endpointPair_directedNetwork() {\n",
        "163": "        EndpointPair.ordered(N1, N2),\n",
        "164": "        EndpointPair.ordered(N2, N1),\n",
        "165": "        EndpointPair.ordered(N1, N3),\n",
        "166": "        EndpointPair.ordered(N4, N4));\n",
        "170": "  public void endpointPair_undirectedNetwork() {\n",
        "180": "        EndpointPair.unordered(N1, N2),\n",
        "181": "        EndpointPair.unordered(N1, N3),\n",
        "182": "        EndpointPair.unordered(N4, N4));\n",
        "186": "  public void endpointPair_unmodifiableView() {\n",
        "187": "    MutableGraph<Integer> directedGraph = GraphBuilder.directed().build();\n",
        "188": "    Set<EndpointPair<Integer>> edges = directedGraph.edges();\n",
        "191": "    containsExactlySanityCheck(edges, EndpointPair.ordered(N1, N2));\n",
        "196": "        EndpointPair.ordered(N1, N2),\n",
        "197": "        EndpointPair.ordered(N2, N1));\n",
        "204": "      edges.add(EndpointPair.ordered(N1, N2));\n",
        "211": "  public void endpointPair_containment() {\n",
        "212": "    MutableGraph<Integer> undirectedGraph = GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "215": "    Set<EndpointPair<Integer>> edges = undirectedGraph.edges();\n",
        "218": "    assertThat(edges).contains(EndpointPair.unordered(N1, N1));\n",
        "219": "    assertThat(edges).contains(EndpointPair.unordered(N1, N2));\n",
        "220": "    assertThat(edges).contains(EndpointPair.unordered(N2, N1)); // equal to unordered(N1, N2)\n",
        "222": "    assertThat(edges).doesNotContain(EndpointPair.unordered(N2, N2));\n",
        "223": "    assertThat(edges).doesNotContain(EndpointPair.ordered(N1, N2)); // graph not directed\n",
        "224": "    assertThat(edges).doesNotContain(EndpointPair.unordered(N3, N4)); // nodes not in graph\n"
    },
    "removed": {
        "33": " * Tests for {@link Endpoints} and {@link Graph#edges()}.\n",
        "36": "public final class EndpointsTest {\n",
        "48": "  // Test for Endpoints class\n",
        "51": "  public void testDirectedEndpoints() {\n",
        "52": "    Endpoints<String> directed = Endpoints.ofDirected(\"source\", \"target\");\n",
        "53": "    assertThat(directed).containsExactly(\"source\", \"target\").inOrder();\n",
        "54": "    assertThat(directed.source()).isEqualTo(\"source\");\n",
        "55": "    assertThat(directed.target()).isEqualTo(\"target\");\n",
        "56": "    assertThat(directed.nodeA()).isEqualTo(\"source\");\n",
        "57": "    assertThat(directed.nodeB()).isEqualTo(\"target\");\n",
        "58": "    assertThat(directed.adjacentNode(\"source\")).isEqualTo(\"target\");\n",
        "59": "    assertThat(directed.adjacentNode(\"target\")).isEqualTo(\"source\");\n",
        "60": "    assertThat(directed.toString()).isEqualTo(\"<source -> target>\");\n",
        "64": "  public void testUndirectedEndpoints() {\n",
        "65": "    Endpoints<String> undirected = Endpoints.ofUndirected(\"chicken\", \"egg\");\n",
        "66": "    assertThat(undirected).containsExactly(\"chicken\", \"egg\");\n",
        "67": "    assertThat(ImmutableSet.of(undirected.nodeA(), undirected.nodeB()))\n",
        "69": "    assertThat(undirected.adjacentNode(undirected.nodeA())).isEqualTo(undirected.nodeB());\n",
        "70": "    assertThat(undirected.adjacentNode(undirected.nodeB())).isEqualTo(undirected.nodeA());\n",
        "71": "    assertThat(undirected.toString()).contains(\"chicken\");\n",
        "72": "    assertThat(undirected.toString()).contains(\"egg\");\n",
        "77": "    Endpoints<String> undirected = Endpoints.ofUndirected(\"node\", \"node\");\n",
        "78": "    assertThat(undirected).containsExactly(\"node\", \"node\");\n",
        "79": "    assertThat(undirected.nodeA()).isEqualTo(\"node\");\n",
        "80": "    assertThat(undirected.nodeB()).isEqualTo(\"node\");\n",
        "81": "    assertThat(undirected.adjacentNode(\"node\")).isEqualTo(\"node\");\n",
        "82": "    assertThat(undirected.toString()).isEqualTo(\"[node, node]\");\n",
        "92": "      Endpoints<Integer> endpoints = graph.incidentNodes(\"1-2\");\n",
        "94": "        endpoints.adjacentNode(3);\n",
        "103": "    Endpoints<String> directed = Endpoints.ofDirected(\"a\", \"b\");\n",
        "104": "    Endpoints<String> directedMirror = Endpoints.ofDirected(\"b\", \"a\");\n",
        "105": "    Endpoints<String> undirected = Endpoints.ofUndirected(\"a\", \"b\");\n",
        "106": "    Endpoints<String> undirectedMirror = Endpoints.ofUndirected(\"b\", \"a\");\n",
        "109": "        .addEqualityGroup(directed)\n",
        "110": "        .addEqualityGroup(directedMirror)\n",
        "111": "        .addEqualityGroup(undirected, undirectedMirror)\n",
        "119": "  public void edges_directedGraph() {\n",
        "120": "    MutableBasicGraph<Integer> directedGraph =\n",
        "121": "        BasicGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "129": "        Endpoints.ofDirected(N1, N2),\n",
        "130": "        Endpoints.ofDirected(N2, N1),\n",
        "131": "        Endpoints.ofDirected(N1, N3),\n",
        "132": "        Endpoints.ofDirected(N4, N4));\n",
        "136": "  public void edges_undirectedGraph() {\n",
        "137": "    MutableBasicGraph<Integer> undirectedGraph =\n",
        "138": "        BasicGraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "146": "        Endpoints.ofUndirected(N1, N2),\n",
        "147": "        Endpoints.ofUndirected(N1, N3),\n",
        "148": "        Endpoints.ofUndirected(N4, N4));\n",
        "152": "  public void edges_directedNetwork() {\n",
        "162": "        Endpoints.ofDirected(N1, N2),\n",
        "163": "        Endpoints.ofDirected(N2, N1),\n",
        "164": "        Endpoints.ofDirected(N1, N3),\n",
        "165": "        Endpoints.ofDirected(N4, N4));\n",
        "169": "  public void edges_undirectedNetwork() {\n",
        "179": "        Endpoints.ofUndirected(N1, N2),\n",
        "180": "        Endpoints.ofUndirected(N1, N3),\n",
        "181": "        Endpoints.ofUndirected(N4, N4));\n",
        "185": "  public void edges_unmodifiableView() {\n",
        "186": "    MutableBasicGraph<Integer> directedGraph = BasicGraphBuilder.directed().build();\n",
        "187": "    Set<Endpoints<Integer>> edges = directedGraph.edges();\n",
        "190": "    containsExactlySanityCheck(edges, Endpoints.ofDirected(N1, N2));\n",
        "195": "        Endpoints.ofDirected(N1, N2),\n",
        "196": "        Endpoints.ofDirected(N2, N1));\n",
        "203": "      edges.add(Endpoints.ofDirected(N1, N2));\n",
        "210": "  public void edges_containment() {\n",
        "211": "    MutableBasicGraph<Integer> undirectedGraph =\n",
        "212": "        BasicGraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "215": "    Set<Endpoints<Integer>> edges = undirectedGraph.edges();\n",
        "218": "    assertThat(edges).contains(Endpoints.ofUndirected(N1, N1));\n",
        "219": "    assertThat(edges).contains(Endpoints.ofUndirected(N1, N2));\n",
        "220": "    assertThat(edges).contains(Endpoints.ofUndirected(N2, N1)); // equal to ofUndirected(N1, N2)\n",
        "222": "    assertThat(edges).doesNotContain(Endpoints.ofUndirected(N2, N2));\n",
        "223": "    assertThat(edges).doesNotContain(Endpoints.ofDirected(N1, N2)); // graph not directed\n",
        "224": "    assertThat(edges).doesNotContain(Endpoints.ofUndirected(N3, N4)); // nodes not in graph\n"
    }
}