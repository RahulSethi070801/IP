{
    "addition": {
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "23": "import com.google.common.base.Functions;\n",
        "27": "import com.google.common.graph.GraphConstants.Presence;\n",
        "37": " * @author Joshua O'Madadhain\n",
        "38": " * @author Omar Darwish\n",
        "43": "public abstract class ImmutableGraph<N> extends ForwardingGraph<N> {\n",
        "46": "  ImmutableGraph() {}\n",
        "49": "  public static <N> ImmutableGraph<N> copyOf(Graph<N> graph) {\n",
        "51": "        ? (ImmutableGraph<N>) graph\n",
        "52": "        : new ValueBackedImpl<N, Presence>(\n",
        "53": "            GraphBuilder.from(graph), getNodeConnections(graph), graph.edges().size());\n",
        "62": "  public static <N> ImmutableGraph<N> copyOf(ImmutableGraph<N> graph) {\n",
        "66": "  private static <N> ImmutableMap<N, GraphConnections<N, Presence>> getNodeConnections(\n",
        "67": "      Graph<N> graph) {\n",
        "71": "    ImmutableMap.Builder<N, GraphConnections<N, Presence>> nodeConnections = ImmutableMap.builder();\n",
        "78": "  private static <N> GraphConnections<N, Presence> connectionsOf(Graph<N> graph, N node) {\n",
        "79": "    Function<Object, Presence> edgeValueFn = Functions.constant(Presence.EDGE_EXISTS);\n",
        "82": "            graph.predecessors(node), Maps.asMap(graph.successors(node), edgeValueFn))\n",
        "84": "            Maps.asMap(graph.adjacentNodes(node), edgeValueFn));\n",
        "87": "  static class ValueBackedImpl<N, V> extends ImmutableGraph<N> {\n",
        "88": "    protected final ConfigurableValueGraph<N, V> backingGraph;\n",
        "89": "\n",
        "90": "    ValueBackedImpl(\n",
        "91": "        AbstractGraphBuilder<? super N> builder,\n",
        "92": "        ImmutableMap<N, GraphConnections<N, V>> nodeConnections,\n",
        "93": "        long edgeCount) {\n",
        "94": "      this.backingGraph = new ConfigurableValueGraph<N, V>(builder, nodeConnections, edgeCount);\n",
        "95": "    }\n",
        "96": "\n",
        "97": "    @Override\n",
        "98": "    protected Graph<N> delegate() {\n",
        "99": "      return backingGraph;\n",
        "100": "    }\n"
    },
    "removed": {
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "20": "import static com.google.common.graph.Graphs.checkNonNegative;\n",
        "37": " * @param <V> Value parameter type\n",
        "41": "public class ImmutableGraph<N, V> extends ConfigurableGraph<N, V> {\n",
        "42": "  private final long edgeCount;\n",
        "45": "  ImmutableGraph(Graph<N, V> graph) {\n",
        "46": "    super(GraphBuilder.from(graph), getNodeConnections(graph));\n",
        "47": "    this.edgeCount = checkNonNegative(graph.edges().size());\n",
        "48": "  }\n",
        "51": "  public static <N, V> ImmutableGraph<N, V> copyOf(Graph<N, V> graph) {\n",
        "53": "        ? (ImmutableGraph<N, V>) graph\n",
        "54": "        : new ImmutableGraph<N, V>(graph);\n",
        "63": "  public static <N, V> ImmutableGraph<N, V> copyOf(ImmutableGraph<N, V> graph) {\n",
        "67": "  private static <N, V> ImmutableMap<N, GraphConnections<N, V>> getNodeConnections(\n",
        "68": "      Graph<N, V> graph) {\n",
        "72": "    ImmutableMap.Builder<N, GraphConnections<N, V>> nodeConnections = ImmutableMap.builder();\n",
        "79": "  private static <N, V> GraphConnections<N, V> connectionsOf(\n",
        "80": "      final Graph<N, V> graph, final N node) {\n",
        "81": "    Function<N, V> successorNodeToValueFn =\n",
        "82": "        new Function<N, V>() {\n",
        "83": "          @Override\n",
        "84": "          public V apply(N successorNode) {\n",
        "85": "            return graph.edgeValue(node, successorNode);\n",
        "86": "          }\n",
        "87": "        };\n",
        "90": "            graph.predecessors(node), Maps.asMap(graph.successors(node), successorNodeToValueFn))\n",
        "92": "            Maps.asMap(graph.adjacentNodes(node), successorNodeToValueFn));\n",
        "95": "  @Override\n",
        "96": "  protected long edgeCount() {\n",
        "97": "    return edgeCount;\n"
    }
}