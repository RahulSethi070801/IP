{
    "addition": {
        "28": " * Tests for {@link ConfigurableMutableValueGraph} and related functionality.\n",
        "32": "public final class ValueGraphTest {\n",
        "33": "  MutableValueGraph<Integer, String> graph;\n",
        "37": "    assertThat(Graphs.equivalent(graph, Graphs.copyOf(graph))).isTrue();\n",
        "38": "    assertThat(Graphs.equivalent(graph, ImmutableValueGraph.copyOf(graph))).isTrue();\n",
        "39": "\n",
        "40": "    for (Integer node : graph.nodes()) {\n",
        "41": "      for (Integer otherNode : graph.nodes()) {\n",
        "42": "        if (graph.successors(node).contains(otherNode)) {\n",
        "43": "          assertThat(graph.edgeValue(node, otherNode)).isNotNull();\n",
        "44": "        } else {\n",
        "45": "          assertThat(graph.edgeValueOrDefault(node, otherNode, null)).isNull();\n",
        "46": "        }\n",
        "47": "      }\n",
        "55": "    graph = ValueGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "75": "    graph = ValueGraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "95": "    graph = ValueGraphBuilder.directed().build();\n",
        "105": "    graph = ValueGraphBuilder.undirected().build();\n",
        "115": "    graph = ValueGraphBuilder.directed().build();\n",
        "130": "    graph = ValueGraphBuilder.undirected().build();\n",
        "144": "    graph = ValueGraphBuilder.directed().build();\n",
        "158": "    graph = ValueGraphBuilder.undirected().build();\n",
        "171": "    graph = ValueGraphBuilder.directed().build();\n",
        "188": "\n",
        "189": "  @Test\n",
        "190": "  public void equivalence_considersEdgeValue() {\n",
        "191": "    graph = ValueGraphBuilder.undirected().build();\n",
        "192": "    graph.putEdgeValue(1, 2, \"valueA\");\n",
        "193": "\n",
        "194": "    MutableValueGraph<Integer, String> otherGraph = ValueGraphBuilder.undirected().build();\n",
        "195": "    otherGraph.putEdgeValue(1, 2, \"valueA\");\n",
        "196": "\n",
        "197": "    assertThat(Graphs.equivalent(graph, otherGraph)).isTrue();\n",
        "198": "    assertThat(Graphs.equivalent((Graph<Integer>) graph, otherGraph)).isTrue();\n",
        "199": "\n",
        "200": "    otherGraph.putEdgeValue(1, 2, \"valueB\");\n",
        "201": "\n",
        "202": "    assertThat(Graphs.equivalent(graph, otherGraph)).isFalse(); // values differ\n",
        "203": "    assertThat(Graphs.equivalent((Graph<Integer>) graph, otherGraph)).isTrue();\n",
        "204": "  }\n"
    },
    "removed": {
        "22": "import com.google.common.testing.EqualsTester;\n",
        "29": " * Tests for {@link ConfigurableMutableGraph} and related functionality.\n",
        "33": "public final class GraphTest {\n",
        "34": "  MutableGraph<Integer, String> graph;\n",
        "38": "    new EqualsTester().addEqualityGroup(\n",
        "39": "        graph,\n",
        "40": "        Graphs.copyOf(graph),\n",
        "41": "        ImmutableGraph.copyOf(graph)).testEquals();\n",
        "42": "\n",
        "43": "    for (Endpoints<Integer> edge : graph.edges()) {\n",
        "44": "      assertThat(graph.edgeValue(edge.nodeA(), edge.nodeB())).isNotNull();\n",
        "52": "    graph = GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "72": "    graph = GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "92": "    graph = GraphBuilder.directed().build();\n",
        "102": "    graph = GraphBuilder.undirected().build();\n",
        "112": "    graph = GraphBuilder.directed().build();\n",
        "127": "    graph = GraphBuilder.undirected().build();\n",
        "141": "    graph = GraphBuilder.directed().build();\n",
        "155": "    graph = GraphBuilder.undirected().build();\n",
        "168": "    graph = GraphBuilder.directed().build();\n"
    }
}