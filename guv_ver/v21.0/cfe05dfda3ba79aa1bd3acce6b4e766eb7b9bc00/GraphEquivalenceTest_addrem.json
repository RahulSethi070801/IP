{
    "addition": {
        "19": "import static com.google.common.truth.Truth.assertThat;\n",
        "20": "\n",
        "31": "public final class GraphEquivalenceTest {\n",
        "42": "  private final MutableGraph<Integer> graph;\n",
        "50": "  public GraphEquivalenceTest(GraphType graphType) {\n",
        "55": "  private static MutableGraph<Integer> createGraph(GraphType graphType) {\n",
        "58": "        return GraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "60": "        return GraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "78": "  public void equivalent_nodeSetsDiffer() {\n",
        "81": "    MutableGraph<Integer> g2 = createGraph(graphType);\n",
        "84": "    assertThat(Graphs.equivalent(graph, g2)).isFalse();\n",
        "89": "  public void equivalent_directedVsUndirected() {\n",
        "92": "    MutableGraph<Integer> g2 = createGraph(oppositeType(graphType));\n",
        "95": "    assertThat(Graphs.equivalent(graph, g2)).isFalse();\n",
        "100": "  public void equivalent_selfLoop_directedVsUndirected() {\n",
        "103": "    MutableGraph<Integer> g2 = createGraph(oppositeType(graphType));\n",
        "106": "    assertThat(Graphs.equivalent(graph, g2)).isFalse();\n",
        "110": "  // In this case the graphs are considered equivalent; the property differences are irrelevant.\n",
        "112": "  public void equivalent_propertiesDiffer() {\n",
        "115": "    MutableGraph<Integer> g2 = GraphBuilder.from(graph)\n",
        "120": "    assertThat(Graphs.equivalent(graph, g2)).isTrue();\n",
        "124": "  // In this case the graphs are considered equivalent; the edge add orderings are irrelevant.\n",
        "126": "  public void equivalent_edgeAddOrdersDiffer() {\n",
        "127": "    GraphBuilder<Integer> builder = GraphBuilder.from(graph);\n",
        "128": "    MutableGraph<Integer> g1 = builder.build();\n",
        "129": "    MutableGraph<Integer> g2 = builder.build();\n",
        "139": "    assertThat(Graphs.equivalent(g1, g2)).isTrue();\n",
        "143": "  public void equivalent_edgeDirectionsDiffer() {\n",
        "146": "    MutableGraph<Integer> g2 = createGraph(graphType);\n",
        "151": "        assertThat(Graphs.equivalent(graph, g2)).isTrue();\n",
        "154": "        assertThat(Graphs.equivalent(graph, g2)).isFalse();\n"
    },
    "removed": {
        "19": "import com.google.common.testing.EqualsTester;\n",
        "30": "public final class GraphEqualsTest {\n",
        "41": "  private final MutableBasicGraph<Integer> graph;\n",
        "49": "  public GraphEqualsTest(GraphType graphType) {\n",
        "54": "  private static MutableBasicGraph<Integer> createGraph(GraphType graphType) {\n",
        "57": "        return BasicGraphBuilder.undirected().allowsSelfLoops(true).build();\n",
        "59": "        return BasicGraphBuilder.directed().allowsSelfLoops(true).build();\n",
        "77": "  public void equals_nodeSetsDiffer() {\n",
        "80": "    MutableBasicGraph<Integer> g2 = createGraph(graphType);\n",
        "83": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "88": "  public void equals_directedVsUndirected() {\n",
        "91": "    MutableBasicGraph<Integer> g2 = createGraph(oppositeType(graphType));\n",
        "94": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "99": "  public void equals_selfLoop_directedVsUndirected() {\n",
        "102": "    MutableBasicGraph<Integer> g2 = createGraph(oppositeType(graphType));\n",
        "105": "    new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n",
        "109": "  // (In this case the graphs are considered equal; the property differences are irrelevant.)\n",
        "111": "  public void equals_propertiesDiffer() {\n",
        "114": "    MutableBasicGraph<Integer> g2 = BasicGraphBuilder.from(graph)\n",
        "119": "    new EqualsTester().addEqualityGroup(graph, g2).testEquals();\n",
        "123": "  // (In this case the graphs are considered equal; the edge add orderings are irrelevant.)\n",
        "125": "  public void equals_edgeAddOrdersDiffer() {\n",
        "126": "    BasicGraphBuilder<Integer> builder = BasicGraphBuilder.from(graph);\n",
        "127": "    MutableBasicGraph<Integer> g1 = builder.build();\n",
        "128": "    MutableBasicGraph<Integer> g2 = builder.build();\n",
        "138": "    new EqualsTester().addEqualityGroup(g1, g2).testEquals();\n",
        "142": "  public void equals_edgeDirectionsDiffer() {\n",
        "145": "    MutableBasicGraph<Integer> g2 = createGraph(graphType);\n",
        "150": "        new EqualsTester().addEqualityGroup(graph, g2).testEquals();\n",
        "153": "        new EqualsTester().addEqualityGroup(graph).addEqualityGroup(g2).testEquals();\n"
    }
}