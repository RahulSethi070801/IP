{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "20": "import static com.google.common.graph.GraphConstants.NOT_AVAILABLE_ON_UNDIRECTED;\n",
        "21": "\n",
        "22": "import com.google.common.annotations.Beta;\n",
        "23": "import com.google.common.base.Objects;\n",
        "24": "import com.google.common.collect.Iterators;\n",
        "25": "import com.google.common.collect.UnmodifiableIterator;\n",
        "26": "\n",
        "27": "/**\n",
        "28": " * An immutable pair representing the two (possibly equal, in the case of a self-loop) endpoints of\n",
        "29": " * an edge in a graph. The {@link EndpointPair} of a directed edge is an ordered pair of nodes\n",
        "30": " * ({@link #source()} and {@link #source()}). The {@link EndpointPair} of an undirected edge is an\n",
        "31": " * unordered pair of nodes ({@link #nodeU()} and {@link #nodeV()}).\n",
        "32": " *\n",
        "33": " * @author James Sexton\n",
        "34": " * @since 20.0\n",
        "35": " */\n",
        "36": "@Beta\n",
        "37": "public abstract class EndpointPair<N> implements Iterable<N> {\n",
        "38": "  private final N nodeU;\n",
        "39": "  private final N nodeV;\n",
        "40": "\n",
        "41": "  private EndpointPair(N nodeU, N nodeV) {\n",
        "42": "    this.nodeU = checkNotNull(nodeU);\n",
        "43": "    this.nodeV = checkNotNull(nodeV);\n",
        "44": "  }\n",
        "45": "\n",
        "46": "  // TODO(b/31167164): Decide which of these constructors to make public.\n",
        "47": "\n",
        "48": "  /** Returns an {@link EndpointPair} representing the endpoints of an edge in {@code graph}. */\n",
        "49": "  public static <N> EndpointPair<N> of(Graph<?> graph, N nodeU, N nodeV) {\n",
        "50": "    return graph.isDirected() ? ordered(nodeU, nodeV) : unordered(nodeU, nodeV);\n",
        "51": "  }\n",
        "52": "\n",
        "53": "  /** Returns an {@link EndpointPair} representing the endpoints of an edge in {@code network}. */\n",
        "54": "  public static <N> EndpointPair<N> of(Network<?, ?> network, N nodeU, N nodeV) {\n",
        "55": "    return network.isDirected() ? ordered(nodeU, nodeV) : unordered(nodeU, nodeV);\n",
        "56": "  }\n",
        "57": "\n",
        "58": "  /** Returns an {@link EndpointPair} representing the endpoints of a directed edge. */\n",
        "59": "  static <N> EndpointPair.Ordered<N> ordered(N source, N target) {\n",
        "60": "    return new Ordered<N>(source, target);\n",
        "61": "  }\n",
        "62": "\n",
        "63": "  /** Returns an {@link EndpointPair} representing the endpoints of an undirected edge. */\n",
        "64": "  static <N> EndpointPair.Unordered<N> unordered(N nodeU, N nodeV) {\n",
        "65": "    return new Unordered<N>(nodeU, nodeV);\n",
        "66": "  }\n",
        "67": "\n",
        "68": "  /**\n",
        "69": "   * If this {@link EndpointPair} {@link #isOrdered()}, returns the node which is the source.\n",
        "70": "   *\n",
        "71": "   * @throws UnsupportedOperationException if this {@link EndpointPair} is not ordered\n",
        "72": "   */\n",
        "73": "  public abstract N source();\n",
        "74": "\n",
        "75": "  /**\n",
        "76": "   * If this {@link EndpointPair} {@link #isOrdered()}, returns the node which is the target.\n",
        "77": "   *\n",
        "78": "   * @throws UnsupportedOperationException if this {@link EndpointPair} is not ordered\n",
        "79": "   */\n",
        "80": "  public abstract N target();\n",
        "81": "\n",
        "82": "  /**\n",
        "83": "   * If this {@link EndpointPair} {@link #isOrdered()} returns the {@link #source()}; otherwise,\n",
        "84": "   * returns an arbitrary (but consistent) endpoint of the origin edge.\n",
        "85": "   */\n",
        "86": "  public final N nodeU() {\n",
        "87": "    return nodeU;\n",
        "88": "  }\n",
        "89": "\n",
        "90": "  /**\n",
        "91": "   * Returns the node {@link #adjacentNode(Object) adjacent} to {@link #nodeU()} along the origin\n",
        "92": "   * edge. If this {@link EndpointPair} {@link #isOrdered()}, this is equal to {@link #target()}.\n",
        "93": "   */\n",
        "94": "  public final N nodeV() {\n",
        "95": "    return nodeV;\n",
        "96": "  }\n",
        "97": "\n",
        "98": "  /**\n",
        "99": "   * Returns the node that is adjacent to {@code node} along the origin edge.\n",
        "100": "   *\n",
        "101": "   * @throws IllegalArgumentException if this {@link EndpointPair} does not contain {@code node}\n",
        "102": "   */\n",
        "103": "  public final N adjacentNode(Object node) {\n",
        "104": "    checkNotNull(node, \"node\");\n",
        "105": "    if (node.equals(nodeU)) {\n",
        "106": "      return nodeV;\n",
        "107": "    } else if (node.equals(nodeV)) {\n",
        "108": "      return nodeU;\n",
        "109": "    } else {\n",
        "110": "      throw new IllegalArgumentException(\n",
        "111": "          String.format(\"EndpointPair %s does not contain node %s\", this, node));\n",
        "112": "    }\n",
        "113": "  }\n",
        "114": "\n",
        "115": "  /**\n",
        "116": "   * Returns {@code true} iff this {@link EndpointPair} is an ordered pair (i.e. represents the\n",
        "117": "   * endpoints of a directed edge).\n",
        "118": "   */\n",
        "119": "  public abstract boolean isOrdered();\n",
        "120": "\n",
        "121": "  /** Iterates in the order {@link #nodeU()}, {@link #nodeV()}. */\n",
        "122": "  @Override\n",
        "123": "  public final UnmodifiableIterator<N> iterator() {\n",
        "124": "    return Iterators.forArray(nodeU, nodeV);\n",
        "125": "  }\n",
        "126": "\n",
        "127": "  /**\n",
        "128": "   * Two ordered {@link EndpointPair}s are equal if their {@link #source()} and {@link #target()}\n",
        "129": "   * are equal. Two unordered {@link EndpointPair}s are equal if they contain the same nodes. An\n",
        "130": "   * ordered {@link EndpointPair} is never equal to an unordered {@link EndpointPair}.\n",
        "131": "   */\n",
        "132": "  @Override\n",
        "133": "  public abstract boolean equals(Object obj);\n",
        "134": "\n",
        "135": "  /**\n",
        "136": "   * The hashcode of an ordered {@link EndpointPair} is equal to {@code Objects.hashCode(source(),\n",
        "137": "   * target())}. The hashcode of an unordered {@link EndpointPair} is equal to {@code\n",
        "138": "   * nodeU().hashCode() ^ nodeV().hashCode()}.\n",
        "139": "   */\n",
        "140": "  @Override\n",
        "141": "  public abstract int hashCode();\n",
        "142": "\n",
        "143": "  private static final class Ordered<N> extends EndpointPair<N> {\n",
        "144": "    private Ordered(N source, N target) {\n",
        "145": "      super(source, target);\n",
        "146": "    }\n",
        "147": "\n",
        "148": "    @Override\n",
        "149": "    public N source() {\n",
        "150": "      return nodeU();\n",
        "151": "    }\n",
        "152": "\n",
        "153": "    @Override\n",
        "154": "    public N target() {\n",
        "155": "      return nodeV();\n",
        "156": "    }\n",
        "157": "\n",
        "158": "    @Override\n",
        "159": "    public boolean isOrdered() {\n",
        "160": "      return true;\n",
        "161": "    }\n",
        "162": "\n",
        "163": "    @Override\n",
        "164": "    public boolean equals(Object obj) {\n",
        "165": "      if (obj == this) {\n",
        "166": "        return true;\n",
        "167": "      }\n",
        "168": "      if (!(obj instanceof EndpointPair)) {\n",
        "169": "        return false;\n",
        "170": "      }\n",
        "171": "\n",
        "172": "      EndpointPair<?> other = (EndpointPair<?>) obj;\n",
        "173": "      if (isOrdered() != other.isOrdered()) {\n",
        "174": "        return false;\n",
        "175": "      }\n",
        "176": "\n",
        "177": "      return source().equals(other.source()) && target().equals(other.target());\n",
        "178": "    }\n",
        "179": "\n",
        "180": "    @Override\n",
        "181": "    public int hashCode() {\n",
        "182": "      return Objects.hashCode(source(), target());\n",
        "183": "    }\n",
        "184": "\n",
        "185": "    @Override\n",
        "186": "    public String toString() {\n",
        "187": "      return String.format(\"<%s -> %s>\", source(), target());\n",
        "188": "    }\n",
        "189": "  }\n",
        "190": "\n",
        "191": "  private static final class Unordered<N> extends EndpointPair<N> {\n",
        "192": "    private Unordered(N nodeU, N nodeV) {\n",
        "193": "      super(nodeU, nodeV);\n",
        "194": "    }\n",
        "195": "\n",
        "196": "    @Override\n",
        "197": "    public N source() {\n",
        "198": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "199": "    }\n",
        "200": "\n",
        "201": "    @Override\n",
        "202": "    public N target() {\n",
        "203": "      throw new UnsupportedOperationException(NOT_AVAILABLE_ON_UNDIRECTED);\n",
        "204": "    }\n",
        "205": "\n",
        "206": "    @Override\n",
        "207": "    public boolean isOrdered() {\n",
        "208": "      return false;\n",
        "209": "    }\n",
        "210": "\n",
        "211": "    @Override\n",
        "212": "    public boolean equals(Object obj) {\n",
        "213": "      if (obj == this) {\n",
        "214": "        return true;\n",
        "215": "      }\n",
        "216": "      if (!(obj instanceof EndpointPair)) {\n",
        "217": "        return false;\n",
        "218": "      }\n",
        "219": "\n",
        "220": "      EndpointPair<?> other = (EndpointPair<?>) obj;\n",
        "221": "      if (isOrdered() != other.isOrdered()) {\n",
        "222": "        return false;\n",
        "223": "      }\n",
        "224": "\n",
        "225": "      // Equivalent to the following simple implementation:\n",
        "226": "      // boolean condition1 = nodeU().equals(other.nodeU()) && nodeV().equals(other.nodeV());\n",
        "227": "      // boolean condition2 = nodeU().equals(other.nodeV()) && nodeV().equals(other.nodeU());\n",
        "228": "      // return condition1 || condition2;\n",
        "229": "      if (nodeU().equals(other.nodeU())) { // check condition1\n",
        "230": "        // Here's the tricky bit. We don't have to explicitly check for condition2 in this case.\n",
        "231": "        // Why? The second half of condition2 requires that nodeV equals other.nodeU.\n",
        "232": "        // We already know that nodeU equals other.nodeU. Combined with the earlier statement,\n",
        "233": "        // and the transitive property of equality, this implies that nodeU equals nodeV.\n",
        "234": "        // If nodeU equals nodeV, condition1 == condition2, so checking condition1 is sufficient.\n",
        "235": "        return nodeV().equals(other.nodeV());\n",
        "236": "      }\n",
        "237": "      return nodeU().equals(other.nodeV()) && nodeV().equals(other.nodeU()); // check condition2\n",
        "238": "    }\n",
        "239": "\n",
        "240": "    @Override\n",
        "241": "    public int hashCode() {\n",
        "242": "      return nodeU().hashCode() ^ nodeV().hashCode();\n",
        "243": "    }\n",
        "244": "\n",
        "245": "    @Override\n",
        "246": "    public String toString() {\n",
        "247": "      return String.format(\"[%s, %s]\", nodeU(), nodeV());\n",
        "248": "    }\n",
        "249": "  }\n",
        "250": "}\n"
    },
    "removed": {}
}