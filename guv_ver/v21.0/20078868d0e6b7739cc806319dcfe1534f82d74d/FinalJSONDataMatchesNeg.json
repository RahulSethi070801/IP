[{"func":{"oldfunccode":"","newfunccode":"20078868d0e6b7739cc806319dcfe1534f82d74d/Codes_neg/Match_newfunccode_20078868d0e6b7739cc806319dcfe1534f82d74d_1.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/20078868d0e6b7739cc806319dcfe1534f82d74d/AbstractGraph","pathinproj":"guava/src/com/google/common/graph/AbstractGraph.java","addlines":[57,58,59,60],"dellines":[192,193,194,196,197,198,199,212,213,214,215,216,217,191],"addcode":["  @Override\n","  public long outDegree(Object node) {\n","    return outEdges(node).size();\n","  }\n"],"delcode":["  @Override\n","  public long outDegree(Object node) {\n","    return outEdges(node).size();\n","  }\n","  @Override\n","  public long outDegree(Object node) {\n","    return degree(node);\n","  }\n","  @Override\n","  public long outDegree(Object node) {\n","    return outEdges(node).size();\n","  }\n","  @Override\n","  public long outDegree(Object node) {\n","    return degree(node);\n","  }\n"],"methodSig":"public long outDegree(Object node)"},"doc":{"oldfunccode":"20078868d0e6b7739cc806319dcfe1534f82d74d/Codes_neg/Match_olddocfunccode_20078868d0e6b7739cc806319dcfe1534f82d74d_1.txt","newfunccode":"20078868d0e6b7739cc806319dcfe1534f82d74d/Codes_neg/Match_newdocfunccode_20078868d0e6b7739cc806319dcfe1534f82d74d_1.txt","newdoc":"","newJdoc":"20078868d0e6b7739cc806319dcfe1534f82d74d/Codes_neg/Match_newdocnewJdoc_20078868d0e6b7739cc806319dcfe1534f82d74d_1.txt","olddoc":"","oldJdoc":"20078868d0e6b7739cc806319dcfe1534f82d74d/Codes_neg/Match_olddocJdoc_20078868d0e6b7739cc806319dcfe1534f82d74d_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/20078868d0e6b7739cc806319dcfe1534f82d74d/Graph","pathinproj":"guava/src/com/google/common/graph/Graph.java","addlines":[418,419,407,398,399],"dellines":[401,406,407,408,396,397],"addcode":["   * Returns {@code true} iff {@code object} is a graph that has the same node/edge relationships\n","   * as those in this graph.\n","   *     <br>Thus, every edge in A and B connect the same nodes in the same direction (if any).\n","   *\n","   * <p>A reference implementation of this is provided by {@link Graphs#equal(Graph, Graph)}.\n"],"delcode":["   * Returns {@code true} iff {@code object} is the same type of graph (directed, undirected,\n","   * hypergraph) as this graph, and the same node/edge relationships exist in both graphs.\n","   * <li>A and B are of the same type ({@code DirectedGraph, UndirectedGraph, Hypergraph})\n","   *     <br>Thus, even if a {@code node} has the same sets of <i>adjacent</i> nodes\n","   *         (neighbors) in both A and B, if the sets of edges by which {@code node} is connected to\n","   *         its adjacent nodes are not the same in both A and B, then A and B are not equal.\n"],"methodSig":" boolean equals(@Nullable Object object)"},"id":1,"flag":1,"commit":"20078868d0e6b7739cc806319dcfe1534f82d74d"}]