{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import javax.annotation.Nullable;\n",
        "20": "\n",
        "21": "/**\n",
        "22": " * This class provides a skeletal implementation of {@link Graph}. It is recommended to extend this\n",
        "23": " * class rather than implement {@link Graph} directly, to ensure consistent {@link #equals(Object)}\n",
        "24": " * and {@link #hashCode()} results across different graph implementations.\n",
        "25": " *\n",
        "26": " * @author James Sexton\n",
        "27": " * @param <N> Node parameter type\n",
        "28": " * @param <E> Edge parameter type\n",
        "29": " */\n",
        "30": "public abstract class AbstractGraph<N, E> implements Graph<N, E> {\n",
        "31": "\n",
        "32": "  protected final GraphConfig config;\n",
        "33": "\n",
        "34": "  /**\n",
        "35": "   * Not all subclasses necessarily need to expose a constructor that takes a {@link GraphConfig},\n",
        "36": "   * but they do need to provide the {@code config} here that will be returned by {@link #config()}.\n",
        "37": "   */\n",
        "38": "  protected AbstractGraph(GraphConfig config) {\n",
        "39": "    this.config = config;\n",
        "40": "  }\n",
        "41": "\n",
        "42": "  @Override\n",
        "43": "  public GraphConfig config() {\n",
        "44": "    return config;\n",
        "45": "  }\n",
        "46": "\n",
        "47": "  @Override\n",
        "48": "  public long degree(Object node) {\n",
        "49": "    return incidentEdges(node).size();\n",
        "50": "  }\n",
        "51": "\n",
        "52": "  @Override\n",
        "53": "  public long inDegree(Object node) {\n",
        "54": "    return inEdges(node).size();\n",
        "55": "  }\n",
        "56": "\n",
        "57": "  @Override\n",
        "58": "  public long outDegree(Object node) {\n",
        "59": "    return outEdges(node).size();\n",
        "60": "  }\n",
        "61": "\n",
        "62": "  @Override\n",
        "63": "  public boolean equals(@Nullable Object object) {\n",
        "64": "    if (!(object instanceof Graph)) {\n",
        "65": "      return false;\n",
        "66": "    }\n",
        "67": "    return Graphs.equal(this, (Graph<?, ?>) object);\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  @Override\n",
        "71": "  public int hashCode() {\n",
        "72": "    return Graphs.hashCode(this);\n",
        "73": "  }\n",
        "74": "\n",
        "75": "  @Override\n",
        "76": "  public String toString() {\n",
        "77": "    return Graphs.toString(this);\n",
        "78": "  }\n",
        "79": "}\n"
    },
    "removed": {}
}