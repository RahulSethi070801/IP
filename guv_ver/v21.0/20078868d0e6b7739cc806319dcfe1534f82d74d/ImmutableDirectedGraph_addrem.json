{
    "addition": {
        "80": "    super(builder.directedGraph.config());\n"
    },
    "removed": {
        "25": "import com.google.common.base.Objects;\n",
        "33": "import javax.annotation.Nullable;\n",
        "34": "\n",
        "81": "  private final GraphConfig config;\n",
        "101": "    this.config = directedGraph.config();\n",
        "114": "  @Override\n",
        "115": "  public GraphConfig config() {\n",
        "116": "    return config;\n",
        "117": "  }\n",
        "118": "\n",
        "186": "  @Override\n",
        "187": "  public long degree(Object node) {\n",
        "188": "    return incidentEdges(node).size();\n",
        "189": "  }\n",
        "190": "\n",
        "191": "  @Override\n",
        "192": "  public long inDegree(Object node) {\n",
        "193": "    return inEdges(node).size();\n",
        "194": "  }\n",
        "195": "\n",
        "196": "  @Override\n",
        "197": "  public long outDegree(Object node) {\n",
        "198": "    return outEdges(node).size();\n",
        "199": "  }\n",
        "200": "\n",
        "211": "  @Override\n",
        "212": "  public boolean equals(@Nullable Object object) {\n",
        "213": "    return (object instanceof DirectedGraph) && Graphs.equal(this, (DirectedGraph<?, ?>) object);\n",
        "214": "  }\n",
        "215": "\n",
        "216": "  @Override\n",
        "217": "  public int hashCode() {\n",
        "218": "    // The node set is included in the hash to differentiate between graphs with isolated nodes.\n",
        "219": "    return Objects.hashCode(nodes(), edgeToIncidentNodes);\n",
        "220": "  }\n",
        "221": "\n",
        "222": "  @Override\n",
        "223": "  public String toString() {\n",
        "224": "    return Graphs.toString(this);\n",
        "225": "  }\n",
        "226": "\n"
    }
}