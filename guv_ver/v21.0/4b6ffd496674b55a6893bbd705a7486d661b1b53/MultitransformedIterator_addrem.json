{
    "addition": {
        "1": "/*\n",
        "2": " * Copyright (C) 2016 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n",
        "5": " * in compliance with the License. You may obtain a copy of the License at\n",
        "6": " *\n",
        "7": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "8": " *\n",
        "9": " * Unless required by applicable law or agreed to in writing, software distributed under the License\n",
        "10": " * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n",
        "11": " * or implied. See the License for the specific language governing permissions and limitations under\n",
        "12": " * the License.\n",
        "13": " */\n",
        "14": "\n",
        "15": "package com.google.common.collect;\n",
        "16": "\n",
        "17": "import static com.google.common.base.Preconditions.checkNotNull;\n",
        "18": "import static com.google.common.collect.CollectPreconditions.checkRemove;\n",
        "19": "\n",
        "20": "import com.google.common.annotations.GwtCompatible;\n",
        "21": "\n",
        "22": "import java.util.Iterator;\n",
        "23": "import java.util.NoSuchElementException;\n",
        "24": "\n",
        "25": "/**\n",
        "26": " * Similar to {@link TransformedIterator}, this iterator transforms a backing iterator.\n",
        "27": " * However, rather than enforcing a one-to-one mapping, each element in the backing iterator\n",
        "28": " * can be transformed into an arbitrary number of elements (i.e. a one-to-many mapping).\n",
        "29": " *\n",
        "30": " * @author James Sexton\n",
        "31": " */\n",
        "32": "@GwtCompatible\n",
        "33": "abstract class MultitransformedIterator<F, T>  implements Iterator<T> {\n",
        "34": "  final Iterator<? extends F> backingIterator;\n",
        "35": "\n",
        "36": "  private Iterator<? extends T> current = Iterators.emptyIterator();\n",
        "37": "  private Iterator<? extends T> removeFrom;\n",
        "38": "\n",
        "39": "  MultitransformedIterator(Iterator<? extends F> backingIterator) {\n",
        "40": "    this.backingIterator = checkNotNull(backingIterator);\n",
        "41": "  }\n",
        "42": "\n",
        "43": "  abstract Iterator<? extends T> transform(F from);\n",
        "44": "\n",
        "45": "  @Override\n",
        "46": "  public boolean hasNext() {\n",
        "47": "    checkNotNull(current); // eager for GWT\n",
        "48": "    if (current.hasNext()) {\n",
        "49": "      return true;\n",
        "50": "    }\n",
        "51": "    while (backingIterator.hasNext()) {\n",
        "52": "      // checkNotNull the assignment, so that current is null even if the exception is caught\n",
        "53": "      checkNotNull(current = transform(backingIterator.next()));\n",
        "54": "      if (current.hasNext()) {\n",
        "55": "        return true;\n",
        "56": "      }\n",
        "57": "    }\n",
        "58": "    return false;\n",
        "59": "  }\n",
        "60": "\n",
        "61": "  @Override\n",
        "62": "  public T next() {\n",
        "63": "    if (!hasNext()) {\n",
        "64": "      throw new NoSuchElementException();\n",
        "65": "    }\n",
        "66": "    removeFrom = current;\n",
        "67": "    return current.next();\n",
        "68": "  }\n",
        "69": "\n",
        "70": "  @Override\n",
        "71": "  public void remove() {\n",
        "72": "    checkRemove(removeFrom != null);\n",
        "73": "    removeFrom.remove();\n",
        "74": "    removeFrom = null;\n",
        "75": "  }\n",
        "76": "}\n"
    },
    "removed": {}
}