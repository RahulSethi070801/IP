{
    "addition": {
        "527": "  public static <T> Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs) {\n",
        "528": "    return new ConcatenatedIterator<T>(inputs);\n",
        "1271": "  private static class ConcatenatedIterator<T>\n",
        "1272": "      extends MultitransformedIterator<Iterator<? extends T>, T>  {\n",
        "1273": "\n",
        "1274": "    public ConcatenatedIterator(Iterator<? extends Iterator<? extends T>> iterators) {\n",
        "1275": "      super(getComponentIterators(iterators));\n",
        "1276": "    }\n",
        "1277": "\n",
        "1278": "    @Override\n",
        "1279": "    Iterator<? extends T> transform(Iterator<? extends T> iterator) {\n",
        "1280": "      return iterator;\n",
        "1281": "    }\n",
        "1282": "\n",
        "1283": "    /**\n",
        "1284": "     * Using the component iterators, rather than the input iterators directly,\n",
        "1285": "     * allows for higher performance in the case of nested concatenation.\n",
        "1286": "     */\n",
        "1287": "    private static <T> Iterator<Iterator<? extends T>> getComponentIterators(\n",
        "1288": "        Iterator<? extends Iterator<? extends T>> iterators) {\n",
        "1289": "      return new MultitransformedIterator<Iterator<? extends T>, Iterator<? extends T>>(iterators) {\n",
        "1290": "        @Override\n",
        "1291": "        Iterator<? extends Iterator<? extends T>> transform(Iterator<? extends T> iterator) {\n",
        "1292": "          if (iterator instanceof ConcatenatedIterator) {\n",
        "1293": "            ConcatenatedIterator<? extends T> concatIterator =\n",
        "1294": "                (ConcatenatedIterator<? extends T>) iterator;\n",
        "1295": "            return getComponentIterators(concatIterator.backingIterator);\n",
        "1296": "          } else {\n",
        "1297": "            return Iterators.singletonIterator(iterator);\n",
        "1298": "          }\n",
        "1299": "        }\n",
        "1300": "      };\n",
        "1301": "    }\n",
        "1302": "  }\n",
        "1303": "\n"
    },
    "removed": {
        "456": "   *\n",
        "457": "   * <p><b>Note:</b> the current implementation is not suitable for nested\n",
        "458": "   * concatenated iterators, i.e. the following should be avoided when in a loop:\n",
        "459": "   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n",
        "460": "   * resulting iterator has a cubic complexity to the depth of the nesting.\n",
        "476": "   *\n",
        "477": "   * <p><b>Note:</b> the current implementation is not suitable for nested\n",
        "478": "   * concatenated iterators, i.e. the following should be avoided when in a loop:\n",
        "479": "   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n",
        "480": "   * resulting iterator has a cubic complexity to the depth of the nesting.\n",
        "498": "   *\n",
        "499": "   * <p><b>Note:</b> the current implementation is not suitable for nested\n",
        "500": "   * concatenated iterators, i.e. the following should be avoided when in a loop:\n",
        "501": "   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n",
        "502": "   * resulting iterator has a cubic complexity to the depth of the nesting.\n",
        "524": "   * <p><b>Note:</b> the current implementation is not suitable for nested\n",
        "525": "   * concatenated iterators, i.e. the following should be avoided when in a loop:\n",
        "526": "   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n",
        "527": "   * resulting iterator has a cubic complexity to the depth of the nesting.\n",
        "528": "   *\n",
        "546": "   *\n",
        "547": "   * <p><b>Note:</b> the current implementation is not suitable for nested\n",
        "548": "   * concatenated iterators, i.e. the following should be avoided when in a loop:\n",
        "549": "   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n",
        "550": "   * resulting iterator has a cubic complexity to the depth of the nesting.\n",
        "552": "  public static <T> Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs) {\n",
        "553": "    checkNotNull(inputs);\n",
        "554": "    return new Iterator<T>() {\n",
        "555": "      Iterator<? extends T> current = emptyIterator();\n",
        "556": "      Iterator<? extends T> removeFrom;\n",
        "557": "\n",
        "558": "      @Override\n",
        "559": "      public boolean hasNext() {\n",
        "560": "        // http://code.google.com/p/google-collections/issues/detail?id=151\n",
        "561": "        // current.hasNext() might be relatively expensive, worth minimizing.\n",
        "562": "        boolean currentHasNext;\n",
        "563": "        // checkNotNull eager for GWT\n",
        "564": "        // note: it must be here & not where 'current' is assigned,\n",
        "565": "        // because otherwise we'll have called inputs.next() before throwing\n",
        "566": "        // the first NPE, and the next time around we'll call inputs.next()\n",
        "567": "        // again, incorrectly moving beyond the error.\n",
        "568": "        while (!(currentHasNext = checkNotNull(current).hasNext()) && inputs.hasNext()) {\n",
        "569": "          current = inputs.next();\n",
        "570": "        }\n",
        "571": "        return currentHasNext;\n",
        "572": "      }\n",
        "573": "\n",
        "574": "      @Override\n",
        "575": "      public T next() {\n",
        "576": "        if (!hasNext()) {\n",
        "577": "          throw new NoSuchElementException();\n",
        "578": "        }\n",
        "579": "        removeFrom = current;\n",
        "580": "        return current.next();\n",
        "581": "      }\n",
        "582": "\n",
        "583": "      @Override\n",
        "584": "      public void remove() {\n",
        "585": "        checkRemove(removeFrom != null);\n",
        "586": "        removeFrom.remove();\n",
        "587": "        removeFrom = null;\n",
        "588": "      }\n",
        "589": "    };\n"
    }
}