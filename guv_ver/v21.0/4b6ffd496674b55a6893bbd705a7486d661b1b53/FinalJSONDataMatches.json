[{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_1.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[576,577,578,579,580,581,582,583,584,585,586,587,588,589,552,553,554,555,556,557,558,559,562,568,569,570,571,572,573,574,575],"addcode":[],"delcode":["  public static <T> Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs) {\n","    checkNotNull(inputs);\n","    return new Iterator<T>() {\n","      Iterator<? extends T> current = emptyIterator();\n","      Iterator<? extends T> removeFrom;\n","\n","      @Override\n","      public boolean hasNext() {\n","        boolean currentHasNext;\n","        while (!(currentHasNext = checkNotNull(current).hasNext()) && inputs.hasNext()) {\n","          current = inputs.next();\n","        }\n","        return currentHasNext;\n","      }\n","\n","      @Override\n","      public T next() {\n","        if (!hasNext()) {\n","          throw new NoSuchElementException();\n","        }\n","        removeFrom = current;\n","        return current.next();\n","      }\n","\n","      @Override\n","      public void remove() {\n","        checkRemove(removeFrom != null);\n","        removeFrom.remove();\n","        removeFrom = null;\n","      }\n","    };\n"],"methodSig":"public static Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_1.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_1.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_1.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[456,457,458,459,460],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_2.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_2.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[528,527],"dellines":[],"addcode":["  public static <T> Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs) {\n","    return new ConcatenatedIterator<T>(inputs);\n"],"delcode":[],"methodSig":"public static Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_2.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_2.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_2.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[456,457,458,459,460],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_3.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_3.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_3.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[505],"dellines":[505,506,507,508],"addcode":["        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());\n"],"delcode":["        return Iterators.concat(iterators(inputs));\n","      }\n","    };\n","  }\n"],"methodSig":"public static Iterable<T> concat(final Iterable<? extends Iterable<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_3.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_3.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_3.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_3.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[456,457,458,459,460],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_4.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[576,577,578,579,580,581,582,583,584,585,586,587,588,589,552,553,554,555,556,557,558,559,562,568,569,570,571,572,573,574,575],"addcode":[],"delcode":["  public static <T> Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs) {\n","    checkNotNull(inputs);\n","    return new Iterator<T>() {\n","      Iterator<? extends T> current = emptyIterator();\n","      Iterator<? extends T> removeFrom;\n","\n","      @Override\n","      public boolean hasNext() {\n","        boolean currentHasNext;\n","        while (!(currentHasNext = checkNotNull(current).hasNext()) && inputs.hasNext()) {\n","          current = inputs.next();\n","        }\n","        return currentHasNext;\n","      }\n","\n","      @Override\n","      public T next() {\n","        if (!hasNext()) {\n","          throw new NoSuchElementException();\n","        }\n","        removeFrom = current;\n","        return current.next();\n","      }\n","\n","      @Override\n","      public void remove() {\n","        checkRemove(removeFrom != null);\n","        removeFrom.remove();\n","        removeFrom = null;\n","      }\n","    };\n"],"methodSig":"public static Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_4.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_4.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_4.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_4.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[480,476,477,478,479],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_5.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_5.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[528,527],"dellines":[],"addcode":["  public static <T> Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs) {\n","    return new ConcatenatedIterator<T>(inputs);\n"],"delcode":[],"methodSig":"public static Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_5.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_5.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_5.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_5.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[480,476,477,478,479],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_6.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_6.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_6.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[505],"dellines":[505,506,507,508],"addcode":["        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());\n"],"delcode":["        return Iterators.concat(iterators(inputs));\n","      }\n","    };\n","  }\n"],"methodSig":"public static Iterable<T> concat(final Iterable<? extends Iterable<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_6.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_6.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_6.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_6.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[480,476,477,478,479],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_7.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[576,577,578,579,580,581,582,583,584,585,586,587,588,589,552,553,554,555,556,557,558,559,562,568,569,570,571,572,573,574,575],"addcode":[],"delcode":["  public static <T> Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs) {\n","    checkNotNull(inputs);\n","    return new Iterator<T>() {\n","      Iterator<? extends T> current = emptyIterator();\n","      Iterator<? extends T> removeFrom;\n","\n","      @Override\n","      public boolean hasNext() {\n","        boolean currentHasNext;\n","        while (!(currentHasNext = checkNotNull(current).hasNext()) && inputs.hasNext()) {\n","          current = inputs.next();\n","        }\n","        return currentHasNext;\n","      }\n","\n","      @Override\n","      public T next() {\n","        if (!hasNext()) {\n","          throw new NoSuchElementException();\n","        }\n","        removeFrom = current;\n","        return current.next();\n","      }\n","\n","      @Override\n","      public void remove() {\n","        checkRemove(removeFrom != null);\n","        removeFrom.remove();\n","        removeFrom = null;\n","      }\n","    };\n"],"methodSig":"public static Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_7.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_7.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_7.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_7.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[528,524,525,526,527],"addcode":[],"delcode":["   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n","   *\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T>... inputs)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_8.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_8.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[528,527],"dellines":[],"addcode":["  public static <T> Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs) {\n","    return new ConcatenatedIterator<T>(inputs);\n"],"delcode":[],"methodSig":"public static Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_8.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_8.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_8.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_8.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[528,524,525,526,527],"addcode":[],"delcode":["   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n","   *\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T>... inputs)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_9.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_9.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_9.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[505],"dellines":[505,506,507,508],"addcode":["        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());\n"],"delcode":["        return Iterators.concat(iterators(inputs));\n","      }\n","    };\n","  }\n"],"methodSig":"public static Iterable<T> concat(final Iterable<? extends Iterable<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_9.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_9.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_9.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_9.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[528,524,525,526,527],"addcode":[],"delcode":["   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n","   *\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T>... inputs)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_10.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[576,577,578,579,580,581,582,583,584,585,586,587,588,589,552,553,554,555,556,557,558,559,562,568,569,570,571,572,573,574,575],"addcode":[],"delcode":["  public static <T> Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs) {\n","    checkNotNull(inputs);\n","    return new Iterator<T>() {\n","      Iterator<? extends T> current = emptyIterator();\n","      Iterator<? extends T> removeFrom;\n","\n","      @Override\n","      public boolean hasNext() {\n","        boolean currentHasNext;\n","        while (!(currentHasNext = checkNotNull(current).hasNext()) && inputs.hasNext()) {\n","          current = inputs.next();\n","        }\n","        return currentHasNext;\n","      }\n","\n","      @Override\n","      public T next() {\n","        if (!hasNext()) {\n","          throw new NoSuchElementException();\n","        }\n","        removeFrom = current;\n","        return current.next();\n","      }\n","\n","      @Override\n","      public void remove() {\n","        checkRemove(removeFrom != null);\n","        removeFrom.remove();\n","        removeFrom = null;\n","      }\n","    };\n"],"methodSig":"public static Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_10.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_10.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_10.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_10.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[],"dellines":[592,593,594,595,591],"addcode":[],"delcode":["   *\n","   * <p>Further, note that the current implementation is not suitable for nested\n","   * {@code union} views, i.e. the following should be avoided when in a loop:\n","   * {@code union = Sets.union(union, anotherSet);}, since iterating over the resulting\n","   * set has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static SetView<E> union(final Set<? extends E> set1, final Set<? extends E> set2)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_11.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_11.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[528,527],"dellines":[],"addcode":["  public static <T> Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs) {\n","    return new ConcatenatedIterator<T>(inputs);\n"],"delcode":[],"methodSig":"public static Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_11.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_11.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_11.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_11.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[],"dellines":[592,593,594,595,591],"addcode":[],"delcode":["   *\n","   * <p>Further, note that the current implementation is not suitable for nested\n","   * {@code union} views, i.e. the following should be avoided when in a loop:\n","   * {@code union = Sets.union(union, anotherSet);}, since iterating over the resulting\n","   * set has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static SetView<E> union(final Set<? extends E> set1, final Set<? extends E> set2)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_12.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_12.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_12.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[505],"dellines":[505,506,507,508],"addcode":["        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());\n"],"delcode":["        return Iterators.concat(iterators(inputs));\n","      }\n","    };\n","  }\n"],"methodSig":"public static Iterable<T> concat(final Iterable<? extends Iterable<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_12.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_12.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_12.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_12.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Sets","pathinproj":"guava/src/com/google/common/collect/Sets.java","addlines":[],"dellines":[592,593,594,595,591],"addcode":[],"delcode":["   *\n","   * <p>Further, note that the current implementation is not suitable for nested\n","   * {@code union} views, i.e. the following should be avoided when in a loop:\n","   * {@code union = Sets.union(union, anotherSet);}, since iterating over the resulting\n","   * set has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static SetView<E> union(final Set<? extends E> set1, final Set<? extends E> set2)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_13.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":" http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n http://code.google.com/p/google-collections/issues/detail?id=151\n checkNotNull eager for GWT\n note: it must be here & not where 'current' is assigned,\n because otherwise we'll have called inputs.next() before throwing\n the first NPE, and the next time around we'll call inputs.next()\n current.hasNext() might be relatively expensive, worth minimizing.\n again, incorrectly moving beyond the error.\n","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[576,577,578,579,580,581,582,583,584,585,586,587,588,589,552,553,554,555,556,557,558,559,562,568,569,570,571,572,573,574,575],"addcode":[],"delcode":["  public static <T> Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs) {\n","    checkNotNull(inputs);\n","    return new Iterator<T>() {\n","      Iterator<? extends T> current = emptyIterator();\n","      Iterator<? extends T> removeFrom;\n","\n","      @Override\n","      public boolean hasNext() {\n","        boolean currentHasNext;\n","        while (!(currentHasNext = checkNotNull(current).hasNext()) && inputs.hasNext()) {\n","          current = inputs.next();\n","        }\n","        return currentHasNext;\n","      }\n","\n","      @Override\n","      public T next() {\n","        if (!hasNext()) {\n","          throw new NoSuchElementException();\n","        }\n","        removeFrom = current;\n","        return current.next();\n","      }\n","\n","      @Override\n","      public void remove() {\n","        checkRemove(removeFrom != null);\n","        removeFrom.remove();\n","        removeFrom = null;\n","      }\n","    };\n"],"methodSig":"public static Iterator<T> concat(final Iterator<? extends Iterator<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_13.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_13.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_13.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_13.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[498,499,500,501,502],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_14.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_14.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[528,527],"dellines":[],"addcode":["  public static <T> Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs) {\n","    return new ConcatenatedIterator<T>(inputs);\n"],"delcode":[],"methodSig":"public static Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_14.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_14.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_14.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_14.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[498,499,500,501,502],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_15.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_15.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_15.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[505],"dellines":[505,506,507,508],"addcode":["        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());\n"],"delcode":["        return Iterators.concat(iterators(inputs));\n","      }\n","    };\n","  }\n"],"methodSig":"public static Iterable<T> concat(final Iterable<? extends Iterable<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_15.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_15.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_15.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_15.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[498,499,500,501,502],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)"},"id":5,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_16.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_16.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_16.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[505],"dellines":[505,506,507,508],"addcode":["        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());\n"],"delcode":["        return Iterators.concat(iterators(inputs));\n","      }\n","    };\n","  }\n"],"methodSig":"public static Iterable<T> concat(final Iterable<? extends Iterable<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_16.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_16.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_16.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_16.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[456,457,458,459,460],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_17.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_17.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_17.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_17.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[505],"dellines":[505,506,507,508],"addcode":["        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());\n"],"delcode":["        return Iterators.concat(iterators(inputs));\n","      }\n","    };\n","  }\n"],"methodSig":"public static Iterable<T> concat(final Iterable<? extends Iterable<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_17.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_17.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_17.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_17.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[480,476,477,478,479],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_18.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_18.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_18.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_18.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[505],"dellines":[505,506,507,508],"addcode":["        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());\n"],"delcode":["        return Iterators.concat(iterators(inputs));\n","      }\n","    };\n","  }\n"],"methodSig":"public static Iterable<T> concat(final Iterable<? extends Iterable<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_18.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_18.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_18.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_18.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[528,524,525,526,527],"addcode":[],"delcode":["   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n","   *\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T>... inputs)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_19.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_19.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_19.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_oldfuncoldJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_19.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterables","pathinproj":"guava/src/com/google/common/collect/Iterables.java","addlines":[505],"dellines":[505,506,507,508],"addcode":["        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());\n"],"delcode":["        return Iterators.concat(iterators(inputs));\n","      }\n","    };\n","  }\n"],"methodSig":"public static Iterable<T> concat(final Iterable<? extends Iterable<? extends T>> inputs)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_19.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_19.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_19.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_19.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[498,499,500,501,502],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_20.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[1280,1281,1278,1279],"dellines":[],"addcode":["    @Override\n","    Iterator<? extends T> transform(Iterator<? extends T> iterator) {\n","      return iterator;\n","    }\n"],"delcode":[],"methodSig":" Iterator<? extends T> transform(Iterator<? extends T> iterator)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_20.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_20.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_20.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_20.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[456,457,458,459,460],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_21.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[1280,1281,1278,1279],"dellines":[],"addcode":["    @Override\n","    Iterator<? extends T> transform(Iterator<? extends T> iterator) {\n","      return iterator;\n","    }\n"],"delcode":[],"methodSig":" Iterator<? extends T> transform(Iterator<? extends T> iterator)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_21.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_21.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_21.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_21.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[480,476,477,478,479],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_22.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[1280,1281,1278,1279],"dellines":[],"addcode":["    @Override\n","    Iterator<? extends T> transform(Iterator<? extends T> iterator) {\n","      return iterator;\n","    }\n"],"delcode":[],"methodSig":" Iterator<? extends T> transform(Iterator<? extends T> iterator)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_22.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_22.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_22.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_22.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[528,524,525,526,527],"addcode":[],"delcode":["   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n","   *\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T>... inputs)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_23.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[1280,1281,1278,1279],"dellines":[],"addcode":["    @Override\n","    Iterator<? extends T> transform(Iterator<? extends T> iterator) {\n","      return iterator;\n","    }\n"],"delcode":[],"methodSig":" Iterator<? extends T> transform(Iterator<? extends T> iterator)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_23.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_23.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_23.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_23.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[498,499,500,501,502],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_24.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_24.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301],"dellines":[],"addcode":["    private static <T> Iterator<Iterator<? extends T>> getComponentIterators(\n","        Iterator<? extends Iterator<? extends T>> iterators) {\n","      return new MultitransformedIterator<Iterator<? extends T>, Iterator<? extends T>>(iterators) {\n","        @Override\n","        Iterator<? extends Iterator<? extends T>> transform(Iterator<? extends T> iterator) {\n","          if (iterator instanceof ConcatenatedIterator) {\n","            ConcatenatedIterator<? extends T> concatIterator =\n","                (ConcatenatedIterator<? extends T>) iterator;\n","            return getComponentIterators(concatIterator.backingIterator);\n","          } else {\n","            return Iterators.singletonIterator(iterator);\n","          }\n","        }\n","      };\n","    }\n"],"delcode":[],"methodSig":"private static Iterator<Iterator<? extends T>> getComponentIterators(Iterator<? extends Iterator<? extends T>> iterators)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_24.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_24.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_24.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_24.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[456,457,458,459,460],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_25.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_25.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301],"dellines":[],"addcode":["    private static <T> Iterator<Iterator<? extends T>> getComponentIterators(\n","        Iterator<? extends Iterator<? extends T>> iterators) {\n","      return new MultitransformedIterator<Iterator<? extends T>, Iterator<? extends T>>(iterators) {\n","        @Override\n","        Iterator<? extends Iterator<? extends T>> transform(Iterator<? extends T> iterator) {\n","          if (iterator instanceof ConcatenatedIterator) {\n","            ConcatenatedIterator<? extends T> concatIterator =\n","                (ConcatenatedIterator<? extends T>) iterator;\n","            return getComponentIterators(concatIterator.backingIterator);\n","          } else {\n","            return Iterators.singletonIterator(iterator);\n","          }\n","        }\n","      };\n","    }\n"],"delcode":[],"methodSig":"private static Iterator<Iterator<? extends T>> getComponentIterators(Iterator<? extends Iterator<? extends T>> iterators)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_25.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_25.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_25.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_25.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[480,476,477,478,479],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_26.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_26.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301],"dellines":[],"addcode":["    private static <T> Iterator<Iterator<? extends T>> getComponentIterators(\n","        Iterator<? extends Iterator<? extends T>> iterators) {\n","      return new MultitransformedIterator<Iterator<? extends T>, Iterator<? extends T>>(iterators) {\n","        @Override\n","        Iterator<? extends Iterator<? extends T>> transform(Iterator<? extends T> iterator) {\n","          if (iterator instanceof ConcatenatedIterator) {\n","            ConcatenatedIterator<? extends T> concatIterator =\n","                (ConcatenatedIterator<? extends T>) iterator;\n","            return getComponentIterators(concatIterator.backingIterator);\n","          } else {\n","            return Iterators.singletonIterator(iterator);\n","          }\n","        }\n","      };\n","    }\n"],"delcode":[],"methodSig":"private static Iterator<Iterator<? extends T>> getComponentIterators(Iterator<? extends Iterator<? extends T>> iterators)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_26.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_26.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_26.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_26.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[528,524,525,526,527],"addcode":[],"delcode":["   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n","   *\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T>... inputs)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_27.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfuncnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_27.txt","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301],"dellines":[],"addcode":["    private static <T> Iterator<Iterator<? extends T>> getComponentIterators(\n","        Iterator<? extends Iterator<? extends T>> iterators) {\n","      return new MultitransformedIterator<Iterator<? extends T>, Iterator<? extends T>>(iterators) {\n","        @Override\n","        Iterator<? extends Iterator<? extends T>> transform(Iterator<? extends T> iterator) {\n","          if (iterator instanceof ConcatenatedIterator) {\n","            ConcatenatedIterator<? extends T> concatIterator =\n","                (ConcatenatedIterator<? extends T>) iterator;\n","            return getComponentIterators(concatIterator.backingIterator);\n","          } else {\n","            return Iterators.singletonIterator(iterator);\n","          }\n","        }\n","      };\n","    }\n"],"delcode":[],"methodSig":"private static Iterator<Iterator<? extends T>> getComponentIterators(Iterator<? extends Iterator<? extends T>> iterators)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_27.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_27.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_27.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_27.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[498,499,500,501,502],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_28.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/MultitransformedIterator","pathinproj":"guava/src/com/google/common/collect/MultitransformedIterator.java","addlines":[43],"dellines":[],"addcode":["  abstract Iterator<? extends T> transform(F from);\n"],"delcode":[],"methodSig":" abstract Iterator<? extends T> transform(F from)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_28.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_28.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_28.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_28.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[456,457,458,459,460],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_29.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/MultitransformedIterator","pathinproj":"guava/src/com/google/common/collect/MultitransformedIterator.java","addlines":[43],"dellines":[],"addcode":["  abstract Iterator<? extends T> transform(F from);\n"],"delcode":[],"methodSig":" abstract Iterator<? extends T> transform(F from)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_29.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_29.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_29.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_29.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[480,476,477,478,479],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_30.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/MultitransformedIterator","pathinproj":"guava/src/com/google/common/collect/MultitransformedIterator.java","addlines":[43],"dellines":[],"addcode":["  abstract Iterator<? extends T> transform(F from);\n"],"delcode":[],"methodSig":" abstract Iterator<? extends T> transform(F from)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_30.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_30.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_30.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_30.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[528,524,525,526,527],"addcode":[],"delcode":["   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n","   *\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T>... inputs)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"},{"func":{"oldfunccode":"","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_31.txt","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/MultitransformedIterator","pathinproj":"guava/src/com/google/common/collect/MultitransformedIterator.java","addlines":[43],"dellines":[],"addcode":["  abstract Iterator<? extends T> transform(F from);\n"],"delcode":[],"methodSig":" abstract Iterator<? extends T> transform(F from)"},"doc":{"oldfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_31.txt","newfunccode":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocfunccode_4b6ffd496674b55a6893bbd705a7486d661b1b53_31.txt","newdoc":"","newJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_newdocnewJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_31.txt","olddoc":"","oldJdoc":"4b6ffd496674b55a6893bbd705a7486d661b1b53/Codes/Match_olddocJdoc_4b6ffd496674b55a6893bbd705a7486d661b1b53_31.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/4b6ffd496674b55a6893bbd705a7486d661b1b53/Iterators","pathinproj":"guava/src/com/google/common/collect/Iterators.java","addlines":[],"dellines":[498,499,500,501,502],"addcode":[],"delcode":["   *\n","   * <p><b>Note:</b> the current implementation is not suitable for nested\n","   * concatenated iterators, i.e. the following should be avoided when in a loop:\n","   * {@code iterator = Iterators.concat(iterator, suffix);}, since iteration over the\n","   * resulting iterator has a cubic complexity to the depth of the nesting.\n"],"methodSig":"public static Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)"},"id":3,"flag":1,"commit":"4b6ffd496674b55a6893bbd705a7486d661b1b53"}]