{"id": "267fac11a42ad56158ff9f6158a0a8a36223ed86", "code": [{"0": "guava/src/com/google/common/base/Function.java", "added": {"1": ["  @CanIgnoreReturnValue // TODO(kevinb): remove this\n", "   * <i>May</i> return {@code true} if {@object} is a {@code Function} that behaves identically to\n", "   * this function.\n", "   * <p><b>Warning: do not depend</b> on the behavior of this method.\n", "   *\n", "   * <p>Historically, {@code Function} instances in this library have implemented this method to\n", "   * recognize certain cases where distinct {@code Function} instances would in fact behave\n", "   * identically. However, as code migrates to {@code java.util.function}, that behavior will\n", "   * disappear. It is best not to depend on it.\n"]}, "removed": {"1": ["  @CanIgnoreReturnValue\n", "   * Indicates whether another object is equal to this function.\n", "   * <p>Most implementations will have no reason to override the behavior of {@link Object#equals}.\n", "   * However, an implementation may also choose to return {@code true} whenever {@code object} is a\n", "   * {@link Function} that it considers <i>interchangeable</i> with this one. \"Interchangeable\"\n", "   * <i>typically</i> means that {@code Objects.equal(this.apply(f), that.apply(f))} is true for all\n", "   * {@code f} of type {@code F}. Note that a {@code false} result from this method does not imply\n", "   * that the functions are known <i>not</i> to be interchangeable.\n"]}, "added_lines": {"1": [64, 68, 69, 71, 72, 73, 74, 75, 76]}, "removed_lines": {"1": [64, 68, 70, 71, 72, 73, 74, 75]}}, {"1": "guava/src/com/google/common/base/Functions.java", "added": {"1": [" * Static utility methods pertaining to {@code com.google.common.base.Function} instances; see that\n", " * class for information about migrating to {@code java.util.function}.\n"], "2": ["   * A function equivalent to the method reference {@code Object::toString}, for users not yet using\n", "   * Java 8. The function simply invokes {@code toString} on its argument and returns the result. It\n", "   * throws a {@link NullPointerException} on null input.\n"], "3": ["   *\n", "   * <p><b>Java 8 users:</b> if you are okay with {@code null} being returned for an unrecognized\n", "   * key (instead of an exception being thrown), you can use the method reference {@code map::get}\n", "   * instead.\n"], "4": ["   * <p><b>Java 8 users:</b> you can just write the lambda expression {@code k ->\n", "   * map.getWithDefault(k, defaultValue)} instead.\n", "   *\n"], "5": ["   * <p><b>Java 8 users:</b> use {@code g.compose(f)} or (probably clearer) {@code f.andThen(g)}\n", "   * instead.\n", "   *\n"], "6": ["   *\n", "   * <p><b>Java 8 users:</b> use the method reference {@code predicate::test} instead.\n"], "7": ["   * Returns a function that ignores its input and always returns {@code value}.\n", "   *\n", "   * <p><b>Java 8 users:</b> use the lambda expression {@code o -> value} instead.\n"], "8": ["   * Returns a function that ignores its input and returns the result of {@code supplier.get()}.\n", "   *\n", "   * <p><b>Java 8 users:</b> use the lambda expression {@code o -> supplier.get()} instead.\n"]}, "removed": {"1": [" * Static utility methods pertaining to {@code Function} instances.\n"], "2": ["   * Returns a function that calls {@code toString()} on its argument. The function does not accept\n", "   * nulls; it will throw a {@link NullPointerException} when applied to {@code null}.\n"], "7": ["   * Creates a function that returns {@code value} for any input.\n"], "8": ["   * Returns a function that always returns the result of invoking {@link Supplier#get} on {@code\n", "   * supplier}, regardless of its input.\n"]}, "added_lines": {"1": [27, 28], "2": [45, 46, 47], "3": [114, 115, 116, 117], "4": [164, 165, 166], "5": [218, 219, 220], "6": [272, 273], "7": [315, 316, 317], "8": [361, 362, 363]}, "removed_lines": {"1": [27], "2": [44, 45], "7": [301], "8": [345, 346]}}]}
