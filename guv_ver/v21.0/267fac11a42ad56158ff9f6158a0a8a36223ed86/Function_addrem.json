{
    "addition": {
        "64": "  @CanIgnoreReturnValue // TODO(kevinb): remove this\n",
        "68": "   * <i>May</i> return {@code true} if {@object} is a {@code Function} that behaves identically to\n",
        "69": "   * this function.\n",
        "71": "   * <p><b>Warning: do not depend</b> on the behavior of this method.\n",
        "72": "   *\n",
        "73": "   * <p>Historically, {@code Function} instances in this library have implemented this method to\n",
        "74": "   * recognize certain cases where distinct {@code Function} instances would in fact behave\n",
        "75": "   * identically. However, as code migrates to {@code java.util.function}, that behavior will\n",
        "76": "   * disappear. It is best not to depend on it.\n"
    },
    "removed": {
        "64": "  @CanIgnoreReturnValue\n",
        "68": "   * Indicates whether another object is equal to this function.\n",
        "70": "   * <p>Most implementations will have no reason to override the behavior of {@link Object#equals}.\n",
        "71": "   * However, an implementation may also choose to return {@code true} whenever {@code object} is a\n",
        "72": "   * {@link Function} that it considers <i>interchangeable</i> with this one. \"Interchangeable\"\n",
        "73": "   * <i>typically</i> means that {@code Objects.equal(this.apply(f), that.apply(f))} is true for all\n",
        "74": "   * {@code f} of type {@code F}. Note that a {@code false} result from this method does not imply\n",
        "75": "   * that the functions are known <i>not</i> to be interchangeable.\n"
    }
}