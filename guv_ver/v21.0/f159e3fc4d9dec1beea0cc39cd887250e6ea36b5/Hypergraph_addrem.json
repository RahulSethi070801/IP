{
    "addition": {},
    "removed": {
        "1": "/*\n",
        "2": " * Copyright (C) 2014 The Guava Authors\n",
        "3": " *\n",
        "4": " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "5": " * you may not use this file except in compliance with the License.\n",
        "6": " * You may obtain a copy of the License at\n",
        "7": " *\n",
        "8": " * http://www.apache.org/licenses/LICENSE-2.0\n",
        "9": " *\n",
        "10": " * Unless required by applicable law or agreed to in writing, software\n",
        "11": " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "12": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "13": " * See the License for the specific language governing permissions and\n",
        "14": " * limitations under the License.\n",
        "15": " */\n",
        "16": "\n",
        "17": "package com.google.common.graph;\n",
        "18": "\n",
        "19": "import com.google.common.annotations.Beta;\n",
        "20": "import com.google.errorprone.annotations.CanIgnoreReturnValue;\n",
        "21": "\n",
        "22": "/**\n",
        "23": " * A subinterface of {@link Network} which specifies that all edges are hyperedges, that is,\n",
        "24": " * they connect arbitrary sets of nodes rather than pairs of nodes.\n",
        "25": " *\n",
        "26": " * <p>A few notes about how hyperedges and connectivity:\n",
        "27": " * <ul>\n",
        "28": " * <li>Hyperedges, like undirected edges, are both incoming and outgoing edges.\n",
        "29": " * <li>Hyperedges incident to a single node {@code node} connect {@code node} to itself; such edges\n",
        "30": " *     are analogous to self-loops in graphs.  Hyperedges incident to > 1 nodes do not connect any\n",
        "31": " *     of their incident nodes to themselves.\n",
        "32": " * </ul>\n",
        "33": " *\n",
        "34": " * @author Joshua O'Madadhain\n",
        "35": " * @param <N> Node parameter type\n",
        "36": " * @param <E> Edge parameter type\n",
        "37": " * @since 20.0\n",
        "38": " */\n",
        "39": "@Beta\n",
        "40": "public interface Hypergraph<N, E> extends Network<N, E> {\n",
        "41": "  /**\n",
        "42": "   * Adds {@code edge} to this graph, connecting {@code nodes}.\n",
        "43": "   *\n",
        "44": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "45": "   * @throws UnsupportedOperationException if the add operation is not supported by this graph\n",
        "46": "   */\n",
        "47": "  @CanIgnoreReturnValue\n",
        "48": "  boolean addEdge(E edge, N... nodes);\n",
        "49": "\n",
        "50": "  /**\n",
        "51": "   * Adds {@code edge} to this graph, connecting {@code nodes}.\n",
        "52": "   *\n",
        "53": "   * @return {@code true} iff the graph was modified as a result of this call\n",
        "54": "   * @throws UnsupportedOperationException if the add operation is not supported by this graph\n",
        "55": "   */\n",
        "56": "  @CanIgnoreReturnValue\n",
        "57": "  boolean addEdge(E edge, Iterable<N> nodes);\n",
        "58": "}\n"
    }
}