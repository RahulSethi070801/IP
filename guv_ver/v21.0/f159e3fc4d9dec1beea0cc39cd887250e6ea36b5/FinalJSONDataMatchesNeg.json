[{"func":{"oldfunccode":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_oldfunccode_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_1.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_oldfuncoldJdoc_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Hypergraph","pathinproj":"guava/src/com/google/common/graph/Hypergraph.java","addlines":[],"dellines":[56,57],"addcode":[],"delcode":["  @CanIgnoreReturnValue\n","  boolean addEdge(E edge, Iterable<N> nodes);\n"],"methodSig":" boolean addEdge(E edge, Iterable<N> nodes)"},"doc":{"oldfunccode":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_olddocfunccode_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_1.txt","newfunccode":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_newdocfunccode_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_1.txt","newdoc":"","newJdoc":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_newdocnewJdoc_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_1.txt","olddoc":"","oldJdoc":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_olddocJdoc_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_1.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Network","pathinproj":"guava/src/com/google/common/graph/Network.java","addlines":[274],"dellines":[275],"addcode":["   * generally edges are not considered to be self-adjacent.\n"],"delcode":["   * generally for non-hypergraphs, edges are not considered to be self-adjacent.\n"],"methodSig":" Set<E> adjacentEdges(Object edge)"},"id":1,"flag":1,"commit":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5"},{"func":{"oldfunccode":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_oldfunccode_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_2.txt","newfunccode":"","newdoc":"","newJdoc":"","olddoc":"","oldJdoc":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_oldfuncoldJdoc_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Hypergraph","pathinproj":"guava/src/com/google/common/graph/Hypergraph.java","addlines":[],"dellines":[48,47],"addcode":[],"delcode":["  @CanIgnoreReturnValue\n","  boolean addEdge(E edge, N... nodes);\n"],"methodSig":" boolean addEdge(E edge, N... nodes)"},"doc":{"oldfunccode":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_olddocfunccode_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_2.txt","newfunccode":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_newdocfunccode_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_2.txt","newdoc":"","newJdoc":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_newdocnewJdoc_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_2.txt","olddoc":"","oldJdoc":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/Codes_neg/Match_olddocJdoc_f159e3fc4d9dec1beea0cc39cd887250e6ea36b5_2.txt","path":"/home/pritish/Documents/IP work/guv_ver/v21.0/f159e3fc4d9dec1beea0cc39cd887250e6ea36b5/MutableGraph","pathinproj":"guava/src/com/google/common/graph/MutableGraph.java","addlines":[66,70],"dellines":[66,67,70,71],"addcode":["   * All edges incident to {@code node} in this graph will also be removed.\n","   * All edges incident to {@code node} in this graph will also be removed.\n"],"delcode":["   * In general, all edges incident to {@code node} in this graph will also be removed.\n","   * (This is not true for hyperedges.)\n","   * In general, all edges incident to {@code node} in this graph will also be removed.\n","   * (This is not true for hyperedges.)\n"],"methodSig":" boolean removeNode(Object node)"},"id":1,"flag":1,"commit":"f159e3fc4d9dec1beea0cc39cd887250e6ea36b5"}]